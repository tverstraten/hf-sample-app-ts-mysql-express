/**
 * NOTE: This file is generated, do not make changes to it.
 */
import * as dotenv from 'dotenv'
import express, { Request, Response } from 'express'
import helmet from 'helmet'
import https = require('https')
import fs = require('fs')
import { Logging } from '@tverstraten/log-annotations'
const cors = require('cors') // eslint-disable-line @typescript-eslint/no-var-requires
{{#each this.children}}{{#is this.operatesOnBehalfOf.isAbstract false}}import {{Curly this.name}} from './{{this.name}}'
{{/is}}{{/each}}

dotenv.config()

/**
 * A simple express application that binds all the generated api routes.
 * NOTE: This class is generated, do not make changes to it.
 */
export class ApiApplication {
	protected logger = Logging.newLogger('ApiApplication')

	express: express.Application

	httpsServer: any

	server?: any

	// eslint-disable-next-line max-lines-per-function
	constructor() {
		dotenv.config()
		this.express = express()
		const httpsOptions = {
			key: fs.readFileSync('secrets/server.key'),
			cert: fs.readFileSync('secrets/server.pem'),
			ciphers: 'AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH',
		}
		this.httpsServer = https.createServer(httpsOptions, this.express)

		// security
		this.express.use(
			cors({
				origin: function (__origin: any, callback: any) {
					// allow requests with no origin
					// (like mobile apps or curl requests)
					return callback(null, true)
				},
			})
		)

		this.express.all('*', function (__req, res, next) {
			res.header('Access-Control-Allow-Origin', '*')
			res.header('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE, OPTIONS')
			res.header('Access-Control-Allow-Headers', 'Origin, Accept, Content-Type Access-Control-Allow-Headers, Authorization, X-Requested-With')
			next()
		})

		this.express.use(helmet())
		this.express.use(express.json())

		// routes		
		{{#each this.children}}{{#is this.operatesOnBehalfOf.isAbstract false}}new {{this.name}}(this.express)
        {{/is}}{{/each}}
        this.express.use((error: any, __req: Request, res: Response, next: any) => {
		    this.logger.error(error.stack)
			res.status(500).send('Something broke!')
			next(error)
		})
	}

	start(port?: number): void {
		this.logger.info(`start`)
		const portToUse = port ? port : parseInt(process.env.PORT as string, 10)
		this.server = this.httpsServer.listen(portToUse, () => {
			this.logger.info(`Listening on port ${JSON.stringify(this.server?.address())}`)
		})
	}

	stop(): void {
		this.logger.info(`stop`)
		this.server?.close()
	}
}
