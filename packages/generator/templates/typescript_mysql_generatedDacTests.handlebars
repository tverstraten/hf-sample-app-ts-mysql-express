/* eslint-disable max-lines-per-function */
/* eslint-disable spellcheck/spell-checker */
/**
 * NOTE: This file is generated, do not make changes to it.
 */
import { {{this.operatesOnBehalfOf.name}} } from '@tverstraten/hf-model'
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { TestHelper } from '@tverstraten/hf-utils'
import { DacTestHelper } from './DacTestHelper'
import { {{this.operatesOnBehalfOf.name}}Dac } from '../{{this.operatesOnBehalfOf.name}}Dac'
{{#compare this.operatesOnBehalfOf.name '!=' 'User'}}
import { UserDac } from '../UserDac'
{{/compare}}
{{#each this.operatesOnBehalfOf.allDependencies}}
{{#compare this.objectTypeName '==' 'Enumeration'}}
import { {{this.name}} } from '@tverstraten/hf-model'
{{else}}
{{#and (compare this.asMandatory.isClass '==' true) (compare this.asMandatory.name '!=' 'User')  (compare this.asMandatory.name '!=' ../operatesOnBehalfOf.name)}}
import { {{this.asMandatory.name}}Dac } from '../{{this.asMandatory.name}}Dac'
{{/and}}
{{/compare}}
{{/each}}

describe('{{this.operatesOnBehalfOf.name}}Dac', () => {
	it('create and read basic properties', async () => {
		const userDac = new UserDac(1)
		const currentUser = await userDac.findOneById(1)
		expect(currentUser).toBeDefined()
		const runDate = new Date()

		const objectDac = new {{this.operatesOnBehalfOf.name}}Dac(1)
		const newObject = new {{this.operatesOnBehalfOf.name}}()
		newObject.createdById = -1
		{{#inArray this.operatesOnBehalfOf.inheritsFrom "INFORMATION_MODEL/ABSTRACT_MUTABLE"}}
		newObject.lastUpdatedById = -1
		newObject.isDeleted = false
		{{/inArray}}
		{{#each this.operatesOnBehalfOf.allDataMembers}}
		{{#unless this.static}}
		{{#contains "['id','createdById', 'createdOn', 'objectVersion', 'lastUpdatedById', 'lastUpdatedOn', 'isDeleted']" this.name}}
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'dateTime'}}		
		newObject.{{this.name}} = new Date(Math.round(Math.random() * 10000000)) // dateTime
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'date'}}		
		newObject.{{this.name}} = new Date(Math.round(Math.random() * 10000000)) // date
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'boolean'}}
		newObject.{{this.name}} = Math.random() > .5 // boolean
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'int'}}
		{{#if (test this.name (toRegex "Id$"))}}
		{{else}}
		newObject.{{this.name}} = Math.round(Math.random() * Number.MAX_SAFE_INTEGER) // int
		{{/if}}
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'number'}}
		newObject.{{this.name}} = Math.random() * Number.MAX_SAFE_INTEGER // number
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'float'}}	
		newObject.{{this.name}} = Math.round(Math.random() * Number.MAX_SAFE_INTEGER) / 100 // float
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'decimal'}}	
		newObject.{{this.name}} = Math.round(Math.random() * Number.MAX_SAFE_INTEGER) / 100 // decimal
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'string'}}	
		newObject.{{this.name}} = TestHelper.randomString({{this.length}}) // string
		{{else}}
		{{#compare this.type.asMandatory.objectTypeName '==' 'Enumeration'}}	
		newObject.{{this.name}} = TestHelper.randomEnum({{this.type.asMandatory.name}}) // enumeration
		{{else}}
		{{#compare this.type.asMandatory.isClass '==' true}}		
		newObject.{{this.name}}Id = await DacTestHelper.firstResultId(new {{this.type.asMandatory.name}}Dac(1)) // int
		{{else}}
		// ignoring {{this.name}} - type is {{this.type.asMandatory.name}}, is class={{this.type.asMandatory.isClass}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/contains}}
		{{/unless}}
		{{/each}}

		const results = await objectDac.createAndReturn([newObject])
		expect(results.length).toBe(1)
		const resultObject = results[0]
		expect(resultObject.id).toBeGreaterThan(0)
		expect(resultObject.createdById).toBe(objectDac.userId)
		expect(Math.abs((resultObject.createdOn as Date).getTime() - runDate.getTime())).toBeLessThan(1000){{#inArray this.operatesOnBehalfOf.inheritsFrom "INFORMATION_MODEL/ABSTRACT_MUTABLE"}}
		expect(resultObject.objectVersion).toBe(1)
		expect(resultObject.lastUpdatedById).toBe(objectDac.userId)
		expect(Math.abs((resultObject.lastUpdatedOn as Date).getTime() - runDate.getTime())).toBeLessThan(1000)
		expect(resultObject.isDeleted).toBe(false){{/inArray}}
		{{#each this.operatesOnBehalfOf.allDataMembers}}
		{{#unless this.static}}
		{{#contains "['id','createdById', 'createdOn', 'objectVersion', 'lastUpdatedById', 'lastUpdatedOn', 'isDeleted']" this.name}}
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'dateTime'}}		
		expect(Math.abs((resultObject.{{this.name}} as Date).getTime() - newObject.{{this.name}}.getTime())).toBeLessThan(1000) // dateTime
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'date'}}		
		expect(Math.abs((resultObject.{{this.name}} as Date).getTime() - newObject.{{this.name}}.getTime())).toBeLessThan(1000) // date
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'boolean'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}}) // boolean
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'int'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}}) // int
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'number'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}}) // number
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'float'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}}) // float
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'decimal'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}}) // decimal
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'string'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}}) // string
		{{else}}
		{{#compare this.type.asMandatory.objectTypeName '==' 'Enumeration'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}}) // Enumeration
		{{else}}
		// {{this.name}} - the type ({{this.type.asMandatory.name}}) is not matched
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/contains}}
		{{/unless}}
		{{/each}}
	})
})




