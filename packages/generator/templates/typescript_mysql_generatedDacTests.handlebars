/* eslint-disable max-lines-per-function */
/* eslint-disable spellcheck/spell-checker */
/**
 * NOTE: This file is generated, do not make changes to it.
 */
import { {{this.operatesOnBehalfOf.name}} } from '@tverstraten/hf-model'
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { TestHelper } from '@tverstraten/hf-utils'
import { {{this.operatesOnBehalfOf.name}}Dac } from '../{{this.operatesOnBehalfOf.name}}Dac'
{{#compare this.operatesOnBehalfOf.name '!=' 'User'}}
import { UserDac } from '../UserDac'
{{/compare}}
{{#each this.operatesOnBehalfOf.allDependencies}}
{{#compare this.objectTypeName '==' 'Enumeration'}}
import { {{this.name}} } from '@tverstraten/hf-model'
{{/compare}}
{{/each}}

describe('{{this.operatesOnBehalfOf.name}}Dac', () => {
	it('create and read basic properties', async () => {
		const userDac = new UserDac(1)
		const currentUser = await userDac.findOneById(1)
		expect(currentUser).toBeDefined()

		const objectDac = new {{this.operatesOnBehalfOf.name}}Dac(1)

		const newObject = new {{this.operatesOnBehalfOf.name}}()
		newObject.createdById = currentUser.id
		{{#inArray this.operatesOnBehalfOf.inheritsFrom "INFORMATION_MODEL/ABSTRACT_TRACEABLE"}}
		{{else}}
		newObject.lastUpdatedById = currentUser.id
		newObject.isDeleted = false
		{{/inArray}}
		{{#each this.operatesOnBehalfOf.allDataMembers}}
		{{#unless this.static}}
		{{#contains "['id','createdById', 'createdOn', 'objectVersion', 'lastUpdatedById', 'lastUpdatedOn', 'isDeleted']" this.name}}
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'date'}}		
		newObject.{{this.name}} = new Date(Math.round(Math.random() * 10000000))
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'boolean'}}	
		newObject.{{this.name}} = Math.random() > .5 
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'int'}}	
		newObject.{{this.name}} = Math.round(Math.random() * Number.MAX_SAFE_INTEGER) 
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'number'}}	
		newObject.{{this.name}} = Math.random() * Number.MAX_SAFE_INTEGER 
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'string'}}	
		newObject.{{this.name}} = TestHelper.randomString({{this.length}}) 
		{{else}}
		{{#compare this.type.objectTypeName '==' 'Enumeration'}}	
		newObject.{{this.name}} = TestHelper.randomEnum({{this.type.asMandatory.name}}) 
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/contains}}
		{{/unless}}
		{{/each}}

		const results = await objectDac.createAndReturn([newObject])
		expect(results.length).toBe(1)
		const resultObject = results[0]
		expect(resultObject.id).toBeGreaterThan(0)
		{{#each this.operatesOnBehalfOf.allDataMembers}}
		{{#unless this.static}}
		{{#compare this.name '!=' 'id'}}
		{{#compare this.type.asMandatory.name '==' 'date'}}		
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}})
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'boolean'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}})
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'int'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}})
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'number'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}})
		{{else}}
		{{#compare this.type.asMandatory.name '==' 'string'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}})
		{{else}}
		{{#compare this.type.objectTypeName '==' 'Enumeration'}}	
		expect(resultObject.{{this.name}}).toBe(newObject.{{this.name}})
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/compare}}
		{{/unless}}
		{{/each}}
	})
})




