/* eslint-disable @typescript-eslint/naming-convention */
/**
 * NOTE: This file is generated, do not make changes to it.
 */

export interface PropertyMapping {
	typeName: string
	reversePropertyName?: string
}

export class RdbmsMapping {
	static propertyMap: Record<string, PropertyMapping> = {
{{#each this.children}}
{{#is this.objectTypeName "InformationModel"}}
{{#each this.persistentTypes}}	
{{#and (compare this.isAbstract '!=' true) (compare this.objectTypeName '==' 'Class')}}
{{#each this.allDataMembers}}	
{{#and (compare this.type.asMandatory.primitive '!=' true) (compare this.type.asMandatory.objectTypeName '==' 'Class')}}
		'{{../name}}.{{this.name}}': { typeName: '{{this.type.asMandatory.name}}' },
{{/and}}
{{/each}}
{{/and}}
{{/each}}
{{/is}}
{{/each}}
	}

	static dacMapping: Map<string, any> = new Map<string, any>()

	static registerDac(className: string, dac: any): void {
		this.dacMapping.set(className, dac)
	}

	// eslint-disable-next-line max-lines-per-function
	static getDac(className: string, userId: number): any {
		const type = this.dacMapping.get(className)
		return new type(userId)
	}

	static getPropertyMapping(className: string, propertyName: string): PropertyMapping | undefined {
		return this.propertyMap[`${className}.${propertyName}`]
	}
}
