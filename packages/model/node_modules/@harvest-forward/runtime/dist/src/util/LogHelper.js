"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogHelper = void 0;
const CircularReplacer_1 = require("./CircularReplacer");
class LogHelper {
    static argumentText(argumentToTranslate, maxLength = this.maxArgumentLength) {
        let full_arg_text = argumentToTranslate
            ? typeof argumentToTranslate === 'object'
                ? JSON.stringify(argumentToTranslate, (0, CircularReplacer_1.CircularReplacer)())
                : argumentToTranslate
            : 'undefined';
        if (full_arg_text.length > maxLength)
            full_arg_text = `${full_arg_text.substring(0, maxLength)}...`;
        return full_arg_text;
    }
    static async argumentTextAsync(arg, maxLength = this.maxArgumentLength) {
        return this.argumentText(!!arg && typeof arg.then === 'function' ? await arg : arg, maxLength);
    }
    static argumentsText(args, maxLength = this.maxArgumentLength) {
        if (!args)
            return '';
        if (!Array.isArray(args))
            return this.argumentText(args, maxLength);
        let arg_text = '';
        args.forEach((arg) => {
            if (arg_text != '')
                arg_text += ', ';
            arg_text += this.argumentText(args[arg], maxLength);
        });
        if (arg_text.length > maxLength)
            arg_text = `${arg_text.substring(0, maxLength)}...`;
        return arg_text;
    }
    static async argumentsTextAsync(args, maxLength = this.maxArgumentLength) {
        if (!args)
            return '';
        if (!Array.isArray(args))
            return this.argumentTextAsync(args, maxLength);
        let arg_text = '';
        for (const arg in args) {
            if (arg_text != '')
                arg_text += ', ';
            arg_text += await this.argumentTextAsync(args[arg], maxLength);
        }
        if (arg_text.length > maxLength)
            arg_text = `${arg_text.substring(0, maxLength)}...`;
        return arg_text;
    }
}
exports.LogHelper = LogHelper;
LogHelper.maxArgumentLength = 256;
LogHelper.maxErrorTextLength = 512;
