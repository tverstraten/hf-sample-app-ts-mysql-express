"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleMappedValueTypeResolver = void 0;
class SimpleMappedValueTypeResolver {
    constructor(language, mandatoryValueTypes, optionalValueTypes) {
        this.language = language;
        this.mandatoryValueTypes = mandatoryValueTypes;
        this.optionalValueTypes = optionalValueTypes;
        this.mandatoryNames = [];
        Object.keys(mandatoryValueTypes).forEach((key) => {
            const entry = mandatoryValueTypes[key];
            this.mandatoryNames.push(entry);
        });
    }
    doesSupport(language) {
        if (!language)
            throw RangeError(`language was not specified`);
        return this.language === language;
    }
    doesMap(type) {
        if (this.mandatoryValueTypes[type.name] || this.optionalValueTypes[type.name])
            return true;
        return false;
    }
    hasName(name) {
        if (!name)
            throw RangeError(`name was not specified`);
        return this.mandatoryNames.includes(name);
    }
    fromType(originalType, optional = false) {
        let result;
        if (!originalType.primitive)
            return originalType.name;
        if (optional) {
            result = this.optionalValueTypes[originalType.name];
            if (result)
                return result;
        }
        else {
            result = this.mandatoryValueTypes[originalType.name];
            if (result)
                return result;
        }
        throw RangeError(`${originalType.name} is not a supported type`);
    }
    toType(name) {
        if (!name)
            throw RangeError(`name was not specified`);
        return this.mandatoryValueTypes[name];
    }
}
exports.SimpleMappedValueTypeResolver = SimpleMappedValueTypeResolver;
