import { SystemComponentType } from './SystemComponentType';
export declare abstract class SystemComponent {
    private _children;
    private _descendants;
    parent?: SystemComponent;
    private _componentType;
    constructor(componentType: SystemComponentType);
    disconnectRecursion(): void;
    reconnectRecursion(system: SystemComponent): void;
    static constantCase(name: string, preserveSlashes?: boolean): string;
    static normalizePathSlashes(name: string): string;
    static fullConstantCase(nameSpace: string, name: string): string;
    get componentType(): SystemComponentType;
    set componentType(newValue: SystemComponentType);
    get children(): Record<string, SystemComponent>;
    hasChild(component: SystemComponent): boolean;
    addChild(child: SystemComponent): void;
    removeChild(child: SystemComponent): boolean;
    removeChildByName(childName: string): boolean;
    get descendants(): Record<string, SystemComponent>;
    hasDescendant(component: SystemComponent): boolean;
    protected addDescendant(component: SystemComponent): void;
    removeDescendant(component: SystemComponent): void;
    findComponentsByString(searchString: string): SystemComponent[];
    findOneComponent(search: Record<string, string | number | (string | number)[]>): SystemComponent | undefined;
    findComponents(search: Record<string, string | number | (string | number)[]>): SystemComponent[];
    findByFullName(fullConstantCaseName: string): SystemComponent[];
    private transformSearchCriteria;
    private doesObjectMatch;
    private _findComponents;
}
//# sourceMappingURL=SystemComponent.d.ts.map