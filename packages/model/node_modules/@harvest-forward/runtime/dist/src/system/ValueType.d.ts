import { ProgrammingLanguage } from './ProgrammingLanguage';
import { SystemDescendantComponent } from './SystemDescendantComponent';
import { ValueTypeResolver } from './ValueTypeResolver';
export declare class ValueType extends SystemDescendantComponent {
    private static logger;
    primitive: boolean;
    collectedType?: ValueType;
    isCollection: boolean;
    private _asCollection?;
    updateable: boolean;
    static readonly typeResolverMap: Record<string, ValueTypeResolver>;
    constructor(objectType: string, nameSpace: string, name: string, desc: string, primitive?: boolean);
    static OBJECT: ValueType;
    static STRING: ValueType;
    static INT: ValueType;
    static FLOAT: ValueType;
    static BOOLEAN: ValueType;
    static DATE_TIME: ValueType;
    static DATE: ValueType;
    static TIME: ValueType;
    static INTERVAL: ValueType;
    static DECIMAL: ValueType;
    static VOID: ValueType;
    get asCollection(): ValueType;
    private static types;
    static install(language: ProgrammingLanguage, resolver: ValueTypeResolver): void;
    static uninstall(language: ProgrammingLanguage): void;
    static getValues(): ValueType[];
    static hasNameInType(language: ProgrammingLanguage, name: string): boolean;
    static hasName(name: string): boolean;
    static fromNameInType(language: ProgrammingLanguage, name: string): ValueType;
    static fromName(name: string): ValueType;
    inLanguage(language: ProgrammingLanguage, nullable?: boolean, length?: number): string;
    get isObject(): boolean;
}
//# sourceMappingURL=ValueType.d.ts.map