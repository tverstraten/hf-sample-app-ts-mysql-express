"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemDescendantComponent = void 0;
const ChangeCase = __importStar(require("change-case"));
const Guid_1 = require("../util/Guid");
const SystemComponent_1 = require("./SystemComponent");
class SystemDescendantComponent extends SystemComponent_1.SystemComponent {
    constructor(objectType, nameSpace, name, componentType, description) {
        super(componentType);
        this._fullConstantCaseName = '';
        this.informational = false;
        this.functional = false;
        this.isExternal = false;
        this.isTest = false;
        if (objectType == null)
            throw new RangeError(`objectType cannot be null`);
        if (name == null)
            throw new RangeError(`name cannot be null`);
        if (nameSpace == null)
            throw new RangeError(`nameSpace cannot be null`);
        this.objectTypeName = objectType;
        this.id = Guid_1.Guid.newGuid();
        this._name = SystemComponent_1.SystemComponent.normalizePathSlashes(name);
        this._nameSpace = SystemComponent_1.SystemComponent.normalizePathSlashes(nameSpace);
        this._constantCaseName = '';
        this._constantCaseNameSpace = '';
        this.setNames(nameSpace, name);
        this.description = description;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this.setNames(this._nameSpace, value);
    }
    disconnectRecursion() {
        super.disconnectRecursion();
        const thisAny = this;
        for (const [key, value] of Object.entries(this)) {
            if (key === 'parent' || value instanceof SystemDescendantComponent) {
                const newName = `sysref_${key}`;
                thisAny[newName] = value.constantCaseFullName;
                delete thisAny[key];
            }
        }
    }
    reconnectRecursion(system) {
        const thisAny = this;
        for (const [key, value] of Object.entries(this)) {
            if (key.startsWith('sysref_')) {
                const realName = key.substring(7);
                const referencedValue = system.descendants[value];
                thisAny[realName] = referencedValue ? referencedValue : system;
                delete thisAny[key];
            }
        }
        super.reconnectRecursion(system);
    }
    setNames(nameSpace, name) {
        this._name = SystemComponent_1.SystemComponent.normalizePathSlashes(name);
        this._nameSpace = SystemComponent_1.SystemComponent.normalizePathSlashes(nameSpace);
        this._constantCaseName = SystemComponent_1.SystemComponent.constantCase(this._name);
        this._constantCaseNameSpace = SystemComponent_1.SystemComponent.constantCase(this._nameSpace, true);
        this._pascalCaseName = undefined;
        this._snakeCaseName = undefined;
        this._camelCaseName = undefined;
        this._pascalCaseNameSpace = undefined;
        this._snakeCaseNameSpace = undefined;
        this._camelCaseNameSpace = undefined;
        const oldFullConstantCaseName = this._fullConstantCaseName;
        this._fullConstantCaseName = `${this._constantCaseNameSpace}/${this._constantCaseName}`;
        if (this.parent != null) {
            delete this.parent.children[oldFullConstantCaseName];
            this.parent.children[this._fullConstantCaseName] = this;
            if (this.parent instanceof SystemDescendantComponent)
                this.parent.updateDescendentName(oldFullConstantCaseName, this);
        }
    }
    updateDescendentName(oldFullConstantCaseName, descendant) {
        delete this.descendants[oldFullConstantCaseName];
        this.descendants[descendant._fullConstantCaseName] = descendant;
        if (this.parent != null && this.parent instanceof SystemDescendantComponent) {
            this.parent.updateDescendentName(oldFullConstantCaseName, descendant);
        }
    }
    get constantCaseName() {
        return this._constantCaseName;
    }
    get fullConstantCaseName() {
        return this._fullConstantCaseName;
    }
    get pascalCaseName() {
        if (this._pascalCaseName == null)
            this._pascalCaseName = ChangeCase.pascalCase(this._constantCaseName);
        return this._pascalCaseName;
    }
    get snakeCaseName() {
        if (this._snakeCaseName == null)
            this._snakeCaseName = ChangeCase.snakeCase(this._constantCaseName);
        return this._snakeCaseName;
    }
    get camelCaseName() {
        if (this._camelCaseName == null)
            this._camelCaseName = ChangeCase.camelCase(this._constantCaseName);
        return this._camelCaseName;
    }
    get nameSpace() {
        return this._nameSpace;
    }
    set nameSpace(value) {
        this._nameSpace = value;
        this.setNames(value, this._name);
    }
    get constantCaseNameSpace() {
        return this._constantCaseNameSpace;
    }
    get pascalCaseNameSpace() {
        if (this._pascalCaseNameSpace == null) {
            this._pascalCaseNameSpace = '';
            const pieces = this._constantCaseNameSpace.split('/');
            pieces.forEach((piece) => {
                if (this._pascalCaseNameSpace !== '')
                    this._pascalCaseNameSpace += '/';
                this._pascalCaseNameSpace += ChangeCase.pascalCase(piece);
            });
        }
        return this._pascalCaseNameSpace;
    }
    get snakeCaseNameSpace() {
        if (this._snakeCaseNameSpace == null) {
            this._snakeCaseNameSpace = '';
            const pieces = this._constantCaseNameSpace.split('/');
            pieces.forEach((piece) => {
                if (this._snakeCaseNameSpace !== '')
                    this._snakeCaseNameSpace += '/';
                this._snakeCaseNameSpace += ChangeCase.snakeCase(piece);
            });
        }
        return this._snakeCaseNameSpace;
    }
    get camelCaseNameSpace() {
        if (this._camelCaseNameSpace == null) {
            this._camelCaseNameSpace = '';
            const pieces = this._constantCaseNameSpace.split('/');
            pieces.forEach((piece) => {
                if (this._camelCaseNameSpace !== '')
                    this._camelCaseNameSpace += '/';
                this._camelCaseNameSpace += ChangeCase.camelCase(piece);
            });
        }
        return this._camelCaseNameSpace;
    }
    get constantCaseFullName() {
        return this._fullConstantCaseName;
    }
}
exports.SystemDescendantComponent = SystemDescendantComponent;
