/// <reference types="pino" />
import { Artifact } from '../system/Artifact';
import { System } from '../system/System';
import { Loggable } from '../util/Loggable';
import { Builder } from './Builder';
import { ConfigurationParameter } from './ConfigurationParameter';
export declare abstract class AbstractBuilder implements Builder, Loggable {
    logger: import("pino").Logger;
    readonly id: number;
    readonly name: string;
    readonly description: string;
    constructor(nameToUse: string, descriptionToUse: string);
    isConfigured(): boolean;
    getMissingConfigurationValues(): string[];
    abstract getConfigurationNames(): string[];
    hasConfigurableValue(name: string): boolean;
    abstract getConfiguredValue(name: string): any;
    abstract setConfiguredValue(name: string, value: any): void;
    abstract getConfiguration(): Record<string, ConfigurationParameter>;
    abstract doesConfigurationWork(): Promise<boolean>;
    regexFromConfigurationString(configurationString: string): RegExp;
    protected settleArtifactResults(promises: Promise<Artifact[]>[]): Promise<Artifact[]>;
    abstract build(system: System): Promise<Artifact[]>;
}
//# sourceMappingURL=AbstractBuilder.d.ts.map