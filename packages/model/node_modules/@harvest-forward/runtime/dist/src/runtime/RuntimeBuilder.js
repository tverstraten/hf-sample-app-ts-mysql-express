"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuntimeBuilder = void 0;
const System_1 = require("../system/System");
const SystemComponent_1 = require("../system/SystemComponent");
const LogAsyncMethod_1 = require("../util/LogAsyncMethod");
const AbstractSingularBuilder_1 = require("./AbstractSingularBuilder");
const BuilderFactory_1 = require("./BuilderFactory");
const ConfigurationManager_1 = require("./ConfigurationManager");
class RuntimeBuilder extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(system, configuration) {
        super('RuntimeBuilder', system.description);
        this.configuration = configuration;
    }
    async buildInternal(system, __component) {
        await ConfigurationManager_1.ConfigurationManager.registerPlugins();
        const builder = await BuilderFactory_1.BuilderFactory.create(this.configuration);
        const result = await builder.build(system);
        return result;
    }
}
__decorate([
    (0, LogAsyncMethod_1.LogAsyncMethod)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [System_1.System, SystemComponent_1.SystemComponent]),
    __metadata("design:returntype", Promise)
], RuntimeBuilder.prototype, "buildInternal", null);
exports.RuntimeBuilder = RuntimeBuilder;
