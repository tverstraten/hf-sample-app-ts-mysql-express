import { Artifact } from '../system/Artifact';
import { System } from '../system/System';
import { AbstractBuilder } from './AbstractBuilder';
import { Builder } from './Builder';
import { ConfigurationParameter } from './ConfigurationParameter';
export declare abstract class AbstractAggregateBuilder extends AbstractBuilder {
    private static nameSeparator;
    protected builders: Builder[];
    constructor(nameToUse: string, descriptionToUse: string, buildersToUse: Builder[]);
    getConfiguration(): Record<string, ConfigurationParameter>;
    getConfigurationNames(): string[];
    getConfiguredValue(name: string): any;
    setConfiguredValue(name: string, value: any): void;
    doesConfigurationWork(): Promise<boolean>;
    getFailingConfigurations(): Promise<Builder[]>;
    protected testConfiguration(): Promise<void>;
    abstract build(system: System): Promise<Artifact[]>;
}
//# sourceMappingURL=AbstractAggregateBuilder.d.ts.map