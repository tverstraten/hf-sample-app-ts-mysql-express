import { Artifact } from '../system/Artifact';
import { System } from '../system/System';
import { SystemComponent } from '../system/SystemComponent';
import { ValueType } from '../system/ValueType';
import { AbstractBuilder } from './AbstractBuilder';
import { ConfigurationParameter } from './ConfigurationParameter';
export declare abstract class AbstractSingularBuilder extends AbstractBuilder {
    private configs?;
    constructor(nameToUse: string, descriptionToUse: string, configsToUse?: Record<string, ConfigurationParameter>, configurationValues?: Record<string, any>);
    protected getInitialConfiguration(): Record<string, ConfigurationParameter>;
    getConfiguration(): Record<string, ConfigurationParameter>;
    getConfigurationNames(): string[];
    getConfiguredValue(name: string): any;
    protected isCorrectValueType(expectedType: ValueType, value: any): void;
    setConfiguredValue(name: string, value: any): void;
    doesConfigurationWork(): Promise<boolean>;
    protected _doesConfigurationWork(): Promise<boolean>;
    protected testConfiguration(): Promise<void>;
    build(system: System): Promise<Artifact[]>;
    protected abstract buildInternal(system: System, component: SystemComponent): Promise<Artifact[]>;
}
//# sourceMappingURL=AbstractSingularBuilder.d.ts.map