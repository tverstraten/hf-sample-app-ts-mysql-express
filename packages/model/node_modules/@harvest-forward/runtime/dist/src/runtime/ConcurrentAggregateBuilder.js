"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConcurrentAggregateBuilder = void 0;
const System_1 = require("../system/System");
const LogAsyncMethod_1 = require("../util/LogAsyncMethod");
const AbstractAggregateBuilder_1 = require("./AbstractAggregateBuilder");
class ConcurrentAggregateBuilder extends AbstractAggregateBuilder_1.AbstractAggregateBuilder {
    constructor(descriptionToUse, buildersToUse) {
        super('ConcurrentAggregateBuilder', descriptionToUse, buildersToUse);
    }
    async build(system) {
        await this.testConfiguration();
        const promises = [];
        for (let index = 0; index < this.builders.length; index++) {
            const builder = this.builders[index];
            promises.push(builder.build(system));
        }
        return this.settleArtifactResults(promises);
    }
}
__decorate([
    (0, LogAsyncMethod_1.LogAsyncMethod)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [System_1.System]),
    __metadata("design:returntype", Promise)
], ConcurrentAggregateBuilder.prototype, "build", null);
exports.ConcurrentAggregateBuilder = ConcurrentAggregateBuilder;
