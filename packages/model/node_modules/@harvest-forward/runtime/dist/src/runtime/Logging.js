"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logging = void 0;
const dotenv = __importStar(require("dotenv"));
const pino_1 = __importDefault(require("pino"));
dotenv.config();
class Logging {
    static getEnvironmentSpecifiedLevel(name) {
        if (!Logging.envSettings) {
            Logging.envSettings = {};
            try {
                if (process.env.LOG_LEVELS)
                    Logging.envSettings = JSON.parse(process.env.LOG_LEVELS);
            }
            catch (problem) { }
        }
        if (Logging.envSettings[name])
            return Logging.envSettings[name];
        return process.env.LOG_LEVEL;
    }
    static newLogger(name) {
        let level;
        if (Logging.cliSettings[name])
            level = Logging.cliSettings[name];
        if (!level)
            level = this.getEnvironmentSpecifiedLevel(name);
        if (!level)
            level = 'info';
        const LoggingOptions = {
            level: level,
            timestamp: false,
            base: {},
        };
        return (0, pino_1.default)({ name: name, ...LoggingOptions });
    }
}
exports.Logging = Logging;
Logging.cliSettings = {};
