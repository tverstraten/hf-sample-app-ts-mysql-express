"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ConfigurationManager_1 = require("./runtime/ConfigurationManager");
const Logging_1 = require("./runtime/Logging");
const RuntimeBuilder_1 = require("./runtime/RuntimeBuilder");
const System_1 = require("./system/System");
__exportStar(require("./plugins/handlebars/HandlebarsGenerator"), exports);
__exportStar(require("./plugins/handlebars/LanguageHelpers"), exports);
__exportStar(require("./plugins/handlebars/MiscHelpers"), exports);
__exportStar(require("./plugins/handlebars/StringHelpers"), exports);
__exportStar(require("./plugins/handlebars/WordHelpers"), exports);
__exportStar(require("./plugins/javaScript/JavaScriptBuilder"), exports);
__exportStar(require("./plugins/node/NodeBuilder"), exports);
__exportStar(require("./plugins/npm/NpmBuilder"), exports);
__exportStar(require("./runtime/AbstractAggregateBuilder"), exports);
__exportStar(require("./runtime/AbstractBuilder"), exports);
__exportStar(require("./runtime/AbstractSingularBuilder"), exports);
__exportStar(require("./runtime/Builder"), exports);
__exportStar(require("./runtime/BuilderConfiguration"), exports);
__exportStar(require("./runtime/BuilderFactory"), exports);
__exportStar(require("./runtime/ConcurrentAggregateBuilder"), exports);
__exportStar(require("./runtime/ConfigurationManager"), exports);
__exportStar(require("./runtime/ConfigurationParameter"), exports);
__exportStar(require("./runtime/Constructor"), exports);
__exportStar(require("./runtime/Logging"), exports);
__exportStar(require("./runtime/RuntimeBuilder"), exports);
__exportStar(require("./runtime/SequentialAggregateBuilder"), exports);
__exportStar(require("./runtime/TemplateFactory"), exports);
__exportStar(require("./system/AbstractArtifact"), exports);
__exportStar(require("./system/AbstractValueSpecification"), exports);
__exportStar(require("./system/Artifact"), exports);
__exportStar(require("./system/ComponentOrigin"), exports);
__exportStar(require("./system/Describable"), exports);
__exportStar(require("./system/FileArtifact"), exports);
__exportStar(require("./system/Identifiable"), exports);
__exportStar(require("./system/Nameable"), exports);
__exportStar(require("./system/Permanence"), exports);
__exportStar(require("./system/ProgrammingLanguage"), exports);
__exportStar(require("./system/SimpleMappedValueTypeResolver"), exports);
__exportStar(require("./system/StringIdentifiable"), exports);
__exportStar(require("./system/System"), exports);
__exportStar(require("./system/SystemComponent"), exports);
__exportStar(require("./system/SystemComponentArtifact"), exports);
__exportStar(require("./system/SystemComponentComparator"), exports);
__exportStar(require("./system/SystemComponentType"), exports);
__exportStar(require("./system/SystemDescendantComponent"), exports);
__exportStar(require("./system/ValueSpecification"), exports);
__exportStar(require("./system/ValueType"), exports);
__exportStar(require("./system/ValueTypeResolver"), exports);
__exportStar(require("./system/Variable"), exports);
__exportStar(require("./util/CircularReplacer"), exports);
__exportStar(require("./util/Guid"), exports);
__exportStar(require("./util/LogAction"), exports);
__exportStar(require("./util/LogAsyncMethod"), exports);
__exportStar(require("./util/Loggable"), exports);
__exportStar(require("./util/LogHelper"), exports);
__exportStar(require("./util/LogMethod"), exports);
__exportStar(require("./util/SystemComponentReplacer"), exports);
class Application {
    constructor() {
        this.logger = Logging_1.Logging.newLogger(Application.name);
    }
    outputUsage() {
        console.log(`Usage: node index.js <options>

Options:

-h: show help on usage of the application (this)
-l=<setting>
or -logging=<setting>: a JSON string of settings for logging. Each key is the name of a class and the value is the logging setting it should have. For example '{ "JavaScriptBuilder": "debug"}' passed in as a string would set logging to debug for the class JavaScriptBuilder
-c=<setting>
or -config=<setting>: Specific the name of the configuration file to load rather than the defaults. By default the files .hfrc, .hf.json, .hfrc.json are loaded one by one in that order. If this setting is enable none of those files will be loaded`);
    }
    setLogLevels(rawSetting) {
        let finalSetting = rawSetting;
        if (finalSetting.startsWith('"') && finalSetting.endsWith('"'))
            finalSetting = finalSetting.substring(1, finalSetting.length - 1);
        else if (finalSetting.startsWith("'") && finalSetting.endsWith("'"))
            finalSetting = finalSetting.substring(1, finalSetting.length - 1);
        process.env.LOG_LEVELS = finalSetting;
        this.logger.debug(`logging set to ${process.env.LOG_LEVELS}`);
    }
    async run(cliArguments) {
        cliArguments.forEach((argument) => {
            if (argument === '-h')
                this.outputUsage();
            else if (argument.startsWith('-config=')) {
                this.configurationFileName = argument.substring(8);
                this.logger.debug(`configurationFileName set to ${this.configurationFileName}`);
            }
            else if (argument.startsWith('-c=')) {
                this.configurationFileName = argument.substring(3);
                this.logger.debug(`configurationFileName set to ${this.configurationFileName}`);
            }
            else if (argument.startsWith('-logging='))
                this.setLogLevels(argument.substring(9));
            else if (argument.startsWith('-l='))
                this.setLogLevels(argument.substring(3));
        });
        if (this.configurationFileName) {
            const configuration = await ConfigurationManager_1.ConfigurationManager.registerConfigurationFile(this.configurationFileName, `${this.configurationFileName}`);
            if (configuration) {
                const system = new System_1.System(configuration.name);
                const builder = new RuntimeBuilder_1.RuntimeBuilder(system, configuration.configuration);
                this.logger.info(`Building ${JSON.stringify(system)}`);
                this.logger.debug(`Build configuration: ${JSON.stringify(configuration.configuration)}`);
                await builder.build(system);
            }
            else
                this.logger.debug('No system configuration found');
        }
    }
}
;
(async () => {
    try {
        const application = new Application();
        application.run(process.argv);
    }
    catch (problem) {
        console.log(problem);
    }
})();
