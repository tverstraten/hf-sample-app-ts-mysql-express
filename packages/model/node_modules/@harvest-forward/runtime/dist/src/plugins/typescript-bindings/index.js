"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.builders = exports.templates = exports.typeResolvers = void 0;
const fs_1 = __importDefault(require("fs"));
const ProgrammingLanguage_1 = require("../../system/ProgrammingLanguage");
const SimpleMappedValueTypeResolver_1 = require("../../system/SimpleMappedValueTypeResolver");
const ValueType_1 = require("../../system/ValueType");
const TypeScriptClassFieldToModelHarvester_1 = require("./TypeScriptClassFieldToModelHarvester");
const TypeScriptClassPropertyToModelHarvester_1 = require("./TypeScriptClassPropertyToModelHarvester");
const TypeScriptClassToModelHarvester_1 = require("./TypeScriptClassToModelHarvester");
const TypeScriptEnumValueHarvester_1 = require("./TypeScriptEnumValueHarvester");
const TypeScriptMandatoryValueTypes = {};
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.OBJECT.name] = 'any';
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.STRING.name] = 'string';
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.INT.name] = 'number';
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.FLOAT.name] = 'number';
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.BOOLEAN.name] = 'boolean';
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.DATE_TIME.name] = 'Date';
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.DATE.name] = 'Date';
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.TIME.name] = 'Date';
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.INTERVAL.name] = 'string';
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.DECIMAL.name] = 'number';
TypeScriptMandatoryValueTypes[ValueType_1.ValueType.VOID.name] = 'void';
const TypeScriptOptionalValueTypes = {};
TypeScriptOptionalValueTypes[ValueType_1.ValueType.OBJECT.name] = 'any | null';
TypeScriptOptionalValueTypes[ValueType_1.ValueType.STRING.name] = 'string | null';
TypeScriptOptionalValueTypes[ValueType_1.ValueType.INT.name] = 'number | null';
TypeScriptOptionalValueTypes[ValueType_1.ValueType.FLOAT.name] = 'number | null';
TypeScriptOptionalValueTypes[ValueType_1.ValueType.BOOLEAN.name] = 'boolean | null';
TypeScriptOptionalValueTypes[ValueType_1.ValueType.DATE_TIME.name] = 'Date | null';
TypeScriptOptionalValueTypes[ValueType_1.ValueType.DATE.name] = 'Date | null';
TypeScriptOptionalValueTypes[ValueType_1.ValueType.TIME.name] = 'Date | null';
TypeScriptOptionalValueTypes[ValueType_1.ValueType.INTERVAL.name] = 'string | null';
TypeScriptOptionalValueTypes[ValueType_1.ValueType.DECIMAL.name] = 'number | null';
TypeScriptOptionalValueTypes[ValueType_1.ValueType.VOID.name] = 'void';
exports.typeResolvers = {
    TypeScript: new SimpleMappedValueTypeResolver_1.SimpleMappedValueTypeResolver(ProgrammingLanguage_1.ProgrammingLanguage.typeScript, TypeScriptMandatoryValueTypes, TypeScriptOptionalValueTypes),
};
exports.templates = {
    Model: { type: 'handlebars', contents: () => fs_1.default.readFileSync(`${__dirname}/Model.handlebars`).toString() },
};
exports.builders = {
    EnumValueHarvester: (settings) => new TypeScriptEnumValueHarvester_1.TypeScriptEnumValueHarvester(settings),
    ClassFieldToModelHarvester: (settings) => new TypeScriptClassFieldToModelHarvester_1.TypeScriptClassFieldToModelHarvester(settings),
    ClassToModelHarvester: (settings) => new TypeScriptClassToModelHarvester_1.TypeScriptClassToModelHarvester(settings),
    ClassPropertyToModelHarvester: (settings) => new TypeScriptClassPropertyToModelHarvester_1.TypeScriptClassPropertyToModelHarvester(settings),
};
__exportStar(require("./AbstractTypeScriptAstHarvester"), exports);
__exportStar(require("./TypeScriptClassFieldToModelHarvester"), exports);
__exportStar(require("./TypeScriptClassPropertyToModelHarvester"), exports);
__exportStar(require("./TypeScriptClassToModelHarvester"), exports);
__exportStar(require("./TypeScriptEnumValueHarvester"), exports);
