export function Java9ParserListener(): this;
export class Java9ParserListener {
    constructor: typeof Java9ParserListener;
    enterLiteral(ctx: any): void;
    exitLiteral(ctx: any): void;
    enterPrimitiveType(ctx: any): void;
    exitPrimitiveType(ctx: any): void;
    enterNumericType(ctx: any): void;
    exitNumericType(ctx: any): void;
    enterIntegralType(ctx: any): void;
    exitIntegralType(ctx: any): void;
    enterFloatingPointType(ctx: any): void;
    exitFloatingPointType(ctx: any): void;
    enterReferenceType(ctx: any): void;
    exitReferenceType(ctx: any): void;
    enterClassOrInterfaceType(ctx: any): void;
    exitClassOrInterfaceType(ctx: any): void;
    enterClassType(ctx: any): void;
    exitClassType(ctx: any): void;
    enterClassType_lf_classOrInterfaceType(ctx: any): void;
    exitClassType_lf_classOrInterfaceType(ctx: any): void;
    enterClassType_lfno_classOrInterfaceType(ctx: any): void;
    exitClassType_lfno_classOrInterfaceType(ctx: any): void;
    enterInterfaceType(ctx: any): void;
    exitInterfaceType(ctx: any): void;
    enterInterfaceType_lf_classOrInterfaceType(ctx: any): void;
    exitInterfaceType_lf_classOrInterfaceType(ctx: any): void;
    enterInterfaceType_lfno_classOrInterfaceType(ctx: any): void;
    exitInterfaceType_lfno_classOrInterfaceType(ctx: any): void;
    enterTypeVariable(ctx: any): void;
    exitTypeVariable(ctx: any): void;
    enterArrayType(ctx: any): void;
    exitArrayType(ctx: any): void;
    enterDims(ctx: any): void;
    exitDims(ctx: any): void;
    enterTypeParameter(ctx: any): void;
    exitTypeParameter(ctx: any): void;
    enterTypeParameterModifier(ctx: any): void;
    exitTypeParameterModifier(ctx: any): void;
    enterTypeBound(ctx: any): void;
    exitTypeBound(ctx: any): void;
    enterAdditionalBound(ctx: any): void;
    exitAdditionalBound(ctx: any): void;
    enterTypeArguments(ctx: any): void;
    exitTypeArguments(ctx: any): void;
    enterTypeArgumentList(ctx: any): void;
    exitTypeArgumentList(ctx: any): void;
    enterTypeArgument(ctx: any): void;
    exitTypeArgument(ctx: any): void;
    enterWildcard(ctx: any): void;
    exitWildcard(ctx: any): void;
    enterWildcardBounds(ctx: any): void;
    exitWildcardBounds(ctx: any): void;
    enterModuleName(ctx: any): void;
    exitModuleName(ctx: any): void;
    enterPackageName(ctx: any): void;
    exitPackageName(ctx: any): void;
    enterTypeName(ctx: any): void;
    exitTypeName(ctx: any): void;
    enterPackageOrTypeName(ctx: any): void;
    exitPackageOrTypeName(ctx: any): void;
    enterExpressionName(ctx: any): void;
    exitExpressionName(ctx: any): void;
    enterMethodName(ctx: any): void;
    exitMethodName(ctx: any): void;
    enterAmbiguousName(ctx: any): void;
    exitAmbiguousName(ctx: any): void;
    enterCompilationUnit(ctx: any): void;
    exitCompilationUnit(ctx: any): void;
    enterOrdinaryCompilation(ctx: any): void;
    exitOrdinaryCompilation(ctx: any): void;
    enterModularCompilation(ctx: any): void;
    exitModularCompilation(ctx: any): void;
    enterPackageDeclaration(ctx: any): void;
    exitPackageDeclaration(ctx: any): void;
    enterPackageModifier(ctx: any): void;
    exitPackageModifier(ctx: any): void;
    enterImportDeclaration(ctx: any): void;
    exitImportDeclaration(ctx: any): void;
    enterSingleTypeImportDeclaration(ctx: any): void;
    exitSingleTypeImportDeclaration(ctx: any): void;
    enterTypeImportOnDemandDeclaration(ctx: any): void;
    exitTypeImportOnDemandDeclaration(ctx: any): void;
    enterSingleStaticImportDeclaration(ctx: any): void;
    exitSingleStaticImportDeclaration(ctx: any): void;
    enterStaticImportOnDemandDeclaration(ctx: any): void;
    exitStaticImportOnDemandDeclaration(ctx: any): void;
    enterTypeDeclaration(ctx: any): void;
    exitTypeDeclaration(ctx: any): void;
    enterModuleDeclaration(ctx: any): void;
    exitModuleDeclaration(ctx: any): void;
    enterModuleDirective(ctx: any): void;
    exitModuleDirective(ctx: any): void;
    enterRequiresModifier(ctx: any): void;
    exitRequiresModifier(ctx: any): void;
    enterClassDeclaration(ctx: any): void;
    exitClassDeclaration(ctx: any): void;
    enterNormalClassDeclaration(ctx: any): void;
    exitNormalClassDeclaration(ctx: any): void;
    enterClassModifier(ctx: any): void;
    exitClassModifier(ctx: any): void;
    enterTypeParameters(ctx: any): void;
    exitTypeParameters(ctx: any): void;
    enterTypeParameterList(ctx: any): void;
    exitTypeParameterList(ctx: any): void;
    enterSuperclass(ctx: any): void;
    exitSuperclass(ctx: any): void;
    enterSuperinterfaces(ctx: any): void;
    exitSuperinterfaces(ctx: any): void;
    enterInterfaceTypeList(ctx: any): void;
    exitInterfaceTypeList(ctx: any): void;
    enterClassBody(ctx: any): void;
    exitClassBody(ctx: any): void;
    enterClassBodyDeclaration(ctx: any): void;
    exitClassBodyDeclaration(ctx: any): void;
    enterClassMemberDeclaration(ctx: any): void;
    exitClassMemberDeclaration(ctx: any): void;
    enterFieldDeclaration(ctx: any): void;
    exitFieldDeclaration(ctx: any): void;
    enterFieldModifier(ctx: any): void;
    exitFieldModifier(ctx: any): void;
    enterVariableDeclaratorList(ctx: any): void;
    exitVariableDeclaratorList(ctx: any): void;
    enterVariableDeclarator(ctx: any): void;
    exitVariableDeclarator(ctx: any): void;
    enterVariableDeclaratorId(ctx: any): void;
    exitVariableDeclaratorId(ctx: any): void;
    enterVariableInitializer(ctx: any): void;
    exitVariableInitializer(ctx: any): void;
    enterUnannType(ctx: any): void;
    exitUnannType(ctx: any): void;
    enterUnannPrimitiveType(ctx: any): void;
    exitUnannPrimitiveType(ctx: any): void;
    enterUnannReferenceType(ctx: any): void;
    exitUnannReferenceType(ctx: any): void;
    enterUnannClassOrInterfaceType(ctx: any): void;
    exitUnannClassOrInterfaceType(ctx: any): void;
    enterUnannClassType(ctx: any): void;
    exitUnannClassType(ctx: any): void;
    enterUnannClassType_lf_unannClassOrInterfaceType(ctx: any): void;
    exitUnannClassType_lf_unannClassOrInterfaceType(ctx: any): void;
    enterUnannClassType_lfno_unannClassOrInterfaceType(ctx: any): void;
    exitUnannClassType_lfno_unannClassOrInterfaceType(ctx: any): void;
    enterUnannInterfaceType(ctx: any): void;
    exitUnannInterfaceType(ctx: any): void;
    enterUnannInterfaceType_lf_unannClassOrInterfaceType(ctx: any): void;
    exitUnannInterfaceType_lf_unannClassOrInterfaceType(ctx: any): void;
    enterUnannInterfaceType_lfno_unannClassOrInterfaceType(ctx: any): void;
    exitUnannInterfaceType_lfno_unannClassOrInterfaceType(ctx: any): void;
    enterUnannTypeVariable(ctx: any): void;
    exitUnannTypeVariable(ctx: any): void;
    enterUnannArrayType(ctx: any): void;
    exitUnannArrayType(ctx: any): void;
    enterMethodDeclaration(ctx: any): void;
    exitMethodDeclaration(ctx: any): void;
    enterMethodModifier(ctx: any): void;
    exitMethodModifier(ctx: any): void;
    enterMethodHeader(ctx: any): void;
    exitMethodHeader(ctx: any): void;
    enterResult(ctx: any): void;
    exitResult(ctx: any): void;
    enterMethodDeclarator(ctx: any): void;
    exitMethodDeclarator(ctx: any): void;
    enterFormalParameterList(ctx: any): void;
    exitFormalParameterList(ctx: any): void;
    enterFormalParameters(ctx: any): void;
    exitFormalParameters(ctx: any): void;
    enterFormalParameter(ctx: any): void;
    exitFormalParameter(ctx: any): void;
    enterVariableModifier(ctx: any): void;
    exitVariableModifier(ctx: any): void;
    enterLastFormalParameter(ctx: any): void;
    exitLastFormalParameter(ctx: any): void;
    enterReceiverParameter(ctx: any): void;
    exitReceiverParameter(ctx: any): void;
    enterThrows_(ctx: any): void;
    exitThrows_(ctx: any): void;
    enterExceptionTypeList(ctx: any): void;
    exitExceptionTypeList(ctx: any): void;
    enterExceptionType(ctx: any): void;
    exitExceptionType(ctx: any): void;
    enterMethodBody(ctx: any): void;
    exitMethodBody(ctx: any): void;
    enterInstanceInitializer(ctx: any): void;
    exitInstanceInitializer(ctx: any): void;
    enterStaticInitializer(ctx: any): void;
    exitStaticInitializer(ctx: any): void;
    enterConstructorDeclaration(ctx: any): void;
    exitConstructorDeclaration(ctx: any): void;
    enterConstructorModifier(ctx: any): void;
    exitConstructorModifier(ctx: any): void;
    enterConstructorDeclarator(ctx: any): void;
    exitConstructorDeclarator(ctx: any): void;
    enterSimpleTypeName(ctx: any): void;
    exitSimpleTypeName(ctx: any): void;
    enterConstructorBody(ctx: any): void;
    exitConstructorBody(ctx: any): void;
    enterExplicitConstructorInvocation(ctx: any): void;
    exitExplicitConstructorInvocation(ctx: any): void;
    enterEnumDeclaration(ctx: any): void;
    exitEnumDeclaration(ctx: any): void;
    enterEnumBody(ctx: any): void;
    exitEnumBody(ctx: any): void;
    enterEnumConstantList(ctx: any): void;
    exitEnumConstantList(ctx: any): void;
    enterEnumConstant(ctx: any): void;
    exitEnumConstant(ctx: any): void;
    enterEnumConstantModifier(ctx: any): void;
    exitEnumConstantModifier(ctx: any): void;
    enterEnumBodyDeclarations(ctx: any): void;
    exitEnumBodyDeclarations(ctx: any): void;
    enterInterfaceDeclaration(ctx: any): void;
    exitInterfaceDeclaration(ctx: any): void;
    enterNormalInterfaceDeclaration(ctx: any): void;
    exitNormalInterfaceDeclaration(ctx: any): void;
    enterInterfaceModifier(ctx: any): void;
    exitInterfaceModifier(ctx: any): void;
    enterExtendsInterfaces(ctx: any): void;
    exitExtendsInterfaces(ctx: any): void;
    enterInterfaceBody(ctx: any): void;
    exitInterfaceBody(ctx: any): void;
    enterInterfaceMemberDeclaration(ctx: any): void;
    exitInterfaceMemberDeclaration(ctx: any): void;
    enterConstantDeclaration(ctx: any): void;
    exitConstantDeclaration(ctx: any): void;
    enterConstantModifier(ctx: any): void;
    exitConstantModifier(ctx: any): void;
    enterInterfaceMethodDeclaration(ctx: any): void;
    exitInterfaceMethodDeclaration(ctx: any): void;
    enterInterfaceMethodModifier(ctx: any): void;
    exitInterfaceMethodModifier(ctx: any): void;
    enterAnnotationTypeDeclaration(ctx: any): void;
    exitAnnotationTypeDeclaration(ctx: any): void;
    enterAnnotationTypeBody(ctx: any): void;
    exitAnnotationTypeBody(ctx: any): void;
    enterAnnotationTypeMemberDeclaration(ctx: any): void;
    exitAnnotationTypeMemberDeclaration(ctx: any): void;
    enterAnnotationTypeElementDeclaration(ctx: any): void;
    exitAnnotationTypeElementDeclaration(ctx: any): void;
    enterAnnotationTypeElementModifier(ctx: any): void;
    exitAnnotationTypeElementModifier(ctx: any): void;
    enterDefaultValue(ctx: any): void;
    exitDefaultValue(ctx: any): void;
    enterAnnotation(ctx: any): void;
    exitAnnotation(ctx: any): void;
    enterNormalAnnotation(ctx: any): void;
    exitNormalAnnotation(ctx: any): void;
    enterElementValuePairList(ctx: any): void;
    exitElementValuePairList(ctx: any): void;
    enterElementValuePair(ctx: any): void;
    exitElementValuePair(ctx: any): void;
    enterElementValue(ctx: any): void;
    exitElementValue(ctx: any): void;
    enterElementValueArrayInitializer(ctx: any): void;
    exitElementValueArrayInitializer(ctx: any): void;
    enterElementValueList(ctx: any): void;
    exitElementValueList(ctx: any): void;
    enterMarkerAnnotation(ctx: any): void;
    exitMarkerAnnotation(ctx: any): void;
    enterSingleElementAnnotation(ctx: any): void;
    exitSingleElementAnnotation(ctx: any): void;
    enterArrayInitializer(ctx: any): void;
    exitArrayInitializer(ctx: any): void;
    enterVariableInitializerList(ctx: any): void;
    exitVariableInitializerList(ctx: any): void;
    enterBlock(ctx: any): void;
    exitBlock(ctx: any): void;
    enterBlockStatements(ctx: any): void;
    exitBlockStatements(ctx: any): void;
    enterBlockStatement(ctx: any): void;
    exitBlockStatement(ctx: any): void;
    enterLocalVariableDeclarationStatement(ctx: any): void;
    exitLocalVariableDeclarationStatement(ctx: any): void;
    enterLocalVariableDeclaration(ctx: any): void;
    exitLocalVariableDeclaration(ctx: any): void;
    enterStatement(ctx: any): void;
    exitStatement(ctx: any): void;
    enterStatementNoShortIf(ctx: any): void;
    exitStatementNoShortIf(ctx: any): void;
    enterStatementWithoutTrailingSubstatement(ctx: any): void;
    exitStatementWithoutTrailingSubstatement(ctx: any): void;
    enterEmptyStatement(ctx: any): void;
    exitEmptyStatement(ctx: any): void;
    enterLabeledStatement(ctx: any): void;
    exitLabeledStatement(ctx: any): void;
    enterLabeledStatementNoShortIf(ctx: any): void;
    exitLabeledStatementNoShortIf(ctx: any): void;
    enterExpressionStatement(ctx: any): void;
    exitExpressionStatement(ctx: any): void;
    enterStatementExpression(ctx: any): void;
    exitStatementExpression(ctx: any): void;
    enterIfThenStatement(ctx: any): void;
    exitIfThenStatement(ctx: any): void;
    enterIfThenElseStatement(ctx: any): void;
    exitIfThenElseStatement(ctx: any): void;
    enterIfThenElseStatementNoShortIf(ctx: any): void;
    exitIfThenElseStatementNoShortIf(ctx: any): void;
    enterAssertStatement(ctx: any): void;
    exitAssertStatement(ctx: any): void;
    enterSwitchStatement(ctx: any): void;
    exitSwitchStatement(ctx: any): void;
    enterSwitchBlock(ctx: any): void;
    exitSwitchBlock(ctx: any): void;
    enterSwitchBlockStatementGroup(ctx: any): void;
    exitSwitchBlockStatementGroup(ctx: any): void;
    enterSwitchLabels(ctx: any): void;
    exitSwitchLabels(ctx: any): void;
    enterSwitchLabel(ctx: any): void;
    exitSwitchLabel(ctx: any): void;
    enterEnumConstantName(ctx: any): void;
    exitEnumConstantName(ctx: any): void;
    enterWhileStatement(ctx: any): void;
    exitWhileStatement(ctx: any): void;
    enterWhileStatementNoShortIf(ctx: any): void;
    exitWhileStatementNoShortIf(ctx: any): void;
    enterDoStatement(ctx: any): void;
    exitDoStatement(ctx: any): void;
    enterForStatement(ctx: any): void;
    exitForStatement(ctx: any): void;
    enterForStatementNoShortIf(ctx: any): void;
    exitForStatementNoShortIf(ctx: any): void;
    enterBasicForStatement(ctx: any): void;
    exitBasicForStatement(ctx: any): void;
    enterBasicForStatementNoShortIf(ctx: any): void;
    exitBasicForStatementNoShortIf(ctx: any): void;
    enterForInit(ctx: any): void;
    exitForInit(ctx: any): void;
    enterForUpdate(ctx: any): void;
    exitForUpdate(ctx: any): void;
    enterStatementExpressionList(ctx: any): void;
    exitStatementExpressionList(ctx: any): void;
    enterEnhancedForStatement(ctx: any): void;
    exitEnhancedForStatement(ctx: any): void;
    enterEnhancedForStatementNoShortIf(ctx: any): void;
    exitEnhancedForStatementNoShortIf(ctx: any): void;
    enterBreakStatement(ctx: any): void;
    exitBreakStatement(ctx: any): void;
    enterContinueStatement(ctx: any): void;
    exitContinueStatement(ctx: any): void;
    enterReturnStatement(ctx: any): void;
    exitReturnStatement(ctx: any): void;
    enterThrowStatement(ctx: any): void;
    exitThrowStatement(ctx: any): void;
    enterSynchronizedStatement(ctx: any): void;
    exitSynchronizedStatement(ctx: any): void;
    enterTryStatement(ctx: any): void;
    exitTryStatement(ctx: any): void;
    enterCatches(ctx: any): void;
    exitCatches(ctx: any): void;
    enterCatchClause(ctx: any): void;
    exitCatchClause(ctx: any): void;
    enterCatchFormalParameter(ctx: any): void;
    exitCatchFormalParameter(ctx: any): void;
    enterCatchType(ctx: any): void;
    exitCatchType(ctx: any): void;
    enterFinally_(ctx: any): void;
    exitFinally_(ctx: any): void;
    enterTryWithResourcesStatement(ctx: any): void;
    exitTryWithResourcesStatement(ctx: any): void;
    enterResourceSpecification(ctx: any): void;
    exitResourceSpecification(ctx: any): void;
    enterResourceList(ctx: any): void;
    exitResourceList(ctx: any): void;
    enterResource(ctx: any): void;
    exitResource(ctx: any): void;
    enterVariableAccess(ctx: any): void;
    exitVariableAccess(ctx: any): void;
    enterPrimary(ctx: any): void;
    exitPrimary(ctx: any): void;
    enterPrimaryNoNewArray(ctx: any): void;
    exitPrimaryNoNewArray(ctx: any): void;
    enterPrimaryNoNewArray_lf_arrayAccess(ctx: any): void;
    exitPrimaryNoNewArray_lf_arrayAccess(ctx: any): void;
    enterPrimaryNoNewArray_lfno_arrayAccess(ctx: any): void;
    exitPrimaryNoNewArray_lfno_arrayAccess(ctx: any): void;
    enterPrimaryNoNewArray_lf_primary(ctx: any): void;
    exitPrimaryNoNewArray_lf_primary(ctx: any): void;
    enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(ctx: any): void;
    exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(ctx: any): void;
    enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(ctx: any): void;
    exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(ctx: any): void;
    enterPrimaryNoNewArray_lfno_primary(ctx: any): void;
    exitPrimaryNoNewArray_lfno_primary(ctx: any): void;
    enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(ctx: any): void;
    exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(ctx: any): void;
    enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(ctx: any): void;
    exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(ctx: any): void;
    enterClassLiteral(ctx: any): void;
    exitClassLiteral(ctx: any): void;
    enterClassInstanceCreationExpression(ctx: any): void;
    exitClassInstanceCreationExpression(ctx: any): void;
    enterClassInstanceCreationExpression_lf_primary(ctx: any): void;
    exitClassInstanceCreationExpression_lf_primary(ctx: any): void;
    enterClassInstanceCreationExpression_lfno_primary(ctx: any): void;
    exitClassInstanceCreationExpression_lfno_primary(ctx: any): void;
    enterTypeArgumentsOrDiamond(ctx: any): void;
    exitTypeArgumentsOrDiamond(ctx: any): void;
    enterFieldAccess(ctx: any): void;
    exitFieldAccess(ctx: any): void;
    enterFieldAccess_lf_primary(ctx: any): void;
    exitFieldAccess_lf_primary(ctx: any): void;
    enterFieldAccess_lfno_primary(ctx: any): void;
    exitFieldAccess_lfno_primary(ctx: any): void;
    enterArrayAccess(ctx: any): void;
    exitArrayAccess(ctx: any): void;
    enterArrayAccess_lf_primary(ctx: any): void;
    exitArrayAccess_lf_primary(ctx: any): void;
    enterArrayAccess_lfno_primary(ctx: any): void;
    exitArrayAccess_lfno_primary(ctx: any): void;
    enterMethodInvocation(ctx: any): void;
    exitMethodInvocation(ctx: any): void;
    enterMethodInvocation_lf_primary(ctx: any): void;
    exitMethodInvocation_lf_primary(ctx: any): void;
    enterMethodInvocation_lfno_primary(ctx: any): void;
    exitMethodInvocation_lfno_primary(ctx: any): void;
    enterArgumentList(ctx: any): void;
    exitArgumentList(ctx: any): void;
    enterMethodReference(ctx: any): void;
    exitMethodReference(ctx: any): void;
    enterMethodReference_lf_primary(ctx: any): void;
    exitMethodReference_lf_primary(ctx: any): void;
    enterMethodReference_lfno_primary(ctx: any): void;
    exitMethodReference_lfno_primary(ctx: any): void;
    enterArrayCreationExpression(ctx: any): void;
    exitArrayCreationExpression(ctx: any): void;
    enterDimExprs(ctx: any): void;
    exitDimExprs(ctx: any): void;
    enterDimExpr(ctx: any): void;
    exitDimExpr(ctx: any): void;
    enterConstantExpression(ctx: any): void;
    exitConstantExpression(ctx: any): void;
    enterExpression(ctx: any): void;
    exitExpression(ctx: any): void;
    enterLambdaExpression(ctx: any): void;
    exitLambdaExpression(ctx: any): void;
    enterLambdaParameters(ctx: any): void;
    exitLambdaParameters(ctx: any): void;
    enterInferredFormalParameterList(ctx: any): void;
    exitInferredFormalParameterList(ctx: any): void;
    enterLambdaBody(ctx: any): void;
    exitLambdaBody(ctx: any): void;
    enterAssignmentExpression(ctx: any): void;
    exitAssignmentExpression(ctx: any): void;
    enterAssignment(ctx: any): void;
    exitAssignment(ctx: any): void;
    enterLeftHandSide(ctx: any): void;
    exitLeftHandSide(ctx: any): void;
    enterAssignmentOperator(ctx: any): void;
    exitAssignmentOperator(ctx: any): void;
    enterConditionalExpression(ctx: any): void;
    exitConditionalExpression(ctx: any): void;
    enterConditionalOrExpression(ctx: any): void;
    exitConditionalOrExpression(ctx: any): void;
    enterConditionalAndExpression(ctx: any): void;
    exitConditionalAndExpression(ctx: any): void;
    enterInclusiveOrExpression(ctx: any): void;
    exitInclusiveOrExpression(ctx: any): void;
    enterExclusiveOrExpression(ctx: any): void;
    exitExclusiveOrExpression(ctx: any): void;
    enterAndExpression(ctx: any): void;
    exitAndExpression(ctx: any): void;
    enterEqualityExpression(ctx: any): void;
    exitEqualityExpression(ctx: any): void;
    enterRelationalExpression(ctx: any): void;
    exitRelationalExpression(ctx: any): void;
    enterShiftExpression(ctx: any): void;
    exitShiftExpression(ctx: any): void;
    enterAdditiveExpression(ctx: any): void;
    exitAdditiveExpression(ctx: any): void;
    enterMultiplicativeExpression(ctx: any): void;
    exitMultiplicativeExpression(ctx: any): void;
    enterUnaryExpression(ctx: any): void;
    exitUnaryExpression(ctx: any): void;
    enterPreIncrementExpression(ctx: any): void;
    exitPreIncrementExpression(ctx: any): void;
    enterPreDecrementExpression(ctx: any): void;
    exitPreDecrementExpression(ctx: any): void;
    enterUnaryExpressionNotPlusMinus(ctx: any): void;
    exitUnaryExpressionNotPlusMinus(ctx: any): void;
    enterPostfixExpression(ctx: any): void;
    exitPostfixExpression(ctx: any): void;
    enterPostIncrementExpression(ctx: any): void;
    exitPostIncrementExpression(ctx: any): void;
    enterPostIncrementExpression_lf_postfixExpression(ctx: any): void;
    exitPostIncrementExpression_lf_postfixExpression(ctx: any): void;
    enterPostDecrementExpression(ctx: any): void;
    exitPostDecrementExpression(ctx: any): void;
    enterPostDecrementExpression_lf_postfixExpression(ctx: any): void;
    exitPostDecrementExpression_lf_postfixExpression(ctx: any): void;
    enterCastExpression(ctx: any): void;
    exitCastExpression(ctx: any): void;
    enterIdentifier(ctx: any): void;
    exitIdentifier(ctx: any): void;
}
//# sourceMappingURL=Java9ParserListener.d.ts.map