export function Python3ParserListener(): this;
export class Python3ParserListener {
    constructor: typeof Python3ParserListener;
    enterSingle_input(ctx: any): void;
    exitSingle_input(ctx: any): void;
    enterFile_input(ctx: any): void;
    exitFile_input(ctx: any): void;
    enterEval_input(ctx: any): void;
    exitEval_input(ctx: any): void;
    enterDecorator(ctx: any): void;
    exitDecorator(ctx: any): void;
    enterDecorators(ctx: any): void;
    exitDecorators(ctx: any): void;
    enterDecorated(ctx: any): void;
    exitDecorated(ctx: any): void;
    enterAsync_funcdef(ctx: any): void;
    exitAsync_funcdef(ctx: any): void;
    enterFuncdef(ctx: any): void;
    exitFuncdef(ctx: any): void;
    enterParameters(ctx: any): void;
    exitParameters(ctx: any): void;
    enterTypedargslist(ctx: any): void;
    exitTypedargslist(ctx: any): void;
    enterTfpdef(ctx: any): void;
    exitTfpdef(ctx: any): void;
    enterVarargslist(ctx: any): void;
    exitVarargslist(ctx: any): void;
    enterVfpdef(ctx: any): void;
    exitVfpdef(ctx: any): void;
    enterStmt(ctx: any): void;
    exitStmt(ctx: any): void;
    enterSimple_stmt(ctx: any): void;
    exitSimple_stmt(ctx: any): void;
    enterSmall_stmt(ctx: any): void;
    exitSmall_stmt(ctx: any): void;
    enterExpr_stmt(ctx: any): void;
    exitExpr_stmt(ctx: any): void;
    enterAnnassign(ctx: any): void;
    exitAnnassign(ctx: any): void;
    enterTestlist_star_expr(ctx: any): void;
    exitTestlist_star_expr(ctx: any): void;
    enterAugassign(ctx: any): void;
    exitAugassign(ctx: any): void;
    enterDel_stmt(ctx: any): void;
    exitDel_stmt(ctx: any): void;
    enterPass_stmt(ctx: any): void;
    exitPass_stmt(ctx: any): void;
    enterFlow_stmt(ctx: any): void;
    exitFlow_stmt(ctx: any): void;
    enterBreak_stmt(ctx: any): void;
    exitBreak_stmt(ctx: any): void;
    enterContinue_stmt(ctx: any): void;
    exitContinue_stmt(ctx: any): void;
    enterReturn_stmt(ctx: any): void;
    exitReturn_stmt(ctx: any): void;
    enterYield_stmt(ctx: any): void;
    exitYield_stmt(ctx: any): void;
    enterRaise_stmt(ctx: any): void;
    exitRaise_stmt(ctx: any): void;
    enterImport_stmt(ctx: any): void;
    exitImport_stmt(ctx: any): void;
    enterImport_name(ctx: any): void;
    exitImport_name(ctx: any): void;
    enterImport_from(ctx: any): void;
    exitImport_from(ctx: any): void;
    enterImport_as_name(ctx: any): void;
    exitImport_as_name(ctx: any): void;
    enterDotted_as_name(ctx: any): void;
    exitDotted_as_name(ctx: any): void;
    enterImport_as_names(ctx: any): void;
    exitImport_as_names(ctx: any): void;
    enterDotted_as_names(ctx: any): void;
    exitDotted_as_names(ctx: any): void;
    enterDotted_name(ctx: any): void;
    exitDotted_name(ctx: any): void;
    enterGlobal_stmt(ctx: any): void;
    exitGlobal_stmt(ctx: any): void;
    enterNonlocal_stmt(ctx: any): void;
    exitNonlocal_stmt(ctx: any): void;
    enterAssert_stmt(ctx: any): void;
    exitAssert_stmt(ctx: any): void;
    enterCompound_stmt(ctx: any): void;
    exitCompound_stmt(ctx: any): void;
    enterAsync_stmt(ctx: any): void;
    exitAsync_stmt(ctx: any): void;
    enterIf_stmt(ctx: any): void;
    exitIf_stmt(ctx: any): void;
    enterWhile_stmt(ctx: any): void;
    exitWhile_stmt(ctx: any): void;
    enterFor_stmt(ctx: any): void;
    exitFor_stmt(ctx: any): void;
    enterTry_stmt(ctx: any): void;
    exitTry_stmt(ctx: any): void;
    enterWith_stmt(ctx: any): void;
    exitWith_stmt(ctx: any): void;
    enterWith_item(ctx: any): void;
    exitWith_item(ctx: any): void;
    enterExcept_clause(ctx: any): void;
    exitExcept_clause(ctx: any): void;
    enterSuite(ctx: any): void;
    exitSuite(ctx: any): void;
    enterTest(ctx: any): void;
    exitTest(ctx: any): void;
    enterTest_nocond(ctx: any): void;
    exitTest_nocond(ctx: any): void;
    enterLambdef(ctx: any): void;
    exitLambdef(ctx: any): void;
    enterLambdef_nocond(ctx: any): void;
    exitLambdef_nocond(ctx: any): void;
    enterOr_test(ctx: any): void;
    exitOr_test(ctx: any): void;
    enterAnd_test(ctx: any): void;
    exitAnd_test(ctx: any): void;
    enterNot_test(ctx: any): void;
    exitNot_test(ctx: any): void;
    enterComparison(ctx: any): void;
    exitComparison(ctx: any): void;
    enterComp_op(ctx: any): void;
    exitComp_op(ctx: any): void;
    enterStar_expr(ctx: any): void;
    exitStar_expr(ctx: any): void;
    enterExpr(ctx: any): void;
    exitExpr(ctx: any): void;
    enterXor_expr(ctx: any): void;
    exitXor_expr(ctx: any): void;
    enterAnd_expr(ctx: any): void;
    exitAnd_expr(ctx: any): void;
    enterShift_expr(ctx: any): void;
    exitShift_expr(ctx: any): void;
    enterArith_expr(ctx: any): void;
    exitArith_expr(ctx: any): void;
    enterTerm(ctx: any): void;
    exitTerm(ctx: any): void;
    enterFactor(ctx: any): void;
    exitFactor(ctx: any): void;
    enterPower(ctx: any): void;
    exitPower(ctx: any): void;
    enterAtom_expr(ctx: any): void;
    exitAtom_expr(ctx: any): void;
    enterAtom(ctx: any): void;
    exitAtom(ctx: any): void;
    enterTestlist_comp(ctx: any): void;
    exitTestlist_comp(ctx: any): void;
    enterTrailer(ctx: any): void;
    exitTrailer(ctx: any): void;
    enterSubscriptlist(ctx: any): void;
    exitSubscriptlist(ctx: any): void;
    enterSubscript(ctx: any): void;
    exitSubscript(ctx: any): void;
    enterSliceop(ctx: any): void;
    exitSliceop(ctx: any): void;
    enterExprlist(ctx: any): void;
    exitExprlist(ctx: any): void;
    enterTestlist(ctx: any): void;
    exitTestlist(ctx: any): void;
    enterDictorsetmaker(ctx: any): void;
    exitDictorsetmaker(ctx: any): void;
    enterClassdef(ctx: any): void;
    exitClassdef(ctx: any): void;
    enterArglist(ctx: any): void;
    exitArglist(ctx: any): void;
    enterArgument(ctx: any): void;
    exitArgument(ctx: any): void;
    enterComp_iter(ctx: any): void;
    exitComp_iter(ctx: any): void;
    enterComp_for(ctx: any): void;
    exitComp_for(ctx: any): void;
    enterComp_if(ctx: any): void;
    exitComp_if(ctx: any): void;
    enterEncoding_decl(ctx: any): void;
    exitEncoding_decl(ctx: any): void;
    enterYield_expr(ctx: any): void;
    exitYield_expr(ctx: any): void;
    enterYield_arg(ctx: any): void;
    exitYield_arg(ctx: any): void;
}
//# sourceMappingURL=Python3ParserListener.d.ts.map