"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractTypeScriptAstHarvester = void 0;
const fs_1 = __importDefault(require("fs"));
const sh = __importStar(require("shelljs"));
const typescript_1 = require("typescript");
const AbstractSingularBuilder_1 = require("../../runtime/AbstractSingularBuilder");
const ValueType_1 = require("../../system/ValueType");
class AbstractTypeScriptAstHarvester extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(className, description, configurationParameters, configurationValues) {
        super(className, description, {
            ...configurationParameters,
            sourcePath: {
                name: 'Source Path',
                required: true,
                description: 'The path to where the source files are located',
                valueType: ValueType_1.ValueType.STRING,
            },
            fileNamePattern: {
                name: 'File Name pattern',
                required: true,
                description: 'A regex used against the file name to determine if it should be included in the harvesting',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: '.*',
            },
            classNamePattern: {
                name: 'Class Name pattern',
                required: true,
                description: 'A regex used against the non-qualified class name to determine if it should be included in the harvesting',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: '.*',
            },
        }, configurationValues);
        this.regexSet = false;
        this.fileNameRegex = new RegExp('.*');
        this.classNameRegex = new RegExp('.*');
    }
    ensureRegexes() {
        if (!this.regexSet) {
            this.fileNameRegex = new RegExp(this.getConfiguredValue('fileNamePattern'));
            this.classNameRegex = new RegExp(this.getConfiguredValue('classNamePattern'));
            this.regexSet = true;
        }
    }
    validFile(fileName) {
        return this.fileNameRegex.test(fileName);
    }
    validClass(className) {
        return this.classNameRegex.test(className);
    }
    async harvestFromFile(system, filePath, fileName) {
        try {
            const fileAndPath = `${filePath}/${fileName}`;
            let result;
            const cwd = await sh.pwd();
            const realPath = fs_1.default.realpathSync(`${cwd}/${fileAndPath}`);
            this.logger.isLevelEnabled('debug') ? this.logger.debug(`harvestFromFile(${this.name}) loading ${realPath}`) : '';
            const stats = await fs_1.default.promises.stat(fileAndPath);
            if (stats.isDirectory()) {
                this.logger.isLevelEnabled('debug') ? this.logger.debug(`harvestFromFile(${fileAndPath}) skipping directory`) : '';
                result = [];
            }
            else {
                const sourceText = await fs_1.default.promises.readFile(fileAndPath);
                const ast = (0, typescript_1.createSourceFile)(fileName, sourceText.toString(), typescript_1.ScriptTarget.Latest, false, typescript_1.ScriptKind.TS);
                result = await this.harvestFromAst(system, ast);
            }
            this.logger.isLevelEnabled('debug') ? this.logger.debug(`harvestFromFile(${fileAndPath}) exit`) : '';
            return result;
        }
        catch (problem) {
            this.logger.error(`harvestFromFile() failed ${problem}`);
            throw problem;
        }
    }
    async _doesConfigurationWork() {
        const sourcePath = this.getConfiguredValue('sourcePath');
        const result = fs_1.default.existsSync(sourcePath);
        return result;
    }
    async buildInternal(system, __component) {
        this.logger.isLevelEnabled('debug') ? this.logger.debug(`buildInternal(${system.name}) enter`) : '';
        try {
            this.ensureRegexes();
            const result = [];
            const sourcePath = this.getConfiguredValue('sourcePath');
            const fileNames = await fs_1.default.promises.readdir(sourcePath);
            const _thisThis = this;
            const promises = [];
            fileNames.forEach((fileName) => {
                if (_thisThis.validFile(fileName)) {
                    const promise = this.harvestFromFile(system, sourcePath, fileName);
                    promises.push(promise);
                }
            });
            const promiseResults = await Promise.allSettled(promises);
            for (const promiseResultIndex in promiseResults) {
                const promiseResult = promiseResults[promiseResultIndex];
                if (promiseResult.status === 'fulfilled') {
                    const artifacts = promiseResult.value;
                    result.concat(artifacts);
                }
            }
            this.logger.isLevelEnabled('debug') ? this.logger.debug(`buildInternal(${system.name}) exit`) : '';
            return result;
        }
        catch (problem) {
            this.logger.error(`buildInternal(${system.name}) failed ${problem}`);
            throw problem;
        }
    }
}
exports.AbstractTypeScriptAstHarvester = AbstractTypeScriptAstHarvester;
