"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrmColumnMappingCollector = void 0;
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const ComponentOrigin_1 = require("../../../system/ComponentOrigin");
const Permanence_1 = require("../../../system/Permanence");
const System_1 = require("../../../system/System");
const SystemComponentArtifact_1 = require("../../../system/SystemComponentArtifact");
const ValueType_1 = require("../../../system/ValueType");
const information_architecture_1 = require("../../information-architecture");
const rdbms_basic_1 = require("../../rdbms-basic");
const ObjectTypeTableMapping_1 = require("../ObjectTypeTableMapping");
class OrmColumnMappingCollector extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'Column',
        });
        super('OrmColumnMappingCollector', 'A transformer that collects orm column mappings into their respective table mappings', {
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(system, component) {
        const result = [];
        const column = component;
        const mappable = column;
        if (mappable.orMapping != null) {
            const schema = column.parent;
            const fullTableName = System_1.System.fullConstantCase(schema.fullConstantCaseName, column.tableName);
            const mapping = mappable.orMapping;
            const orm = system.findOneComponent({
                objectTypeName: 'ObjectRelationalMapping',
            });
            let tableMapping = orm.tableNameToMapping[fullTableName];
            if (tableMapping == null) {
                const model = information_architecture_1.InformationModel.fromSystem(system);
                const parent = column.parent;
                const innerSchema = parent instanceof rdbms_basic_1.Schema ? parent : parent?.parent;
                const db = innerSchema.parent;
                tableMapping = new ObjectTypeTableMapping_1.ObjectTypeTableMapping(model.fullConstantCaseName, '', db.fullConstantCaseName, innerSchema.name, column.tableName);
                tableMapping.permanence = Permanence_1.Permanence.constant;
                tableMapping.informational = true;
                tableMapping.functional = false;
                tableMapping.origin = ComponentOrigin_1.ComponentOrigin.manufactured;
                orm.addChild(tableMapping);
                result.push(new SystemComponentArtifact_1.SystemComponentArtifact(tableMapping));
            }
            if (tableMapping.columnMappings == null)
                tableMapping.columnMappings = {};
            tableMapping.columnMappings[column.name] = mapping;
        }
        return result;
    }
}
exports.OrmColumnMappingCollector = OrmColumnMappingCollector;
