"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectTypeTableMapping = void 0;
const System_1 = require("../../system/System");
const SystemComponent_1 = require("../../system/SystemComponent");
const SystemComponentComparator_1 = require("../../system/SystemComponentComparator");
const SystemComponentType_1 = require("../../system/SystemComponentType");
const SystemDescendantComponent_1 = require("../../system/SystemDescendantComponent");
class ObjectTypeTableMapping extends SystemDescendantComponent_1.SystemDescendantComponent {
    constructor(typeNameSpace, typeName, databaseName, schemaName, tableName) {
        super('ObjectTypeTableMapping', `orm/${schemaName}`, tableName, SystemComponentType_1.SystemComponentType.informationModelMapping, `Data access mapping between ${schemaName}.${tableName} and ${typeNameSpace}/${typeName}`);
        this._typeName = typeName;
        this._typeNameSpace = typeNameSpace;
        this._databaseName = databaseName;
        this._schemaName = schemaName;
        this._tableName = tableName;
        const fullSchemaName = System_1.System.fullConstantCase(databaseName, schemaName);
        this._fullTableName = System_1.System.fullConstantCase(fullSchemaName, tableName);
        this._fullTypeName = System_1.System.fullConstantCase(typeNameSpace, typeName);
        this.propertyMappings = {};
        this.columnMappings = {};
    }
    setTypeName(typeNameSpace, typeName) {
        const oldName = this._fullTypeName;
        this._fullTypeName = SystemComponent_1.SystemComponent.fullConstantCase(typeNameSpace, typeName);
        const model = this.parent;
        model.updateTypeNameToMapping(this, oldName, this._fullTypeName);
    }
    get typeName() {
        return this._typeName;
    }
    set typeName(value) {
        this._typeName = value;
        this.setTypeName(this._typeNameSpace, value);
    }
    get typeNameSpace() {
        return this._typeNameSpace;
    }
    set typeNameSpace(value) {
        this._typeNameSpace = value;
        this.setTypeName(value, this._typeName);
    }
    get fullTypeName() {
        return this._fullTypeName;
    }
    setTableName(databaseName, tableName, schemaName) {
        const fullSchemaName = System_1.System.fullConstantCase(databaseName, schemaName);
        const oldName = this._fullTableName;
        this._fullTableName = System_1.System.fullConstantCase(fullSchemaName, tableName);
        const model = this.parent;
        model.updateTableNameToMapping(oldName, this._fullTableName);
    }
    get databaseName() {
        return this._databaseName;
    }
    set databaseName(value) {
        this.setTableName(value, this._schemaName, this._tableName);
    }
    get schemaName() {
        return this._schemaName;
    }
    set schemaName(value) {
        this.setTableName(this._databaseName, value, this._tableName);
    }
    get tableName() {
        return this._tableName;
    }
    set tableName(value) {
        this.setTableName(this._databaseName, this._schemaName, value);
    }
    get fullTableName() {
        return this._fullTableName;
    }
    get properties() {
        const mappings = Object.values(this.propertyMappings);
        mappings.sort(SystemComponentComparator_1.SystemComponentComparator);
        return mappings;
    }
    get columns() {
        const mappings = Object.values(this.columnMappings);
        mappings.sort(SystemComponentComparator_1.SystemComponentComparator);
        return mappings;
    }
    addChild(child) {
        if (!this.hasChild(child)) {
            super.addChild(child);
            const childAsPropertyMapping = child;
            this.propertyMappings[childAsPropertyMapping.propertyName] = childAsPropertyMapping;
            this.columnMappings[childAsPropertyMapping.columnName] = childAsPropertyMapping;
            childAsPropertyMapping.nameSpace = this.constantCaseFullName;
        }
    }
    removeChild(child) {
        if (this.hasChild(child)) {
            const childAsPropertyMapping = child;
            delete this.propertyMappings[childAsPropertyMapping.propertyName];
            delete this.columnMappings[childAsPropertyMapping.columnName];
            return super.removeChild(child);
        }
        return false;
    }
}
exports.ObjectTypeTableMapping = ObjectTypeTableMapping;
