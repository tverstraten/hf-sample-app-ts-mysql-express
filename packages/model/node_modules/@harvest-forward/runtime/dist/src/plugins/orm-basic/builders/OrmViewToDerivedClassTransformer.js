"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrmViewToDerivedClassTransformer = void 0;
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const SystemComponent_1 = require("../../../system/SystemComponent");
const ValueType_1 = require("../../../system/ValueType");
const information_architecture_1 = require("../../information-architecture");
class OrmViewToDerivedClassTransformer extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'View',
        });
        super('OrmViewToDerivedClassTransformer', 'A transformer that takes a view from a sql schema and converts it into a derivation of a base class in the information model', {
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
            projectionPattern: {
                name: 'Projection pattern',
                required: true,
                description: 'A regex used against the schema name to determine if it a projection (as opposed to a derivation)',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: '.*_Projections',
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(system, component) {
        const result = [];
        const view = component;
        const viewMapping = view.orMapping;
        const schema = view.parent;
        const db = schema.parent;
        const projectionPattern = this.regexFromConfigurationString(this.getConfiguredValue('projectionPattern'));
        const isProjection = projectionPattern.test(view.constantCaseFullName);
        if (viewMapping != null && view.baseTableName && view.baseTableSchemaName && !isProjection) {
            const baseTableSchemaFullName = SystemComponent_1.SystemComponent.fullConstantCase(db.fullConstantCaseName, view.baseTableSchemaName);
            const baseTableSchema = db.descendants[baseTableSchemaFullName];
            const baseTableFullName = SystemComponent_1.SystemComponent.fullConstantCase(baseTableSchema.fullConstantCaseName, view.baseTableName);
            const baseTable = system.descendants[baseTableFullName];
            const model = information_architecture_1.InformationModel.fromSystem(system);
            if (baseTable != null) {
                const baseClassName = baseTable.orMapping?.typeName;
                const derivedClassName = viewMapping.typeName;
                if (derivedClassName != null && baseClassName != null) {
                    let fullName = SystemComponent_1.SystemComponent.fullConstantCase(model.fullConstantCaseName, derivedClassName);
                    const derivedClass = system.descendants[fullName];
                    fullName = SystemComponent_1.SystemComponent.fullConstantCase(model.fullConstantCaseName, baseClassName);
                    const baseClass = system.descendants[fullName];
                    derivedClass.inheritsFrom = [baseClass];
                    baseClass.derivations.push(derivedClass);
                    const mapping = derivedClass.orMapping;
                    if (mapping != null) {
                        mapping.discriminatorColumn = view.discriminatorColumn;
                        mapping.discriminatorValue = view.discriminatorValue;
                    }
                    if (mapping != null) {
                        const columnName = view.discriminatorColumn?.constantCaseName;
                        if (columnName != null) {
                            const baseTableDiscriminatorColumn = baseTable.columns[columnName];
                            mapping.discriminatorColumn = baseTableDiscriminatorColumn;
                        }
                    }
                }
            }
            else {
                baseTable == null;
            }
        }
        return result;
    }
}
exports.OrmViewToDerivedClassTransformer = OrmViewToDerivedClassTransformer;
