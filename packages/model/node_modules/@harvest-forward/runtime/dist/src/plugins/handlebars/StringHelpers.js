"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringHelpers = void 0;
const handlebars_1 = __importDefault(require("handlebars"));
class StringHelpers {
    static registerAll() {
        if (this.helpersRegistered)
            return;
        this.helpersRegistered = true;
        handlebars_1.default.registerHelper('SafeString', StringHelpers.prototype.safeString);
        handlebars_1.default.registerHelper('NoCrString', StringHelpers.prototype.noCrString);
        handlebars_1.default.registerHelper('Replace', StringHelpers.prototype.replace);
        handlebars_1.default.registerHelper('ToTsTemplate', StringHelpers.prototype.toTsTemplate);
    }
    safeString(aString) {
        if (aString == null)
            return null;
        return new handlebars_1.default.SafeString(aString);
    }
    noCrString(aString) {
        if (aString == null)
            return null;
        return new handlebars_1.default.SafeString(aString.replace(/\r\n/g, ' ').replace(/\n/g, ' ').replace(/\r/g, ' '));
    }
    replace(anObject, regexText) {
        let result = anObject;
        if (anObject != null && regexText != null) {
            const slashAt = regexText.indexOf('/');
            const searchText = regexText.substring(0, slashAt);
            const searchRegex = new RegExp(searchText);
            const replaceText = regexText.substring(slashAt + 1);
            result = anObject.replace(searchRegex, replaceText);
        }
        return result;
    }
    toTsTemplate(aString) {
        if (aString == null)
            return null;
        const adjusted = aString.replace(/({.*})/g, function (piece) {
            return '$' + piece;
        });
        return adjusted;
    }
}
exports.StringHelpers = StringHelpers;
StringHelpers.helpersRegistered = false;
