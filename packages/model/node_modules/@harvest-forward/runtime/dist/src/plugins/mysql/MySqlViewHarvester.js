"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MySqlViewHarvester = void 0;
const System_1 = require("../../system/System");
const SystemComponentArtifact_1 = require("../../system/SystemComponentArtifact");
const rdbms_basic_1 = require("../rdbms-basic");
const AbstractMySqlSchemaHarvester_1 = require("./AbstractMySqlSchemaHarvester");
class MySqlViewHarvester extends AbstractMySqlSchemaHarvester_1.AbstractMySqlSchemaHarvester {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['queryText'] = `SELECT * FROM information_schema.views`;
        super('MySqlViewHarvester', 'A harvester of basic rdbms views from a specified database', nonNullConfigurationValues);
    }
    harvestRow(system, __db, row) {
        const results = [];
        const viewName = row['TABLE_NAME'];
        const schemaName = row['TABLE_SCHEMA'];
        const fullName = System_1.System.fullConstantCase(viewName, schemaName);
        let view = system.children[fullName];
        if (view == null) {
            view = new rdbms_basic_1.View(schemaName, viewName, '', row['description']);
            results.push(new SystemComponentArtifact_1.SystemComponentArtifact(view));
        }
        else {
            view.queryText = row['VIEW_DEFINITION'];
            if (row['description'] != null)
                view.description = row['description'];
        }
        return results;
    }
}
exports.MySqlViewHarvester = MySqlViewHarvester;
