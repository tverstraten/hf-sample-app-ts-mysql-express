"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MySqlTableHarvester = void 0;
const System_1 = require("../../system/System");
const SystemComponentArtifact_1 = require("../../system/SystemComponentArtifact");
const rdbms_basic_1 = require("../rdbms-basic");
const AbstractMySqlSchemaHarvester_1 = require("./AbstractMySqlSchemaHarvester");
class MySqlTableHarvester extends AbstractMySqlSchemaHarvester_1.AbstractMySqlSchemaHarvester {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['queryText'] = `SELECT * FROM information_schema.tables`;
        super('MySqlTableHarvester', 'A harvester of basic rdbms tables from a specified database', nonNullConfigurationValues);
    }
    harvestRow(system, __db, row) {
        const results = [];
        const name = row['TABLE_NAME'];
        if (rdbms_basic_1.TableTypeInfo.hasName(row['TABLE_TYPE'])) {
            const type = rdbms_basic_1.TableTypeInfo.fromName(row['TABLE_TYPE']);
            if (type == rdbms_basic_1.TableType.table) {
                const newRow = new rdbms_basic_1.Table(row['TABLE_SCHEMA'], name, row['TABLE_COMMENT'], rdbms_basic_1.TableTypeInfo.fromName(row['TABLE_TYPE']));
                if (this.validTable(newRow)) {
                    system.addChild(newRow);
                    results.push(new SystemComponentArtifact_1.SystemComponentArtifact(newRow));
                }
            }
            else {
                const fullName = System_1.System.fullConstantCase(name, row['TABLE_SCHEMA']);
                const view = system.children[fullName];
                if (view == null) {
                    const newRow = new rdbms_basic_1.View(row['TABLE_SCHEMA'], name, '', row['TABLE_COMMENT']);
                    if (this.validView(newRow)) {
                        system.addChild(newRow);
                        results.push(new SystemComponentArtifact_1.SystemComponentArtifact(newRow));
                    }
                }
            }
        }
        return results;
    }
}
exports.MySqlTableHarvester = MySqlTableHarvester;
