"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiscHelpers = void 0;
const handlebars_1 = __importDefault(require("handlebars"));
const SystemComponentReplacer_1 = require("../../util/SystemComponentReplacer");
const utils = require('handlebars-utils');
class MiscHelpers {
    static registerAll() {
        if (this.helpersRegistered)
            return;
        this.helpersRegistered = true;
        handlebars_1.default.registerHelper('Curly', MiscHelpers.prototype.curly);
        handlebars_1.default.registerHelper('Json', MiscHelpers.prototype.json);
        handlebars_1.default.registerHelper('JSONstringifyFormatted', MiscHelpers.prototype.jsonStringifyFormatted);
        handlebars_1.default.registerHelper('RandomString', MiscHelpers.prototype.randomString);
        handlebars_1.default.registerHelper('RandomNumber', MiscHelpers.prototype.randomNumber);
        handlebars_1.default.registerHelper('ifvalue', MiscHelpers.prototype.ifValue);
        handlebars_1.default.registerHelper('ifvaluein', MiscHelpers.prototype.ifValueIn);
        handlebars_1.default.registerHelper('IsNumber', MiscHelpers.prototype.isNumber);
        handlebars_1.default.registerHelper('findComponents', MiscHelpers.prototype.findComponents);
    }
    curly(aString) {
        return `{${aString}}`;
    }
    json(anObject) {
        let result = '';
        if (anObject != null)
            Object.keys(anObject).forEach((key) => {
                const value = anObject[key];
                if (typeof value === 'object')
                    result += `${key}: [object], `;
                else
                    result += `${key}: ${value}, `;
            });
        return `{${result}}`;
    }
    jsonStringifyFormatted(anObject) {
        if (anObject)
            return `${JSON.stringify(anObject, SystemComponentReplacer_1.SystemComponentReplacer, 4)}`;
        return '{}';
    }
    randomString(length) {
        let outString = '';
        const outLength = length == null || length == -1 ? 50 : length;
        const charChoices = '0123456789Aabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for (let index = 0; index < outLength; index++) {
            outString += charChoices.charAt(Math.floor(Math.random() * charChoices.length));
        }
        return outString;
    }
    randomNumber(max) {
        return Math.floor(Math.random() * max);
    }
    ifValue(conditional, options) {
        if (options.hash.equals === conditional)
            return options.fn(this);
        return options.inverse(this);
    }
    ifValueIn(conditional, options) {
        if (typeof options.hash.equals === 'string') {
            const choices = options.hash.equals.split(',');
            for (let index = 0; index < choices.length; index++) {
                choices[index] = choices[index].trim();
            }
            if (choices.includes(conditional))
                return options.fn(this);
        }
        return options.inverse(this);
    }
    isNumber(value, options) {
        if (typeof value === 'number')
            return options.fn(this);
        if (typeof value === 'string') {
            const numericValue = parseFloat(value);
            if (!Number.isNaN(numericValue))
                return options.fn(this);
        }
        return options.inverse(this);
    }
    findComponents(systemComponent, searchCriteria, options) {
        const unsortedMatches = systemComponent.findComponentsByString(searchCriteria.replace(/'/g, '"'));
        const sortedMatches = unsortedMatches.sort((componentA, componentB) => componentA.fullConstantCaseName > componentB.fullConstantCaseName ? 1 : -1);
        const data = utils.createFrame(options, options.hash);
        let buffer = '';
        let index = -1;
        const length = sortedMatches.length;
        while (++index < length) {
            const item = sortedMatches[index];
            data.index = index;
            item.index = index + 1;
            item.total = length;
            item.isFirst = index === 0;
            item.first = index === 0;
            item.isLast = index === length - 1;
            item.last = index === length - 1;
            buffer += options.fn(item, { data: data });
        }
        return buffer;
    }
}
exports.MiscHelpers = MiscHelpers;
MiscHelpers.helpersRegistered = false;
