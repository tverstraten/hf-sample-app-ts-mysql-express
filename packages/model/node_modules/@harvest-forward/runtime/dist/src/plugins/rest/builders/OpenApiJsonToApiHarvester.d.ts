import { AbstractSingularBuilder } from '../../../runtime/AbstractSingularBuilder';
import { Artifact } from '../../../system/Artifact';
import { System } from '../../../system/System';
import { SystemComponent } from '../../../system/SystemComponent';
import { ValueType } from '../../../system/ValueType';
import { Class, Method } from '../../information-architecture';
import { HttpVerb } from '../HttpVerb';
export declare class OpenApiJsonToApiHarvester extends AbstractSingularBuilder {
    constructor(configurationValues?: {
        [key: string]: any;
    });
    valueTypeFromJson(system: System, typeSpec: any): ValueType;
    harvestContentType(system: System, returnContext: any): ValueType;
    harvestParameter(system: System, proxyClass: Class, method: Method, parameterAsJson: any): void;
    harvestFromPathAndVerb(system: System, verb: HttpVerb, pathUrlSpec: string, pathDetails: any): void;
    harvestFromPath(system: System, pathUrlSpec: string, pathDetails: any): void;
    harvestFromFile(system: System, fileNameFullPath: string): Promise<void>;
    _doesConfigurationWork(): Promise<boolean>;
    buildInternal(system: System, __component: SystemComponent): Promise<Artifact[]>;
}
//# sourceMappingURL=OpenApiJsonToApiHarvester.d.ts.map