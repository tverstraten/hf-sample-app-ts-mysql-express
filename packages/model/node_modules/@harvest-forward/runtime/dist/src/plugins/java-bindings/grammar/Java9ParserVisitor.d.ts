export function Java9ParserVisitor(): this;
export class Java9ParserVisitor {
    constructor: typeof Java9ParserVisitor;
    visitLiteral(ctx: any): any;
    visitPrimitiveType(ctx: any): any;
    visitNumericType(ctx: any): any;
    visitIntegralType(ctx: any): any;
    visitFloatingPointType(ctx: any): any;
    visitReferenceType(ctx: any): any;
    visitClassOrInterfaceType(ctx: any): any;
    visitClassType(ctx: any): any;
    visitClassType_lf_classOrInterfaceType(ctx: any): any;
    visitClassType_lfno_classOrInterfaceType(ctx: any): any;
    visitInterfaceType(ctx: any): any;
    visitInterfaceType_lf_classOrInterfaceType(ctx: any): any;
    visitInterfaceType_lfno_classOrInterfaceType(ctx: any): any;
    visitTypeVariable(ctx: any): any;
    visitArrayType(ctx: any): any;
    visitDims(ctx: any): any;
    visitTypeParameter(ctx: any): any;
    visitTypeParameterModifier(ctx: any): any;
    visitTypeBound(ctx: any): any;
    visitAdditionalBound(ctx: any): any;
    visitTypeArguments(ctx: any): any;
    visitTypeArgumentList(ctx: any): any;
    visitTypeArgument(ctx: any): any;
    visitWildcard(ctx: any): any;
    visitWildcardBounds(ctx: any): any;
    visitModuleName(ctx: any): any;
    visitPackageName(ctx: any): any;
    visitTypeName(ctx: any): any;
    visitPackageOrTypeName(ctx: any): any;
    visitExpressionName(ctx: any): any;
    visitMethodName(ctx: any): any;
    visitAmbiguousName(ctx: any): any;
    visitCompilationUnit(ctx: any): any;
    visitOrdinaryCompilation(ctx: any): any;
    visitModularCompilation(ctx: any): any;
    visitPackageDeclaration(ctx: any): any;
    visitPackageModifier(ctx: any): any;
    visitImportDeclaration(ctx: any): any;
    visitSingleTypeImportDeclaration(ctx: any): any;
    visitTypeImportOnDemandDeclaration(ctx: any): any;
    visitSingleStaticImportDeclaration(ctx: any): any;
    visitStaticImportOnDemandDeclaration(ctx: any): any;
    visitTypeDeclaration(ctx: any): any;
    visitModuleDeclaration(ctx: any): any;
    visitModuleDirective(ctx: any): any;
    visitRequiresModifier(ctx: any): any;
    visitClassDeclaration(ctx: any): any;
    visitNormalClassDeclaration(ctx: any): any;
    visitClassModifier(ctx: any): any;
    visitTypeParameters(ctx: any): any;
    visitTypeParameterList(ctx: any): any;
    visitSuperclass(ctx: any): any;
    visitSuperinterfaces(ctx: any): any;
    visitInterfaceTypeList(ctx: any): any;
    visitClassBody(ctx: any): any;
    visitClassBodyDeclaration(ctx: any): any;
    visitClassMemberDeclaration(ctx: any): any;
    visitFieldDeclaration(ctx: any): any;
    visitFieldModifier(ctx: any): any;
    visitVariableDeclaratorList(ctx: any): any;
    visitVariableDeclarator(ctx: any): any;
    visitVariableDeclaratorId(ctx: any): any;
    visitVariableInitializer(ctx: any): any;
    visitUnannType(ctx: any): any;
    visitUnannPrimitiveType(ctx: any): any;
    visitUnannReferenceType(ctx: any): any;
    visitUnannClassOrInterfaceType(ctx: any): any;
    visitUnannClassType(ctx: any): any;
    visitUnannClassType_lf_unannClassOrInterfaceType(ctx: any): any;
    visitUnannClassType_lfno_unannClassOrInterfaceType(ctx: any): any;
    visitUnannInterfaceType(ctx: any): any;
    visitUnannInterfaceType_lf_unannClassOrInterfaceType(ctx: any): any;
    visitUnannInterfaceType_lfno_unannClassOrInterfaceType(ctx: any): any;
    visitUnannTypeVariable(ctx: any): any;
    visitUnannArrayType(ctx: any): any;
    visitMethodDeclaration(ctx: any): any;
    visitMethodModifier(ctx: any): any;
    visitMethodHeader(ctx: any): any;
    visitResult(ctx: any): any;
    visitMethodDeclarator(ctx: any): any;
    visitFormalParameterList(ctx: any): any;
    visitFormalParameters(ctx: any): any;
    visitFormalParameter(ctx: any): any;
    visitVariableModifier(ctx: any): any;
    visitLastFormalParameter(ctx: any): any;
    visitReceiverParameter(ctx: any): any;
    visitThrows_(ctx: any): any;
    visitExceptionTypeList(ctx: any): any;
    visitExceptionType(ctx: any): any;
    visitMethodBody(ctx: any): any;
    visitInstanceInitializer(ctx: any): any;
    visitStaticInitializer(ctx: any): any;
    visitConstructorDeclaration(ctx: any): any;
    visitConstructorModifier(ctx: any): any;
    visitConstructorDeclarator(ctx: any): any;
    visitSimpleTypeName(ctx: any): any;
    visitConstructorBody(ctx: any): any;
    visitExplicitConstructorInvocation(ctx: any): any;
    visitEnumDeclaration(ctx: any): any;
    visitEnumBody(ctx: any): any;
    visitEnumConstantList(ctx: any): any;
    visitEnumConstant(ctx: any): any;
    visitEnumConstantModifier(ctx: any): any;
    visitEnumBodyDeclarations(ctx: any): any;
    visitInterfaceDeclaration(ctx: any): any;
    visitNormalInterfaceDeclaration(ctx: any): any;
    visitInterfaceModifier(ctx: any): any;
    visitExtendsInterfaces(ctx: any): any;
    visitInterfaceBody(ctx: any): any;
    visitInterfaceMemberDeclaration(ctx: any): any;
    visitConstantDeclaration(ctx: any): any;
    visitConstantModifier(ctx: any): any;
    visitInterfaceMethodDeclaration(ctx: any): any;
    visitInterfaceMethodModifier(ctx: any): any;
    visitAnnotationTypeDeclaration(ctx: any): any;
    visitAnnotationTypeBody(ctx: any): any;
    visitAnnotationTypeMemberDeclaration(ctx: any): any;
    visitAnnotationTypeElementDeclaration(ctx: any): any;
    visitAnnotationTypeElementModifier(ctx: any): any;
    visitDefaultValue(ctx: any): any;
    visitAnnotation(ctx: any): any;
    visitNormalAnnotation(ctx: any): any;
    visitElementValuePairList(ctx: any): any;
    visitElementValuePair(ctx: any): any;
    visitElementValue(ctx: any): any;
    visitElementValueArrayInitializer(ctx: any): any;
    visitElementValueList(ctx: any): any;
    visitMarkerAnnotation(ctx: any): any;
    visitSingleElementAnnotation(ctx: any): any;
    visitArrayInitializer(ctx: any): any;
    visitVariableInitializerList(ctx: any): any;
    visitBlock(ctx: any): any;
    visitBlockStatements(ctx: any): any;
    visitBlockStatement(ctx: any): any;
    visitLocalVariableDeclarationStatement(ctx: any): any;
    visitLocalVariableDeclaration(ctx: any): any;
    visitStatement(ctx: any): any;
    visitStatementNoShortIf(ctx: any): any;
    visitStatementWithoutTrailingSubstatement(ctx: any): any;
    visitEmptyStatement(ctx: any): any;
    visitLabeledStatement(ctx: any): any;
    visitLabeledStatementNoShortIf(ctx: any): any;
    visitExpressionStatement(ctx: any): any;
    visitStatementExpression(ctx: any): any;
    visitIfThenStatement(ctx: any): any;
    visitIfThenElseStatement(ctx: any): any;
    visitIfThenElseStatementNoShortIf(ctx: any): any;
    visitAssertStatement(ctx: any): any;
    visitSwitchStatement(ctx: any): any;
    visitSwitchBlock(ctx: any): any;
    visitSwitchBlockStatementGroup(ctx: any): any;
    visitSwitchLabels(ctx: any): any;
    visitSwitchLabel(ctx: any): any;
    visitEnumConstantName(ctx: any): any;
    visitWhileStatement(ctx: any): any;
    visitWhileStatementNoShortIf(ctx: any): any;
    visitDoStatement(ctx: any): any;
    visitForStatement(ctx: any): any;
    visitForStatementNoShortIf(ctx: any): any;
    visitBasicForStatement(ctx: any): any;
    visitBasicForStatementNoShortIf(ctx: any): any;
    visitForInit(ctx: any): any;
    visitForUpdate(ctx: any): any;
    visitStatementExpressionList(ctx: any): any;
    visitEnhancedForStatement(ctx: any): any;
    visitEnhancedForStatementNoShortIf(ctx: any): any;
    visitBreakStatement(ctx: any): any;
    visitContinueStatement(ctx: any): any;
    visitReturnStatement(ctx: any): any;
    visitThrowStatement(ctx: any): any;
    visitSynchronizedStatement(ctx: any): any;
    visitTryStatement(ctx: any): any;
    visitCatches(ctx: any): any;
    visitCatchClause(ctx: any): any;
    visitCatchFormalParameter(ctx: any): any;
    visitCatchType(ctx: any): any;
    visitFinally_(ctx: any): any;
    visitTryWithResourcesStatement(ctx: any): any;
    visitResourceSpecification(ctx: any): any;
    visitResourceList(ctx: any): any;
    visitResource(ctx: any): any;
    visitVariableAccess(ctx: any): any;
    visitPrimary(ctx: any): any;
    visitPrimaryNoNewArray(ctx: any): any;
    visitPrimaryNoNewArray_lf_arrayAccess(ctx: any): any;
    visitPrimaryNoNewArray_lfno_arrayAccess(ctx: any): any;
    visitPrimaryNoNewArray_lf_primary(ctx: any): any;
    visitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(ctx: any): any;
    visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(ctx: any): any;
    visitPrimaryNoNewArray_lfno_primary(ctx: any): any;
    visitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(ctx: any): any;
    visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(ctx: any): any;
    visitClassLiteral(ctx: any): any;
    visitClassInstanceCreationExpression(ctx: any): any;
    visitClassInstanceCreationExpression_lf_primary(ctx: any): any;
    visitClassInstanceCreationExpression_lfno_primary(ctx: any): any;
    visitTypeArgumentsOrDiamond(ctx: any): any;
    visitFieldAccess(ctx: any): any;
    visitFieldAccess_lf_primary(ctx: any): any;
    visitFieldAccess_lfno_primary(ctx: any): any;
    visitArrayAccess(ctx: any): any;
    visitArrayAccess_lf_primary(ctx: any): any;
    visitArrayAccess_lfno_primary(ctx: any): any;
    visitMethodInvocation(ctx: any): any;
    visitMethodInvocation_lf_primary(ctx: any): any;
    visitMethodInvocation_lfno_primary(ctx: any): any;
    visitArgumentList(ctx: any): any;
    visitMethodReference(ctx: any): any;
    visitMethodReference_lf_primary(ctx: any): any;
    visitMethodReference_lfno_primary(ctx: any): any;
    visitArrayCreationExpression(ctx: any): any;
    visitDimExprs(ctx: any): any;
    visitDimExpr(ctx: any): any;
    visitConstantExpression(ctx: any): any;
    visitExpression(ctx: any): any;
    visitLambdaExpression(ctx: any): any;
    visitLambdaParameters(ctx: any): any;
    visitInferredFormalParameterList(ctx: any): any;
    visitLambdaBody(ctx: any): any;
    visitAssignmentExpression(ctx: any): any;
    visitAssignment(ctx: any): any;
    visitLeftHandSide(ctx: any): any;
    visitAssignmentOperator(ctx: any): any;
    visitConditionalExpression(ctx: any): any;
    visitConditionalOrExpression(ctx: any): any;
    visitConditionalAndExpression(ctx: any): any;
    visitInclusiveOrExpression(ctx: any): any;
    visitExclusiveOrExpression(ctx: any): any;
    visitAndExpression(ctx: any): any;
    visitEqualityExpression(ctx: any): any;
    visitRelationalExpression(ctx: any): any;
    visitShiftExpression(ctx: any): any;
    visitAdditiveExpression(ctx: any): any;
    visitMultiplicativeExpression(ctx: any): any;
    visitUnaryExpression(ctx: any): any;
    visitPreIncrementExpression(ctx: any): any;
    visitPreDecrementExpression(ctx: any): any;
    visitUnaryExpressionNotPlusMinus(ctx: any): any;
    visitPostfixExpression(ctx: any): any;
    visitPostIncrementExpression(ctx: any): any;
    visitPostIncrementExpression_lf_postfixExpression(ctx: any): any;
    visitPostDecrementExpression(ctx: any): any;
    visitPostDecrementExpression_lf_postfixExpression(ctx: any): any;
    visitCastExpression(ctx: any): any;
    visitIdentifier(ctx: any): any;
}
//# sourceMappingURL=Java9ParserVisitor.d.ts.map