declare class PhpLexer {
    static grammarFileName: string;
    static channelNames: string[];
    static modeNames: string[];
    static literalNames: (string | null)[];
    static symbolicNames: (string | null)[];
    static ruleNames: string[];
    constructor(input: any);
    _interp: any;
    get atn(): any;
    action(localctx: any, ruleIndex: any, actionIndex: any): void;
    HtmlScriptOpen_action(localctx: any, actionIndex: any): void;
    HtmlStyleOpen_action(localctx: any, actionIndex: any): void;
    HtmlClose_action(localctx: any, actionIndex: any): void;
    CloseCurlyBracket_action(localctx: any, actionIndex: any): void;
    CurlyDollar_action(localctx: any, actionIndex: any): void;
    sempred(localctx: any, ruleIndex: any, predIndex: any): any;
    Shebang_sempred(localctx: any, predIndex: any): any;
    PHPEnd_sempred(localctx: any, predIndex: any): any;
    StartNowDoc_sempred(localctx: any, predIndex: any): any;
    StartHereDoc_sempred(localctx: any, predIndex: any): any;
    CurlyDollar_sempred(localctx: any, predIndex: any): any;
    PhpStartEchoFragment_sempred(localctx: any, predIndex: any): any;
    PhpStartFragment_sempred(localctx: any, predIndex: any): any;
}
declare namespace PhpLexer {
    const EOF: any;
    const SeaWhitespace: number;
    const HtmlText: number;
    const XmlStart: number;
    const PHPStart: number;
    const HtmlScriptOpen: number;
    const HtmlStyleOpen: number;
    const HtmlComment: number;
    const HtmlDtd: number;
    const HtmlOpen: number;
    const Shebang: number;
    const Error: number;
    const XmlText: number;
    const XmlClose: number;
    const PHPStartInside: number;
    const HtmlClose: number;
    const HtmlSlashClose: number;
    const HtmlSlash: number;
    const HtmlEquals: number;
    const HtmlStartQuoteString: number;
    const HtmlStartDoubleQuoteString: number;
    const HtmlHex: number;
    const HtmlDecimal: number;
    const HtmlSpace: number;
    const HtmlName: number;
    const ErrorInside: number;
    const PHPStartInsideQuoteString: number;
    const HtmlEndQuoteString: number;
    const HtmlQuoteString: number;
    const ErrorHtmlQuote: number;
    const PHPStartDoubleQuoteString: number;
    const HtmlEndDoubleQuoteString: number;
    const HtmlDoubleQuoteString: number;
    const ErrorHtmlDoubleQuote: number;
    const ScriptText: number;
    const HtmlScriptClose: number;
    const PHPStartInsideScript: number;
    const StyleBody: number;
    const PHPEnd: number;
    const Whitespace: number;
    const MultiLineComment: number;
    const SingleLineComment: number;
    const ShellStyleComment: number;
    const AttributeStart: number;
    const Abstract: number;
    const Array: number;
    const As: number;
    const BinaryCast: number;
    const BoolType: number;
    const BooleanConstant: number;
    const Break: number;
    const Callable: number;
    const Case: number;
    const Catch: number;
    const Class: number;
    const Clone: number;
    const Const: number;
    const Continue: number;
    const Declare: number;
    const Default: number;
    const Do: number;
    const DoubleCast: number;
    const DoubleType: number;
    const Echo: number;
    const Else: number;
    const ElseIf: number;
    const Empty: number;
    const EndDeclare: number;
    const EndFor: number;
    const EndForeach: number;
    const EndIf: number;
    const EndSwitch: number;
    const EndWhile: number;
    const Eval: number;
    const Exit: number;
    const Extends: number;
    const Final: number;
    const Finally: number;
    const FloatCast: number;
    const For: number;
    const Foreach: number;
    const Function: number;
    const Global: number;
    const Goto: number;
    const If: number;
    const Implements: number;
    const Import: number;
    const Include: number;
    const IncludeOnce: number;
    const InstanceOf: number;
    const InsteadOf: number;
    const Int8Cast: number;
    const Int16Cast: number;
    const Int64Type: number;
    const IntType: number;
    const Interface: number;
    const IsSet: number;
    const List: number;
    const LogicalAnd: number;
    const LogicalOr: number;
    const LogicalXor: number;
    const Match: number;
    const Namespace: number;
    const New: number;
    const Null: number;
    const ObjectType: number;
    const Parent_: number;
    const Partial: number;
    const Print: number;
    const Private: number;
    const Protected: number;
    const Public: number;
    const Require: number;
    const RequireOnce: number;
    const Resource: number;
    const Return: number;
    const Static: number;
    const StringType: number;
    const Switch: number;
    const Throw: number;
    const Trait: number;
    const Try: number;
    const Typeof: number;
    const UintCast: number;
    const UnicodeCast: number;
    const Unset: number;
    const Use: number;
    const Var: number;
    const While: number;
    const Yield: number;
    const From: number;
    const LambdaFn: number;
    const Get: number;
    const Set: number;
    const Call: number;
    const CallStatic: number;
    const Constructor: number;
    const Destruct: number;
    const Wakeup: number;
    const Sleep: number;
    const Autoload: number;
    const IsSet__: number;
    const Unset__: number;
    const ToString__: number;
    const Invoke: number;
    const SetState: number;
    const Clone__: number;
    const DebugInfo: number;
    const Namespace__: number;
    const Class__: number;
    const Traic__: number;
    const Function__: number;
    const Method__: number;
    const Line__: number;
    const File__: number;
    const Dir__: number;
    const Spaceship: number;
    const Lgeneric: number;
    const Rgeneric: number;
    const DoubleArrow: number;
    const Inc: number;
    const Dec: number;
    const IsIdentical: number;
    const IsNoidentical: number;
    const IsEqual: number;
    const IsNotEq: number;
    const IsSmallerOrEqual: number;
    const IsGreaterOrEqual: number;
    const PlusEqual: number;
    const MinusEqual: number;
    const MulEqual: number;
    const Pow: number;
    const PowEqual: number;
    const DivEqual: number;
    const Concaequal: number;
    const ModEqual: number;
    const ShiftLeftEqual: number;
    const ShiftRightEqual: number;
    const AndEqual: number;
    const OrEqual: number;
    const XorEqual: number;
    const BooleanOr: number;
    const BooleanAnd: number;
    const NullCoalescing: number;
    const NullCoalescingEqual: number;
    const ShiftLeft: number;
    const ShiftRight: number;
    const DoubleColon: number;
    const ObjectOperator: number;
    const NamespaceSeparator: number;
    const Ellipsis: number;
    const Less: number;
    const Greater: number;
    const Ampersand: number;
    const Pipe: number;
    const Bang: number;
    const Caret: number;
    const Plus: number;
    const Minus: number;
    const Asterisk: number;
    const Percent: number;
    const Divide: number;
    const Tilde: number;
    const SuppressWarnings: number;
    const Dollar: number;
    const Dot: number;
    const QuestionMark: number;
    const OpenRoundBracket: number;
    const CloseRoundBracket: number;
    const OpenSquareBracket: number;
    const CloseSquareBracket: number;
    const OpenCurlyBracket: number;
    const CloseCurlyBracket: number;
    const Comma: number;
    const Colon: number;
    const SemiColon: number;
    const Eq: number;
    const Quote: number;
    const BackQuote: number;
    const VarName: number;
    const Label: number;
    const Octal: number;
    const Decimal: number;
    const Real: number;
    const Hex: number;
    const Binary: number;
    const BackQuoteString: number;
    const SingleQuoteString: number;
    const DoubleQuote: number;
    const StartNowDoc: number;
    const StartHereDoc: number;
    const ErrorPhp: number;
    const CurlyDollar: number;
    const UnicodeEscape: number;
    const StringPart: number;
    const Comment: number;
    const PHPEndSingleLineComment: number;
    const CommentEnd: number;
    const HereDocText: number;
    const XmlText2: number;
    const PhpComments: number;
    const ErrorLexem: number;
    const SkipChannel: number;
    const XML: number;
    const INSIDE: number;
    const HtmlQuoteStringMode: number;
    const HtmlDoubleQuoteStringMode: number;
    const SCRIPT: number;
    const STYLE: number;
    const PHP: number;
    const InterpolationString: number;
    const SingleLineCommentMode: number;
    const HereDoc: number;
}
export default PhpLexer;
//# sourceMappingURL=PhpLexer.d.ts.map