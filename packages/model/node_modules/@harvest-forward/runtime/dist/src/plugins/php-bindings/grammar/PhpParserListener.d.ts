export default class PhpParserListener {
    enterHtmlDocument(ctx: any): void;
    exitHtmlDocument(ctx: any): void;
    enterInlineHtml(ctx: any): void;
    exitInlineHtml(ctx: any): void;
    enterHtmlElement(ctx: any): void;
    exitHtmlElement(ctx: any): void;
    enterScriptText(ctx: any): void;
    exitScriptText(ctx: any): void;
    enterPhpBlock(ctx: any): void;
    exitPhpBlock(ctx: any): void;
    enterImportStatement(ctx: any): void;
    exitImportStatement(ctx: any): void;
    enterTopStatement(ctx: any): void;
    exitTopStatement(ctx: any): void;
    enterUseDeclaration(ctx: any): void;
    exitUseDeclaration(ctx: any): void;
    enterUseDeclarationContentList(ctx: any): void;
    exitUseDeclarationContentList(ctx: any): void;
    enterUseDeclarationContent(ctx: any): void;
    exitUseDeclarationContent(ctx: any): void;
    enterNamespaceDeclaration(ctx: any): void;
    exitNamespaceDeclaration(ctx: any): void;
    enterNamespaceStatement(ctx: any): void;
    exitNamespaceStatement(ctx: any): void;
    enterFunctionDeclaration(ctx: any): void;
    exitFunctionDeclaration(ctx: any): void;
    enterClassDeclaration(ctx: any): void;
    exitClassDeclaration(ctx: any): void;
    enterClassEntryType(ctx: any): void;
    exitClassEntryType(ctx: any): void;
    enterInterfaceList(ctx: any): void;
    exitInterfaceList(ctx: any): void;
    enterTypeParameterListInBrackets(ctx: any): void;
    exitTypeParameterListInBrackets(ctx: any): void;
    enterTypeParameterList(ctx: any): void;
    exitTypeParameterList(ctx: any): void;
    enterTypeParameterWithDefaultsList(ctx: any): void;
    exitTypeParameterWithDefaultsList(ctx: any): void;
    enterTypeParameterDecl(ctx: any): void;
    exitTypeParameterDecl(ctx: any): void;
    enterTypeParameterWithDefaultDecl(ctx: any): void;
    exitTypeParameterWithDefaultDecl(ctx: any): void;
    enterGenericDynamicArgs(ctx: any): void;
    exitGenericDynamicArgs(ctx: any): void;
    enterAttributes(ctx: any): void;
    exitAttributes(ctx: any): void;
    enterAttributeGroup(ctx: any): void;
    exitAttributeGroup(ctx: any): void;
    enterAttribute(ctx: any): void;
    exitAttribute(ctx: any): void;
    enterInnerStatementList(ctx: any): void;
    exitInnerStatementList(ctx: any): void;
    enterInnerStatement(ctx: any): void;
    exitInnerStatement(ctx: any): void;
    enterStatement(ctx: any): void;
    exitStatement(ctx: any): void;
    enterEmptyStatement(ctx: any): void;
    exitEmptyStatement(ctx: any): void;
    enterBlockStatement(ctx: any): void;
    exitBlockStatement(ctx: any): void;
    enterIfStatement(ctx: any): void;
    exitIfStatement(ctx: any): void;
    enterElseIfStatement(ctx: any): void;
    exitElseIfStatement(ctx: any): void;
    enterElseIfColonStatement(ctx: any): void;
    exitElseIfColonStatement(ctx: any): void;
    enterElseStatement(ctx: any): void;
    exitElseStatement(ctx: any): void;
    enterElseColonStatement(ctx: any): void;
    exitElseColonStatement(ctx: any): void;
    enterWhileStatement(ctx: any): void;
    exitWhileStatement(ctx: any): void;
    enterDoWhileStatement(ctx: any): void;
    exitDoWhileStatement(ctx: any): void;
    enterForStatement(ctx: any): void;
    exitForStatement(ctx: any): void;
    enterForInit(ctx: any): void;
    exitForInit(ctx: any): void;
    enterForUpdate(ctx: any): void;
    exitForUpdate(ctx: any): void;
    enterSwitchStatement(ctx: any): void;
    exitSwitchStatement(ctx: any): void;
    enterSwitchBlock(ctx: any): void;
    exitSwitchBlock(ctx: any): void;
    enterBreakStatement(ctx: any): void;
    exitBreakStatement(ctx: any): void;
    enterContinueStatement(ctx: any): void;
    exitContinueStatement(ctx: any): void;
    enterReturnStatement(ctx: any): void;
    exitReturnStatement(ctx: any): void;
    enterExpressionStatement(ctx: any): void;
    exitExpressionStatement(ctx: any): void;
    enterUnsetStatement(ctx: any): void;
    exitUnsetStatement(ctx: any): void;
    enterForeachStatement(ctx: any): void;
    exitForeachStatement(ctx: any): void;
    enterTryCatchFinally(ctx: any): void;
    exitTryCatchFinally(ctx: any): void;
    enterCatchClause(ctx: any): void;
    exitCatchClause(ctx: any): void;
    enterFinallyStatement(ctx: any): void;
    exitFinallyStatement(ctx: any): void;
    enterThrowStatement(ctx: any): void;
    exitThrowStatement(ctx: any): void;
    enterGotoStatement(ctx: any): void;
    exitGotoStatement(ctx: any): void;
    enterDeclareStatement(ctx: any): void;
    exitDeclareStatement(ctx: any): void;
    enterInlineHtmlStatement(ctx: any): void;
    exitInlineHtmlStatement(ctx: any): void;
    enterDeclareList(ctx: any): void;
    exitDeclareList(ctx: any): void;
    enterFormalParameterList(ctx: any): void;
    exitFormalParameterList(ctx: any): void;
    enterFormalParameter(ctx: any): void;
    exitFormalParameter(ctx: any): void;
    enterTypeHint(ctx: any): void;
    exitTypeHint(ctx: any): void;
    enterGlobalStatement(ctx: any): void;
    exitGlobalStatement(ctx: any): void;
    enterGlobalVar(ctx: any): void;
    exitGlobalVar(ctx: any): void;
    enterEchoStatement(ctx: any): void;
    exitEchoStatement(ctx: any): void;
    enterStaticVariableStatement(ctx: any): void;
    exitStaticVariableStatement(ctx: any): void;
    enterClassStatement(ctx: any): void;
    exitClassStatement(ctx: any): void;
    enterTraitAdaptations(ctx: any): void;
    exitTraitAdaptations(ctx: any): void;
    enterTraitAdaptationStatement(ctx: any): void;
    exitTraitAdaptationStatement(ctx: any): void;
    enterTraitPrecedence(ctx: any): void;
    exitTraitPrecedence(ctx: any): void;
    enterTraitAlias(ctx: any): void;
    exitTraitAlias(ctx: any): void;
    enterTraitMethodReference(ctx: any): void;
    exitTraitMethodReference(ctx: any): void;
    enterBaseCtorCall(ctx: any): void;
    exitBaseCtorCall(ctx: any): void;
    enterMethodBody(ctx: any): void;
    exitMethodBody(ctx: any): void;
    enterPropertyModifiers(ctx: any): void;
    exitPropertyModifiers(ctx: any): void;
    enterMemberModifiers(ctx: any): void;
    exitMemberModifiers(ctx: any): void;
    enterVariableInitializer(ctx: any): void;
    exitVariableInitializer(ctx: any): void;
    enterIdentifierInitializer(ctx: any): void;
    exitIdentifierInitializer(ctx: any): void;
    enterGlobalConstantDeclaration(ctx: any): void;
    exitGlobalConstantDeclaration(ctx: any): void;
    enterExpressionList(ctx: any): void;
    exitExpressionList(ctx: any): void;
    enterParentheses(ctx: any): void;
    exitParentheses(ctx: any): void;
    enterChainExpression(ctx: any): void;
    exitChainExpression(ctx: any): void;
    enterSpecialWordExpression(ctx: any): void;
    exitSpecialWordExpression(ctx: any): void;
    enterArrayCreationExpression(ctx: any): void;
    exitArrayCreationExpression(ctx: any): void;
    enterBackQuoteStringExpression(ctx: any): void;
    exitBackQuoteStringExpression(ctx: any): void;
    enterMatchExpression(ctx: any): void;
    exitMatchExpression(ctx: any): void;
    enterLogicalExpression(ctx: any): void;
    exitLogicalExpression(ctx: any): void;
    enterPrintExpression(ctx: any): void;
    exitPrintExpression(ctx: any): void;
    enterAssignmentExpression(ctx: any): void;
    exitAssignmentExpression(ctx: any): void;
    enterPostfixIncDecExpression(ctx: any): void;
    exitPostfixIncDecExpression(ctx: any): void;
    enterCloneExpression(ctx: any): void;
    exitCloneExpression(ctx: any): void;
    enterUnaryOperatorExpression(ctx: any): void;
    exitUnaryOperatorExpression(ctx: any): void;
    enterNewExpression(ctx: any): void;
    exitNewExpression(ctx: any): void;
    enterParenthesisExpression(ctx: any): void;
    exitParenthesisExpression(ctx: any): void;
    enterSpaceshipExpression(ctx: any): void;
    exitSpaceshipExpression(ctx: any): void;
    enterConditionalExpression(ctx: any): void;
    exitConditionalExpression(ctx: any): void;
    enterNullCoalescingExpression(ctx: any): void;
    exitNullCoalescingExpression(ctx: any): void;
    enterArithmeticExpression(ctx: any): void;
    exitArithmeticExpression(ctx: any): void;
    enterIndexerExpression(ctx: any): void;
    exitIndexerExpression(ctx: any): void;
    enterScalarExpression(ctx: any): void;
    exitScalarExpression(ctx: any): void;
    enterPrefixIncDecExpression(ctx: any): void;
    exitPrefixIncDecExpression(ctx: any): void;
    enterComparisonExpression(ctx: any): void;
    exitComparisonExpression(ctx: any): void;
    enterCastExpression(ctx: any): void;
    exitCastExpression(ctx: any): void;
    enterInstanceOfExpression(ctx: any): void;
    exitInstanceOfExpression(ctx: any): void;
    enterLambdaFunctionExpression(ctx: any): void;
    exitLambdaFunctionExpression(ctx: any): void;
    enterBitwiseExpression(ctx: any): void;
    exitBitwiseExpression(ctx: any): void;
    enterAssignable(ctx: any): void;
    exitAssignable(ctx: any): void;
    enterArrayCreation(ctx: any): void;
    exitArrayCreation(ctx: any): void;
    enterLambdaFunctionExpr(ctx: any): void;
    exitLambdaFunctionExpr(ctx: any): void;
    enterMatchExpr(ctx: any): void;
    exitMatchExpr(ctx: any): void;
    enterMatchItem(ctx: any): void;
    exitMatchItem(ctx: any): void;
    enterNewExpr(ctx: any): void;
    exitNewExpr(ctx: any): void;
    enterAssignmentOperator(ctx: any): void;
    exitAssignmentOperator(ctx: any): void;
    enterYieldExpression(ctx: any): void;
    exitYieldExpression(ctx: any): void;
    enterArrayItemList(ctx: any): void;
    exitArrayItemList(ctx: any): void;
    enterArrayItem(ctx: any): void;
    exitArrayItem(ctx: any): void;
    enterLambdaFunctionUseVars(ctx: any): void;
    exitLambdaFunctionUseVars(ctx: any): void;
    enterLambdaFunctionUseVar(ctx: any): void;
    exitLambdaFunctionUseVar(ctx: any): void;
    enterQualifiedStaticTypeRef(ctx: any): void;
    exitQualifiedStaticTypeRef(ctx: any): void;
    enterTypeRef(ctx: any): void;
    exitTypeRef(ctx: any): void;
    enterAnonymousClass(ctx: any): void;
    exitAnonymousClass(ctx: any): void;
    enterIndirectTypeRef(ctx: any): void;
    exitIndirectTypeRef(ctx: any): void;
    enterQualifiedNamespaceName(ctx: any): void;
    exitQualifiedNamespaceName(ctx: any): void;
    enterNamespaceNameList(ctx: any): void;
    exitNamespaceNameList(ctx: any): void;
    enterNamespaceNameTail(ctx: any): void;
    exitNamespaceNameTail(ctx: any): void;
    enterQualifiedNamespaceNameList(ctx: any): void;
    exitQualifiedNamespaceNameList(ctx: any): void;
    enterArguments(ctx: any): void;
    exitArguments(ctx: any): void;
    enterActualArgument(ctx: any): void;
    exitActualArgument(ctx: any): void;
    enterArgumentName(ctx: any): void;
    exitArgumentName(ctx: any): void;
    enterConstantInitializer(ctx: any): void;
    exitConstantInitializer(ctx: any): void;
    enterConstant(ctx: any): void;
    exitConstant(ctx: any): void;
    enterLiteralConstant(ctx: any): void;
    exitLiteralConstant(ctx: any): void;
    enterNumericConstant(ctx: any): void;
    exitNumericConstant(ctx: any): void;
    enterClassConstant(ctx: any): void;
    exitClassConstant(ctx: any): void;
    enterStringConstant(ctx: any): void;
    exitStringConstant(ctx: any): void;
    enterString(ctx: any): void;
    exitString(ctx: any): void;
    enterInterpolatedStringPart(ctx: any): void;
    exitInterpolatedStringPart(ctx: any): void;
    enterChainList(ctx: any): void;
    exitChainList(ctx: any): void;
    enterChain(ctx: any): void;
    exitChain(ctx: any): void;
    enterChainOrigin(ctx: any): void;
    exitChainOrigin(ctx: any): void;
    enterMemberAccess(ctx: any): void;
    exitMemberAccess(ctx: any): void;
    enterFunctionCall(ctx: any): void;
    exitFunctionCall(ctx: any): void;
    enterFunctionCallName(ctx: any): void;
    exitFunctionCallName(ctx: any): void;
    enterActualArguments(ctx: any): void;
    exitActualArguments(ctx: any): void;
    enterChainBase(ctx: any): void;
    exitChainBase(ctx: any): void;
    enterKeyedFieldName(ctx: any): void;
    exitKeyedFieldName(ctx: any): void;
    enterKeyedSimpleFieldName(ctx: any): void;
    exitKeyedSimpleFieldName(ctx: any): void;
    enterKeyedVariable(ctx: any): void;
    exitKeyedVariable(ctx: any): void;
    enterSquareCurlyExpression(ctx: any): void;
    exitSquareCurlyExpression(ctx: any): void;
    enterAssignmentList(ctx: any): void;
    exitAssignmentList(ctx: any): void;
    enterAssignmentListElement(ctx: any): void;
    exitAssignmentListElement(ctx: any): void;
    enterModifier(ctx: any): void;
    exitModifier(ctx: any): void;
    enterIdentifier(ctx: any): void;
    exitIdentifier(ctx: any): void;
    enterMemberModifier(ctx: any): void;
    exitMemberModifier(ctx: any): void;
    enterMagicConstant(ctx: any): void;
    exitMagicConstant(ctx: any): void;
    enterMagicMethod(ctx: any): void;
    exitMagicMethod(ctx: any): void;
    enterPrimitiveType(ctx: any): void;
    exitPrimitiveType(ctx: any): void;
    enterCastOperation(ctx: any): void;
    exitCastOperation(ctx: any): void;
}
//# sourceMappingURL=PhpParserListener.d.ts.map