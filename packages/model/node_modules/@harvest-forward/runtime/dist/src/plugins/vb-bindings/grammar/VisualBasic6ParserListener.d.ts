export default class VisualBasic6ParserListener {
    enterStartRule(ctx: any): void;
    exitStartRule(ctx: any): void;
    enterModule(ctx: any): void;
    exitModule(ctx: any): void;
    enterModuleReferences(ctx: any): void;
    exitModuleReferences(ctx: any): void;
    enterModuleReference(ctx: any): void;
    exitModuleReference(ctx: any): void;
    enterModuleReferenceValue(ctx: any): void;
    exitModuleReferenceValue(ctx: any): void;
    enterModuleReferenceComponent(ctx: any): void;
    exitModuleReferenceComponent(ctx: any): void;
    enterModuleHeader(ctx: any): void;
    exitModuleHeader(ctx: any): void;
    enterModuleConfig(ctx: any): void;
    exitModuleConfig(ctx: any): void;
    enterModuleConfigElement(ctx: any): void;
    exitModuleConfigElement(ctx: any): void;
    enterModuleAttributes(ctx: any): void;
    exitModuleAttributes(ctx: any): void;
    enterModuleOptions(ctx: any): void;
    exitModuleOptions(ctx: any): void;
    enterOptionBaseStmt(ctx: any): void;
    exitOptionBaseStmt(ctx: any): void;
    enterOptionCompareStmt(ctx: any): void;
    exitOptionCompareStmt(ctx: any): void;
    enterOptionExplicitStmt(ctx: any): void;
    exitOptionExplicitStmt(ctx: any): void;
    enterOptionPrivateModuleStmt(ctx: any): void;
    exitOptionPrivateModuleStmt(ctx: any): void;
    enterModuleBody(ctx: any): void;
    exitModuleBody(ctx: any): void;
    enterModuleBodyElement(ctx: any): void;
    exitModuleBodyElement(ctx: any): void;
    enterControlProperties(ctx: any): void;
    exitControlProperties(ctx: any): void;
    enterCp_Properties(ctx: any): void;
    exitCp_Properties(ctx: any): void;
    enterCp_SingleProperty(ctx: any): void;
    exitCp_SingleProperty(ctx: any): void;
    enterCp_PropertyName(ctx: any): void;
    exitCp_PropertyName(ctx: any): void;
    enterCp_PropertyValue(ctx: any): void;
    exitCp_PropertyValue(ctx: any): void;
    enterCp_NestedProperty(ctx: any): void;
    exitCp_NestedProperty(ctx: any): void;
    enterCp_ControlType(ctx: any): void;
    exitCp_ControlType(ctx: any): void;
    enterCp_ControlIdentifier(ctx: any): void;
    exitCp_ControlIdentifier(ctx: any): void;
    enterModuleBlock(ctx: any): void;
    exitModuleBlock(ctx: any): void;
    enterAttributeStmt(ctx: any): void;
    exitAttributeStmt(ctx: any): void;
    enterBlock(ctx: any): void;
    exitBlock(ctx: any): void;
    enterBlockStmt(ctx: any): void;
    exitBlockStmt(ctx: any): void;
    enterAppActivateStmt(ctx: any): void;
    exitAppActivateStmt(ctx: any): void;
    enterBeepStmt(ctx: any): void;
    exitBeepStmt(ctx: any): void;
    enterChDirStmt(ctx: any): void;
    exitChDirStmt(ctx: any): void;
    enterChDriveStmt(ctx: any): void;
    exitChDriveStmt(ctx: any): void;
    enterCloseStmt(ctx: any): void;
    exitCloseStmt(ctx: any): void;
    enterConstStmt(ctx: any): void;
    exitConstStmt(ctx: any): void;
    enterConstSubStmt(ctx: any): void;
    exitConstSubStmt(ctx: any): void;
    enterDateStmt(ctx: any): void;
    exitDateStmt(ctx: any): void;
    enterDeclareStmt(ctx: any): void;
    exitDeclareStmt(ctx: any): void;
    enterDeftypeStmt(ctx: any): void;
    exitDeftypeStmt(ctx: any): void;
    enterDeleteSettingStmt(ctx: any): void;
    exitDeleteSettingStmt(ctx: any): void;
    enterDoLoopStmt(ctx: any): void;
    exitDoLoopStmt(ctx: any): void;
    enterEndStmt(ctx: any): void;
    exitEndStmt(ctx: any): void;
    enterEnumerationStmt(ctx: any): void;
    exitEnumerationStmt(ctx: any): void;
    enterEnumerationStmt_Constant(ctx: any): void;
    exitEnumerationStmt_Constant(ctx: any): void;
    enterEraseStmt(ctx: any): void;
    exitEraseStmt(ctx: any): void;
    enterErrorStmt(ctx: any): void;
    exitErrorStmt(ctx: any): void;
    enterEventStmt(ctx: any): void;
    exitEventStmt(ctx: any): void;
    enterExitStmt(ctx: any): void;
    exitExitStmt(ctx: any): void;
    enterFilecopyStmt(ctx: any): void;
    exitFilecopyStmt(ctx: any): void;
    enterForEachStmt(ctx: any): void;
    exitForEachStmt(ctx: any): void;
    enterForNextStmt(ctx: any): void;
    exitForNextStmt(ctx: any): void;
    enterFunctionStmt(ctx: any): void;
    exitFunctionStmt(ctx: any): void;
    enterGetStmt(ctx: any): void;
    exitGetStmt(ctx: any): void;
    enterGoSubStmt(ctx: any): void;
    exitGoSubStmt(ctx: any): void;
    enterGoToStmt(ctx: any): void;
    exitGoToStmt(ctx: any): void;
    enterInlineIfThenElse(ctx: any): void;
    exitInlineIfThenElse(ctx: any): void;
    enterBlockIfThenElse(ctx: any): void;
    exitBlockIfThenElse(ctx: any): void;
    enterIfBlockStmt(ctx: any): void;
    exitIfBlockStmt(ctx: any): void;
    enterIfConditionStmt(ctx: any): void;
    exitIfConditionStmt(ctx: any): void;
    enterIfElseIfBlockStmt(ctx: any): void;
    exitIfElseIfBlockStmt(ctx: any): void;
    enterIfElseBlockStmt(ctx: any): void;
    exitIfElseBlockStmt(ctx: any): void;
    enterImplementsStmt(ctx: any): void;
    exitImplementsStmt(ctx: any): void;
    enterInputStmt(ctx: any): void;
    exitInputStmt(ctx: any): void;
    enterKillStmt(ctx: any): void;
    exitKillStmt(ctx: any): void;
    enterLetStmt(ctx: any): void;
    exitLetStmt(ctx: any): void;
    enterLineInputStmt(ctx: any): void;
    exitLineInputStmt(ctx: any): void;
    enterLoadStmt(ctx: any): void;
    exitLoadStmt(ctx: any): void;
    enterLockStmt(ctx: any): void;
    exitLockStmt(ctx: any): void;
    enterLsetStmt(ctx: any): void;
    exitLsetStmt(ctx: any): void;
    enterMacroIfThenElseStmt(ctx: any): void;
    exitMacroIfThenElseStmt(ctx: any): void;
    enterMacroIfBlockStmt(ctx: any): void;
    exitMacroIfBlockStmt(ctx: any): void;
    enterMacroElseIfBlockStmt(ctx: any): void;
    exitMacroElseIfBlockStmt(ctx: any): void;
    enterMacroElseBlockStmt(ctx: any): void;
    exitMacroElseBlockStmt(ctx: any): void;
    enterMidStmt(ctx: any): void;
    exitMidStmt(ctx: any): void;
    enterMkdirStmt(ctx: any): void;
    exitMkdirStmt(ctx: any): void;
    enterNameStmt(ctx: any): void;
    exitNameStmt(ctx: any): void;
    enterOnErrorStmt(ctx: any): void;
    exitOnErrorStmt(ctx: any): void;
    enterOnGoToStmt(ctx: any): void;
    exitOnGoToStmt(ctx: any): void;
    enterOnGoSubStmt(ctx: any): void;
    exitOnGoSubStmt(ctx: any): void;
    enterOpenStmt(ctx: any): void;
    exitOpenStmt(ctx: any): void;
    enterOutputList(ctx: any): void;
    exitOutputList(ctx: any): void;
    enterOutputList_Expression(ctx: any): void;
    exitOutputList_Expression(ctx: any): void;
    enterPrintStmt(ctx: any): void;
    exitPrintStmt(ctx: any): void;
    enterPropertyGetStmt(ctx: any): void;
    exitPropertyGetStmt(ctx: any): void;
    enterPropertySetStmt(ctx: any): void;
    exitPropertySetStmt(ctx: any): void;
    enterPropertyLetStmt(ctx: any): void;
    exitPropertyLetStmt(ctx: any): void;
    enterPutStmt(ctx: any): void;
    exitPutStmt(ctx: any): void;
    enterRaiseEventStmt(ctx: any): void;
    exitRaiseEventStmt(ctx: any): void;
    enterRandomizeStmt(ctx: any): void;
    exitRandomizeStmt(ctx: any): void;
    enterRedimStmt(ctx: any): void;
    exitRedimStmt(ctx: any): void;
    enterRedimSubStmt(ctx: any): void;
    exitRedimSubStmt(ctx: any): void;
    enterResetStmt(ctx: any): void;
    exitResetStmt(ctx: any): void;
    enterResumeStmt(ctx: any): void;
    exitResumeStmt(ctx: any): void;
    enterReturnStmt(ctx: any): void;
    exitReturnStmt(ctx: any): void;
    enterRmdirStmt(ctx: any): void;
    exitRmdirStmt(ctx: any): void;
    enterRsetStmt(ctx: any): void;
    exitRsetStmt(ctx: any): void;
    enterSavepictureStmt(ctx: any): void;
    exitSavepictureStmt(ctx: any): void;
    enterSaveSettingStmt(ctx: any): void;
    exitSaveSettingStmt(ctx: any): void;
    enterSeekStmt(ctx: any): void;
    exitSeekStmt(ctx: any): void;
    enterSelectCaseStmt(ctx: any): void;
    exitSelectCaseStmt(ctx: any): void;
    enterSC_Case(ctx: any): void;
    exitSC_Case(ctx: any): void;
    enterCaseCondElse(ctx: any): void;
    exitCaseCondElse(ctx: any): void;
    enterCaseCondExpr(ctx: any): void;
    exitCaseCondExpr(ctx: any): void;
    enterCaseCondExprIs(ctx: any): void;
    exitCaseCondExprIs(ctx: any): void;
    enterCaseCondExprValue(ctx: any): void;
    exitCaseCondExprValue(ctx: any): void;
    enterCaseCondExprTo(ctx: any): void;
    exitCaseCondExprTo(ctx: any): void;
    enterSendkeysStmt(ctx: any): void;
    exitSendkeysStmt(ctx: any): void;
    enterSetattrStmt(ctx: any): void;
    exitSetattrStmt(ctx: any): void;
    enterSetStmt(ctx: any): void;
    exitSetStmt(ctx: any): void;
    enterStopStmt(ctx: any): void;
    exitStopStmt(ctx: any): void;
    enterSubStmt(ctx: any): void;
    exitSubStmt(ctx: any): void;
    enterTimeStmt(ctx: any): void;
    exitTimeStmt(ctx: any): void;
    enterTypeStmt(ctx: any): void;
    exitTypeStmt(ctx: any): void;
    enterTypeStmt_Element(ctx: any): void;
    exitTypeStmt_Element(ctx: any): void;
    enterTypeOfStmt(ctx: any): void;
    exitTypeOfStmt(ctx: any): void;
    enterUnloadStmt(ctx: any): void;
    exitUnloadStmt(ctx: any): void;
    enterUnlockStmt(ctx: any): void;
    exitUnlockStmt(ctx: any): void;
    enterVsAssign(ctx: any): void;
    exitVsAssign(ctx: any): void;
    enterVsNot(ctx: any): void;
    exitVsNot(ctx: any): void;
    enterVsStruct(ctx: any): void;
    exitVsStruct(ctx: any): void;
    enterVsMultDiv(ctx: any): void;
    exitVsMultDiv(ctx: any): void;
    enterVsTypeOf(ctx: any): void;
    exitVsTypeOf(ctx: any): void;
    enterVsICS(ctx: any): void;
    exitVsICS(ctx: any): void;
    enterVsXor(ctx: any): void;
    exitVsXor(ctx: any): void;
    enterVsAddSub(ctx: any): void;
    exitVsAddSub(ctx: any): void;
    enterVsAnd(ctx: any): void;
    exitVsAnd(ctx: any): void;
    enterVsPow(ctx: any): void;
    exitVsPow(ctx: any): void;
    enterVsMod(ctx: any): void;
    exitVsMod(ctx: any): void;
    enterVsAmp(ctx: any): void;
    exitVsAmp(ctx: any): void;
    enterVsAddressOf(ctx: any): void;
    exitVsAddressOf(ctx: any): void;
    enterVsNew(ctx: any): void;
    exitVsNew(ctx: any): void;
    enterVsPlusMinus(ctx: any): void;
    exitVsPlusMinus(ctx: any): void;
    enterVsIDiv(ctx: any): void;
    exitVsIDiv(ctx: any): void;
    enterVsOr(ctx: any): void;
    exitVsOr(ctx: any): void;
    enterVsLiteral(ctx: any): void;
    exitVsLiteral(ctx: any): void;
    enterVsEqv(ctx: any): void;
    exitVsEqv(ctx: any): void;
    enterVsImp(ctx: any): void;
    exitVsImp(ctx: any): void;
    enterVsComp(ctx: any): void;
    exitVsComp(ctx: any): void;
    enterVsMid(ctx: any): void;
    exitVsMid(ctx: any): void;
    enterVariableStmt(ctx: any): void;
    exitVariableStmt(ctx: any): void;
    enterVariableListStmt(ctx: any): void;
    exitVariableListStmt(ctx: any): void;
    enterVariableSubStmt(ctx: any): void;
    exitVariableSubStmt(ctx: any): void;
    enterWhileWendStmt(ctx: any): void;
    exitWhileWendStmt(ctx: any): void;
    enterWidthStmt(ctx: any): void;
    exitWidthStmt(ctx: any): void;
    enterWithStmt(ctx: any): void;
    exitWithStmt(ctx: any): void;
    enterWriteStmt(ctx: any): void;
    exitWriteStmt(ctx: any): void;
    enterExplicitCallStmt(ctx: any): void;
    exitExplicitCallStmt(ctx: any): void;
    enterECS_ProcedureCall(ctx: any): void;
    exitECS_ProcedureCall(ctx: any): void;
    enterECS_MemberProcedureCall(ctx: any): void;
    exitECS_MemberProcedureCall(ctx: any): void;
    enterImplicitCallStmt_InBlock(ctx: any): void;
    exitImplicitCallStmt_InBlock(ctx: any): void;
    enterICS_B_ProcedureCall(ctx: any): void;
    exitICS_B_ProcedureCall(ctx: any): void;
    enterICS_B_MemberProcedureCall(ctx: any): void;
    exitICS_B_MemberProcedureCall(ctx: any): void;
    enterImplicitCallStmt_InStmt(ctx: any): void;
    exitImplicitCallStmt_InStmt(ctx: any): void;
    enterICS_S_VariableOrProcedureCall(ctx: any): void;
    exitICS_S_VariableOrProcedureCall(ctx: any): void;
    enterICS_S_ProcedureOrArrayCall(ctx: any): void;
    exitICS_S_ProcedureOrArrayCall(ctx: any): void;
    enterICS_S_NestedProcedureCall(ctx: any): void;
    exitICS_S_NestedProcedureCall(ctx: any): void;
    enterICS_S_MembersCall(ctx: any): void;
    exitICS_S_MembersCall(ctx: any): void;
    enterICS_S_MemberCall(ctx: any): void;
    exitICS_S_MemberCall(ctx: any): void;
    enterICS_S_DictionaryCall(ctx: any): void;
    exitICS_S_DictionaryCall(ctx: any): void;
    enterArgsCall(ctx: any): void;
    exitArgsCall(ctx: any): void;
    enterArgCall(ctx: any): void;
    exitArgCall(ctx: any): void;
    enterDictionaryCallStmt(ctx: any): void;
    exitDictionaryCallStmt(ctx: any): void;
    enterArgList(ctx: any): void;
    exitArgList(ctx: any): void;
    enterArg(ctx: any): void;
    exitArg(ctx: any): void;
    enterArgDefaultValue(ctx: any): void;
    exitArgDefaultValue(ctx: any): void;
    enterSubscripts(ctx: any): void;
    exitSubscripts(ctx: any): void;
    enterSubscript_(ctx: any): void;
    exitSubscript_(ctx: any): void;
    enterAmbiguousIdentifier(ctx: any): void;
    exitAmbiguousIdentifier(ctx: any): void;
    enterAsTypeClause(ctx: any): void;
    exitAsTypeClause(ctx: any): void;
    enterBaseType(ctx: any): void;
    exitBaseType(ctx: any): void;
    enterCertainIdentifier(ctx: any): void;
    exitCertainIdentifier(ctx: any): void;
    enterComparisonOperator(ctx: any): void;
    exitComparisonOperator(ctx: any): void;
    enterComplexType(ctx: any): void;
    exitComplexType(ctx: any): void;
    enterFieldLength(ctx: any): void;
    exitFieldLength(ctx: any): void;
    enterLetterrange(ctx: any): void;
    exitLetterrange(ctx: any): void;
    enterLineLabel(ctx: any): void;
    exitLineLabel(ctx: any): void;
    enterLiteral(ctx: any): void;
    exitLiteral(ctx: any): void;
    enterPublicPrivateVisibility(ctx: any): void;
    exitPublicPrivateVisibility(ctx: any): void;
    enterPublicPrivateGlobalVisibility(ctx: any): void;
    exitPublicPrivateGlobalVisibility(ctx: any): void;
    enterType_(ctx: any): void;
    exitType_(ctx: any): void;
    enterTypeHint(ctx: any): void;
    exitTypeHint(ctx: any): void;
    enterVisibility(ctx: any): void;
    exitVisibility(ctx: any): void;
    enterAmbiguousKeyword(ctx: any): void;
    exitAmbiguousKeyword(ctx: any): void;
}
//# sourceMappingURL=VisualBasic6ParserListener.d.ts.map