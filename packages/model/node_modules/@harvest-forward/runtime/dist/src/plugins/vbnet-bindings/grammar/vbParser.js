"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const antlr4_1 = __importDefault(require("antlr4"));
const vbParserListener_js_1 = __importDefault(require("./vbParserListener.js"));
const vbParserVisitor_js_1 = __importDefault(require("./vbParserVisitor.js"));
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u012a\u11c6\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004",
    "\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t",
    "\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004",
    "\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t",
    "\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004",
    "\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t",
    "\u00af\u0004\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004",
    "\u00b3\t\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t",
    "\u00b6\u0004\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004",
    "\u00ba\t\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t",
    "\u00bd\u0004\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004",
    "\u00c1\t\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t",
    "\u00c4\u0004\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004",
    "\u00c8\t\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t",
    "\u00cb\u0004\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004",
    "\u00cf\t\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t",
    "\u00d2\u0004\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004",
    "\u00d6\t\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t",
    "\u00d9\u0004\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004",
    "\u00dd\t\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t",
    "\u00e0\u0004\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004",
    "\u00e4\t\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t",
    "\u00e7\u0004\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004",
    "\u00eb\t\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0004\u00ee\t",
    "\u00ee\u0004\u00ef\t\u00ef\u0004\u00f0\t\u00f0\u0004\u00f1\t\u00f1\u0004",
    "\u00f2\t\u00f2\u0004\u00f3\t\u00f3\u0004\u00f4\t\u00f4\u0004\u00f5\t",
    "\u00f5\u0004\u00f6\t\u00f6\u0004\u00f7\t\u00f7\u0004\u00f8\t\u00f8\u0004",
    "\u00f9\t\u00f9\u0004\u00fa\t\u00fa\u0004\u00fb\t\u00fb\u0004\u00fc\t",
    "\u00fc\u0004\u00fd\t\u00fd\u0004\u00fe\t\u00fe\u0004\u00ff\t\u00ff\u0004",
    "\u0100\t\u0100\u0004\u0101\t\u0101\u0004\u0102\t\u0102\u0004\u0103\t",
    "\u0103\u0004\u0104\t\u0104\u0004\u0105\t\u0105\u0004\u0106\t\u0106\u0004",
    "\u0107\t\u0107\u0004\u0108\t\u0108\u0004\u0109\t\u0109\u0004\u010a\t",
    "\u010a\u0004\u010b\t\u010b\u0004\u010c\t\u010c\u0004\u010d\t\u010d\u0004",
    "\u010e\t\u010e\u0004\u010f\t\u010f\u0004\u0110\t\u0110\u0004\u0111\t",
    "\u0111\u0004\u0112\t\u0112\u0004\u0113\t\u0113\u0004\u0114\t\u0114\u0004",
    "\u0115\t\u0115\u0004\u0116\t\u0116\u0004\u0117\t\u0117\u0004\u0118\t",
    "\u0118\u0004\u0119\t\u0119\u0004\u011a\t\u011a\u0004\u011b\t\u011b\u0004",
    "\u011c\t\u011c\u0004\u011d\t\u011d\u0004\u011e\t\u011e\u0004\u011f\t",
    "\u011f\u0004\u0120\t\u0120\u0004\u0121\t\u0121\u0004\u0122\t\u0122\u0004",
    "\u0123\t\u0123\u0004\u0124\t\u0124\u0004\u0125\t\u0125\u0004\u0126\t",
    "\u0126\u0004\u0127\t\u0127\u0004\u0128\t\u0128\u0004\u0129\t\u0129\u0004",
    "\u012a\t\u012a\u0004\u012b\t\u012b\u0004\u012c\t\u012c\u0004\u012d\t",
    "\u012d\u0004\u012e\t\u012e\u0004\u012f\t\u012f\u0004\u0130\t\u0130\u0004",
    "\u0131\t\u0131\u0004\u0132\t\u0132\u0004\u0133\t\u0133\u0004\u0134\t",
    "\u0134\u0004\u0135\t\u0135\u0004\u0136\t\u0136\u0004\u0137\t\u0137\u0004",
    "\u0138\t\u0138\u0004\u0139\t\u0139\u0004\u013a\t\u013a\u0004\u013b\t",
    "\u013b\u0004\u013c\t\u013c\u0004\u013d\t\u013d\u0004\u013e\t\u013e\u0004",
    "\u013f\t\u013f\u0004\u0140\t\u0140\u0004\u0141\t\u0141\u0004\u0142\t",
    "\u0142\u0004\u0143\t\u0143\u0004\u0144\t\u0144\u0004\u0145\t\u0145\u0004",
    "\u0146\t\u0146\u0004\u0147\t\u0147\u0004\u0148\t\u0148\u0004\u0149\t",
    "\u0149\u0004\u014a\t\u014a\u0004\u014b\t\u014b\u0004\u014c\t\u014c\u0004",
    "\u014d\t\u014d\u0004\u014e\t\u014e\u0004\u014f\t\u014f\u0004\u0150\t",
    "\u0150\u0004\u0151\t\u0151\u0004\u0152\t\u0152\u0004\u0153\t\u0153\u0004",
    "\u0154\t\u0154\u0004\u0155\t\u0155\u0004\u0156\t\u0156\u0004\u0157\t",
    "\u0157\u0004\u0158\t\u0158\u0004\u0159\t\u0159\u0004\u015a\t\u015a\u0004",
    "\u015b\t\u015b\u0004\u015c\t\u015c\u0004\u015d\t\u015d\u0004\u015e\t",
    "\u015e\u0004\u015f\t\u015f\u0004\u0160\t\u0160\u0004\u0161\t\u0161\u0004",
    "\u0162\t\u0162\u0004\u0163\t\u0163\u0004\u0164\t\u0164\u0004\u0165\t",
    "\u0165\u0004\u0166\t\u0166\u0004\u0167\t\u0167\u0004\u0168\t\u0168\u0004",
    "\u0169\t\u0169\u0004\u016a\t\u016a\u0004\u016b\t\u016b\u0004\u016c\t",
    "\u016c\u0004\u016d\t\u016d\u0004\u016e\t\u016e\u0004\u016f\t\u016f\u0004",
    "\u0170\t\u0170\u0004\u0171\t\u0171\u0004\u0172\t\u0172\u0004\u0173\t",
    "\u0173\u0004\u0174\t\u0174\u0004\u0175\t\u0175\u0004\u0176\t\u0176\u0004",
    "\u0177\t\u0177\u0004\u0178\t\u0178\u0004\u0179\t\u0179\u0004\u017a\t",
    "\u017a\u0004\u017b\t\u017b\u0004\u017c\t\u017c\u0004\u017d\t\u017d\u0004",
    "\u017e\t\u017e\u0004\u017f\t\u017f\u0004\u0180\t\u0180\u0004\u0181\t",
    "\u0181\u0004\u0182\t\u0182\u0004\u0183\t\u0183\u0004\u0184\t\u0184\u0004",
    "\u0185\t\u0185\u0004\u0186\t\u0186\u0004\u0187\t\u0187\u0004\u0188\t",
    "\u0188\u0004\u0189\t\u0189\u0004\u018a\t\u018a\u0004\u018b\t\u018b\u0004",
    "\u018c\t\u018c\u0004\u018d\t\u018d\u0004\u018e\t\u018e\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0327\n\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u032c\n\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0005",
    "\u0007\u033b\n\u0007\u0003\b\u0006\b\u033e\n\b\r\b\u000e\b\u033f\u0003",
    "\t\u0003\t\u0003\t\u0006\t\u0345\n\t\r\t\u000e\t\u0346\u0003\n\u0003",
    "\n\u0003\n\u0006\n\u034c\n\n\r\n\u000e\n\u034d\u0003\u000b\u0003\u000b",
    "\u0005\u000b\u0352\n\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u0357\n\f",
    "\u0003\r\u0003\r\u0005\r\u035b\n\r\u0003\r\u0003\r\u0003\r\u0005\r\u0360",
    "\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0366",
    "\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u036b\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u0370\n\u000e\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u0374\n\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u038e\n",
    "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u0396\n\u0018\u0003\u0019\u0003\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u03a8\n\u001f\u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005 \u03b6\n \u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0005!\u03bd\n!\u0003!\u0007!\u03c0\n",
    "!\f!\u000e!\u03c3\u000b!\u0003!\u0005!\u03c6\n!\u0003!\u0003!\u0007",
    "!\u03ca\n!\f!\u000e!\u03cd\u000b!\u0003!\u0003!\u0005!\u03d1\n!\u0003",
    "\"\u0003\"\u0006\"\u03d5\n\"\r\"\u000e\"\u03d6\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0005\"\u03dd\n\"\u0003#\u0003#\u0007#\u03e1\n#\f#\u000e",
    "#\u03e4\u000b#\u0003#\u0003#\u0007#\u03e8\n#\f#\u000e#\u03eb\u000b#",
    "\u0003#\u0003#\u0003$\u0006$\u03f0\n$\r$\u000e$\u03f1\u0003$\u0003$",
    "\u0005$\u03f6\n$\u0003%\u0003%\u0007%\u03fa\n%\f%\u000e%\u03fd\u000b",
    "%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003",
    "\'\u0005\'\u0409\n\'\u0003(\u0003(\u0007(\u040d\n(\f(\u000e(\u0410\u000b",
    "(\u0003)\u0003)\u0003)\u0005)\u0415\n)\u0003*\u0003*\u0003*\u0005*\u041a",
    "\n*\u0003*\u0003*\u0003*\u0003*\u0005*\u0420\n*\u0003+\u0003+\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u042a\n,\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0005-\u0433\n-\u0003.\u0003.\u0003.\u0005",
    ".\u0438\n.\u0003/\u0007/\u043b\n/\f/\u000e/\u043e\u000b/\u00030\u0003",
    "0\u00050\u0442\n0\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00051\u044d\n1\u00031\u00031\u00031\u00031\u00071\u0453\n",
    "1\f1\u000e1\u0456\u000b1\u00032\u00032\u00032\u00032\u00033\u00033\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00054\u0478\n4\u00035\u00035\u0003",
    "6\u00036\u00056\u047e\n6\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00057\u0499",
    "\n7\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00058\u04ab\n8\u00039\u0003",
    "9\u00039\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0005",
    ":\u04b8\n:\u0003:\u0003:\u0007:\u04bc\n:\f:\u000e:\u04bf\u000b:\u0003",
    ":\u0007:\u04c2\n:\f:\u000e:\u04c5\u000b:\u0003:\u0005:\u04c8\n:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0005;\u04d3",
    "\n;\u0003;\u0003;\u0007;\u04d7\n;\f;\u000e;\u04da\u000b;\u0003<\u0003",
    "<\u0003<\u0003<\u0007<\u04e0\n<\f<\u000e<\u04e3\u000b<\u0003=\u0007",
    "=\u04e6\n=\f=\u000e=\u04e9\u000b=\u0003>\u0003>\u0003?\u0003?\u0003",
    "?\u0003?\u0003?\u0007?\u04f2\n?\f?\u000e?\u04f5\u000b?\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005",
    "@\u0502\n@\u0003A\u0003A\u0003A\u0003A\u0003A\u0007A\u0509\nA\fA\u000e",
    "A\u050c\u000bA\u0003A\u0003A\u0003B\u0005B\u0511\nB\u0003B\u0003B\u0005",
    "B\u0515\nB\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u0520\nD\u0003E\u0003E\u0003E\u0007E\u0525\nE\fE\u000eE\u0528",
    "\u000bE\u0003F\u0003F\u0003F\u0003F\u0005F\u052e\nF\u0003G\u0006G\u0531",
    "\nG\rG\u000eG\u0532\u0003H\u0005H\u0536\nH\u0003H\u0003H\u0003H\u0005",
    "H\u053b\nH\u0003H\u0003H\u0005H\u053f\nH\u0003I\u0003I\u0003I\u0007",
    "I\u0544\nI\fI\u000eI\u0547\u000bI\u0003J\u0003J\u0003J\u0005J\u054c",
    "\nJ\u0003J\u0003J\u0003J\u0005J\u0551\nJ\u0003J\u0005J\u0554\nJ\u0003",
    "K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u055e\nL\u0003",
    "M\u0003M\u0003M\u0005M\u0563\nM\u0007M\u0565\nM\fM\u000eM\u0568\u000b",
    "M\u0003N\u0003N\u0003N\u0007N\u056d\nN\fN\u000eN\u0570\u000bN\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0005P\u057a\nP\u0003",
    "Q\u0003Q\u0003R\u0003R\u0003R\u0003S\u0003S\u0003S\u0003S\u0005S\u0585",
    "\nS\u0003T\u0003T\u0003T\u0005T\u058a\nT\u0003T\u0003T\u0003U\u0003",
    "U\u0003V\u0003V\u0003V\u0005V\u0593\nV\u0003V\u0003V\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0005Y\u05a1\nY\u0003",
    "Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0007[\u05ac",
    "\n[\f[\u000e[\u05af\u000b[\u0003\\\u0003\\\u0003\\\u0005\\\u05b4\n\\",
    "\u0003]\u0003]\u0003]\u0003]\u0003^\u0003^\u0003_\u0003_\u0003_\u0005",
    "_\u05bf\n_\u0003_\u0003_\u0005_\u05c3\n_\u0003_\u0003_\u0003_\u0003",
    "`\u0003`\u0007`\u05ca\n`\f`\u000e`\u05cd\u000b`\u0003`\u0003`\u0003",
    "`\u0007`\u05d2\n`\f`\u000e`\u05d5\u000b`\u0003`\u0005`\u05d8\n`\u0003",
    "a\u0003a\u0003a\u0003a\u0007a\u05de\na\fa\u000ea\u05e1\u000ba\u0003",
    "a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u05ec",
    "\nb\u0003c\u0003c\u0003c\u0007c\u05f1\nc\fc\u000ec\u05f4\u000bc\u0003",
    "d\u0003d\u0005d\u05f8\nd\u0003e\u0003e\u0005e\u05fc\ne\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0005f\u0603\nf\u0003g\u0003g\u0005g\u0607\n",
    "g\u0003h\u0003h\u0003h\u0003h\u0003h\u0007h\u060e\nh\fh\u000eh\u0611",
    "\u000bh\u0003i\u0003i\u0005i\u0615\ni\u0003j\u0003j\u0005j\u0619\nj",
    "\u0003j\u0003j\u0003j\u0005j\u061e\nj\u0007j\u0620\nj\fj\u000ej\u0623",
    "\u000bj\u0003j\u0003j\u0003j\u0003j\u0005j\u0629\nj\u0003j\u0003j\u0003",
    "j\u0005j\u062e\nj\u0007j\u0630\nj\fj\u000ej\u0633\u000bj\u0005j\u0635",
    "\nj\u0003k\u0003k\u0003k\u0003k\u0003k\u0003l\u0003l\u0003l\u0007l\u063f",
    "\nl\fl\u000el\u0642\u000bl\u0003m\u0003m\u0005m\u0646\nm\u0003n\u0003",
    "n\u0005n\u064a\nn\u0003o\u0005o\u064d\no\u0003o\u0005o\u0650\no\u0003",
    "p\u0003p\u0003q\u0003q\u0003q\u0003q\u0003r\u0003r\u0003r\u0007r\u065b",
    "\nr\fr\u000er\u065e\u000br\u0003s\u0003s\u0003s\u0003s\u0003s\u0005",
    "s\u0665\ns\u0003t\u0003t\u0003t\u0005t\u066a\nt\u0003u\u0003u\u0003",
    "v\u0003v\u0003w\u0005w\u0671\nw\u0003w\u0007w\u0674\nw\fw\u000ew\u0677",
    "\u000bw\u0003w\u0003w\u0003w\u0003w\u0005w\u067d\nw\u0003w\u0003w\u0006",
    "w\u0681\nw\rw\u000ew\u0682\u0003w\u0003w\u0003w\u0003w\u0003x\u0005",
    "x\u068a\nx\u0003x\u0003x\u0003x\u0005x\u068f\nx\u0003x\u0003x\u0003",
    "y\u0005y\u0694\ny\u0003y\u0007y\u0697\ny\fy\u000ey\u069a\u000by\u0003",
    "y\u0003y\u0003y\u0005y\u069f\ny\u0003y\u0003y\u0005y\u06a3\ny\u0003",
    "y\u0007y\u06a6\ny\fy\u000ey\u06a9\u000by\u0003y\u0007y\u06ac\ny\fy\u000e",
    "y\u06af\u000by\u0003y\u0003y\u0003y\u0003y\u0003z\u0003z\u0003z\u0003",
    "z\u0005z\u06b9\nz\u0003{\u0003{\u0003{\u0003{\u0003|\u0003|\u0003|\u0003",
    "|\u0003|\u0003|\u0003|\u0003|\u0005|\u06c7\n|\u0003}\u0005}\u06ca\n",
    "}\u0003}\u0007}\u06cd\n}\f}\u000e}\u06d0\u000b}\u0003}\u0003}\u0003",
    "}\u0005}\u06d5\n}\u0003}\u0003}\u0007}\u06d9\n}\f}\u000e}\u06dc\u000b",
    "}\u0003}\u0007}\u06df\n}\f}\u000e}\u06e2\u000b}\u0003}\u0003}\u0003",
    "}\u0003}\u0003~\u0003~\u0005~\u06ea\n~\u0003\u007f\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0005",
    "\u007f\u06f4\n\u007f\u0003\u0080\u0005\u0080\u06f7\n\u0080\u0003\u0080",
    "\u0007\u0080\u06fa\n\u0080\f\u0080\u000e\u0080\u06fd\u000b\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0007\u0080\u0703\n\u0080",
    "\f\u0080\u000e\u0080\u0706\u000b\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0713\n\u0081\u0003\u0082",
    "\u0005\u0082\u0716\n\u0082\u0003\u0082\u0007\u0082\u0719\n\u0082\f\u0082",
    "\u000e\u0082\u071c\u000b\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0005",
    "\u0082\u0721\n\u0082\u0003\u0082\u0003\u0082\u0007\u0082\u0725\n\u0082",
    "\f\u0082\u000e\u0082\u0728\u000b\u0082\u0003\u0082\u0007\u0082\u072b",
    "\n\u0082\f\u0082\u000e\u0082\u072e\u000b\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0083",
    "\u0003\u0084\u0003\u0084\u0003\u0084\u0007\u0084\u073b\n\u0084\f\u0084",
    "\u000e\u0084\u073e\u000b\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003",
    "\u0085\u0005\u0085\u0744\n\u0085\u0003\u0086\u0003\u0086\u0003\u0086",
    "\u0003\u0087\u0006\u0087\u074a\n\u0087\r\u0087\u000e\u0087\u074b\u0003",
    "\u0088\u0003\u0088\u0005\u0088\u0750\n\u0088\u0003\u0088\u0003\u0088",
    "\u0003\u0089\u0006\u0089\u0755\n\u0089\r\u0089\u000e\u0089\u0756\u0003",
    "\u008a\u0003\u008a\u0005\u008a\u075b\n\u008a\u0003\u008b\u0005\u008b",
    "\u075e\n\u008b\u0003\u008b\u0007\u008b\u0761\n\u008b\f\u008b\u000e\u008b",
    "\u0764\u000b\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008c\u0003\u008c\u0005\u008c\u076c\n\u008c\u0003\u008d\u0003\u008d",
    "\u0003\u008d\u0003\u008e\u0003\u008e\u0003\u008e\u0007\u008e\u0774\n",
    "\u008e\f\u008e\u000e\u008e\u0777\u000b\u008e\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0003\u008f\u0003\u0090\u0003\u0090\u0005\u0090\u077f\n",
    "\u0090\u0003\u0091\u0003\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003",
    "\u0092\u0005\u0092\u0787\n\u0092\u0003\u0093\u0003\u0093\u0005\u0093",
    "\u078b\n\u0093\u0003\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0790",
    "\n\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0794\n\u0094\u0003\u0094",
    "\u0005\u0094\u0797\n\u0094\u0003\u0095\u0003\u0095\u0003\u0095\u0005",
    "\u0095\u079c\n\u0095\u0003\u0095\u0003\u0095\u0005\u0095\u07a0\n\u0095",
    "\u0003\u0095\u0005\u0095\u07a3\n\u0095\u0003\u0095\u0003\u0095\u0005",
    "\u0095\u07a7\n\u0095\u0003\u0095\u0005\u0095\u07aa\n\u0095\u0003\u0096",
    "\u0005\u0096\u07ad\n\u0096\u0003\u0096\u0007\u0096\u07b0\n\u0096\f\u0096",
    "\u000e\u0096\u07b3\u000b\u0096\u0003\u0096\u0003\u0096\u0005\u0096\u07b7",
    "\n\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0097\u0005\u0097\u07c0\n\u0097\u0003\u0097\u0006",
    "\u0097\u07c3\n\u0097\r\u0097\u000e\u0097\u07c4\u0003\u0097\u0003\u0097",
    "\u0005\u0097\u07c9\n\u0097\u0003\u0097\u0003\u0097\u0003\u0098\u0005",
    "\u0098\u07ce\n\u0098\u0003\u0098\u0007\u0098\u07d1\n\u0098\f\u0098\u000e",
    "\u0098\u07d4\u000b\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099",
    "\u0005\u0099\u07da\n\u0099\u0003\u0099\u0007\u0099\u07dd\n\u0099\f\u0099",
    "\u000e\u0099\u07e0\u000b\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u07e4",
    "\n\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0003\u0099",
    "\u0003\u0099\u0003\u009a\u0005\u009a\u07ed\n\u009a\u0003\u009a\u0006",
    "\u009a\u07f0\n\u009a\r\u009a\u000e\u009a\u07f1\u0003\u009a\u0003\u009a",
    "\u0005\u009a\u07f6\n\u009a\u0003\u009a\u0003\u009a\u0003\u009b\u0005",
    "\u009b\u07fb\n\u009b\u0003\u009b\u0007\u009b\u07fe\n\u009b\f\u009b\u000e",
    "\u009b\u0801\u000b\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009c",
    "\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009c",
    "\u0003\u009c\u0003\u009c\u0003\u009c\u0005\u009c\u0810\n\u009c\u0003",
    "\u009d\u0003\u009d\u0005\u009d\u0814\n\u009d\u0003\u009e\u0003\u009e",
    "\u0003\u009f\u0003\u009f\u0005\u009f\u081a\n\u009f\u0003\u00a0\u0003",
    "\u00a0\u0005\u00a0\u081e\n\u00a0\u0003\u00a1\u0005\u00a1\u0821\n\u00a1",
    "\u0003\u00a1\u0007\u00a1\u0824\n\u00a1\f\u00a1\u000e\u00a1\u0827\u000b",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u082b\n\u00a1\u0003\u00a1",
    "\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0005\u00a1\u0831\n\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0005\u00a1\u0835\n\u00a1\u0003\u00a1\u0005\u00a1",
    "\u0838\n\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a2\u0005\u00a2\u083d",
    "\n\u00a2\u0003\u00a2\u0007\u00a2\u0840\n\u00a2\f\u00a2\u000e\u00a2\u0843",
    "\u000b\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0847\n\u00a2\u0003",
    "\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u084d\n\u00a2",
    "\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0851\n\u00a2\u0003\u00a2\u0005",
    "\u00a2\u0854\n\u00a2\u0003\u00a2\u0003\u00a2\u0005\u00a2\u0858\n\u00a2",
    "\u0003\u00a2\u0005\u00a2\u085b\n\u00a2\u0003\u00a2\u0003\u00a2\u0003",
    "\u00a3\u0003\u00a3\u0003\u00a3\u0005\u00a3\u0862\n\u00a3\u0003\u00a4",
    "\u0003\u00a4\u0003\u00a5\u0003\u00a5\u0003\u00a5\u0003\u00a6\u0003\u00a6",
    "\u0003\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0007\u00a7\u086f\n",
    "\u00a7\f\u00a7\u000e\u00a7\u0872\u000b\u00a7\u0003\u00a8\u0005\u00a8",
    "\u0875\n\u00a8\u0003\u00a8\u0007\u00a8\u0878\n\u00a8\f\u00a8\u000e\u00a8",
    "\u087b\u000b\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0880",
    "\n\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u0884\n\u00a8\u0003\u00a9",
    "\u0003\u00a9\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab",
    "\u0003\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0007\u00ac\u0891\n",
    "\u00ac\f\u00ac\u000e\u00ac\u0894\u000b\u00ac\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad",
    "\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0003\u00ad\u0005\u00ad",
    "\u08a3\n\u00ad\u0003\u00ae\u0005\u00ae\u08a6\n\u00ae\u0003\u00ae\u0007",
    "\u00ae\u08a9\n\u00ae\f\u00ae\u000e\u00ae\u08ac\u000b\u00ae\u0003\u00ae",
    "\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u08b2\n\u00ae\u0003",
    "\u00ae\u0005\u00ae\u08b5\n\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae",
    "\u08b9\n\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003",
    "\u00af\u0003\u00af\u0005\u00af\u08c1\n\u00af\u0003\u00b0\u0003\u00b0",
    "\u0005\u00b0\u08c5\n\u00b0\u0003\u00b1\u0005\u00b1\u08c8\n\u00b1\u0003",
    "\u00b1\u0007\u00b1\u08cb\n\u00b1\f\u00b1\u000e\u00b1\u08ce\u000b\u00b1",
    "\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b1\u0005\u00b1\u08d4\n",
    "\u00b1\u0003\u00b1\u0003\u00b1\u0003\u00b2\u0005\u00b2\u08d9\n\u00b2",
    "\u0003\u00b2\u0007\u00b2\u08dc\n\u00b2\f\u00b2\u000e\u00b2\u08df\u000b",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b3\u0003\u00b3\u0005\u00b3\u08e8\n\u00b3\u0003\u00b3\u0005\u00b3",
    "\u08eb\n\u00b3\u0003\u00b3\u0003\u00b3\u0005\u00b3\u08ef\n\u00b3\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0005\u00b4\u08f4\n\u00b4\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b6\u0005\u00b6\u08f9\n\u00b6\u0003\u00b6\u0007",
    "\u00b6\u08fc\n\u00b6\f\u00b6\u000e\u00b6\u08ff\u000b\u00b6\u0003\u00b6",
    "\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0005\u00b6",
    "\u0907\n\u00b6\u0003\u00b6\u0003\u00b6\u0006\u00b6\u090b\n\u00b6\r\u00b6",
    "\u000e\u00b6\u090c\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003\u00b6\u0003",
    "\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0916\n\u00b7\u0003\u00b8",
    "\u0005\u00b8\u0919\n\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0005\u00b8\u0921\n\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b9\u0005\u00b9\u0928\n",
    "\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9\u0003",
    "\u00b9\u0005\u00b9\u0930\n\u00b9\u0003\u00b9\u0003\u00b9\u0003\u00b9",
    "\u0003\u00b9\u0003\u00ba\u0005\u00ba\u0937\n\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u093f",
    "\n\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00bb",
    "\u0005\u00bb\u0946\n\u00bb\u0003\u00bb\u0007\u00bb\u0949\n\u00bb\f\u00bb",
    "\u000e\u00bb\u094c\u000b\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bc\u0003\u00bc\u0005\u00bc\u0954\n\u00bc\u0003\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0007\u00bd\u0959\n\u00bd\f\u00bd\u000e\u00bd",
    "\u095c\u000b\u00bd\u0003\u00be\u0003\u00be\u0003\u00be\u0005\u00be\u0961",
    "\n\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00be\u0003\u00bf",
    "\u0005\u00bf\u0968\n\u00bf\u0003\u00bf\u0006\u00bf\u096b\n\u00bf\r\u00bf",
    "\u000e\u00bf\u096c\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00c0\u0003",
    "\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0005\u00c0\u0978",
    "\n\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0007\u00c1\u097d\n\u00c1",
    "\f\u00c1\u000e\u00c1\u0980\u000b\u00c1\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u0989",
    "\n\u00c2\u0003\u00c2\u0003\u00c2\u0005\u00c2\u098d\n\u00c2\u0005\u00c2",
    "\u098f\n\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0007\u00c3\u0994",
    "\n\u00c3\f\u00c3\u000e\u00c3\u0997\u000b\u00c3\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5",
    "\u09a0\n\u00c5\u0003\u00c6\u0003\u00c6\u0003\u00c6\u0007\u00c6\u09a5",
    "\n\u00c6\f\u00c6\u000e\u00c6\u09a8\u000b\u00c6\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0003\u00c7\u0005\u00c7\u09ae\n\u00c7\u0003\u00c8\u0003",
    "\u00c8\u0003\u00c8\u0005\u00c8\u09b3\n\u00c8\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0005\u00c9\u09b9\n\u00c9\u0003\u00c9\u0005",
    "\u00c9\u09bc\n\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u09c0\n\u00c9",
    "\u0003\u00c9\u0005\u00c9\u09c3\n\u00c9\u0003\u00ca\u0005\u00ca\u09c6",
    "\n\u00ca\u0003\u00ca\u0007\u00ca\u09c9\n\u00ca\f\u00ca\u000e\u00ca\u09cc",
    "\u000b\u00ca\u0003\u00ca\u0003\u00ca\u0005\u00ca\u09d0\n\u00ca\u0003",
    "\u00ca\u0003\u00ca\u0006\u00ca\u09d4\n\u00ca\r\u00ca\u000e\u00ca\u09d5",
    "\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00ca\u0003\u00cb\u0005\u00cb",
    "\u09dd\n\u00cb\u0003\u00cb\u0006\u00cb\u09e0\n\u00cb\r\u00cb\u000e\u00cb",
    "\u09e1\u0003\u00cb\u0003\u00cb\u0005\u00cb\u09e6\n\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0003\u00cc\u0005\u00cc\u09eb\n\u00cc\u0003\u00cc\u0007",
    "\u00cc\u09ee\n\u00cc\f\u00cc\u000e\u00cc\u09f1\u000b\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u09f7\n\u00cc\u0003",
    "\u00cc\u0005\u00cc\u09fa\n\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc",
    "\u09fe\n\u00cc\u0003\u00cc\u0005\u00cc\u0a01\n\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0005\u00cc\u0a05\n\u00cc\u0003\u00cc\u0005\u00cc\u0a08\n\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u0a0d\n\u00cc\u0003",
    "\u00cc\u0007\u00cc\u0a10\n\u00cc\f\u00cc\u000e\u00cc\u0a13\u000b\u00cc",
    "\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc\u0a19\n",
    "\u00cc\u0003\u00cc\u0005\u00cc\u0a1c\n\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0005\u00cc\u0a20\n\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0005\u00cc\u0a26\n\u00cc\u0003\u00cc\u0005\u00cc\u0a29\n\u00cc",
    "\u0005\u00cc\u0a2b\n\u00cc\u0003\u00cc\u0005\u00cc\u0a2e\n\u00cc\u0003",
    "\u00cc\u0005\u00cc\u0a31\n\u00cc\u0003\u00cc\u0003\u00cc\u0005\u00cc",
    "\u0a35\n\u00cc\u0003\u00cd\u0005\u00cd\u0a38\n\u00cd\u0003\u00cd\u0007",
    "\u00cd\u0a3b\n\u00cd\f\u00cd\u000e\u00cd\u0a3e\u000b\u00cd\u0003\u00cd",
    "\u0003\u00cd\u0003\u00cd\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce",
    "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0005\u00ce\u0a4a\n\u00ce\u0003",
    "\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0003\u00cf\u0005\u00cf\u0a51",
    "\n\u00cf\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0a55\n\u00d0\u0003\u00d1",
    "\u0003\u00d1\u0003\u00d2\u0003\u00d2\u0005\u00d2\u0a5b\n\u00d2\u0003",
    "\u00d3\u0005\u00d3\u0a5e\n\u00d3\u0003\u00d3\u0005\u00d3\u0a61\n\u00d3",
    "\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0005\u00d3\u0a66\n\u00d3\u0003",
    "\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d3\u0003\u00d4\u0005\u00d4\u0a6d",
    "\n\u00d4\u0003\u00d4\u0005\u00d4\u0a70\n\u00d4\u0003\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0005\u00d4\u0a75\n\u00d4\u0003\u00d4\u0005\u00d4\u0a78",
    "\n\u00d4\u0003\u00d4\u0003\u00d4\u0005\u00d4\u0a7c\n\u00d4\u0003\u00d4",
    "\u0003\u00d4\u0003\u00d4\u0003\u00d4\u0003\u00d5\u0005\u00d5\u0a83\n",
    "\u00d5\u0003\u00d5\u0007\u00d5\u0a86\n\u00d5\f\u00d5\u000e\u00d5\u0a89",
    "\u000b\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5",
    "\u0003\u00d5\u0003\u00d5\u0005\u00d5\u0a92\n\u00d5\u0003\u00d5\u0005",
    "\u00d5\u0a95\n\u00d5\u0003\u00d5\u0003\u00d5\u0005\u00d5\u0a99\n\u00d5",
    "\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d5\u0003\u00d6\u0003\u00d6",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7",
    "\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0abd\n",
    "\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003",
    "\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0003",
    "\u00d8\u0003\u00d8\u0003\u00d8\u0003\u00d8\u0005\u00d8\u0ace\n\u00d8",
    "\u0003\u00d9\u0003\u00d9\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00db",
    "\u0003\u00db\u0005\u00db\u0ad7\n\u00db\u0003\u00dc\u0003\u00dc\u0003",
    "\u00dc\u0005\u00dc\u0adc\n\u00dc\u0007\u00dc\u0ade\n\u00dc\f\u00dc\u000e",
    "\u00dc\u0ae1\u000b\u00dc\u0003\u00dc\u0003\u00dc\u0005\u00dc\u0ae5\n",
    "\u00dc\u0006\u00dc\u0ae7\n\u00dc\r\u00dc\u000e\u00dc\u0ae8\u0005\u00dc",
    "\u0aeb\n\u00dc\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003",
    "\u00de\u0003\u00de\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0005",
    "\u00df\u0af7\n\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0005\u00e0\u0b01\n",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e1\u0003",
    "\u00e1\u0003\u00e1\u0005\u00e1\u0b0a\n\u00e1\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e2\u0005\u00e2\u0b10\n\u00e2\u0003\u00e2\u0005",
    "\u00e2\u0b13\n\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e3\u0003\u00e3",
    "\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e4\u0003\u00e4",
    "\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e5\u0003\u00e5",
    "\u0003\u00e5\u0005\u00e5\u0b26\n\u00e5\u0003\u00e6\u0003\u00e6\u0003",
    "\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005",
    "\u00e7\u0b30\n\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8\u0003\u00e8",
    "\u0003\u00e8\u0005\u00e8\u0b49\n\u00e8\u0003\u00e9\u0003\u00e9\u0005",
    "\u00e9\u0b4d\n\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9",
    "\u0003\u00e9\u0003\u00e9\u0005\u00e9\u0b55\n\u00e9\u0003\u00e9\u0003",
    "\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00ea\u0005\u00ea\u0b5d",
    "\n\u00ea\u0003\u00ea\u0003\u00ea\u0003\u00ea\u0005\u00ea\u0b62\n\u00ea",
    "\u0003\u00ea\u0005\u00ea\u0b65\n\u00ea\u0003\u00ea\u0003\u00ea\u0003",
    "\u00eb\u0003\u00eb\u0005\u00eb\u0b6b\n\u00eb\u0003\u00ec\u0003\u00ec",
    "\u0005\u00ec\u0b6f\n\u00ec\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0005",
    "\u00ed\u0b74\n\u00ed\u0003\u00ed\u0003\u00ed\u0005\u00ed\u0b78\n\u00ed",
    "\u0003\u00ed\u0007\u00ed\u0b7b\n\u00ed\f\u00ed\u000e\u00ed\u0b7e\u000b",
    "\u00ed\u0003\u00ed\u0005\u00ed\u0b81\n\u00ed\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ee\u0003\u00ee\u0003\u00ee\u0005\u00ee",
    "\u0b8a\n\u00ee\u0003\u00ee\u0003\u00ee\u0005\u00ee\u0b8e\n\u00ee\u0003",
    "\u00ef\u0003\u00ef\u0003\u00ef\u0005\u00ef\u0b93\n\u00ef\u0003\u00f0",
    "\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f0\u0005\u00f0",
    "\u0b9b\n\u00f0\u0003\u00f0\u0003\u00f0\u0003\u00f1\u0003\u00f1\u0005",
    "\u00f1\u0ba1\n\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0007\u00f1",
    "\u0ba6\n\u00f1\f\u00f1\u000e\u00f1\u0ba9\u000b\u00f1\u0003\u00f1\u0005",
    "\u00f1\u0bac\n\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1\u0003\u00f1",
    "\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0003\u00f2\u0005\u00f2\u0bb6\n",
    "\u00f2\u0003\u00f3\u0003\u00f3\u0003\u00f3\u0007\u00f3\u0bbb\n\u00f3",
    "\f\u00f3\u000e\u00f3\u0bbe\u000b\u00f3\u0003\u00f4\u0003\u00f4\u0005",
    "\u00f4\u0bc2\n\u00f4\u0005\u00f4\u0bc4\n\u00f4\u0003\u00f4\u0003\u00f4",
    "\u0005\u00f4\u0bc8\n\u00f4\u0003\u00f4\u0003\u00f4\u0003\u00f4\u0003",
    "\u00f4\u0003\u00f4\u0005\u00f4\u0bcf\n\u00f4\u0005\u00f4\u0bd1\n\u00f4",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0003\u00f5",
    "\u0003\u00f5\u0003\u00f5\u0003\u00f5\u0005\u00f5\u0bdc\n\u00f5\u0003",
    "\u00f6\u0003\u00f6\u0003\u00f6\u0003\u00f6\u0005\u00f6\u0be2\n\u00f6",
    "\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0003\u00f7\u0005\u00f7\u0be8\n",
    "\u00f7\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0005\u00f8\u0bee",
    "\n\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f8\u0003\u00f9",
    "\u0003\u00f9\u0005\u00f9\u0bf6\n\u00f9\u0003\u00fa\u0003\u00fa\u0003",
    "\u00fa\u0003\u00fa\u0005\u00fa\u0bfc\n\u00fa\u0003\u00fa\u0003\u00fa",
    "\u0005\u00fa\u0c00\n\u00fa\u0003\u00fa\u0003\u00fa\u0003\u00fa\u0003",
    "\u00fb\u0003\u00fb\u0003\u00fb\u0005\u00fb\u0c08\n\u00fb\u0003\u00fb",
    "\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fb\u0003\u00fc\u0003\u00fc",
    "\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd\u0003\u00fd",
    "\u0003\u00fd\u0003\u00fd\u0005\u00fd\u0c19\n\u00fd\u0003\u00fd\u0003",
    "\u00fd\u0005\u00fd\u0c1d\n\u00fd\u0003\u00fd\u0003\u00fd\u0005\u00fd",
    "\u0c21\n\u00fd\u0003\u00fd\u0005\u00fd\u0c24\n\u00fd\u0003\u00fe\u0003",
    "\u00fe\u0003\u00fe\u0003\u00fe\u0003\u00fe\u0005\u00fe\u0c2b\n\u00fe",
    "\u0003\u00fe\u0005\u00fe\u0c2e\n\u00fe\u0003\u00ff\u0003\u00ff\u0003",
    "\u00ff\u0007\u00ff\u0c33\n\u00ff\f\u00ff\u000e\u00ff\u0c36\u000b\u00ff",
    "\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0100\u0003\u0100\u0005\u0100",
    "\u0c3d\n\u0100\u0003\u0100\u0003\u0100\u0003\u0100\u0005\u0100\u0c42",
    "\n\u0100\u0003\u0100\u0003\u0100\u0005\u0100\u0c46\n\u0100\u0003\u0100",
    "\u0005\u0100\u0c49\n\u0100\u0003\u0101\u0003\u0101\u0005\u0101\u0c4d",
    "\n\u0101\u0003\u0102\u0003\u0102\u0005\u0102\u0c51\n\u0102\u0003\u0103",
    "\u0003\u0103\u0003\u0103\u0005\u0103\u0c56\n\u0103\u0003\u0103\u0007",
    "\u0103\u0c59\n\u0103\f\u0103\u000e\u0103\u0c5c\u000b\u0103\u0003\u0103",
    "\u0005\u0103\u0c5f\n\u0103\u0003\u0103\u0003\u0103\u0003\u0103\u0003",
    "\u0103\u0003\u0104\u0003\u0104\u0003\u0104\u0005\u0104\u0c68\n\u0104",
    "\u0003\u0105\u0003\u0105\u0003\u0105\u0003\u0105\u0005\u0105\u0c6e\n",
    "\u0105\u0005\u0105\u0c70\n\u0105\u0003\u0105\u0003\u0105\u0005\u0105",
    "\u0c74\n\u0105\u0003\u0105\u0003\u0105\u0005\u0105\u0c78\n\u0105\u0003",
    "\u0106\u0003\u0106\u0005\u0106\u0c7c\n\u0106\u0003\u0106\u0003\u0106",
    "\u0003\u0107\u0003\u0107\u0003\u0107\u0005\u0107\u0c83\n\u0107\u0003",
    "\u0108\u0003\u0108\u0003\u0108\u0003\u0108\u0003\u0109\u0003\u0109\u0003",
    "\u0109\u0003\u0109\u0003\u0109\u0003\u010a\u0003\u010a\u0003\u010a\u0003",
    "\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0003\u010a\u0005\u010a\u0c96",
    "\n\u010a\u0003\u010b\u0003\u010b\u0005\u010b\u0c9a\n\u010b\u0003\u010b",
    "\u0003\u010b\u0003\u010c\u0003\u010c\u0005\u010c\u0ca0\n\u010c\u0003",
    "\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0003\u010d\u0005",
    "\u010d\u0ca8\n\u010d\u0003\u010e\u0003\u010e\u0003\u010e\u0003\u010e",
    "\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u010f\u0003\u0110\u0003\u0110",
    "\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0111\u0003\u0112\u0003\u0112",
    "\u0003\u0113\u0003\u0113\u0003\u0113\u0003\u0114\u0003\u0114\u0003\u0114",
    "\u0003\u0115\u0003\u0115\u0005\u0115\u0cc2\n\u0115\u0003\u0115\u0003",
    "\u0115\u0003\u0116\u0003\u0116\u0005\u0116\u0cc8\n\u0116\u0003\u0117",
    "\u0003\u0117\u0005\u0117\u0ccc\n\u0117\u0003\u0117\u0003\u0117\u0003",
    "\u0117\u0003\u0118\u0003\u0118\u0003\u0118\u0007\u0118\u0cd4\n\u0118",
    "\f\u0118\u000e\u0118\u0cd7\u000b\u0118\u0003\u0119\u0003\u0119\u0003",
    "\u0119\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011a\u0003\u011b\u0003",
    "\u011b\u0003\u011b\u0007\u011b\u0ce3\n\u011b\f\u011b\u000e\u011b\u0ce6",
    "\u000b\u011b\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0005\u011c",
    "\u0cec\n\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0003\u011c\u0003",
    "\u011d\u0003\u011d\u0005\u011d\u0cf4\n\u011d\u0003\u011e\u0003\u011e",
    "\u0003\u011e\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u011f\u0003\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d0e\n",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0005\u0120\u0d17\n\u0120\u0005\u0120\u0d19\n\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d1e\n\u0120\u0003",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d24\n\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d2a\n",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d30",
    "\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120",
    "\u0d36\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005",
    "\u0120\u0d3c\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0005\u0120\u0d42\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003",
    "\u0120\u0005\u0120\u0d48\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0005\u0120\u0d4e\n\u0120\u0003\u0120\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0005\u0120\u0d54\n\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d5b\n\u0120\u0003",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d61\n\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d67\n",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005",
    "\u0120\u0d6e\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0005\u0120\u0d75\n\u0120\u0003\u0120\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0005\u0120\u0d7b\n\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0003\u0120\u0005\u0120\u0d81\n\u0120\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d87\n\u0120\u0003\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d8d\n\u0120\u0003",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d93\n\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d99\n",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0d9f",
    "\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0005\u0120\u0da6\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0005\u0120\u0dad\n\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0003\u0120\u0005\u0120\u0db3\n\u0120\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005",
    "\u0120\u0dbc\n\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0dc0\n\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0005\u0120\u0dc9\n\u0120\u0003\u0120\u0003\u0120\u0005",
    "\u0120\u0dcd\n\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0003\u0120\u0005\u0120\u0dd5\n\u0120\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0ddc\n\u0120",
    "\u0003\u0120\u0006\u0120\u0ddf\n\u0120\r\u0120\u000e\u0120\u0de0\u0003",
    "\u0120\u0003\u0120\u0003\u0120\u0005\u0120\u0de6\n\u0120\u0003\u0120",
    "\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120\u0003\u0120",
    "\u0003\u0120\u0003\u0120\u0005\u0120\u0df1\n\u0120\u0003\u0120\u0003",
    "\u0120\u0003\u0120\u0007\u0120\u0df6\n\u0120\f\u0120\u000e\u0120\u0df9",
    "\u000b\u0120\u0003\u0121\u0003\u0121\u0003\u0121\u0003\u0121\u0005\u0121",
    "\u0dff\n\u0121\u0003\u0122\u0003\u0122\u0003\u0123\u0003\u0123\u0003",
    "\u0123\u0003\u0123\u0003\u0123\u0005\u0123\u0e08\n\u0123\u0003\u0124",
    "\u0003\u0124\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0125\u0003\u0126",
    "\u0003\u0126\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0127\u0003\u0127",
    "\u0003\u0127\u0005\u0127\u0e18\n\u0127\u0003\u0128\u0003\u0128\u0003",
    "\u0128\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003\u0129\u0003",
    "\u012a\u0003\u012a\u0005\u012a\u0e24\n\u012a\u0003\u012b\u0003\u012b",
    "\u0005\u012b\u0e28\n\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0005",
    "\u012b\u0e2d\n\u012b\u0007\u012b\u0e2f\n\u012b\f\u012b\u000e\u012b\u0e32",
    "\u000b\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0005\u012b",
    "\u0e38\n\u012b\u0003\u012b\u0003\u012b\u0003\u012b\u0005\u012b\u0e3d",
    "\n\u012b\u0007\u012b\u0e3f\n\u012b\f\u012b\u000e\u012b\u0e42\u000b\u012b",
    "\u0005\u012b\u0e44\n\u012b\u0003\u012c\u0003\u012c\u0003\u012c\u0005",
    "\u012c\u0e49\n\u012c\u0003\u012c\u0003\u012c\u0003\u012d\u0003\u012d",
    "\u0007\u012d\u0e4f\n\u012d\f\u012d\u000e\u012d\u0e52\u000b\u012d\u0003",
    "\u012e\u0003\u012e\u0003\u012e\u0003\u012e\u0005\u012e\u0e58\n\u012e",
    "\u0003\u012e\u0003\u012e\u0003\u012f\u0003\u012f\u0003\u012f\u0005\u012f",
    "\u0e5f\n\u012f\u0003\u012f\u0003\u012f\u0003\u0130\u0003\u0130\u0003",
    "\u0130\u0003\u0130\u0003\u0130\u0003\u0130\u0005\u0130\u0e69\n\u0130",
    "\u0003\u0131\u0003\u0131\u0003\u0131\u0005\u0131\u0e6e\n\u0131\u0007",
    "\u0131\u0e70\n\u0131\f\u0131\u000e\u0131\u0e73\u000b\u0131\u0003\u0132",
    "\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132\u0003\u0132",
    "\u0003\u0132\u0003\u0132\u0003\u0132\u0007\u0132\u0e7f\n\u0132\f\u0132",
    "\u000e\u0132\u0e82\u000b\u0132\u0003\u0133\u0003\u0133\u0003\u0133\u0005",
    "\u0133\u0e87\n\u0133\u0003\u0134\u0003\u0134\u0003\u0134\u0003\u0134",
    "\u0005\u0134\u0e8d\n\u0134\u0003\u0134\u0005\u0134\u0e90\n\u0134\u0003",
    "\u0134\u0005\u0134\u0e93\n\u0134\u0003\u0135\u0003\u0135\u0005\u0135",
    "\u0e97\n\u0135\u0003\u0136\u0003\u0136\u0003\u0136\u0003\u0136\u0003",
    "\u0136\u0003\u0137\u0003\u0137\u0003\u0137\u0007\u0137\u0ea1\n\u0137",
    "\f\u0137\u000e\u0137\u0ea4\u000b\u0137\u0003\u0138\u0005\u0138\u0ea7",
    "\n\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0003\u0138\u0005\u0138",
    "\u0ead\n\u0138\u0003\u0138\u0003\u0138\u0003\u0139\u0003\u0139\u0003",
    "\u0139\u0003\u013a\u0003\u013a\u0005\u013a\u0eb6\n\u013a\u0003\u013a",
    "\u0003\u013a\u0003\u013b\u0003\u013b\u0003\u013b\u0007\u013b\u0ebd\n",
    "\u013b\f\u013b\u000e\u013b\u0ec0\u000b\u013b\u0003\u013c\u0003\u013c",
    "\u0005\u013c\u0ec4\n\u013c\u0003\u013d\u0003\u013d\u0005\u013d\u0ec8",
    "\n\u013d\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e\u0003\u013e",
    "\u0003\u013f\u0003\u013f\u0003\u0140\u0003\u0140\u0003\u0140\u0003\u0141",
    "\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141",
    "\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141",
    "\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141",
    "\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141\u0003\u0141",
    "\u0003\u0141\u0005\u0141\u0eee\n\u0141\u0003\u0142\u0003\u0142\u0003",
    "\u0143\u0003\u0143\u0003\u0143\u0003\u0144\u0003\u0144\u0003\u0144\u0003",
    "\u0145\u0003\u0145\u0003\u0146\u0003\u0146\u0005\u0146\u0efc\n\u0146",
    "\u0003\u0147\u0007\u0147\u0eff\n\u0147\f\u0147\u000e\u0147\u0f02\u000b",
    "\u0147\u0003\u0147\u0003\u0147\u0003\u0147\u0005\u0147\u0f07\n\u0147",
    "\u0003\u0147\u0005\u0147\u0f0a\n\u0147\u0003\u0147\u0003\u0147\u0003",
    "\u0147\u0003\u0147\u0005\u0147\u0f10\n\u0147\u0003\u0147\u0005\u0147",
    "\u0f13\n\u0147\u0003\u0147\u0005\u0147\u0f16\n\u0147\u0003\u0148\u0003",
    "\u0148\u0005\u0148\u0f1a\n\u0148\u0003\u0149\u0007\u0149\u0f1d\n\u0149",
    "\f\u0149\u000e\u0149\u0f20\u000b\u0149\u0003\u0149\u0003\u0149\u0003",
    "\u0149\u0005\u0149\u0f25\n\u0149\u0003\u0149\u0005\u0149\u0f28\n\u0149",
    "\u0003\u0149\u0003\u0149\u0005\u0149\u0f2c\n\u0149\u0003\u0149\u0003",
    "\u0149\u0003\u0149\u0003\u0149\u0003\u0149\u0003\u014a\u0007\u014a\u0f34",
    "\n\u014a\f\u014a\u000e\u014a\u0f37\u000b\u014a\u0003\u014a\u0003\u014a",
    "\u0003\u014a\u0005\u014a\u0f3c\n\u014a\u0003\u014a\u0005\u014a\u0f3f",
    "\n\u014a\u0003\u014a\u0003\u014a\u0003\u014a\u0003\u014a\u0003\u014a",
    "\u0003\u014b\u0003\u014b\u0003\u014c\u0003\u014c\u0007\u014c\u0f4a\n",
    "\u014c\f\u014c\u000e\u014c\u0f4d\u000b\u014c\u0003\u014d\u0003\u014d",
    "\u0005\u014d\u0f51\n\u014d\u0003\u014e\u0003\u014e\u0003\u014e\u0003",
    "\u014e\u0003\u014e\u0003\u014e\u0003\u014e\u0003\u014e\u0003\u014e\u0003",
    "\u014e\u0005\u014e\u0f5d\n\u014e\u0003\u014f\u0003\u014f\u0005\u014f",
    "\u0f61\n\u014f\u0003\u0150\u0003\u0150\u0003\u0150\u0007\u0150\u0f66",
    "\n\u0150\f\u0150\u000e\u0150\u0f69\u000b\u0150\u0003\u0151\u0003\u0151",
    "\u0003\u0151\u0005\u0151\u0f6e\n\u0151\u0003\u0151\u0003\u0151\u0005",
    "\u0151\u0f72\n\u0151\u0003\u0151\u0003\u0151\u0003\u0152\u0003\u0152",
    "\u0003\u0152\u0007\u0152\u0f79\n\u0152\f\u0152\u000e\u0152\u0f7c\u000b",
    "\u0152\u0003\u0153\u0003\u0153\u0003\u0153\u0005\u0153\u0f81\n\u0153",
    "\u0003\u0153\u0003\u0153\u0003\u0153\u0003\u0154\u0005\u0154\u0f87\n",
    "\u0154\u0003\u0154\u0003\u0154\u0005\u0154\u0f8b\n\u0154\u0003\u0154",
    "\u0003\u0154\u0003\u0155\u0005\u0155\u0f90\n\u0155\u0003\u0155\u0003",
    "\u0155\u0005\u0155\u0f94\n\u0155\u0003\u0155\u0003\u0155\u0005\u0155",
    "\u0f98\n\u0155\u0003\u0155\u0005\u0155\u0f9b\n\u0155\u0003\u0155\u0003",
    "\u0155\u0005\u0155\u0f9f\n\u0155\u0003\u0155\u0003\u0155\u0003\u0156",
    "\u0003\u0156\u0003\u0156\u0005\u0156\u0fa6\n\u0156\u0003\u0156\u0007",
    "\u0156\u0fa9\n\u0156\f\u0156\u000e\u0156\u0fac\u000b\u0156\u0003\u0157",
    "\u0003\u0157\u0003\u0157\u0005\u0157\u0fb1\n\u0157\u0003\u0157\u0003",
    "\u0157\u0003\u0158\u0005\u0158\u0fb6\n\u0158\u0003\u0158\u0003\u0158",
    "\u0005\u0158\u0fba\n\u0158\u0003\u0158\u0003\u0158\u0003\u0159\u0005",
    "\u0159\u0fbf\n\u0159\u0003\u0159\u0003\u0159\u0005\u0159\u0fc3\n\u0159",
    "\u0003\u0159\u0003\u0159\u0003\u015a\u0005\u015a\u0fc8\n\u015a\u0003",
    "\u015a\u0003\u015a\u0005\u015a\u0fcc\n\u015a\u0003\u015b\u0005\u015b",
    "\u0fcf\n\u015b\u0003\u015b\u0003\u015b\u0005\u015b\u0fd3\n\u015b\u0003",
    "\u015b\u0003\u015b\u0003\u015c\u0005\u015c\u0fd8\n\u015c\u0003\u015c",
    "\u0003\u015c\u0005\u015c\u0fdc\n\u015c\u0003\u015c\u0003\u015c\u0005",
    "\u015c\u0fe0\n\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0005\u015c",
    "\u0fe5\n\u015c\u0003\u015c\u0003\u015c\u0005\u015c\u0fe9\n\u015c\u0003",
    "\u015c\u0003\u015c\u0005\u015c\u0fed\n\u015c\u0003\u015c\u0003\u015c",
    "\u0005\u015c\u0ff1\n\u015c\u0003\u015c\u0003\u015c\u0003\u015c\u0005",
    "\u015c\u0ff6\n\u015c\u0003\u015c\u0005\u015c\u0ff9\n\u015c\u0003\u015d",
    "\u0005\u015d\u0ffc\n\u015d\u0003\u015d\u0003\u015d\u0003\u015d\u0005",
    "\u015d\u1001\n\u015d\u0003\u015d\u0003\u015d\u0003\u015e\u0003\u015e",
    "\u0003\u015e\u0007\u015e\u1008\n\u015e\f\u015e\u000e\u015e\u100b\u000b",
    "\u015e\u0003\u015f\u0003\u015f\u0005\u015f\u100f\n\u015f\u0003\u0160",
    "\u0003\u0160\u0003\u0161\u0005\u0161\u1014\n\u0161\u0003\u0161\u0003",
    "\u0161\u0005\u0161\u1018\n\u0161\u0003\u0161\u0005\u0161\u101b\n\u0161",
    "\u0003\u0161\u0005\u0161\u101e\n\u0161\u0003\u0161\u0003\u0161\u0005",
    "\u0161\u1022\n\u0161\u0003\u0161\u0003\u0161\u0005\u0161\u1026\n\u0161",
    "\u0003\u0161\u0003\u0161\u0005\u0161\u102a\n\u0161\u0003\u0161\u0003",
    "\u0161\u0003\u0162\u0005\u0162\u102f\n\u0162\u0003\u0162\u0003\u0162",
    "\u0005\u0162\u1033\n\u0162\u0003\u0162\u0003\u0162\u0007\u0162\u1037",
    "\n\u0162\f\u0162\u000e\u0162\u103a\u000b\u0162\u0003\u0162\u0005\u0162",
    "\u103d\n\u0162\u0003\u0162\u0003\u0162\u0005\u0162\u1041\n\u0162\u0003",
    "\u0162\u0003\u0162\u0003\u0163\u0005\u0163\u1046\n\u0163\u0003\u0163",
    "\u0003\u0163\u0003\u0163\u0005\u0163\u104b\n\u0163\u0003\u0163\u0003",
    "\u0163\u0005\u0163\u104f\n\u0163\u0003\u0163\u0005\u0163\u1052\n\u0163",
    "\u0003\u0163\u0003\u0163\u0005\u0163\u1056\n\u0163\u0003\u0163\u0003",
    "\u0163\u0005\u0163\u105a\n\u0163\u0003\u0163\u0003\u0163\u0005\u0163",
    "\u105e\n\u0163\u0003\u0163\u0003\u0163\u0003\u0164\u0003\u0164\u0003",
    "\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003",
    "\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003\u0164\u0003",
    "\u0164\u0003\u0164\u0005\u0164\u1072\n\u0164\u0003\u0165\u0003\u0165",
    "\u0003\u0165\u0003\u0165\u0003\u0165\u0005\u0165\u1079\n\u0165\u0003",
    "\u0166\u0003\u0166\u0003\u0166\u0003\u0166\u0005\u0166\u107f\n\u0166",
    "\u0003\u0166\u0003\u0166\u0005\u0166\u1083\n\u0166\u0003\u0166\u0003",
    "\u0166\u0003\u0166\u0003\u0167\u0003\u0167\u0007\u0167\u108a\n\u0167",
    "\f\u0167\u000e\u0167\u108d\u000b\u0167\u0003\u0167\u0003\u0167\u0007",
    "\u0167\u1091\n\u0167\f\u0167\u000e\u0167\u1094\u000b\u0167\u0003\u0168",
    "\u0003\u0168\u0003\u0168\u0003\u0168\u0003\u0168\u0005\u0168\u109b\n",
    "\u0168\u0003\u0168\u0005\u0168\u109e\n\u0168\u0003\u0168\u0005\u0168",
    "\u10a1\n\u0168\u0003\u0168\u0003\u0168\u0003\u0168\u0003\u0169\u0003",
    "\u0169\u0003\u0169\u0005\u0169\u10a9\n\u0169\u0003\u0169\u0003\u0169",
    "\u0005\u0169\u10ad\n\u0169\u0003\u0169\u0003\u0169\u0003\u016a\u0003",
    "\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0003\u016a\u0003",
    "\u016a\u0003\u016a\u0003\u016a\u0005\u016a\u10bb\n\u016a\u0003\u016b",
    "\u0003\u016b\u0003\u016b\u0005\u016b\u10c0\n\u016b\u0003\u016b\u0003",
    "\u016b\u0005\u016b\u10c4\n\u016b\u0003\u016b\u0003\u016b\u0003\u016c",
    "\u0003\u016c\u0003\u016c\u0003\u016c\u0003\u016c\u0003\u016c\u0003\u016c",
    "\u0003\u016c\u0005\u016c\u10d0\n\u016c\u0003\u016d\u0003\u016d\u0007",
    "\u016d\u10d4\n\u016d\f\u016d\u000e\u016d\u10d7\u000b\u016d\u0003\u016e",
    "\u0003\u016e\u0003\u016f\u0003\u016f\u0003\u016f\u0005\u016f\u10de\n",
    "\u016f\u0003\u016f\u0003\u016f\u0005\u016f\u10e2\n\u016f\u0003\u016f",
    "\u0003\u016f\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170\u0003\u0170",
    "\u0003\u0170\u0003\u0170\u0003\u0170\u0005\u0170\u10ee\n\u0170\u0003",
    "\u0171\u0003\u0171\u0003\u0172\u0003\u0172\u0003\u0172\u0005\u0172\u10f5",
    "\n\u0172\u0003\u0173\u0003\u0173\u0005\u0173\u10f9\n\u0173\u0003\u0174",
    "\u0003\u0174\u0003\u0174\u0003\u0174\u0003\u0174\u0005\u0174\u1100\n",
    "\u0174\u0003\u0175\u0003\u0175\u0003\u0175\u0007\u0175\u1105\n\u0175",
    "\f\u0175\u000e\u0175\u1108\u000b\u0175\u0003\u0175\u0005\u0175\u110b",
    "\n\u0175\u0003\u0175\u0003\u0175\u0003\u0175\u0003\u0176\u0003\u0176",
    "\u0003\u0176\u0007\u0176\u1113\n\u0176\f\u0176\u000e\u0176\u1116\u000b",
    "\u0176\u0003\u0176\u0005\u0176\u1119\n\u0176\u0003\u0176\u0003\u0176",
    "\u0003\u0177\u0003\u0177\u0003\u0177\u0003\u0177\u0003\u0177\u0003\u0177",
    "\u0003\u0177\u0005\u0177\u1124\n\u0177\u0003\u0177\u0003\u0177\u0005",
    "\u0177\u1128\n\u0177\u0003\u0178\u0005\u0178\u112b\n\u0178\u0003\u0178",
    "\u0003\u0178\u0005\u0178\u112f\n\u0178\u0006\u0178\u1131\n\u0178\r\u0178",
    "\u000e\u0178\u1132\u0003\u0179\u0003\u0179\u0003\u0179\u0003\u0179\u0003",
    "\u0179\u0003\u0179\u0005\u0179\u113b\n\u0179\u0003\u017a\u0003\u017a",
    "\u0003\u017a\u0005\u017a\u1140\n\u017a\u0003\u017a\u0003\u017a\u0005",
    "\u017a\u1144\n\u017a\u0003\u017a\u0003\u017a\u0003\u017a\u0003\u017a",
    "\u0005\u017a\u114a\n\u017a\u0003\u017b\u0003\u017b\u0005\u017b\u114e",
    "\n\u017b\u0003\u017c\u0003\u017c\u0007\u017c\u1152\n\u017c\f\u017c\u000e",
    "\u017c\u1155\u000b\u017c\u0003\u017c\u0003\u017c\u0003\u017c\u0007\u017c",
    "\u115a\n\u017c\f\u017c\u000e\u017c\u115d\u000b\u017c\u0003\u017c\u0003",
    "\u017c\u0005\u017c\u1161\n\u017c\u0003\u017d\u0003\u017d\u0005\u017d",
    "\u1165\n\u017d\u0003\u017e\u0003\u017e\u0005\u017e\u1169\n\u017e\u0003",
    "\u017f\u0003\u017f\u0005\u017f\u116d\n\u017f\u0003\u0180\u0003\u0180",
    "\u0003\u0180\u0003\u0180\u0003\u0181\u0003\u0181\u0003\u0181\u0006\u0181",
    "\u1176\n\u0181\r\u0181\u000e\u0181\u1177\u0003\u0181\u0003\u0181\u0003",
    "\u0182\u0003\u0182\u0005\u0182\u117e\n\u0182\u0003\u0183\u0003\u0183",
    "\u0003\u0183\u0003\u0183\u0003\u0184\u0003\u0184\u0003\u0185\u0003\u0185",
    "\u0007\u0185\u1188\n\u0185\f\u0185\u000e\u0185\u118b\u000b\u0185\u0003",
    "\u0186\u0003\u0186\u0003\u0187\u0003\u0187\u0005\u0187\u1191\n\u0187",
    "\u0003\u0188\u0003\u0188\u0005\u0188\u1195\n\u0188\u0003\u0189\u0003",
    "\u0189\u0003\u0189\u0003\u0189\u0003\u018a\u0003\u018a\u0003\u018b\u0003",
    "\u018b\u0003\u018b\u0003\u018b\u0003\u018b\u0005\u018b\u11a2\n\u018b",
    "\u0005\u018b\u11a4\n\u018b\u0003\u018b\u0003\u018b\u0003\u018b\u0003",
    "\u018c\u0003\u018c\u0003\u018c\u0003\u018c\u0003\u018c\u0007\u018c\u11ae",
    "\n\u018c\f\u018c\u000e\u018c\u11b1\u000b\u018c\u0003\u018c\u0003\u018c",
    "\u0003\u018c\u0003\u018c\u0003\u018d\u0003\u018d\u0003\u018d\u0003\u018d",
    "\u0003\u018d\u0005\u018d\u11bc\n\u018d\u0003\u018d\u0005\u018d\u11bf",
    "\n\u018d\u0003\u018d\u0003\u018d\u0003\u018e\u0003\u018e\u0003\u018e",
    "\u0003\u018e\u0002\u0005`\u00ce\u023e\u018f\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118",
    "\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130",
    "\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148",
    "\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160",
    "\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178",
    "\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190",
    "\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8",
    "\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0",
    "\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8",
    "\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0",
    "\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208",
    "\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220",
    "\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238",
    "\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250",
    "\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268",
    "\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280",
    "\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298",
    "\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0",
    "\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8",
    "\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0",
    "\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8",
    "\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310",
    "\u0312\u0314\u0316\u0318\u031a\u0002\u001b\u0003\u0002\u00df\u00e6\u0003",
    "\u0002\u0110\u0129\u0003\u0002\u00fc\u00fd\u0004\u0002TT\u0080\u0080",
    "\u0004\u0002\f\fii\u0004\u0003\u00e9\u00e9\u00f5\u00f5\u0003\u0002x",
    "y\u0004\u0002\u0010\u0010\u00a4\u00a4\t\u0002\u0014\u0014WWdd\u0093",
    "\u0093\u0098\u0098\u00ab\u00ac\u00af\u00af\u0004\u0002::\u0099\u0099",
    "\u0004\u0002\u0081\u0081\u0096\u0096\u0005\u0002\t\t\u000e\u000e\u00ad",
    "\u00ad\u0006\u0002\u0013\u0013\u0015\u0015||\u0084\u0084\u0007\u0002",
    "33\u0081\u0081\u008c\u008c\u0096\u0096\u00b8\u00b8\u0007\u0002oo\u0081",
    "\u0081\u008a\u008a\u0096\u0097\u00b5\u00b5\u0005\u0002%%66\u009b\u009b",
    "\u0004\u0002\u00ae\u00ae\u00b4\u00b4\n\u000299GGJJ\u0088\u0088\u0094",
    "\u0094\u00a1\u00a1\u00a8\u00a8\u00b4\u00b4\u0005\u000299GG\u00b4\u00b4",
    "\u0007\u0002\u0019\u001e  \"#\'*,.\u0004\u0002\r\r^^\u0004\u0002\u000b",
    "\u000b55\u0004\u0002\u00c9\u00ca\u00cc\u00ce\u0003\u0002\u00d9\u00da",
    "\u0004\u0002\u00bf\u00bf\u00fa\u00fa\u0002\u1370\u0002\u031c\u0003\u0002",
    "\u0002\u0002\u0004\u0326\u0003\u0002\u0002\u0002\u0006\u032b\u0003\u0002",
    "\u0002\u0002\b\u032d\u0003\u0002\u0002\u0002\n\u032f\u0003\u0002\u0002",
    "\u0002\f\u033a\u0003\u0002\u0002\u0002\u000e\u033d\u0003\u0002\u0002",
    "\u0002\u0010\u0341\u0003\u0002\u0002\u0002\u0012\u0348\u0003\u0002\u0002",
    "\u0002\u0014\u034f\u0003\u0002\u0002\u0002\u0016\u0356\u0003\u0002\u0002",
    "\u0002\u0018\u035f\u0003\u0002\u0002\u0002\u001a\u036f\u0003\u0002\u0002",
    "\u0002\u001c\u0371\u0003\u0002\u0002\u0002\u001e\u0377\u0003\u0002\u0002",
    "\u0002 \u0379\u0003\u0002\u0002\u0002\"\u037b\u0003\u0002\u0002\u0002",
    "$\u037d\u0003\u0002\u0002\u0002&\u037f\u0003\u0002\u0002\u0002(\u0381",
    "\u0003\u0002\u0002\u0002*\u0383\u0003\u0002\u0002\u0002,\u038d\u0003",
    "\u0002\u0002\u0002.\u0395\u0003\u0002\u0002\u00020\u0397\u0003\u0002",
    "\u0002\u00022\u0399\u0003\u0002\u0002\u00024\u039b\u0003\u0002\u0002",
    "\u00026\u039d\u0003\u0002\u0002\u00028\u039f\u0003\u0002\u0002\u0002",
    ":\u03a1\u0003\u0002\u0002\u0002<\u03a7\u0003\u0002\u0002\u0002>\u03b5",
    "\u0003\u0002\u0002\u0002@\u03d0\u0003\u0002\u0002\u0002B\u03dc\u0003",
    "\u0002\u0002\u0002D\u03de\u0003\u0002\u0002\u0002F\u03f5\u0003\u0002",
    "\u0002\u0002H\u03f7\u0003\u0002\u0002\u0002J\u0400\u0003\u0002\u0002",
    "\u0002L\u0408\u0003\u0002\u0002\u0002N\u040a\u0003\u0002\u0002\u0002",
    "P\u0414\u0003\u0002\u0002\u0002R\u041f\u0003\u0002\u0002\u0002T\u0421",
    "\u0003\u0002\u0002\u0002V\u0429\u0003\u0002\u0002\u0002X\u0432\u0003",
    "\u0002\u0002\u0002Z\u0437\u0003\u0002\u0002\u0002\\\u043c\u0003\u0002",
    "\u0002\u0002^\u0441\u0003\u0002\u0002\u0002`\u044c\u0003\u0002\u0002",
    "\u0002b\u0457\u0003\u0002\u0002\u0002d\u045b\u0003\u0002\u0002\u0002",
    "f\u0477\u0003\u0002\u0002\u0002h\u0479\u0003\u0002\u0002\u0002j\u047d",
    "\u0003\u0002\u0002\u0002l\u0498\u0003\u0002\u0002\u0002n\u04aa\u0003",
    "\u0002\u0002\u0002p\u04ac\u0003\u0002\u0002\u0002r\u04b3\u0003\u0002",
    "\u0002\u0002t\u04ce\u0003\u0002\u0002\u0002v\u04db\u0003\u0002\u0002",
    "\u0002x\u04e7\u0003\u0002\u0002\u0002z\u04ea\u0003\u0002\u0002\u0002",
    "|\u04ec\u0003\u0002\u0002\u0002~\u0501\u0003\u0002\u0002\u0002\u0080",
    "\u0503\u0003\u0002\u0002\u0002\u0082\u0510\u0003\u0002\u0002\u0002\u0084",
    "\u0516\u0003\u0002\u0002\u0002\u0086\u051f\u0003\u0002\u0002\u0002\u0088",
    "\u0521\u0003\u0002\u0002\u0002\u008a\u052d\u0003\u0002\u0002\u0002\u008c",
    "\u0530\u0003\u0002\u0002\u0002\u008e\u0535\u0003\u0002\u0002\u0002\u0090",
    "\u0540\u0003\u0002\u0002\u0002\u0092\u054b\u0003\u0002\u0002\u0002\u0094",
    "\u0555\u0003\u0002\u0002\u0002\u0096\u055d\u0003\u0002\u0002\u0002\u0098",
    "\u055f\u0003\u0002\u0002\u0002\u009a\u0569\u0003\u0002\u0002\u0002\u009c",
    "\u0571\u0003\u0002\u0002\u0002\u009e\u0579\u0003\u0002\u0002\u0002\u00a0",
    "\u057b\u0003\u0002\u0002\u0002\u00a2\u057d\u0003\u0002\u0002\u0002\u00a4",
    "\u0584\u0003\u0002\u0002\u0002\u00a6\u0586\u0003\u0002\u0002\u0002\u00a8",
    "\u058d\u0003\u0002\u0002\u0002\u00aa\u058f\u0003\u0002\u0002\u0002\u00ac",
    "\u0596\u0003\u0002\u0002\u0002\u00ae\u059b\u0003\u0002\u0002\u0002\u00b0",
    "\u059d\u0003\u0002\u0002\u0002\u00b2\u05a4\u0003\u0002\u0002\u0002\u00b4",
    "\u05a8\u0003\u0002\u0002\u0002\u00b6\u05b3\u0003\u0002\u0002\u0002\u00b8",
    "\u05b5\u0003\u0002\u0002\u0002\u00ba\u05b9\u0003\u0002\u0002\u0002\u00bc",
    "\u05bb\u0003\u0002\u0002\u0002\u00be\u05d7\u0003\u0002\u0002\u0002\u00c0",
    "\u05d9\u0003\u0002\u0002\u0002\u00c2\u05eb\u0003\u0002\u0002\u0002\u00c4",
    "\u05ed\u0003\u0002\u0002\u0002\u00c6\u05f7\u0003\u0002\u0002\u0002\u00c8",
    "\u05fb\u0003\u0002\u0002\u0002\u00ca\u0602\u0003\u0002\u0002\u0002\u00cc",
    "\u0606\u0003\u0002\u0002\u0002\u00ce\u0608\u0003\u0002\u0002\u0002\u00d0",
    "\u0614\u0003\u0002\u0002\u0002\u00d2\u0634\u0003\u0002\u0002\u0002\u00d4",
    "\u0636\u0003\u0002\u0002\u0002\u00d6\u063b\u0003\u0002\u0002\u0002\u00d8",
    "\u0645\u0003\u0002\u0002\u0002\u00da\u0649\u0003\u0002\u0002\u0002\u00dc",
    "\u064c\u0003\u0002\u0002\u0002\u00de\u0651\u0003\u0002\u0002\u0002\u00e0",
    "\u0653\u0003\u0002\u0002\u0002\u00e2\u0657\u0003\u0002\u0002\u0002\u00e4",
    "\u0664\u0003\u0002\u0002\u0002\u00e6\u0669\u0003\u0002\u0002\u0002\u00e8",
    "\u066b\u0003\u0002\u0002\u0002\u00ea\u066d\u0003\u0002\u0002\u0002\u00ec",
    "\u0670\u0003\u0002\u0002\u0002\u00ee\u0689\u0003\u0002\u0002\u0002\u00f0",
    "\u0693\u0003\u0002\u0002\u0002\u00f2\u06b8\u0003\u0002\u0002\u0002\u00f4",
    "\u06ba\u0003\u0002\u0002\u0002\u00f6\u06c6\u0003\u0002\u0002\u0002\u00f8",
    "\u06c9\u0003\u0002\u0002\u0002\u00fa\u06e9\u0003\u0002\u0002\u0002\u00fc",
    "\u06f3\u0003\u0002\u0002\u0002\u00fe\u06f6\u0003\u0002\u0002\u0002\u0100",
    "\u0712\u0003\u0002\u0002\u0002\u0102\u0715\u0003\u0002\u0002\u0002\u0104",
    "\u0733\u0003\u0002\u0002\u0002\u0106\u0737\u0003\u0002\u0002\u0002\u0108",
    "\u0743\u0003\u0002\u0002\u0002\u010a\u0745\u0003\u0002\u0002\u0002\u010c",
    "\u0749\u0003\u0002\u0002\u0002\u010e\u074d\u0003\u0002\u0002\u0002\u0110",
    "\u0754\u0003\u0002\u0002\u0002\u0112\u075a\u0003\u0002\u0002\u0002\u0114",
    "\u075d\u0003\u0002\u0002\u0002\u0116\u076b\u0003\u0002\u0002\u0002\u0118",
    "\u076d\u0003\u0002\u0002\u0002\u011a\u0770\u0003\u0002\u0002\u0002\u011c",
    "\u0778\u0003\u0002\u0002\u0002\u011e\u077e\u0003\u0002\u0002\u0002\u0120",
    "\u0780\u0003\u0002\u0002\u0002\u0122\u0786\u0003\u0002\u0002\u0002\u0124",
    "\u078a\u0003\u0002\u0002\u0002\u0126\u078c\u0003\u0002\u0002\u0002\u0128",
    "\u0798\u0003\u0002\u0002\u0002\u012a\u07ac\u0003\u0002\u0002\u0002\u012c",
    "\u07bf\u0003\u0002\u0002\u0002\u012e\u07cd\u0003\u0002\u0002\u0002\u0130",
    "\u07d9\u0003\u0002\u0002\u0002\u0132\u07ec\u0003\u0002\u0002\u0002\u0134",
    "\u07fa\u0003\u0002\u0002\u0002\u0136\u080f\u0003\u0002\u0002\u0002\u0138",
    "\u0813\u0003\u0002\u0002\u0002\u013a\u0815\u0003\u0002\u0002\u0002\u013c",
    "\u0819\u0003\u0002\u0002\u0002\u013e\u081d\u0003\u0002\u0002\u0002\u0140",
    "\u0820\u0003\u0002\u0002\u0002\u0142\u083c\u0003\u0002\u0002\u0002\u0144",
    "\u0861\u0003\u0002\u0002\u0002\u0146\u0863\u0003\u0002\u0002\u0002\u0148",
    "\u0865\u0003\u0002\u0002\u0002\u014a\u0868\u0003\u0002\u0002\u0002\u014c",
    "\u086b\u0003\u0002\u0002\u0002\u014e\u0874\u0003\u0002\u0002\u0002\u0150",
    "\u0885\u0003\u0002\u0002\u0002\u0152\u0887\u0003\u0002\u0002\u0002\u0154",
    "\u088a\u0003\u0002\u0002\u0002\u0156\u088d\u0003\u0002\u0002\u0002\u0158",
    "\u08a2\u0003\u0002\u0002\u0002\u015a\u08a5\u0003\u0002\u0002\u0002\u015c",
    "\u08c0\u0003\u0002\u0002\u0002\u015e\u08c4\u0003\u0002\u0002\u0002\u0160",
    "\u08c7\u0003\u0002\u0002\u0002\u0162\u08d8\u0003\u0002\u0002\u0002\u0164",
    "\u08ee\u0003\u0002\u0002\u0002\u0166\u08f3\u0003\u0002\u0002\u0002\u0168",
    "\u08f5\u0003\u0002\u0002\u0002\u016a\u08f8\u0003\u0002\u0002\u0002\u016c",
    "\u0915\u0003\u0002\u0002\u0002\u016e\u0918\u0003\u0002\u0002\u0002\u0170",
    "\u0927\u0003\u0002\u0002\u0002\u0172\u0936\u0003\u0002\u0002\u0002\u0174",
    "\u0945\u0003\u0002\u0002\u0002\u0176\u0953\u0003\u0002\u0002\u0002\u0178",
    "\u0955\u0003\u0002\u0002\u0002\u017a\u095d\u0003\u0002\u0002\u0002\u017c",
    "\u0967\u0003\u0002\u0002\u0002\u017e\u0977\u0003\u0002\u0002\u0002\u0180",
    "\u0979\u0003\u0002\u0002\u0002\u0182\u098e\u0003\u0002\u0002\u0002\u0184",
    "\u0990\u0003\u0002\u0002\u0002\u0186\u0998\u0003\u0002\u0002\u0002\u0188",
    "\u099b\u0003\u0002\u0002\u0002\u018a\u09a1\u0003\u0002\u0002\u0002\u018c",
    "\u09ad\u0003\u0002\u0002\u0002\u018e\u09b2\u0003\u0002\u0002\u0002\u0190",
    "\u09b4\u0003\u0002\u0002\u0002\u0192\u09c5\u0003\u0002\u0002\u0002\u0194",
    "\u09dc\u0003\u0002\u0002\u0002\u0196\u0a34\u0003\u0002\u0002\u0002\u0198",
    "\u0a37\u0003\u0002\u0002\u0002\u019a\u0a49\u0003\u0002\u0002\u0002\u019c",
    "\u0a50\u0003\u0002\u0002\u0002\u019e\u0a54\u0003\u0002\u0002\u0002\u01a0",
    "\u0a56\u0003\u0002\u0002\u0002\u01a2\u0a5a\u0003\u0002\u0002\u0002\u01a4",
    "\u0a5d\u0003\u0002\u0002\u0002\u01a6\u0a6c\u0003\u0002\u0002\u0002\u01a8",
    "\u0a82\u0003\u0002\u0002\u0002\u01aa\u0a9e\u0003\u0002\u0002\u0002\u01ac",
    "\u0abc\u0003\u0002\u0002\u0002\u01ae\u0acd\u0003\u0002\u0002\u0002\u01b0",
    "\u0acf\u0003\u0002\u0002\u0002\u01b2\u0ad1\u0003\u0002\u0002\u0002\u01b4",
    "\u0ad6\u0003\u0002\u0002\u0002\u01b6\u0aea\u0003\u0002\u0002\u0002\u01b8",
    "\u0aec\u0003\u0002\u0002\u0002\u01ba\u0af0\u0003\u0002\u0002\u0002\u01bc",
    "\u0af2\u0003\u0002\u0002\u0002\u01be\u0afc\u0003\u0002\u0002\u0002\u01c0",
    "\u0b09\u0003\u0002\u0002\u0002\u01c2\u0b0b\u0003\u0002\u0002\u0002\u01c4",
    "\u0b16\u0003\u0002\u0002\u0002\u01c6\u0b1c\u0003\u0002\u0002\u0002\u01c8",
    "\u0b25\u0003\u0002\u0002\u0002\u01ca\u0b27\u0003\u0002\u0002\u0002\u01cc",
    "\u0b2c\u0003\u0002\u0002\u0002\u01ce\u0b48\u0003\u0002\u0002\u0002\u01d0",
    "\u0b4a\u0003\u0002\u0002\u0002\u01d2\u0b5c\u0003\u0002\u0002\u0002\u01d4",
    "\u0b6a\u0003\u0002\u0002\u0002\u01d6\u0b6e\u0003\u0002\u0002\u0002\u01d8",
    "\u0b70\u0003\u0002\u0002\u0002\u01da\u0b86\u0003\u0002\u0002\u0002\u01dc",
    "\u0b8f\u0003\u0002\u0002\u0002\u01de\u0b94\u0003\u0002\u0002\u0002\u01e0",
    "\u0b9e\u0003\u0002\u0002\u0002\u01e2\u0bb1\u0003\u0002\u0002\u0002\u01e4",
    "\u0bb7\u0003\u0002\u0002\u0002\u01e6\u0bd0\u0003\u0002\u0002\u0002\u01e8",
    "\u0bdb\u0003\u0002\u0002\u0002\u01ea\u0bdd\u0003\u0002\u0002\u0002\u01ec",
    "\u0be7\u0003\u0002\u0002\u0002\u01ee\u0be9\u0003\u0002\u0002\u0002\u01f0",
    "\u0bf5\u0003\u0002\u0002\u0002\u01f2\u0bf7\u0003\u0002\u0002\u0002\u01f4",
    "\u0c04\u0003\u0002\u0002\u0002\u01f6\u0c0e\u0003\u0002\u0002\u0002\u01f8",
    "\u0c10\u0003\u0002\u0002\u0002\u01fa\u0c2d\u0003\u0002\u0002\u0002\u01fc",
    "\u0c2f\u0003\u0002\u0002\u0002\u01fe\u0c37\u0003\u0002\u0002\u0002\u0200",
    "\u0c4c\u0003\u0002\u0002\u0002\u0202\u0c50\u0003\u0002\u0002\u0002\u0204",
    "\u0c52\u0003\u0002\u0002\u0002\u0206\u0c64\u0003\u0002\u0002\u0002\u0208",
    "\u0c69\u0003\u0002\u0002\u0002\u020a\u0c79\u0003\u0002\u0002\u0002\u020c",
    "\u0c82\u0003\u0002\u0002\u0002\u020e\u0c84\u0003\u0002\u0002\u0002\u0210",
    "\u0c88\u0003\u0002\u0002\u0002\u0212\u0c95\u0003\u0002\u0002\u0002\u0214",
    "\u0c97\u0003\u0002\u0002\u0002\u0216\u0c9f\u0003\u0002\u0002\u0002\u0218",
    "\u0ca7\u0003\u0002\u0002\u0002\u021a\u0ca9\u0003\u0002\u0002\u0002\u021c",
    "\u0cad\u0003\u0002\u0002\u0002\u021e\u0cb1\u0003\u0002\u0002\u0002\u0220",
    "\u0cb3\u0003\u0002\u0002\u0002\u0222\u0cb7\u0003\u0002\u0002\u0002\u0224",
    "\u0cb9\u0003\u0002\u0002\u0002\u0226\u0cbc\u0003\u0002\u0002\u0002\u0228",
    "\u0cbf\u0003\u0002\u0002\u0002\u022a\u0cc7\u0003\u0002\u0002\u0002\u022c",
    "\u0cc9\u0003\u0002\u0002\u0002\u022e\u0cd0\u0003\u0002\u0002\u0002\u0230",
    "\u0cd8\u0003\u0002\u0002\u0002\u0232\u0cdb\u0003\u0002\u0002\u0002\u0234",
    "\u0cdf\u0003\u0002\u0002\u0002\u0236\u0ce7\u0003\u0002\u0002\u0002\u0238",
    "\u0cf3\u0003\u0002\u0002\u0002\u023a\u0cf5\u0003\u0002\u0002\u0002\u023c",
    "\u0cf8\u0003\u0002\u0002\u0002\u023e\u0d18\u0003\u0002\u0002\u0002\u0240",
    "\u0dfe\u0003\u0002\u0002\u0002\u0242\u0e00\u0003\u0002\u0002\u0002\u0244",
    "\u0e07\u0003\u0002\u0002\u0002\u0246\u0e09\u0003\u0002\u0002\u0002\u0248",
    "\u0e0b\u0003\u0002\u0002\u0002\u024a\u0e0f\u0003\u0002\u0002\u0002\u024c",
    "\u0e11\u0003\u0002\u0002\u0002\u024e\u0e19\u0003\u0002\u0002\u0002\u0250",
    "\u0e1c\u0003\u0002\u0002\u0002\u0252\u0e23\u0003\u0002\u0002\u0002\u0254",
    "\u0e43\u0003\u0002\u0002\u0002\u0256\u0e45\u0003\u0002\u0002\u0002\u0258",
    "\u0e4c\u0003\u0002\u0002\u0002\u025a\u0e53\u0003\u0002\u0002\u0002\u025c",
    "\u0e5b\u0003\u0002\u0002\u0002\u025e\u0e68\u0003\u0002\u0002\u0002\u0260",
    "\u0e6a\u0003\u0002\u0002\u0002\u0262\u0e74\u0003\u0002\u0002\u0002\u0264",
    "\u0e86\u0003\u0002\u0002\u0002\u0266\u0e88\u0003\u0002\u0002\u0002\u0268",
    "\u0e96\u0003\u0002\u0002\u0002\u026a\u0e98\u0003\u0002\u0002\u0002\u026c",
    "\u0e9d\u0003\u0002\u0002\u0002\u026e\u0ea6\u0003\u0002\u0002\u0002\u0270",
    "\u0eb0\u0003\u0002\u0002\u0002\u0272\u0eb3\u0003\u0002\u0002\u0002\u0274",
    "\u0eb9\u0003\u0002\u0002\u0002\u0276\u0ec3\u0003\u0002\u0002\u0002\u0278",
    "\u0ec7\u0003\u0002\u0002\u0002\u027a\u0ec9\u0003\u0002\u0002\u0002\u027c",
    "\u0ece\u0003\u0002\u0002\u0002\u027e\u0ed0\u0003\u0002\u0002\u0002\u0280",
    "\u0eed\u0003\u0002\u0002\u0002\u0282\u0eef\u0003\u0002\u0002\u0002\u0284",
    "\u0ef1\u0003\u0002\u0002\u0002\u0286\u0ef4\u0003\u0002\u0002\u0002\u0288",
    "\u0ef7\u0003\u0002\u0002\u0002\u028a\u0efb\u0003\u0002\u0002\u0002\u028c",
    "\u0f15\u0003\u0002\u0002\u0002\u028e\u0f19\u0003\u0002\u0002\u0002\u0290",
    "\u0f1e\u0003\u0002\u0002\u0002\u0292\u0f35\u0003\u0002\u0002\u0002\u0294",
    "\u0f45\u0003\u0002\u0002\u0002\u0296\u0f47\u0003\u0002\u0002\u0002\u0298",
    "\u0f50\u0003\u0002\u0002\u0002\u029a\u0f5c\u0003\u0002\u0002\u0002\u029c",
    "\u0f60\u0003\u0002\u0002\u0002\u029e\u0f62\u0003\u0002\u0002\u0002\u02a0",
    "\u0f6a\u0003\u0002\u0002\u0002\u02a2\u0f75\u0003\u0002\u0002\u0002\u02a4",
    "\u0f7d\u0003\u0002\u0002\u0002\u02a6\u0f86\u0003\u0002\u0002\u0002\u02a8",
    "\u0f8f\u0003\u0002\u0002\u0002\u02aa\u0fa2\u0003\u0002\u0002\u0002\u02ac",
    "\u0fad\u0003\u0002\u0002\u0002\u02ae\u0fb5\u0003\u0002\u0002\u0002\u02b0",
    "\u0fbe\u0003\u0002\u0002\u0002\u02b2\u0fc7\u0003\u0002\u0002\u0002\u02b4",
    "\u0fce\u0003\u0002\u0002\u0002\u02b6\u0ff8\u0003\u0002\u0002\u0002\u02b8",
    "\u0ffb\u0003\u0002\u0002\u0002\u02ba\u1004\u0003\u0002\u0002\u0002\u02bc",
    "\u100c\u0003\u0002\u0002\u0002\u02be\u1010\u0003\u0002\u0002\u0002\u02c0",
    "\u1013\u0003\u0002\u0002\u0002\u02c2\u102e\u0003\u0002\u0002\u0002\u02c4",
    "\u1045\u0003\u0002\u0002\u0002\u02c6\u1071\u0003\u0002\u0002\u0002\u02c8",
    "\u1078\u0003\u0002\u0002\u0002\u02ca\u107a\u0003\u0002\u0002\u0002\u02cc",
    "\u1087\u0003\u0002\u0002\u0002\u02ce\u1095\u0003\u0002\u0002\u0002\u02d0",
    "\u10a5\u0003\u0002\u0002\u0002\u02d2\u10ba\u0003\u0002\u0002\u0002\u02d4",
    "\u10bc\u0003\u0002\u0002\u0002\u02d6\u10cf\u0003\u0002\u0002\u0002\u02d8",
    "\u10d1\u0003\u0002\u0002\u0002\u02da\u10d8\u0003\u0002\u0002\u0002\u02dc",
    "\u10da\u0003\u0002\u0002\u0002\u02de\u10ed\u0003\u0002\u0002\u0002\u02e0",
    "\u10ef\u0003\u0002\u0002\u0002\u02e2\u10f4\u0003\u0002\u0002\u0002\u02e4",
    "\u10f8\u0003\u0002\u0002\u0002\u02e6\u10ff\u0003\u0002\u0002\u0002\u02e8",
    "\u1101\u0003\u0002\u0002\u0002\u02ea\u110f\u0003\u0002\u0002\u0002\u02ec",
    "\u1127\u0003\u0002\u0002\u0002\u02ee\u112a\u0003\u0002\u0002\u0002\u02f0",
    "\u113a\u0003\u0002\u0002\u0002\u02f2\u1149\u0003\u0002\u0002\u0002\u02f4",
    "\u114d\u0003\u0002\u0002\u0002\u02f6\u1160\u0003\u0002\u0002\u0002\u02f8",
    "\u1164\u0003\u0002\u0002\u0002\u02fa\u1168\u0003\u0002\u0002\u0002\u02fc",
    "\u116c\u0003\u0002\u0002\u0002\u02fe\u116e\u0003\u0002\u0002\u0002\u0300",
    "\u1172\u0003\u0002\u0002\u0002\u0302\u117d\u0003\u0002\u0002\u0002\u0304",
    "\u117f\u0003\u0002\u0002\u0002\u0306\u1183\u0003\u0002\u0002\u0002\u0308",
    "\u1185\u0003\u0002\u0002\u0002\u030a\u118c\u0003\u0002\u0002\u0002\u030c",
    "\u1190\u0003\u0002\u0002\u0002\u030e\u1194\u0003\u0002\u0002\u0002\u0310",
    "\u1196\u0003\u0002\u0002\u0002\u0312\u119a\u0003\u0002\u0002\u0002\u0314",
    "\u119c\u0003\u0002\u0002\u0002\u0316\u11a8\u0003\u0002\u0002\u0002\u0318",
    "\u11b6\u0003\u0002\u0002\u0002\u031a\u11c2\u0003\u0002\u0002\u0002\u031c",
    "\u031d\u0005\u00f6|\u0002\u031d\u031e\u0007\u0002\u0002\u0003\u031e",
    "\u0003\u0003\u0002\u0002\u0002\u031f\u0327\u0005\u0006\u0004\u0002\u0320",
    "\u0327\u0007\u0110\u0002\u0002\u0321\u0327\u0007\u0111\u0002\u0002\u0322",
    "\u0327\u0007\u0112\u0002\u0002\u0323\u0327\u0007\u0113\u0002\u0002\u0324",
    "\u0327\u0007\u0114\u0002\u0002\u0325\u0327\u0007\u0115\u0002\u0002\u0326",
    "\u031f\u0003\u0002\u0002\u0002\u0326\u0320\u0003\u0002\u0002\u0002\u0326",
    "\u0321\u0003\u0002\u0002\u0002\u0326\u0322\u0003\u0002\u0002\u0002\u0326",
    "\u0323\u0003\u0002\u0002\u0002\u0326\u0324\u0003\u0002\u0002\u0002\u0326",
    "\u0325\u0003\u0002\u0002\u0002\u0327\u0005\u0003\u0002\u0002\u0002\u0328",
    "\u032c\u0005\b\u0005\u0002\u0329\u032c\u0007\u00e7\u0002\u0002\u032a",
    "\u032c\u0007\u00e8\u0002\u0002\u032b\u0328\u0003\u0002\u0002\u0002\u032b",
    "\u0329\u0003\u0002\u0002\u0002\u032b\u032a\u0003\u0002\u0002\u0002\u032c",
    "\u0007\u0003\u0002\u0002\u0002\u032d\u032e\t\u0002\u0002\u0002\u032e",
    "\t\u0003\u0002\u0002\u0002\u032f\u0330\t\u0003\u0002\u0002\u0330\u000b",
    "\u0003\u0002\u0002\u0002\u0331\u0332\u0007\u0123\u0002\u0002\u0332\u0333",
    "\u0007\u0121\u0002\u0002\u0333\u0334\u0007\u0124\u0002\u0002\u0334\u033b",
    "\u0007\u0114\u0002\u0002\u0335\u0336\u0007\u0115\u0002\u0002\u0336\u0337",
    "\u0007\u0110\u0002\u0002\u0337\u0338\u0007\u011b\u0002\u0002\u0338\u0339",
    "\u0007\u0122\u0002\u0002\u0339\u033b\u0007\u0114\u0002\u0002\u033a\u0331",
    "\u0003\u0002\u0002\u0002\u033a\u0335\u0003\u0002\u0002\u0002\u033b\r",
    "\u0003\u0002\u0002\u0002\u033c\u033e\u0005\u0006\u0004\u0002\u033d\u033c",
    "\u0003\u0002\u0002\u0002\u033e\u033f\u0003\u0002\u0002\u0002\u033f\u033d",
    "\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340\u000f",
    "\u0003\u0002\u0002\u0002\u0341\u0342\u0007\u00f7\u0002\u0002\u0342\u0344",
    "\u0007\u0117\u0002\u0002\u0343\u0345\u0005\u0004\u0003\u0002\u0344\u0343",
    "\u0003\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u0344",
    "\u0003\u0002\u0002\u0002\u0346\u0347\u0003\u0002\u0002\u0002\u0347\u0011",
    "\u0003\u0002\u0002\u0002\u0348\u0349\u0007\u00f7\u0002\u0002\u0349\u034b",
    "\u0007\u011e\u0002\u0002\u034a\u034c\u0005\b\u0005\u0002\u034b\u034a",
    "\u0003\u0002\u0002\u0002\u034c\u034d\u0003\u0002\u0002\u0002\u034d\u034b",
    "\u0003\u0002\u0002\u0002\u034d\u034e\u0003\u0002\u0002\u0002\u034e\u0013",
    "\u0003\u0002\u0002\u0002\u034f\u0351\u0005\u0016\f\u0002\u0350\u0352",
    "\u0005,\u0017\u0002\u0351\u0350\u0003\u0002\u0002\u0002\u0351\u0352",
    "\u0003\u0002\u0002\u0002\u0352\u0015\u0003\u0002\u0002\u0002\u0353\u0357",
    "\u0005\u000e\b\u0002\u0354\u0357\u0005\u0010\t\u0002\u0355\u0357\u0005",
    "\u0012\n\u0002\u0356\u0353\u0003\u0002\u0002\u0002\u0356\u0354\u0003",
    "\u0002\u0002\u0002\u0356\u0355\u0003\u0002\u0002\u0002\u0357\u0017\u0003",
    "\u0002\u0002\u0002\u0358\u035a\u0005\u001a\u000e\u0002\u0359\u035b\u0005",
    ".\u0018\u0002\u035a\u0359\u0003\u0002\u0002\u0002\u035a\u035b\u0003",
    "\u0002\u0002\u0002\u035b\u0360\u0003\u0002\u0002\u0002\u035c\u035d\u0005",
    "\u000e\b\u0002\u035d\u035e\u0005.\u0018\u0002\u035e\u0360\u0003\u0002",
    "\u0002\u0002\u035f\u0358\u0003\u0002\u0002\u0002\u035f\u035c\u0003\u0002",
    "\u0002\u0002\u0360\u0019\u0003\u0002\u0002\u0002\u0361\u0362\u0005\u000e",
    "\b\u0002\u0362\u0363\u0007\u00fb\u0002\u0002\u0363\u0365\u0005\u000e",
    "\b\u0002\u0364\u0366\u0005\u001c\u000f\u0002\u0365\u0364\u0003\u0002",
    "\u0002\u0002\u0365\u0366\u0003\u0002\u0002\u0002\u0366\u0370\u0003\u0002",
    "\u0002\u0002\u0367\u0368\u0007\u00fb\u0002\u0002\u0368\u036a\u0005\u000e",
    "\b\u0002\u0369\u036b\u0005\u001c\u000f\u0002\u036a\u0369\u0003\u0002",
    "\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u0370\u0003\u0002",
    "\u0002\u0002\u036c\u036d\u0005\u000e\b\u0002\u036d\u036e\u0005\u001c",
    "\u000f\u0002\u036e\u0370\u0003\u0002\u0002\u0002\u036f\u0361\u0003\u0002",
    "\u0002\u0002\u036f\u0367\u0003\u0002\u0002\u0002\u036f\u036c\u0003\u0002",
    "\u0002\u0002\u0370\u001b\u0003\u0002\u0002\u0002\u0371\u0373\u0007\u0114",
    "\u0002\u0002\u0372\u0374\u0005\u001e\u0010\u0002\u0373\u0372\u0003\u0002",
    "\u0002\u0002\u0373\u0374\u0003\u0002\u0002\u0002\u0374\u0375\u0003\u0002",
    "\u0002\u0002\u0375\u0376\u0005\u000e\b\u0002\u0376\u001d\u0003\u0002",
    "\u0002\u0002\u0377\u0378\t\u0004\u0002\u0002\u0378\u001f\u0003\u0002",
    "\u0002\u0002\u0379\u037a\u0007\u00f8\u0002\u0002\u037a!\u0003\u0002",
    "\u0002\u0002\u037b\u037c\u0007\u00f9\u0002\u0002\u037c#\u0003\u0002",
    "\u0002\u0002\u037d\u037e\u0007\u00f7\u0002\u0002\u037e%\u0003\u0002",
    "\u0002\u0002\u037f\u0380\u0007\u00ff\u0002\u0002\u0380\'\u0003\u0002",
    "\u0002\u0002\u0381\u0382\u0007\u00fe\u0002\u0002\u0382)\u0003\u0002",
    "\u0002\u0002\u0383\u0384\u0007\u0100\u0002\u0002\u0384+\u0003\u0002",
    "\u0002\u0002\u0385\u038e\u0007\u0107\u0002\u0002\u0386\u038e\u0007\u0108",
    "\u0002\u0002\u0387\u038e\u0007\u0109\u0002\u0002\u0388\u038e\u0007\u010a",
    "\u0002\u0002\u0389\u038e\u0007\u010b\u0002\u0002\u038a\u038e\u0007\u010c",
    "\u0002\u0002\u038b\u038e\u0005(\u0015\u0002\u038c\u038e\u0005$\u0013",
    "\u0002\u038d\u0385\u0003\u0002\u0002\u0002\u038d\u0386\u0003\u0002\u0002",
    "\u0002\u038d\u0387\u0003\u0002\u0002\u0002\u038d\u0388\u0003\u0002\u0002",
    "\u0002\u038d\u0389\u0003\u0002\u0002\u0002\u038d\u038a\u0003\u0002\u0002",
    "\u0002\u038d\u038b\u0003\u0002\u0002\u0002\u038d\u038c\u0003\u0002\u0002",
    "\u0002\u038e-\u0003\u0002\u0002\u0002\u038f\u0396\u0007\u010d\u0002",
    "\u0002\u0390\u0396\u0007\u010e\u0002\u0002\u0391\u0396\u0007\u010f\u0002",
    "\u0002\u0392\u0396\u0005 \u0011\u0002\u0393\u0396\u0005\"\u0012\u0002",
    "\u0394\u0396\u0005*\u0016\u0002\u0395\u038f\u0003\u0002\u0002\u0002",
    "\u0395\u0390\u0003\u0002\u0002\u0002\u0395\u0391\u0003\u0002\u0002\u0002",
    "\u0395\u0392\u0003\u0002\u0002\u0002\u0395\u0393\u0003\u0002\u0002\u0002",
    "\u0395\u0394\u0003\u0002\u0002\u0002\u0396/\u0003\u0002\u0002\u0002",
    "\u0397\u0398\u0005\u000e\b\u0002\u03981\u0003\u0002\u0002\u0002\u0399",
    "\u039a\u0005\u000e\b\u0002\u039a3\u0003\u0002\u0002\u0002\u039b\u039c",
    "\u0005\u000e\b\u0002\u039c5\u0003\u0002\u0002\u0002\u039d\u039e\u0005",
    "\u000e\b\u0002\u039e7\u0003\u0002\u0002\u0002\u039f\u03a0\u0005\u000e",
    "\b\u0002\u03a09\u0003\u0002\u0002\u0002\u03a1\u03a2\u0005\u000e\b\u0002",
    "\u03a2;\u0003\u0002\u0002\u0002\u03a3\u03a4\u0007\u0110\u0002\u0002",
    "\u03a4\u03a8\u0007\u011c\u0002\u0002\u03a5\u03a6\u0007\u011f\u0002\u0002",
    "\u03a6\u03a8\u0007\u011c\u0002\u0002\u03a7\u03a3\u0003\u0002\u0002\u0002",
    "\u03a7\u03a5\u0003\u0002\u0002\u0002\u03a8=\u0003\u0002\u0002\u0002",
    "\u03a9\u03aa\u00050\u0019\u0002\u03aa\u03ab\u0007\u00f2\u0002\u0002",
    "\u03ab\u03ac\u00052\u001a\u0002\u03ac\u03ad\u0007\u00f2\u0002\u0002",
    "\u03ad\u03ae\u00054\u001b\u0002\u03ae\u03b6\u0003\u0002\u0002\u0002",
    "\u03af\u03b0\u00050\u0019\u0002\u03b0\u03b1\u0007\u00fc\u0002\u0002",
    "\u03b1\u03b2\u00052\u001a\u0002\u03b2\u03b3\u0007\u00fc\u0002\u0002",
    "\u03b3\u03b4\u00054\u001b\u0002\u03b4\u03b6\u0003\u0002\u0002\u0002",
    "\u03b5\u03a9\u0003\u0002\u0002\u0002\u03b5\u03af\u0003\u0002\u0002\u0002",
    "\u03b6?\u0003\u0002\u0002\u0002\u03b7\u03b8\u00056\u001c\u0002\u03b8",
    "\u03b9\u0007\u00f5\u0002\u0002\u03b9\u03bc\u00058\u001d\u0002\u03ba",
    "\u03bb\u0007\u00f5\u0002\u0002\u03bb\u03bd\u0005:\u001e\u0002\u03bc",
    "\u03ba\u0003\u0002\u0002\u0002\u03bc\u03bd\u0003\u0002\u0002\u0002\u03bd",
    "\u03c1\u0003\u0002\u0002\u0002\u03be\u03c0\u0007\u012a\u0002\u0002\u03bf",
    "\u03be\u0003\u0002\u0002\u0002\u03c0\u03c3\u0003\u0002\u0002\u0002\u03c1",
    "\u03bf\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002\u0002\u0002\u03c2",
    "\u03c5\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c4",
    "\u03c6\u0005<\u001f\u0002\u03c5\u03c4\u0003\u0002\u0002\u0002\u03c5",
    "\u03c6\u0003\u0002\u0002\u0002\u03c6\u03d1\u0003\u0002\u0002\u0002\u03c7",
    "\u03cb\u00056\u001c\u0002\u03c8\u03ca\u0007\u012a\u0002\u0002\u03c9",
    "\u03c8\u0003\u0002\u0002\u0002\u03ca\u03cd\u0003\u0002\u0002\u0002\u03cb",
    "\u03c9\u0003\u0002\u0002\u0002\u03cb\u03cc\u0003\u0002\u0002\u0002\u03cc",
    "\u03ce\u0003\u0002\u0002\u0002\u03cd\u03cb\u0003\u0002\u0002\u0002\u03ce",
    "\u03cf\u0005<\u001f\u0002\u03cf\u03d1\u0003\u0002\u0002\u0002\u03d0",
    "\u03b7\u0003\u0002\u0002\u0002\u03d0\u03c7\u0003\u0002\u0002\u0002\u03d1",
    "A\u0003\u0002\u0002\u0002\u03d2\u03d4\u0005> \u0002\u03d3\u03d5\u0007",
    "\u012a\u0002\u0002\u03d4\u03d3\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003",
    "\u0002\u0002\u0002\u03d6\u03d4\u0003\u0002\u0002\u0002\u03d6\u03d7\u0003",
    "\u0002\u0002\u0002\u03d7\u03d8\u0003\u0002\u0002\u0002\u03d8\u03d9\u0005",
    "@!\u0002\u03d9\u03dd\u0003\u0002\u0002\u0002\u03da\u03dd\u0005> \u0002",
    "\u03db\u03dd\u0005@!\u0002\u03dc\u03d2\u0003\u0002\u0002\u0002\u03dc",
    "\u03da\u0003\u0002\u0002\u0002\u03dc\u03db\u0003\u0002\u0002\u0002\u03dd",
    "C\u0003\u0002\u0002\u0002\u03de\u03e2\u0007\u00f9\u0002\u0002\u03df",
    "\u03e1\u0007\u012a\u0002\u0002\u03e0\u03df\u0003\u0002\u0002\u0002\u03e1",
    "\u03e4\u0003\u0002\u0002\u0002\u03e2\u03e0\u0003\u0002\u0002\u0002\u03e2",
    "\u03e3\u0003\u0002\u0002\u0002\u03e3\u03e5\u0003\u0002\u0002\u0002\u03e4",
    "\u03e2\u0003\u0002\u0002\u0002\u03e5\u03e9\u0005B\"\u0002\u03e6\u03e8",
    "\u0007\u012a\u0002\u0002\u03e7\u03e6\u0003\u0002\u0002\u0002\u03e8\u03eb",
    "\u0003\u0002\u0002\u0002\u03e9\u03e7\u0003\u0002\u0002\u0002\u03e9\u03ea",
    "\u0003\u0002\u0002\u0002\u03ea\u03ec\u0003\u0002\u0002\u0002\u03eb\u03e9",
    "\u0003\u0002\u0002\u0002\u03ec\u03ed\u0007\u00f9\u0002\u0002\u03edE",
    "\u0003\u0002\u0002\u0002\u03ee\u03f0\u0007\u00eb\u0002\u0002\u03ef\u03ee",
    "\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002\u0002\u0002\u03f1\u03ef",
    "\u0003\u0002\u0002\u0002\u03f1\u03f2\u0003\u0002\u0002\u0002\u03f2\u03f6",
    "\u0003\u0002\u0002\u0002\u03f3\u03f4\u0007\u00eb\u0002\u0002\u03f4\u03f6",
    "\u0007\u00eb\u0002\u0002\u03f5\u03ef\u0003\u0002\u0002\u0002\u03f5\u03f3",
    "\u0003\u0002\u0002\u0002\u03f6G\u0003\u0002\u0002\u0002\u03f7\u03fb",
    "\u0007\u00eb\u0002\u0002\u03f8\u03fa\u0005F$\u0002\u03f9\u03f8\u0003",
    "\u0002\u0002\u0002\u03fa\u03fd\u0003\u0002\u0002\u0002\u03fb\u03f9\u0003",
    "\u0002\u0002\u0002\u03fb\u03fc\u0003\u0002\u0002\u0002\u03fc\u03fe\u0003",
    "\u0002\u0002\u0002\u03fd\u03fb\u0003\u0002\u0002\u0002\u03fe\u03ff\u0007",
    "\u00eb\u0002\u0002\u03ffI\u0003\u0002\u0002\u0002\u0400\u0401\u0007",
    "\u00eb\u0002\u0002\u0401\u0402\u0005F$\u0002\u0402\u0403\u0007\u00eb",
    "\u0002\u0002\u0403\u0404\u0007\u0112\u0002\u0002\u0404K\u0003\u0002",
    "\u0002\u0002\u0405\u0409\u0005\n\u0006\u0002\u0406\u0407\u0007\u00fa",
    "\u0002\u0002\u0407\u0409\u0005P)\u0002\u0408\u0405\u0003\u0002\u0002",
    "\u0002\u0408\u0406\u0003\u0002\u0002\u0002\u0409M\u0003\u0002\u0002",
    "\u0002\u040a\u040e\u0005L\'\u0002\u040b\u040d\u0005P)\u0002\u040c\u040b",
    "\u0003\u0002\u0002\u0002\u040d\u0410\u0003\u0002\u0002\u0002\u040e\u040c",
    "\u0003\u0002\u0002\u0002\u040e\u040f\u0003\u0002\u0002\u0002\u040fO",
    "\u0003\u0002\u0002\u0002\u0410\u040e\u0003\u0002\u0002\u0002\u0411\u0415",
    "\u0007\u00fa\u0002\u0002\u0412\u0415\u0005\n\u0006\u0002\u0413\u0415",
    "\u0005\u0006\u0004\u0002\u0414\u0411\u0003\u0002\u0002\u0002\u0414\u0412",
    "\u0003\u0002\u0002\u0002\u0414\u0413\u0003\u0002\u0002\u0002\u0415Q",
    "\u0003\u0002\u0002\u0002\u0416\u0420\u0005N(\u0002\u0417\u0419\u0005",
    "N(\u0002\u0418\u041a\u0005V,\u0002\u0419\u0418\u0003\u0002\u0002\u0002",
    "\u0419\u041a\u0003\u0002\u0002\u0002\u041a\u0420\u0003\u0002\u0002\u0002",
    "\u041b\u041c\u0007\u0105\u0002\u0002\u041c\u041d\u0005N(\u0002\u041d",
    "\u041e\u0007\u0106\u0002\u0002\u041e\u0420\u0003\u0002\u0002\u0002\u041f",
    "\u0416\u0003\u0002\u0002\u0002\u041f\u0417\u0003\u0002\u0002\u0002\u041f",
    "\u041b\u0003\u0002\u0002\u0002\u0420S\u0003\u0002\u0002\u0002\u0421",
    "\u0422\u0005R*\u0002\u0422U\u0003\u0002\u0002\u0002\u0423\u042a\u0005",
    "(\u0015\u0002\u0424\u042a\u0005$\u0013\u0002\u0425\u042a\u0005*\u0016",
    "\u0002\u0426\u042a\u0005 \u0011\u0002\u0427\u042a\u0005\"\u0012\u0002",
    "\u0428\u042a\u0005&\u0014\u0002\u0429\u0423\u0003\u0002\u0002\u0002",
    "\u0429\u0424\u0003\u0002\u0002\u0002\u0429\u0425\u0003\u0002\u0002\u0002",
    "\u0429\u0426\u0003\u0002\u0002\u0002\u0429\u0427\u0003\u0002\u0002\u0002",
    "\u0429\u0428\u0003\u0002\u0002\u0002\u042aW\u0003\u0002\u0002\u0002",
    "\u042b\u0433\u0005\f\u0007\u0002\u042c\u0433\u0005\u0014\u000b\u0002",
    "\u042d\u0433\u0005\u0018\r\u0002\u042e\u0433\u0005H%\u0002\u042f\u0433",
    "\u0005J&\u0002\u0430\u0433\u0005D#\u0002\u0431\u0433\u0007t\u0002\u0002",
    "\u0432\u042b\u0003\u0002\u0002\u0002\u0432\u042c\u0003\u0002\u0002\u0002",
    "\u0432\u042d\u0003\u0002\u0002\u0002\u0432\u042e\u0003\u0002\u0002\u0002",
    "\u0432\u042f\u0003\u0002\u0002\u0002\u0432\u0430\u0003\u0002\u0002\u0002",
    "\u0432\u0431\u0003\u0002\u0002\u0002\u0433Y\u0003\u0002\u0002\u0002",
    "\u0434\u0438\u0007=\u0002\u0002\u0435\u0436\u0007<\u0002\u0002\u0436",
    "\u0438\u0007Q\u0002\u0002\u0437\u0434\u0003\u0002\u0002\u0002\u0437",
    "\u0435\u0003\u0002\u0002\u0002\u0438[\u0003\u0002\u0002\u0002\u0439",
    "\u043b\u0005^0\u0002\u043a\u0439\u0003\u0002\u0002\u0002\u043b\u043e",
    "\u0003\u0002\u0002\u0002\u043c\u043a\u0003\u0002\u0002\u0002\u043c\u043d",
    "\u0003\u0002\u0002\u0002\u043d]\u0003\u0002\u0002\u0002\u043e\u043c",
    "\u0003\u0002\u0002\u0002\u043f\u0442\u0005p9\u0002\u0440\u0442\u0005",
    "r:\u0002\u0441\u043f\u0003\u0002\u0002\u0002\u0441\u0440\u0003\u0002",
    "\u0002\u0002\u0442_\u0003\u0002\u0002\u0002\u0443\u0444\b1\u0001\u0002",
    "\u0444\u044d\u0005\u0246\u0124\u0002\u0445\u044d\u0005b2\u0002\u0446",
    "\u044d\u0005d3\u0002\u0447\u044d\u0005f4\u0002\u0448\u0449\u0005j6\u0002",
    "\u0449\u044a\u0005`1\u0005\u044a\u044d\u0003\u0002\u0002\u0002\u044b",
    "\u044d\u0005n8\u0002\u044c\u0443\u0003\u0002\u0002\u0002\u044c\u0445",
    "\u0003\u0002\u0002\u0002\u044c\u0446\u0003\u0002\u0002\u0002\u044c\u0447",
    "\u0003\u0002\u0002\u0002\u044c\u0448\u0003\u0002\u0002\u0002\u044c\u044b",
    "\u0003\u0002\u0002\u0002\u044d\u0454\u0003\u0002\u0002\u0002\u044e\u044f",
    "\f\u0004\u0002\u0002\u044f\u0450\u0005l7\u0002\u0450\u0451\u0005`1\u0005",
    "\u0451\u0453\u0003\u0002\u0002\u0002\u0452\u044e\u0003\u0002\u0002\u0002",
    "\u0453\u0456\u0003\u0002\u0002\u0002\u0454\u0452\u0003\u0002\u0002\u0002",
    "\u0454\u0455\u0003\u0002\u0002\u0002\u0455a\u0003\u0002\u0002\u0002",
    "\u0456\u0454\u0003\u0002\u0002\u0002\u0457\u0458\u0007\u0101\u0002\u0002",
    "\u0458\u0459\u0005`1\u0002\u0459\u045a\u0007\u0102\u0002\u0002\u045a",
    "c\u0003\u0002\u0002\u0002\u045b\u045c\u0005R*\u0002\u045ce\u0003\u0002",
    "\u0002\u0002\u045d\u045e\u00077\u0002\u0002\u045e\u045f\u0007\u0101",
    "\u0002\u0002\u045f\u0460\u0005`1\u0002\u0460\u0461\u0007\u00ed\u0002",
    "\u0002\u0461\u0462\u0005\u00ccg\u0002\u0462\u0463\u0007\u0102\u0002",
    "\u0002\u0463\u0478\u0003\u0002\u0002\u0002\u0464\u0465\u0007\u00a9\u0002",
    "\u0002\u0465\u0466\u0007\u0101\u0002\u0002\u0466\u0467\u0005`1\u0002",
    "\u0467\u0468\u0007\u00ed\u0002\u0002\u0468\u0469\u0005\u00ccg\u0002",
    "\u0469\u046a\u0007\u0102\u0002\u0002\u046a\u0478\u0003\u0002\u0002\u0002",
    "\u046b\u046c\u0007+\u0002\u0002\u046c\u046d\u0007\u0101\u0002\u0002",
    "\u046d\u046e\u0005`1\u0002\u046e\u046f\u0007\u00ed\u0002\u0002\u046f",
    "\u0470\u0005\u00ccg\u0002\u0470\u0471\u0007\u0102\u0002\u0002\u0471",
    "\u0478\u0003\u0002\u0002\u0002\u0472\u0473\u0005\u0282\u0142\u0002\u0473",
    "\u0474\u0007\u0101\u0002\u0002\u0474\u0475\u0005`1\u0002\u0475\u0476",
    "\u0007\u0102\u0002\u0002\u0476\u0478\u0003\u0002\u0002\u0002\u0477\u045d",
    "\u0003\u0002\u0002\u0002\u0477\u0464\u0003\u0002\u0002\u0002\u0477\u046b",
    "\u0003\u0002\u0002\u0002\u0477\u0472\u0003\u0002\u0002\u0002\u0478g",
    "\u0003\u0002\u0002\u0002\u0479\u047a\t\u0004\u0002\u0002\u047ai\u0003",
    "\u0002\u0002\u0002\u047b\u047e\u0005h5\u0002\u047c\u047e\u0007r\u0002",
    "\u0002\u047d\u047b\u0003\u0002\u0002\u0002\u047d\u047c\u0003\u0002\u0002",
    "\u0002\u047ek\u0003\u0002\u0002\u0002\u047f\u0499\u0005h5\u0002\u0480",
    "\u0499\u0007\u00ee\u0002\u0002\u0481\u0499\u0007\u00f2\u0002\u0002\u0482",
    "\u0499\u0007\u00f3\u0002\u0002\u0483\u0499\u0007h\u0002\u0002\u0484",
    "\u0499\u0007\u00f4\u0002\u0002\u0485\u0499\u0007\u00ef\u0002\u0002\u0486",
    "\u0487\u0007\u00f0\u0002\u0002\u0487\u0499\u0007\u00f1\u0002\u0002\u0488",
    "\u0499\u0007\u00f0\u0002\u0002\u0489\u0499\u0007\u00f1\u0002\u0002\u048a",
    "\u048b\u0007\u00f0\u0002\u0002\u048b\u0499\u0007\u00ef\u0002\u0002\u048c",
    "\u048d\u0007\u00f1\u0002\u0002\u048d\u0499\u0007\u00ef\u0002\u0002\u048e",
    "\u0499\u0007\u00f7\u0002\u0002\u048f\u0499\u0007\u0007\u0002\u0002\u0490",
    "\u0499\u0007}\u0002\u0002\u0491\u0499\u0007\u00b9\u0002\u0002\u0492",
    "\u0499\u0007\b\u0002\u0002\u0493\u0499\u0007\u007f\u0002\u0002\u0494",
    "\u0495\u0007\u00f0\u0002\u0002\u0495\u0499\u0007\u00f0\u0002\u0002\u0496",
    "\u0497\u0007\u00f1\u0002\u0002\u0497\u0499\u0007\u00f1\u0002\u0002\u0498",
    "\u047f\u0003\u0002\u0002\u0002\u0498\u0480\u0003\u0002\u0002\u0002\u0498",
    "\u0481\u0003\u0002\u0002\u0002\u0498\u0482\u0003\u0002\u0002\u0002\u0498",
    "\u0483\u0003\u0002\u0002\u0002\u0498\u0484\u0003\u0002\u0002\u0002\u0498",
    "\u0485\u0003\u0002\u0002\u0002\u0498\u0486\u0003\u0002\u0002\u0002\u0498",
    "\u0488\u0003\u0002\u0002\u0002\u0498\u0489\u0003\u0002\u0002\u0002\u0498",
    "\u048a\u0003\u0002\u0002\u0002\u0498\u048c\u0003\u0002\u0002\u0002\u0498",
    "\u048e\u0003\u0002\u0002\u0002\u0498\u048f\u0003\u0002\u0002\u0002\u0498",
    "\u0490\u0003\u0002\u0002\u0002\u0498\u0491\u0003\u0002\u0002\u0002\u0498",
    "\u0492\u0003\u0002\u0002\u0002\u0498\u0493\u0003\u0002\u0002\u0002\u0498",
    "\u0494\u0003\u0002\u0002\u0002\u0498\u0496\u0003\u0002\u0002\u0002\u0499",
    "m\u0003\u0002\u0002\u0002\u049a\u049b\u0007Q\u0002\u0002\u049b\u049c",
    "\u0007\u0101\u0002\u0002\u049c\u049d\u0005`1\u0002\u049d\u049e\u0007",
    "\u00ed\u0002\u0002\u049e\u049f\u0005`1\u0002\u049f\u04a0\u0007\u00ed",
    "\u0002\u0002\u04a0\u04a1\u0005`1\u0002\u04a1\u04a2\u0007\u0102\u0002",
    "\u0002\u04a2\u04ab\u0003\u0002\u0002\u0002\u04a3\u04a4\u0007Q\u0002",
    "\u0002\u04a4\u04a5\u0007\u0101\u0002\u0002\u04a5\u04a6\u0005`1\u0002",
    "\u04a6\u04a7\u0007\u00ed\u0002\u0002\u04a7\u04a8\u0005`1\u0002\u04a8",
    "\u04a9\u0007\u0102\u0002\u0002\u04a9\u04ab\u0003\u0002\u0002\u0002\u04aa",
    "\u049a\u0003\u0002\u0002\u0002\u04aa\u04a3\u0003\u0002\u0002\u0002\u04ab",
    "o\u0003\u0002\u0002\u0002\u04ac\u04ad\u0007\u00f9\u0002\u0002\u04ad",
    "\u04ae\u0007%\u0002\u0002\u04ae\u04af\u0005R*\u0002\u04af\u04b0\u0007",
    "\u00ef\u0002\u0002\u04b0\u04b1\u0005`1\u0002\u04b1\u04b2\u0007\u00e9",
    "\u0002\u0002\u04b2q\u0003\u0002\u0002\u0002\u04b3\u04b4\u0007\u00f9",
    "\u0002\u0002\u04b4\u04b5\u0007Q\u0002\u0002\u04b5\u04b7\u0005`1\u0002",
    "\u04b6\u04b8\u0007\u00a5\u0002\u0002\u04b7\u04b6\u0003\u0002\u0002\u0002",
    "\u04b7\u04b8\u0003\u0002\u0002\u0002\u04b8\u04b9\u0003\u0002\u0002\u0002",
    "\u04b9\u04bd\u0007\u00e9\u0002\u0002\u04ba\u04bc\u0005^0\u0002\u04bb",
    "\u04ba\u0003\u0002\u0002\u0002\u04bc\u04bf\u0003\u0002\u0002\u0002\u04bd",
    "\u04bb\u0003\u0002\u0002\u0002\u04bd\u04be\u0003\u0002\u0002\u0002\u04be",
    "\u04c3\u0003\u0002\u0002\u0002\u04bf\u04bd\u0003\u0002\u0002\u0002\u04c0",
    "\u04c2\u0005t;\u0002\u04c1\u04c0\u0003\u0002\u0002\u0002\u04c2\u04c5",
    "\u0003\u0002\u0002\u0002\u04c3\u04c1\u0003\u0002\u0002\u0002\u04c3\u04c4",
    "\u0003\u0002\u0002\u0002\u04c4\u04c7\u0003\u0002\u0002\u0002\u04c5\u04c3",
    "\u0003\u0002\u0002\u0002\u04c6\u04c8\u0005v<\u0002\u04c7\u04c6\u0003",
    "\u0002\u0002\u0002\u04c7\u04c8\u0003\u0002\u0002\u0002\u04c8\u04c9\u0003",
    "\u0002\u0002\u0002\u04c9\u04ca\u0007\u00f9\u0002\u0002\u04ca\u04cb\u0007",
    ">\u0002\u0002\u04cb\u04cc\u0007Q\u0002\u0002\u04cc\u04cd\u0007\u00e9",
    "\u0002\u0002\u04cds\u0003\u0002\u0002\u0002\u04ce\u04cf\u0007\u00f9",
    "\u0002\u0002\u04cf\u04d0\u0005Z.\u0002\u04d0\u04d2\u0005`1\u0002\u04d1",
    "\u04d3\u0007\u00a5\u0002\u0002\u04d2\u04d1\u0003\u0002\u0002\u0002\u04d2",
    "\u04d3\u0003\u0002\u0002\u0002\u04d3\u04d4\u0003\u0002\u0002\u0002\u04d4",
    "\u04d8\u0007\u00e9\u0002\u0002\u04d5\u04d7\u0005^0\u0002\u04d6\u04d5",
    "\u0003\u0002\u0002\u0002\u04d7\u04da\u0003\u0002\u0002\u0002\u04d8\u04d6",
    "\u0003\u0002\u0002\u0002\u04d8\u04d9\u0003\u0002\u0002\u0002\u04d9u",
    "\u0003\u0002\u0002\u0002\u04da\u04d8\u0003\u0002\u0002\u0002\u04db\u04dc",
    "\u0007\u00f9\u0002\u0002\u04dc\u04dd\u0007<\u0002\u0002\u04dd\u04e1",
    "\u0007\u00e9\u0002\u0002\u04de\u04e0\u0005^0\u0002\u04df\u04de\u0003",
    "\u0002\u0002\u0002\u04e0\u04e3\u0003\u0002\u0002\u0002\u04e1\u04df\u0003",
    "\u0002\u0002\u0002\u04e1\u04e2\u0003\u0002\u0002\u0002\u04e2w\u0003",
    "\u0002\u0002\u0002\u04e3\u04e1\u0003\u0002\u0002\u0002\u04e4\u04e6\u0005",
    "z>\u0002\u04e5\u04e4\u0003\u0002\u0002\u0002\u04e6\u04e9\u0003\u0002",
    "\u0002\u0002\u04e7\u04e5\u0003\u0002\u0002\u0002\u04e7\u04e8\u0003\u0002",
    "\u0002\u0002\u04e8y\u0003\u0002\u0002\u0002\u04e9\u04e7\u0003\u0002",
    "\u0002\u0002\u04ea\u04eb\u0005|?\u0002\u04eb{\u0003\u0002\u0002\u0002",
    "\u04ec\u04ed\u0007\u00f9\u0002\u0002\u04ed\u04ee\u0007\u008e\u0002\u0002",
    "\u04ee\u04ef\u0005H%\u0002\u04ef\u04f3\u0007\u00e9\u0002\u0002\u04f0",
    "\u04f2\u0005z>\u0002\u04f1\u04f0\u0003\u0002\u0002\u0002\u04f2\u04f5",
    "\u0003\u0002\u0002\u0002\u04f3\u04f1\u0003\u0002\u0002\u0002\u04f3\u04f4",
    "\u0003\u0002\u0002\u0002\u04f4\u04f6\u0003\u0002\u0002\u0002\u04f5\u04f3",
    "\u0003\u0002\u0002\u0002\u04f6\u04f7\u0007\u00f9\u0002\u0002\u04f7\u04f8",
    "\u0007>\u0002\u0002\u04f8\u04f9\u0007\u008e\u0002\u0002\u04f9\u04fa",
    "\u0007\u00e9\u0002\u0002\u04fa}\u0003\u0002\u0002\u0002\u04fb\u0502",
    "\u0007\u008a\u0002\u0002\u04fc\u0502\u0007\u0089\u0002\u0002\u04fd\u0502",
    "\u0007H\u0002\u0002\u04fe\u0502\u0007\u0087\u0002\u0002\u04ff\u0500",
    "\u0007\u0089\u0002\u0002\u0500\u0502\u0007H\u0002\u0002\u0501\u04fb",
    "\u0003\u0002\u0002\u0002\u0501\u04fc\u0003\u0002\u0002\u0002\u0501\u04fd",
    "\u0003\u0002\u0002\u0002\u0501\u04fe\u0003\u0002\u0002\u0002\u0501\u04ff",
    "\u0003\u0002\u0002\u0002\u0502\u007f\u0003\u0002\u0002\u0002\u0503\u0504",
    "\u0007\u0101\u0002\u0002\u0504\u0505\u0007w\u0002\u0002\u0505\u050a",
    "\u0005\u0082B\u0002\u0506\u0507\u0007\u00ed\u0002\u0002\u0507\u0509",
    "\u0005\u0082B\u0002\u0508\u0506\u0003\u0002\u0002\u0002\u0509\u050c",
    "\u0003\u0002\u0002\u0002\u050a\u0508\u0003\u0002\u0002\u0002\u050a\u050b",
    "\u0003\u0002\u0002\u0002\u050b\u050d\u0003\u0002\u0002\u0002\u050c\u050a",
    "\u0003\u0002\u0002\u0002\u050d\u050e\u0007\u0102\u0002\u0002\u050e\u0081",
    "\u0003\u0002\u0002\u0002\u050f\u0511\u0005\u0084C\u0002\u0510\u050f",
    "\u0003\u0002\u0002\u0002\u0510\u0511\u0003\u0002\u0002\u0002\u0511\u0512",
    "\u0003\u0002\u0002\u0002\u0512\u0514\u0005R*\u0002\u0513\u0515\u0005",
    "\u0086D\u0002\u0514\u0513\u0003\u0002\u0002\u0002\u0514\u0515\u0003",
    "\u0002\u0002\u0002\u0515\u0083\u0003\u0002\u0002\u0002\u0516\u0517\t",
    "\u0005\u0002\u0002\u0517\u0085\u0003\u0002\u0002\u0002\u0518\u0519\u0007",
    "\n\u0002\u0002\u0519\u0520\u0005\u008aF\u0002\u051a\u051b\u0007\n\u0002",
    "\u0002\u051b\u051c\u0007\u0103\u0002\u0002\u051c\u051d\u0005\u0088E",
    "\u0002\u051d\u051e\u0007\u0104\u0002\u0002\u051e\u0520\u0003\u0002\u0002",
    "\u0002\u051f\u0518\u0003\u0002\u0002\u0002\u051f\u051a\u0003\u0002\u0002",
    "\u0002\u0520\u0087\u0003\u0002\u0002\u0002\u0521\u0526\u0005\u008aF",
    "\u0002\u0522\u0523\u0007\u00ed\u0002\u0002\u0523\u0525\u0005\u008aF",
    "\u0002\u0524\u0522\u0003\u0002\u0002\u0002\u0525\u0528\u0003\u0002\u0002",
    "\u0002\u0526\u0524\u0003\u0002\u0002\u0002\u0526\u0527\u0003\u0002\u0002",
    "\u0002\u0527\u0089\u0003\u0002\u0002\u0002\u0528\u0526\u0003\u0002\u0002",
    "\u0002\u0529\u052e\u0005\u00ccg\u0002\u052a\u052e\u0007p\u0002\u0002",
    "\u052b\u052e\u0007\u00a0\u0002\u0002\u052c\u052e\u0007!\u0002\u0002",
    "\u052d\u0529\u0003\u0002\u0002\u0002\u052d\u052a\u0003\u0002\u0002\u0002",
    "\u052d\u052b\u0003\u0002\u0002\u0002\u052d\u052c\u0003\u0002\u0002\u0002",
    "\u052e\u008b\u0003\u0002\u0002\u0002\u052f\u0531\u0005\u008eH\u0002",
    "\u0530\u052f\u0003\u0002\u0002\u0002\u0531\u0532\u0003\u0002\u0002\u0002",
    "\u0532\u0530\u0003\u0002\u0002\u0002\u0532\u0533\u0003\u0002\u0002\u0002",
    "\u0533\u008d\u0003\u0002\u0002\u0002\u0534\u0536\u0007\u00e9\u0002\u0002",
    "\u0535\u0534\u0003\u0002\u0002\u0002\u0535\u0536\u0003\u0002\u0002\u0002",
    "\u0536\u0537\u0003\u0002\u0002\u0002\u0537\u0538\u0007\u00f0\u0002\u0002",
    "\u0538\u053a\u0005\u0090I\u0002\u0539\u053b\u0007\u00e9\u0002\u0002",
    "\u053a\u0539\u0003\u0002\u0002\u0002\u053a\u053b\u0003\u0002\u0002\u0002",
    "\u053b\u053c\u0003\u0002\u0002\u0002\u053c\u053e\u0007\u00f1\u0002\u0002",
    "\u053d\u053f\u0007\u00e9\u0002\u0002\u053e\u053d\u0003\u0002\u0002\u0002",
    "\u053e\u053f\u0003\u0002\u0002\u0002\u053f\u008f\u0003\u0002\u0002\u0002",
    "\u0540\u0545\u0005\u0092J\u0002\u0541\u0542\u0007\u00ed\u0002\u0002",
    "\u0542\u0544\u0005\u0092J\u0002\u0543\u0541\u0003\u0002\u0002\u0002",
    "\u0544\u0547\u0003\u0002\u0002\u0002\u0545\u0543\u0003\u0002\u0002\u0002",
    "\u0545\u0546\u0003\u0002\u0002\u0002\u0546\u0091\u0003\u0002\u0002\u0002",
    "\u0547\u0545\u0003\u0002\u0002\u0002\u0548\u0549\u0005\u0094K\u0002",
    "\u0549\u054a\u0007\u00f5\u0002\u0002\u054a\u054c\u0003\u0002\u0002\u0002",
    "\u054b\u0548\u0003\u0002\u0002\u0002\u054b\u054c\u0003\u0002\u0002\u0002",
    "\u054c\u054d\u0003\u0002\u0002\u0002\u054d\u0553\u0005\u00d0i\u0002",
    "\u054e\u0550\u0007\u0101\u0002\u0002\u054f\u0551\u0005\u0096L\u0002",
    "\u0550\u054f\u0003\u0002\u0002\u0002\u0550\u0551\u0003\u0002\u0002\u0002",
    "\u0551\u0552\u0003\u0002\u0002\u0002\u0552\u0554\u0007\u0102\u0002\u0002",
    "\u0553\u054e\u0003\u0002\u0002\u0002\u0553\u0554\u0003\u0002\u0002\u0002",
    "\u0554\u0093\u0003\u0002\u0002\u0002\u0555\u0556\t\u0006\u0002\u0002",
    "\u0556\u0095\u0003\u0002\u0002\u0002\u0557\u055e\u0005\u0098M\u0002",
    "\u0558\u0559\u0005\u0098M\u0002\u0559\u055a\u0007\u00ed\u0002\u0002",
    "\u055a\u055b\u0005\u009aN\u0002\u055b\u055e\u0003\u0002\u0002\u0002",
    "\u055c\u055e\u0005\u009aN\u0002\u055d\u0557\u0003\u0002\u0002\u0002",
    "\u055d\u0558\u0003\u0002\u0002\u0002\u055d\u055c\u0003\u0002\u0002\u0002",
    "\u055e\u0097\u0003\u0002\u0002\u0002\u055f\u0566\u0005\u009eP\u0002",
    "\u0560\u0562\u0007\u00ed\u0002\u0002\u0561\u0563\u0005\u009eP\u0002",
    "\u0562\u0561\u0003\u0002\u0002\u0002\u0562\u0563\u0003\u0002\u0002\u0002",
    "\u0563\u0565\u0003\u0002\u0002\u0002\u0564\u0560\u0003\u0002\u0002\u0002",
    "\u0565\u0568\u0003\u0002\u0002\u0002\u0566\u0564\u0003\u0002\u0002\u0002",
    "\u0566\u0567\u0003\u0002\u0002\u0002\u0567\u0099\u0003\u0002\u0002\u0002",
    "\u0568\u0566\u0003\u0002\u0002\u0002\u0569\u056e\u0005\u009cO\u0002",
    "\u056a\u056b\u0007\u00ed\u0002\u0002\u056b\u056d\u0005\u009cO\u0002",
    "\u056c\u056a\u0003\u0002\u0002\u0002\u056d\u0570\u0003\u0002\u0002\u0002",
    "\u056e\u056c\u0003\u0002\u0002\u0002\u056e\u056f\u0003\u0002\u0002\u0002",
    "\u056f\u009b\u0003\u0002\u0002\u0002\u0570\u056e\u0003\u0002\u0002\u0002",
    "\u0571\u0572\u0005T+\u0002\u0572\u0573\u0007\u00f5\u0002\u0002\u0573",
    "\u0574\u0007\u00ef\u0002\u0002\u0574\u0575\u0005\u009eP\u0002\u0575",
    "\u009d\u0003\u0002\u0002\u0002\u0576\u057a\u0005\u0242\u0122\u0002\u0577",
    "\u057a\u0005\u0250\u0129\u0002\u0578\u057a\u0005\u0278\u013d\u0002\u0579",
    "\u0576\u0003\u0002\u0002\u0002\u0579\u0577\u0003\u0002\u0002\u0002\u0579",
    "\u0578\u0003\u0002\u0002\u0002\u057a\u009f\u0003\u0002\u0002\u0002\u057b",
    "\u057c\t\u0007\u0002\u0002\u057c\u00a1\u0003\u0002\u0002\u0002\u057d",
    "\u057e\u0005\u008cG\u0002\u057e\u057f\u0005\u00a0Q\u0002\u057f\u00a3",
    "\u0003\u0002\u0002\u0002\u0580\u0585\u0005\u00a6T\u0002\u0581\u0585",
    "\u0005\u00aaV\u0002\u0582\u0585\u0005\u00acW\u0002\u0583\u0585\u0005",
    "\u00b0Y\u0002\u0584\u0580\u0003\u0002\u0002\u0002\u0584\u0581\u0003",
    "\u0002\u0002\u0002\u0584\u0582\u0003\u0002\u0002\u0002\u0584\u0583\u0003",
    "\u0002\u0002\u0002\u0585\u00a5\u0003\u0002\u0002\u0002\u0586\u0587\u0007",
    "{\u0002\u0002\u0587\u0589\u0007E\u0002\u0002\u0588\u058a\u0005\u00a8",
    "U\u0002\u0589\u0588\u0003\u0002\u0002\u0002\u0589\u058a\u0003\u0002",
    "\u0002\u0002\u058a\u058b\u0003\u0002\u0002\u0002\u058b\u058c\u0005\u00a0",
    "Q\u0002\u058c\u00a7\u0003\u0002\u0002\u0002\u058d\u058e\t\b\u0002\u0002",
    "\u058e\u00a9\u0003\u0002\u0002\u0002\u058f\u0590\u0007{\u0002\u0002",
    "\u0590\u0592\u0007\u009e\u0002\u0002\u0591\u0593\u0005\u00a8U\u0002",
    "\u0592\u0591\u0003\u0002\u0002\u0002\u0592\u0593\u0003\u0002\u0002\u0002",
    "\u0593\u0594\u0003\u0002\u0002\u0002\u0594\u0595\u0005\u00a0Q\u0002",
    "\u0595\u00ab\u0003\u0002\u0002\u0002\u0596\u0597\u0007{\u0002\u0002",
    "\u0597\u0598\u0007$\u0002\u0002\u0598\u0599\u0005\u00aeX\u0002\u0599",
    "\u059a\u0005\u00a0Q\u0002\u059a\u00ad\u0003\u0002\u0002\u0002\u059b",
    "\u059c\t\t\u0002\u0002\u059c\u00af\u0003\u0002\u0002\u0002\u059d\u059e",
    "\u0007{\u0002\u0002\u059e\u05a0\u0007U\u0002\u0002\u059f\u05a1\u0005",
    "\u00a8U\u0002\u05a0\u059f\u0003\u0002\u0002\u0002\u05a0\u05a1\u0003",
    "\u0002\u0002\u0002\u05a1\u05a2\u0003\u0002\u0002\u0002\u05a2\u05a3\u0005",
    "\u00a0Q\u0002\u05a3\u00b1\u0003\u0002\u0002\u0002\u05a4\u05a5\u0007",
    "S\u0002\u0002\u05a5\u05a6\u0005\u00b4[\u0002\u05a6\u05a7\u0005\u00a0",
    "Q\u0002\u05a7\u00b3\u0003\u0002\u0002\u0002\u05a8\u05ad\u0005\u00b6",
    "\\\u0002\u05a9\u05aa\u0007\u00ed\u0002\u0002\u05aa\u05ac\u0005\u00b6",
    "\\\u0002\u05ab\u05a9\u0003\u0002\u0002\u0002\u05ac\u05af\u0003\u0002",
    "\u0002\u0002\u05ad\u05ab\u0003\u0002\u0002\u0002\u05ad\u05ae\u0003\u0002",
    "\u0002\u0002\u05ae\u00b5\u0003\u0002\u0002\u0002\u05af\u05ad\u0003\u0002",
    "\u0002\u0002\u05b0\u05b4\u0005\u00b8]\u0002\u05b1\u05b4\u0005\u00ba",
    "^\u0002\u05b2\u05b4\u0005\u00bc_\u0002\u05b3\u05b0\u0003\u0002\u0002",
    "\u0002\u05b3\u05b1\u0003\u0002\u0002\u0002\u05b3\u05b2\u0003\u0002\u0002",
    "\u0002\u05b4\u00b7\u0003\u0002\u0002\u0002\u05b5\u05b6\u0005R*\u0002",
    "\u05b6\u05b7\u0007\u00ef\u0002\u0002\u05b7\u05b8\u0005\u00ccg\u0002",
    "\u05b8\u00b9\u0003\u0002\u0002\u0002\u05b9\u05ba\u0005\u00ccg\u0002",
    "\u05ba\u00bb\u0003\u0002\u0002\u0002\u05bb\u05bc\u0007\u00f0\u0002\u0002",
    "\u05bc\u05be\u0005\u0302\u0182\u0002\u05bd\u05bf\u0007\u00c4\u0002\u0002",
    "\u05be\u05bd\u0003\u0002\u0002\u0002\u05be\u05bf\u0003\u0002\u0002\u0002",
    "\u05bf\u05c0\u0003\u0002\u0002\u0002\u05c0\u05c2\u0007\u00ef\u0002\u0002",
    "\u05c1\u05c3\u0007\u00c4\u0002\u0002\u05c2\u05c1\u0003\u0002\u0002\u0002",
    "\u05c2\u05c3\u0003\u0002\u0002\u0002\u05c3\u05c4\u0003\u0002\u0002\u0002",
    "\u05c4\u05c5\u0005\u00be`\u0002\u05c5\u05c6\u0007\u00f1\u0002\u0002",
    "\u05c6\u00bd\u0003\u0002\u0002\u0002\u05c7\u05cb\u0007\u00eb\u0002\u0002",
    "\u05c8\u05ca\u0005\u02f8\u017d\u0002\u05c9\u05c8\u0003\u0002\u0002\u0002",
    "\u05ca\u05cd\u0003\u0002\u0002\u0002\u05cb\u05c9\u0003\u0002\u0002\u0002",
    "\u05cb\u05cc\u0003\u0002\u0002\u0002\u05cc\u05ce\u0003\u0002\u0002\u0002",
    "\u05cd\u05cb\u0003\u0002\u0002\u0002\u05ce\u05d8\u0007\u00eb\u0002\u0002",
    "\u05cf\u05d3\u0007\u00ea\u0002\u0002\u05d0\u05d2\u0005\u02fa\u017e\u0002",
    "\u05d1\u05d0\u0003\u0002\u0002\u0002\u05d2\u05d5\u0003\u0002\u0002\u0002",
    "\u05d3\u05d1\u0003\u0002\u0002\u0002\u05d3\u05d4\u0003\u0002\u0002\u0002",
    "\u05d4\u05d6\u0003\u0002\u0002\u0002\u05d5\u05d3\u0003\u0002\u0002\u0002",
    "\u05d6\u05d8\u0007\u00ea\u0002\u0002\u05d7\u05c7\u0003\u0002\u0002\u0002",
    "\u05d7\u05cf\u0003\u0002\u0002\u0002\u05d8\u00bf\u0003\u0002\u0002\u0002",
    "\u05d9\u05da\u0007n\u0002\u0002\u05da\u05db\u0005\u00c2b\u0002\u05db",
    "\u05df\u0005\u00a0Q\u0002\u05dc\u05de\u0005\u00c6d\u0002\u05dd\u05dc",
    "\u0003\u0002\u0002\u0002\u05de\u05e1\u0003\u0002\u0002\u0002\u05df\u05dd",
    "\u0003\u0002\u0002\u0002\u05df\u05e0\u0003\u0002\u0002\u0002\u05e0\u05e2",
    "\u0003\u0002\u0002\u0002\u05e1\u05df\u0003\u0002\u0002\u0002\u05e2\u05e3",
    "\u0007>\u0002\u0002\u05e3\u05e4\u0007n\u0002\u0002\u05e4\u05e5\u0005",
    "\u00a0Q\u0002\u05e5\u00c1\u0003\u0002\u0002\u0002\u05e6\u05ec\u0005",
    "\u00c4c\u0002\u05e7\u05ec\u0007M\u0002\u0002\u05e8\u05e9\u0007M\u0002",
    "\u0002\u05e9\u05ea\u0007\u00fb\u0002\u0002\u05ea\u05ec\u0005\u00c4c",
    "\u0002\u05eb\u05e6\u0003\u0002\u0002\u0002\u05eb\u05e7\u0003\u0002\u0002",
    "\u0002\u05eb\u05e8\u0003\u0002\u0002\u0002\u05ec\u00c3\u0003\u0002\u0002",
    "\u0002\u05ed\u05f2\u0005R*\u0002\u05ee\u05ef\u0007\u00fb\u0002\u0002",
    "\u05ef\u05f1\u0005T+\u0002\u05f0\u05ee\u0003\u0002\u0002\u0002\u05f1",
    "\u05f4\u0003\u0002\u0002\u0002\u05f2\u05f0\u0003\u0002\u0002\u0002\u05f2",
    "\u05f3\u0003\u0002\u0002\u0002\u05f3\u00c5\u0003\u0002\u0002\u0002\u05f4",
    "\u05f2\u0003\u0002\u0002\u0002\u05f5\u05f8\u0005\u00c0a\u0002\u05f6",
    "\u05f8\u0005\u00c8e\u0002\u05f7\u05f5\u0003\u0002\u0002\u0002\u05f7",
    "\u05f6\u0003\u0002\u0002\u0002\u05f8\u00c7\u0003\u0002\u0002\u0002\u05f9",
    "\u05fc\u0005\u00fe\u0080\u0002\u05fa\u05fc\u0005\u00caf\u0002\u05fb",
    "\u05f9\u0003\u0002\u0002\u0002\u05fb\u05fa\u0003\u0002\u0002\u0002\u05fc",
    "\u00c9\u0003\u0002\u0002\u0002\u05fd\u0603\u0005\u00ecw\u0002\u05fe",
    "\u0603\u0005\u00f8}\u0002\u05ff\u0603\u0005\u0102\u0082\u0002\u0600",
    "\u0603\u0005\u00f0y\u0002\u0601\u0603\u0005\u0114\u008b\u0002\u0602",
    "\u05fd\u0003\u0002\u0002\u0002\u0602\u05fe\u0003\u0002\u0002\u0002\u0602",
    "\u05ff\u0003\u0002\u0002\u0002\u0602\u0600\u0003\u0002\u0002\u0002\u0602",
    "\u0601\u0003\u0002\u0002\u0002\u0603\u00cb\u0003\u0002\u0002\u0002\u0604",
    "\u0607\u0005\u010a\u0086\u0002\u0605\u0607\u0005\u00ceh\u0002\u0606",
    "\u0604\u0003\u0002\u0002\u0002\u0606\u0605\u0003\u0002\u0002\u0002\u0607",
    "\u00cd\u0003\u0002\u0002\u0002\u0608\u0609\bh\u0001\u0002\u0609\u060a",
    "\u0005\u00d0i\u0002\u060a\u060f\u0003\u0002\u0002\u0002\u060b\u060c",
    "\f\u0003\u0002\u0002\u060c\u060e\u0007\u00ec\u0002\u0002\u060d\u060b",
    "\u0003\u0002\u0002\u0002\u060e\u0611\u0003\u0002\u0002\u0002\u060f\u060d",
    "\u0003\u0002\u0002\u0002\u060f\u0610\u0003\u0002\u0002\u0002\u0610\u00cf",
    "\u0003\u0002\u0002\u0002\u0611\u060f\u0003\u0002\u0002\u0002\u0612\u0615",
    "\u0005\u00d2j\u0002\u0613\u0615\u0005\u00d8m\u0002\u0614\u0612\u0003",
    "\u0002\u0002\u0002\u0614\u0613\u0003\u0002\u0002\u0002\u0615\u00d1\u0003",
    "\u0002\u0002\u0002\u0616\u0618\u0005R*\u0002\u0617\u0619\u0005\u00d4",
    "k\u0002\u0618\u0617\u0003\u0002\u0002\u0002\u0618\u0619\u0003\u0002",
    "\u0002\u0002\u0619\u0621\u0003\u0002\u0002\u0002\u061a\u061b\u0007\u00fb",
    "\u0002\u0002\u061b\u061d\u0005T+\u0002\u061c\u061e\u0005\u00d4k\u0002",
    "\u061d\u061c\u0003\u0002\u0002\u0002\u061d\u061e\u0003\u0002\u0002\u0002",
    "\u061e\u0620\u0003\u0002\u0002\u0002\u061f\u061a\u0003\u0002\u0002\u0002",
    "\u0620\u0623\u0003\u0002\u0002\u0002\u0621\u061f\u0003\u0002\u0002\u0002",
    "\u0621\u0622\u0003\u0002\u0002\u0002\u0622\u0635\u0003\u0002\u0002\u0002",
    "\u0623\u0621\u0003\u0002\u0002\u0002\u0624\u0625\u0007M\u0002\u0002",
    "\u0625\u0626\u0007\u00fb\u0002\u0002\u0626\u0628\u0005T+\u0002\u0627",
    "\u0629\u0005\u00d4k\u0002\u0628\u0627\u0003\u0002\u0002\u0002\u0628",
    "\u0629\u0003\u0002\u0002\u0002\u0629\u0631\u0003\u0002\u0002\u0002\u062a",
    "\u062b\u0007\u00fb\u0002\u0002\u062b\u062d\u0005T+\u0002\u062c\u062e",
    "\u0005\u00d4k\u0002\u062d\u062c\u0003\u0002\u0002\u0002\u062d\u062e",
    "\u0003\u0002\u0002\u0002\u062e\u0630\u0003\u0002\u0002\u0002\u062f\u062a",
    "\u0003\u0002\u0002\u0002\u0630\u0633\u0003\u0002\u0002\u0002\u0631\u062f",
    "\u0003\u0002\u0002\u0002\u0631\u0632\u0003\u0002\u0002\u0002\u0632\u0635",
    "\u0003\u0002\u0002\u0002\u0633\u0631\u0003\u0002\u0002\u0002\u0634\u0616",
    "\u0003\u0002\u0002\u0002\u0634\u0624\u0003\u0002\u0002\u0002\u0635\u00d3",
    "\u0003\u0002\u0002\u0002\u0636\u0637\u0007\u0101\u0002\u0002\u0637\u0638",
    "\u0007w\u0002\u0002\u0638\u0639\u0005\u00d6l\u0002\u0639\u063a\u0007",
    "\u0102\u0002\u0002\u063a\u00d5\u0003\u0002\u0002\u0002\u063b\u0640\u0005",
    "\u00ccg\u0002\u063c\u063d\u0007\u00ed\u0002\u0002\u063d\u063f\u0005",
    "\u00ccg\u0002\u063e\u063c\u0003\u0002\u0002\u0002\u063f\u0642\u0003",
    "\u0002\u0002\u0002\u0640\u063e\u0003\u0002\u0002\u0002\u0640\u0641\u0003",
    "\u0002\u0002\u0002\u0641\u00d7\u0003\u0002\u0002\u0002\u0642\u0640\u0003",
    "\u0002\u0002\u0002\u0643\u0646\u0007v\u0002\u0002\u0644\u0646\u0005",
    "\u00e4s\u0002\u0645\u0643\u0003\u0002\u0002\u0002\u0645\u0644\u0003",
    "\u0002\u0002\u0002\u0646\u00d9\u0003\u0002\u0002\u0002\u0647\u064a\u0005",
    "~@\u0002\u0648\u064a\u0007\u0096\u0002\u0002\u0649\u0647\u0003\u0002",
    "\u0002\u0002\u0649\u0648\u0003\u0002\u0002\u0002\u064a\u00db\u0003\u0002",
    "\u0002\u0002\u064b\u064d\u0005\u00dep\u0002\u064c\u064b\u0003\u0002",
    "\u0002\u0002\u064c\u064d\u0003\u0002\u0002\u0002\u064d\u064f\u0003\u0002",
    "\u0002\u0002\u064e\u0650\u0005\u0112\u008a\u0002\u064f\u064e\u0003\u0002",
    "\u0002\u0002\u064f\u0650\u0003\u0002\u0002\u0002\u0650\u00dd\u0003\u0002",
    "\u0002\u0002\u0651\u0652\u0007\u00ec\u0002\u0002\u0652\u00df\u0003\u0002",
    "\u0002\u0002\u0653\u0654\u0007R\u0002\u0002\u0654\u0655\u0005\u00e2",
    "r\u0002\u0655\u0656\u0005\u00a0Q\u0002\u0656\u00e1\u0003\u0002\u0002",
    "\u0002\u0657\u065c\u0005\u00ceh\u0002\u0658\u0659\u0007\u00ed\u0002",
    "\u0002\u0659\u065b\u0005\u00ceh\u0002\u065a\u0658\u0003\u0002\u0002",
    "\u0002\u065b\u065e\u0003\u0002\u0002\u0002\u065c\u065a\u0003\u0002\u0002",
    "\u0002\u065c\u065d\u0003\u0002\u0002\u0002\u065d\u00e3\u0003\u0002\u0002",
    "\u0002\u065e\u065c\u0003\u0002\u0002\u0002\u065f\u0665\u0005\u00e6t",
    "\u0002\u0660\u0665\u0007\u0011\u0002\u0002\u0661\u0665\u00070\u0002",
    "\u0002\u0662\u0665\u0007\u001f\u0002\u0002\u0663\u0665\u0007\u009f\u0002",
    "\u0002\u0664\u065f\u0003\u0002\u0002\u0002\u0664\u0660\u0003\u0002\u0002",
    "\u0002\u0664\u0661\u0003\u0002\u0002\u0002\u0664\u0662\u0003\u0002\u0002",
    "\u0002\u0664\u0663\u0003\u0002\u0002\u0002\u0665\u00e5\u0003\u0002\u0002",
    "\u0002\u0666\u066a\u0005\u00e8u\u0002\u0667\u066a\u0005\u00eav\u0002",
    "\u0668\u066a\u00071\u0002\u0002\u0669\u0666\u0003\u0002\u0002\u0002",
    "\u0669\u0667\u0003\u0002\u0002\u0002\u0669\u0668\u0003\u0002\u0002\u0002",
    "\u066a\u00e7\u0003\u0002\u0002\u0002\u066b\u066c\t\n\u0002\u0002\u066c",
    "\u00e9\u0003\u0002\u0002\u0002\u066d\u066e\t\u000b\u0002\u0002\u066e",
    "\u00eb\u0003\u0002\u0002\u0002\u066f\u0671\u0005\u008cG\u0002\u0670",
    "\u066f\u0003\u0002\u0002\u0002\u0670\u0671\u0003\u0002\u0002\u0002\u0671",
    "\u0675\u0003\u0002\u0002\u0002\u0672\u0674\u0005\u00dan\u0002\u0673",
    "\u0672\u0003\u0002\u0002\u0002\u0674\u0677\u0003\u0002\u0002\u0002\u0675",
    "\u0673\u0003\u0002\u0002\u0002\u0675\u0676\u0003\u0002\u0002\u0002\u0676",
    "\u0678\u0003\u0002\u0002\u0002\u0677\u0675\u0003\u0002\u0002\u0002\u0678",
    "\u0679\u0007?\u0002\u0002\u0679\u067c\u0005R*\u0002\u067a\u067b\u0007",
    "\n\u0002\u0002\u067b\u067d\u0005\u00ceh\u0002\u067c\u067a\u0003\u0002",
    "\u0002\u0002\u067c\u067d\u0003\u0002\u0002\u0002\u067d\u067e\u0003\u0002",
    "\u0002\u0002\u067e\u0680\u0005\u00a0Q\u0002\u067f\u0681\u0005\u00ee",
    "x\u0002\u0680\u067f\u0003\u0002\u0002\u0002\u0681\u0682\u0003\u0002",
    "\u0002\u0002\u0682\u0680\u0003\u0002\u0002\u0002\u0682\u0683\u0003\u0002",
    "\u0002\u0002\u0683\u0684\u0003\u0002\u0002\u0002\u0684\u0685\u0007>",
    "\u0002\u0002\u0685\u0686\u0007?\u0002\u0002\u0686\u0687\u0005\u00a0",
    "Q\u0002\u0687\u00ed\u0003\u0002\u0002\u0002\u0688\u068a\u0005\u008c",
    "G\u0002\u0689\u0688\u0003\u0002\u0002\u0002\u0689\u068a\u0003\u0002",
    "\u0002\u0002\u068a\u068b\u0003\u0002\u0002\u0002\u068b\u068e\u0005R",
    "*\u0002\u068c\u068d\u0007\u00ef\u0002\u0002\u068d\u068f\u0005\u0242",
    "\u0122\u0002\u068e\u068c\u0003\u0002\u0002\u0002\u068e\u068f\u0003\u0002",
    "\u0002\u0002\u068f\u0690\u0003\u0002\u0002\u0002\u0690\u0691\u0005\u00a0",
    "Q\u0002\u0691\u00ef\u0003\u0002\u0002\u0002\u0692\u0694\u0005\u008c",
    "G\u0002\u0693\u0692\u0003\u0002\u0002\u0002\u0693\u0694\u0003\u0002",
    "\u0002\u0002\u0694\u0698\u0003\u0002\u0002\u0002\u0695\u0697\u0005\u00f2",
    "z\u0002\u0696\u0695\u0003\u0002\u0002\u0002\u0697\u069a\u0003\u0002",
    "\u0002\u0002\u0698\u0696\u0003\u0002\u0002\u0002\u0698\u0699\u0003\u0002",
    "\u0002\u0002\u0699\u069b\u0003\u0002\u0002\u0002\u069a\u0698\u0003\u0002",
    "\u0002\u0002\u069b\u069c\u0007!\u0002\u0002\u069c\u069e\u0005R*\u0002",
    "\u069d\u069f\u0005\u0080A\u0002\u069e\u069d\u0003\u0002\u0002\u0002",
    "\u069e\u069f\u0003\u0002\u0002\u0002\u069f\u06a0\u0003\u0002\u0002\u0002",
    "\u06a0\u06a2\u0005\u00a0Q\u0002\u06a1\u06a3\u0005\u00f4{\u0002\u06a2",
    "\u06a1\u0003\u0002\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002\u06a3",
    "\u06a7\u0003\u0002\u0002\u0002\u06a4\u06a6\u0005\u00e0q\u0002\u06a5",
    "\u06a4\u0003\u0002\u0002\u0002\u06a6\u06a9\u0003\u0002\u0002\u0002\u06a7",
    "\u06a5\u0003\u0002\u0002\u0002\u06a7\u06a8\u0003\u0002\u0002\u0002\u06a8",
    "\u06ad\u0003\u0002\u0002\u0002\u06a9\u06a7\u0003\u0002\u0002\u0002\u06aa",
    "\u06ac\u0005\u00f6|\u0002\u06ab\u06aa\u0003\u0002\u0002\u0002\u06ac",
    "\u06af\u0003\u0002\u0002\u0002\u06ad\u06ab\u0003\u0002\u0002\u0002\u06ad",
    "\u06ae\u0003\u0002\u0002\u0002\u06ae\u06b0\u0003\u0002\u0002\u0002\u06af",
    "\u06ad\u0003\u0002\u0002\u0002\u06b0\u06b1\u0007>\u0002\u0002\u06b1",
    "\u06b2\u0007!\u0002\u0002\u06b2\u06b3\u0005\u00a0Q\u0002\u06b3\u00f1",
    "\u0003\u0002\u0002\u0002\u06b4\u06b9\u0005\u00dan\u0002\u06b5\u06b9",
    "\u0007j\u0002\u0002\u06b6\u06b9\u0007s\u0002\u0002\u06b7\u06b9\u0007",
    "\u0085\u0002\u0002\u06b8\u06b4\u0003\u0002\u0002\u0002\u06b8\u06b5\u0003",
    "\u0002\u0002\u0002\u06b8\u06b6\u0003\u0002\u0002\u0002\u06b8\u06b7\u0003",
    "\u0002\u0002\u0002\u06b9\u00f3\u0003\u0002\u0002\u0002\u06ba\u06bb\u0007",
    "V\u0002\u0002\u06bb\u06bc\u0005\u00ceh\u0002\u06bc\u06bd\u0005\u00a0",
    "Q\u0002\u06bd\u00f5\u0003\u0002\u0002\u0002\u06be\u06c7\u0005\u00ca",
    "f\u0002\u06bf\u06c7\u0005\u015e\u00b0\u0002\u06c0\u06c7\u0005\u017c",
    "\u00bf\u0002\u06c1\u06c7\u0005\u0174\u00bb\u0002\u06c2\u06c7\u0005\u011e",
    "\u0090\u0002\u06c3\u06c7\u0005\u018e\u00c8\u0002\u06c4\u06c7\u0005\u015a",
    "\u00ae\u0002\u06c5\u06c7\u0005\u01a8\u00d5\u0002\u06c6\u06be\u0003\u0002",
    "\u0002\u0002\u06c6\u06bf\u0003\u0002\u0002\u0002\u06c6\u06c0\u0003\u0002",
    "\u0002\u0002\u06c6\u06c1\u0003\u0002\u0002\u0002\u06c6\u06c2\u0003\u0002",
    "\u0002\u0002\u06c6\u06c3\u0003\u0002\u0002\u0002\u06c6\u06c4\u0003\u0002",
    "\u0002\u0002\u06c6\u06c5\u0003\u0002\u0002\u0002\u06c7\u00f7\u0003\u0002",
    "\u0002\u0002\u06c8\u06ca\u0005\u008cG\u0002\u06c9\u06c8\u0003\u0002",
    "\u0002\u0002\u06c9\u06ca\u0003\u0002\u0002\u0002\u06ca\u06ce\u0003\u0002",
    "\u0002\u0002\u06cb\u06cd\u0005\u00fa~\u0002\u06cc\u06cb\u0003\u0002",
    "\u0002\u0002\u06cd\u06d0\u0003\u0002\u0002\u0002\u06ce\u06cc\u0003\u0002",
    "\u0002\u0002\u06ce\u06cf\u0003\u0002\u0002\u0002\u06cf\u06d1\u0003\u0002",
    "\u0002\u0002\u06d0\u06ce\u0003\u0002\u0002\u0002\u06d1\u06d2\u0007\u00a0",
    "\u0002\u0002\u06d2\u06d4\u0005R*\u0002\u06d3\u06d5\u0005\u0080A\u0002",
    "\u06d4\u06d3\u0003\u0002\u0002\u0002\u06d4\u06d5\u0003\u0002\u0002\u0002",
    "\u06d5\u06d6\u0003\u0002\u0002\u0002\u06d6\u06da\u0005\u00a0Q\u0002",
    "\u06d7\u06d9\u0005\u00e0q\u0002\u06d8\u06d7\u0003\u0002\u0002\u0002",
    "\u06d9\u06dc\u0003\u0002\u0002\u0002\u06da\u06d8\u0003\u0002\u0002\u0002",
    "\u06da\u06db\u0003\u0002\u0002\u0002\u06db\u06e0\u0003\u0002\u0002\u0002",
    "\u06dc\u06da\u0003\u0002\u0002\u0002\u06dd\u06df\u0005\u00fc\u007f\u0002",
    "\u06de\u06dd\u0003\u0002\u0002\u0002\u06df\u06e2\u0003\u0002\u0002\u0002",
    "\u06e0\u06de\u0003\u0002\u0002\u0002\u06e0\u06e1\u0003\u0002\u0002\u0002",
    "\u06e1\u06e3\u0003\u0002\u0002\u0002\u06e2\u06e0\u0003\u0002\u0002\u0002",
    "\u06e3\u06e4\u0007>\u0002\u0002\u06e4\u06e5\u0007\u00a0\u0002\u0002",
    "\u06e5\u06e6\u0005\u00a0Q\u0002\u06e6\u00f9\u0003\u0002\u0002\u0002",
    "\u06e7\u06ea\u0005\u00dan\u0002\u06e8\u06ea\u0007\u0085\u0002\u0002",
    "\u06e9\u06e7\u0003\u0002\u0002\u0002\u06e9\u06e8\u0003\u0002\u0002\u0002",
    "\u06ea\u00fb\u0003\u0002\u0002\u0002\u06eb\u06f4\u0005\u00caf\u0002",
    "\u06ec\u06f4\u0005\u017c\u00bf\u0002\u06ed\u06f4\u0005\u0174\u00bb\u0002",
    "\u06ee\u06f4\u0005\u015e\u00b0\u0002\u06ef\u06f4\u0005\u011e\u0090\u0002",
    "\u06f0\u06f4\u0005\u018e\u00c8\u0002\u06f1\u06f4\u0005\u015a\u00ae\u0002",
    "\u06f2\u06f4\u0005\u01a8\u00d5\u0002\u06f3\u06eb\u0003\u0002\u0002\u0002",
    "\u06f3\u06ec\u0003\u0002\u0002\u0002\u06f3\u06ed\u0003\u0002\u0002\u0002",
    "\u06f3\u06ee\u0003\u0002\u0002\u0002\u06f3\u06ef\u0003\u0002\u0002\u0002",
    "\u06f3\u06f0\u0003\u0002\u0002\u0002\u06f3\u06f1\u0003\u0002\u0002\u0002",
    "\u06f3\u06f2\u0003\u0002\u0002\u0002\u06f4\u00fd\u0003\u0002\u0002\u0002",
    "\u06f5\u06f7\u0005\u008cG\u0002\u06f6\u06f5\u0003\u0002\u0002\u0002",
    "\u06f6\u06f7\u0003\u0002\u0002\u0002\u06f7\u06fb\u0003\u0002\u0002\u0002",
    "\u06f8\u06fa\u0005\u00dan\u0002\u06f9\u06f8\u0003\u0002\u0002\u0002",
    "\u06fa\u06fd\u0003\u0002\u0002\u0002\u06fb\u06f9\u0003\u0002\u0002\u0002",
    "\u06fb\u06fc\u0003\u0002\u0002\u0002\u06fc\u06fe\u0003\u0002\u0002\u0002",
    "\u06fd\u06fb\u0003\u0002\u0002\u0002\u06fe\u06ff\u0007i\u0002\u0002",
    "\u06ff\u0700\u0005R*\u0002\u0700\u0704\u0005\u00a0Q\u0002\u0701\u0703",
    "\u0005\u0100\u0081\u0002\u0702\u0701\u0003\u0002\u0002\u0002\u0703\u0706",
    "\u0003\u0002\u0002\u0002\u0704\u0702\u0003\u0002\u0002\u0002\u0704\u0705",
    "\u0003\u0002\u0002\u0002\u0705\u0707\u0003\u0002\u0002\u0002\u0706\u0704",
    "\u0003\u0002\u0002\u0002\u0707\u0708\u0007>\u0002\u0002\u0708\u0709",
    "\u0007i\u0002\u0002\u0709\u070a\u0005\u00a0Q\u0002\u070a\u00ff\u0003",
    "\u0002\u0002\u0002\u070b\u0713\u0005\u00caf\u0002\u070c\u0713\u0005",
    "\u017c\u00bf\u0002\u070d\u0713\u0005\u0174\u00bb\u0002\u070e\u0713\u0005",
    "\u015e\u00b0\u0002\u070f\u0713\u0005\u011e\u0090\u0002\u0710\u0713\u0005",
    "\u018e\u00c8\u0002\u0711\u0713\u0005\u015a\u00ae\u0002\u0712\u070b\u0003",
    "\u0002\u0002\u0002\u0712\u070c\u0003\u0002\u0002\u0002\u0712\u070d\u0003",
    "\u0002\u0002\u0002\u0712\u070e\u0003\u0002\u0002\u0002\u0712\u070f\u0003",
    "\u0002\u0002\u0002\u0712\u0710\u0003\u0002\u0002\u0002\u0712\u0711\u0003",
    "\u0002\u0002\u0002\u0713\u0101\u0003\u0002\u0002\u0002\u0714\u0716\u0005",
    "\u008cG\u0002\u0715\u0714\u0003\u0002\u0002\u0002\u0715\u0716\u0003",
    "\u0002\u0002\u0002\u0716\u071a\u0003\u0002\u0002\u0002\u0717\u0719\u0005",
    "\u00dan\u0002\u0718\u0717\u0003\u0002\u0002\u0002\u0719\u071c\u0003",
    "\u0002\u0002\u0002\u071a\u0718\u0003\u0002\u0002\u0002\u071a\u071b\u0003",
    "\u0002\u0002\u0002\u071b\u071d\u0003\u0002\u0002\u0002\u071c\u071a\u0003",
    "\u0002\u0002\u0002\u071d\u071e\u0007X\u0002\u0002\u071e\u0720\u0005",
    "R*\u0002\u071f\u0721\u0005\u0080A\u0002\u0720\u071f\u0003\u0002\u0002",
    "\u0002\u0720\u0721\u0003\u0002\u0002\u0002\u0721\u0722\u0003\u0002\u0002",
    "\u0002\u0722\u0726\u0005\u00a0Q\u0002\u0723\u0725\u0005\u0104\u0083",
    "\u0002\u0724\u0723\u0003\u0002\u0002\u0002\u0725\u0728\u0003\u0002\u0002",
    "\u0002\u0726\u0724\u0003\u0002\u0002\u0002\u0726\u0727\u0003\u0002\u0002",
    "\u0002\u0727\u072c\u0003\u0002\u0002\u0002\u0728\u0726\u0003\u0002\u0002",
    "\u0002\u0729\u072b\u0005\u0108\u0085\u0002\u072a\u0729\u0003\u0002\u0002",
    "\u0002\u072b\u072e\u0003\u0002\u0002\u0002\u072c\u072a\u0003\u0002\u0002",
    "\u0002\u072c\u072d\u0003\u0002\u0002\u0002\u072d\u072f\u0003\u0002\u0002",
    "\u0002\u072e\u072c\u0003\u0002\u0002\u0002\u072f\u0730\u0007>\u0002",
    "\u0002\u0730\u0731\u0007X\u0002\u0002\u0731\u0732\u0005\u00a0Q\u0002",
    "\u0732\u0103\u0003\u0002\u0002\u0002\u0733\u0734\u0007V\u0002\u0002",
    "\u0734\u0735\u0005\u0106\u0084\u0002\u0735\u0736\u0005\u00a0Q\u0002",
    "\u0736\u0105\u0003\u0002\u0002\u0002\u0737\u073c\u0005\u00ceh\u0002",
    "\u0738\u0739\u0007\u00ed\u0002\u0002\u0739\u073b\u0005\u00ceh\u0002",
    "\u073a\u0738\u0003\u0002\u0002\u0002\u073b\u073e\u0003\u0002\u0002\u0002",
    "\u073c\u073a\u0003\u0002\u0002\u0002\u073c\u073d\u0003\u0002\u0002\u0002",
    "\u073d\u0107\u0003\u0002\u0002\u0002\u073e\u073c\u0003\u0002\u0002\u0002",
    "\u073f\u0744\u0005\u00caf\u0002\u0740\u0744\u0005\u0162\u00b2\u0002",
    "\u0741\u0744\u0005\u0120\u0091\u0002\u0742\u0744\u0005\u0198\u00cd\u0002",
    "\u0743\u073f\u0003\u0002\u0002\u0002\u0743\u0740\u0003\u0002\u0002\u0002",
    "\u0743\u0741\u0003\u0002\u0002\u0002\u0743\u0742\u0003\u0002\u0002\u0002",
    "\u0744\u0109\u0003\u0002\u0002\u0002\u0745\u0746\u0005\u00ceh\u0002",
    "\u0746\u0747\u0005\u010c\u0087\u0002\u0747\u010b\u0003\u0002\u0002\u0002",
    "\u0748\u074a\u0005\u010e\u0088\u0002\u0749\u0748\u0003\u0002\u0002\u0002",
    "\u074a\u074b\u0003\u0002\u0002\u0002\u074b\u0749\u0003\u0002\u0002\u0002",
    "\u074b\u074c\u0003\u0002\u0002\u0002\u074c\u010d\u0003\u0002\u0002\u0002",
    "\u074d\u074f\u0007\u0101\u0002\u0002\u074e\u0750\u0005\u0110\u0089\u0002",
    "\u074f\u074e\u0003\u0002\u0002\u0002\u074f\u0750\u0003\u0002\u0002\u0002",
    "\u0750\u0751\u0003\u0002\u0002\u0002\u0751\u0752\u0007\u0102\u0002\u0002",
    "\u0752\u010f\u0003\u0002\u0002\u0002\u0753\u0755\u0007\u00ed\u0002\u0002",
    "\u0754\u0753\u0003\u0002\u0002\u0002\u0755\u0756\u0003\u0002\u0002\u0002",
    "\u0756\u0754\u0003\u0002\u0002\u0002\u0756\u0757\u0003\u0002\u0002\u0002",
    "\u0757\u0111\u0003\u0002\u0002\u0002\u0758\u075b\u0005\u010c\u0087\u0002",
    "\u0759\u075b\u0005\u0188\u00c5\u0002\u075a\u0758\u0003\u0002\u0002\u0002",
    "\u075a\u0759\u0003\u0002\u0002\u0002\u075b\u0113\u0003\u0002\u0002\u0002",
    "\u075c\u075e\u0005\u008cG\u0002\u075d\u075c\u0003\u0002\u0002\u0002",
    "\u075d\u075e\u0003\u0002\u0002\u0002\u075e\u0762\u0003\u0002\u0002\u0002",
    "\u075f\u0761\u0005\u00dan\u0002\u0760\u075f\u0003\u0002\u0002\u0002",
    "\u0761\u0764\u0003\u0002\u0002\u0002\u0762\u0760\u0003\u0002\u0002\u0002",
    "\u0762\u0763\u0003\u0002\u0002\u0002\u0763\u0765\u0003\u0002\u0002\u0002",
    "\u0764\u0762\u0003\u0002\u0002\u0002\u0765\u0766\u00074\u0002\u0002",
    "\u0766\u0767\u0005\u0116\u008c\u0002\u0767\u0768\u0005\u00a0Q\u0002",
    "\u0768\u0115\u0003\u0002\u0002\u0002\u0769\u076c\u0005\u0126\u0094\u0002",
    "\u076a\u076c\u0005\u0128\u0095\u0002\u076b\u0769\u0003\u0002\u0002\u0002",
    "\u076b\u076a\u0003\u0002\u0002\u0002\u076c\u0117\u0003\u0002\u0002\u0002",
    "\u076d\u076e\u0007R\u0002\u0002\u076e\u076f\u0005\u011a\u008e\u0002",
    "\u076f\u0119\u0003\u0002\u0002\u0002\u0770\u0775\u0005\u011c\u008f\u0002",
    "\u0771\u0772\u0007\u00ed\u0002\u0002\u0772\u0774\u0005\u011c\u008f\u0002",
    "\u0773\u0771\u0003\u0002\u0002\u0002\u0774\u0777\u0003\u0002\u0002\u0002",
    "\u0775\u0773\u0003\u0002\u0002\u0002\u0775\u0776\u0003\u0002\u0002\u0002",
    "\u0776\u011b\u0003\u0002\u0002\u0002\u0777\u0775\u0003\u0002\u0002\u0002",
    "\u0778\u0779\u0005\u00ceh\u0002\u0779\u077a\u0007\u00fb\u0002\u0002",
    "\u077a\u077b\u0005T+\u0002\u077b\u011d\u0003\u0002\u0002\u0002\u077c",
    "\u077f\u0005\u0122\u0092\u0002\u077d\u077f\u0005\u013e\u00a0\u0002\u077e",
    "\u077c\u0003\u0002\u0002\u0002\u077e\u077d\u0003\u0002\u0002\u0002\u077f",
    "\u011f\u0003\u0002\u0002\u0002\u0780\u0781\u0005\u0124\u0093\u0002\u0781",
    "\u0121\u0003\u0002\u0002\u0002\u0782\u0787\u0005\u012a\u0096\u0002\u0783",
    "\u0787\u0005\u012c\u0097\u0002\u0784\u0787\u0005\u0130\u0099\u0002\u0785",
    "\u0787\u0005\u0132\u009a\u0002\u0786\u0782\u0003\u0002\u0002\u0002\u0786",
    "\u0783\u0003\u0002\u0002\u0002\u0786\u0784\u0003\u0002\u0002\u0002\u0786",
    "\u0785\u0003\u0002\u0002\u0002\u0787\u0123\u0003\u0002\u0002\u0002\u0788",
    "\u078b\u0005\u012e\u0098\u0002\u0789\u078b\u0005\u0134\u009b\u0002\u078a",
    "\u0788\u0003\u0002\u0002\u0002\u078a\u0789\u0003\u0002\u0002\u0002\u078b",
    "\u0125\u0003\u0002\u0002\u0002\u078c\u078d\u0007\u00a1\u0002\u0002\u078d",
    "\u078f\u0005R*\u0002\u078e\u0790\u0005\u0080A\u0002\u078f\u078e\u0003",
    "\u0002\u0002\u0002\u078f\u0790\u0003\u0002\u0002\u0002\u0790\u0796\u0003",
    "\u0002\u0002\u0002\u0791\u0793\u0007\u0101\u0002\u0002\u0792\u0794\u0005",
    "\u014c\u00a7\u0002\u0793\u0792\u0003\u0002\u0002\u0002\u0793\u0794\u0003",
    "\u0002\u0002\u0002\u0794\u0795\u0003\u0002\u0002\u0002\u0795\u0797\u0007",
    "\u0102\u0002\u0002\u0796\u0791\u0003\u0002\u0002\u0002\u0796\u0797\u0003",
    "\u0002\u0002\u0002\u0797\u0127\u0003\u0002\u0002\u0002\u0798\u0799\u0007",
    "J\u0002\u0002\u0799\u079b\u0005R*\u0002\u079a\u079c\u0005\u0080A\u0002",
    "\u079b\u079a\u0003\u0002\u0002\u0002\u079b\u079c\u0003\u0002\u0002\u0002",
    "\u079c\u07a2\u0003\u0002\u0002\u0002\u079d\u079f\u0007\u0101\u0002\u0002",
    "\u079e\u07a0\u0005\u014c\u00a7\u0002\u079f\u079e\u0003\u0002\u0002\u0002",
    "\u079f\u07a0\u0003\u0002\u0002\u0002\u07a0\u07a1\u0003\u0002\u0002\u0002",
    "\u07a1\u07a3\u0007\u0102\u0002\u0002\u07a2\u079d\u0003\u0002\u0002\u0002",
    "\u07a2\u07a3\u0003\u0002\u0002\u0002\u07a3\u07a9\u0003\u0002\u0002\u0002",
    "\u07a4\u07a6\u0007\n\u0002\u0002\u07a5\u07a7\u0005\u008cG\u0002\u07a6",
    "\u07a5\u0003\u0002\u0002\u0002\u07a6\u07a7\u0003\u0002\u0002\u0002\u07a7",
    "\u07a8\u0003\u0002\u0002\u0002\u07a8\u07aa\u0005\u00ccg\u0002\u07a9",
    "\u07a4\u0003\u0002\u0002\u0002\u07a9\u07aa\u0003\u0002\u0002\u0002\u07aa",
    "\u0129\u0003\u0002\u0002\u0002\u07ab\u07ad\u0005\u008cG\u0002\u07ac",
    "\u07ab\u0003\u0002\u0002\u0002\u07ac\u07ad\u0003\u0002\u0002\u0002\u07ad",
    "\u07b1\u0003\u0002\u0002\u0002\u07ae\u07b0\u0005\u0136\u009c\u0002\u07af",
    "\u07ae\u0003\u0002\u0002\u0002\u07b0\u07b3\u0003\u0002\u0002\u0002\u07b1",
    "\u07af\u0003\u0002\u0002\u0002\u07b1\u07b2\u0003\u0002\u0002\u0002\u07b2",
    "\u07b4\u0003\u0002\u0002\u0002\u07b3\u07b1\u0003\u0002\u0002\u0002\u07b4",
    "\u07b6\u0005\u0126\u0094\u0002\u07b5\u07b7\u0005\u013c\u009f\u0002\u07b6",
    "\u07b5\u0003\u0002\u0002\u0002\u07b6\u07b7\u0003\u0002\u0002\u0002\u07b7",
    "\u07b8\u0003\u0002\u0002\u0002\u07b8\u07b9\u0007\u00e9\u0002\u0002\u07b9",
    "\u07ba\u0005\u01b0\u00d9\u0002\u07ba\u07bb\u0007>\u0002\u0002\u07bb",
    "\u07bc\u0007\u00a1\u0002\u0002\u07bc\u07bd\u0005\u00a0Q\u0002\u07bd",
    "\u012b\u0003\u0002\u0002\u0002\u07be\u07c0\u0005\u008cG\u0002\u07bf",
    "\u07be\u0003\u0002\u0002\u0002\u07bf\u07c0\u0003\u0002\u0002\u0002\u07c0",
    "\u07c2\u0003\u0002\u0002\u0002\u07c1\u07c3\u0005\u0138\u009d\u0002\u07c2",
    "\u07c1\u0003\u0002\u0002\u0002\u07c3\u07c4\u0003\u0002\u0002\u0002\u07c4",
    "\u07c2\u0003\u0002\u0002\u0002\u07c4\u07c5\u0003\u0002\u0002\u0002\u07c5",
    "\u07c6\u0003\u0002\u0002\u0002\u07c6\u07c8\u0005\u0126\u0094\u0002\u07c7",
    "\u07c9\u0005\u013c\u009f\u0002\u07c8\u07c7\u0003\u0002\u0002\u0002\u07c8",
    "\u07c9\u0003\u0002\u0002\u0002\u07c9\u07ca\u0003\u0002\u0002\u0002\u07ca",
    "\u07cb\u0005\u00a0Q\u0002\u07cb\u012d\u0003\u0002\u0002\u0002\u07cc",
    "\u07ce\u0005\u008cG\u0002\u07cd\u07cc\u0003\u0002\u0002\u0002\u07cd",
    "\u07ce\u0003\u0002\u0002\u0002\u07ce\u07d2\u0003\u0002\u0002\u0002\u07cf",
    "\u07d1\u0005\u013a\u009e\u0002\u07d0\u07cf\u0003\u0002\u0002\u0002\u07d1",
    "\u07d4\u0003\u0002\u0002\u0002\u07d2\u07d0\u0003\u0002\u0002\u0002\u07d2",
    "\u07d3\u0003\u0002\u0002\u0002\u07d3\u07d5\u0003\u0002\u0002\u0002\u07d4",
    "\u07d2\u0003\u0002\u0002\u0002\u07d5\u07d6\u0005\u0126\u0094\u0002\u07d6",
    "\u07d7\u0005\u00a0Q\u0002\u07d7\u012f\u0003\u0002\u0002\u0002\u07d8",
    "\u07da\u0005\u008cG\u0002\u07d9\u07d8\u0003\u0002\u0002\u0002\u07d9",
    "\u07da\u0003\u0002\u0002\u0002\u07da\u07de\u0003\u0002\u0002\u0002\u07db",
    "\u07dd\u0005\u0136\u009c\u0002\u07dc\u07db\u0003\u0002\u0002\u0002\u07dd",
    "\u07e0\u0003\u0002\u0002\u0002\u07de\u07dc\u0003\u0002\u0002\u0002\u07de",
    "\u07df\u0003\u0002\u0002\u0002\u07df\u07e1\u0003\u0002\u0002\u0002\u07e0",
    "\u07de\u0003\u0002\u0002\u0002\u07e1\u07e3\u0005\u0128\u0095\u0002\u07e2",
    "\u07e4\u0005\u013c\u009f\u0002\u07e3\u07e2\u0003\u0002\u0002\u0002\u07e3",
    "\u07e4\u0003\u0002\u0002\u0002\u07e4\u07e5\u0003\u0002\u0002\u0002\u07e5",
    "\u07e6\u0007\u00e9\u0002\u0002\u07e6\u07e7\u0005\u01b0\u00d9\u0002\u07e7",
    "\u07e8\u0007>\u0002\u0002\u07e8\u07e9\u0007J\u0002\u0002\u07e9\u07ea",
    "\u0005\u00a0Q\u0002\u07ea\u0131\u0003\u0002\u0002\u0002\u07eb\u07ed",
    "\u0005\u008cG\u0002\u07ec\u07eb\u0003\u0002\u0002\u0002\u07ec\u07ed",
    "\u0003\u0002\u0002\u0002\u07ed\u07ef\u0003\u0002\u0002\u0002\u07ee\u07f0",
    "\u0005\u0138\u009d\u0002\u07ef\u07ee\u0003\u0002\u0002\u0002\u07f0\u07f1",
    "\u0003\u0002\u0002\u0002\u07f1\u07ef\u0003\u0002\u0002\u0002\u07f1\u07f2",
    "\u0003\u0002\u0002\u0002\u07f2\u07f3\u0003\u0002\u0002\u0002\u07f3\u07f5",
    "\u0005\u0128\u0095\u0002\u07f4\u07f6\u0005\u013c\u009f\u0002\u07f5\u07f4",
    "\u0003\u0002\u0002\u0002\u07f5\u07f6\u0003\u0002\u0002\u0002\u07f6\u07f7",
    "\u0003\u0002\u0002\u0002\u07f7\u07f8\u0005\u00a0Q\u0002\u07f8\u0133",
    "\u0003\u0002\u0002\u0002\u07f9\u07fb\u0005\u008cG\u0002\u07fa\u07f9",
    "\u0003\u0002\u0002\u0002\u07fa\u07fb\u0003\u0002\u0002\u0002\u07fb\u07ff",
    "\u0003\u0002\u0002\u0002\u07fc\u07fe\u0005\u013a\u009e\u0002\u07fd\u07fc",
    "\u0003\u0002\u0002\u0002\u07fe\u0801\u0003\u0002\u0002\u0002\u07ff\u07fd",
    "\u0003\u0002\u0002\u0002\u07ff\u0800\u0003\u0002\u0002\u0002\u0800\u0802",
    "\u0003\u0002\u0002\u0002\u0801\u07ff\u0003\u0002\u0002\u0002\u0802\u0803",
    "\u0005\u0128\u0095\u0002\u0803\u0804\u0005\u00a0Q\u0002\u0804\u0135",
    "\u0003\u0002\u0002\u0002\u0805\u0810\u0005~@\u0002\u0806\u0810\u0007",
    "\u0096\u0002\u0002\u0807\u0810\u0007\u0097\u0002\u0002\u0808\u0810\u0007",
    "\u0082\u0002\u0002\u0809\u0810\u0007u\u0002\u0002\u080a\u0810\u0007",
    "\u0083\u0002\u0002\u080b\u0810\u0007\u0081\u0002\u0002\u080c\u0810\u0007",
    "\u0085\u0002\u0002\u080d\u0810\u0007^\u0002\u0002\u080e\u0810\u0007",
    "\r\u0002\u0002\u080f\u0805\u0003\u0002\u0002\u0002\u080f\u0806\u0003",
    "\u0002\u0002\u0002\u080f\u0807\u0003\u0002\u0002\u0002\u080f\u0808\u0003",
    "\u0002\u0002\u0002\u080f\u0809\u0003\u0002\u0002\u0002\u080f\u080a\u0003",
    "\u0002\u0002\u0002\u080f\u080b\u0003\u0002\u0002\u0002\u080f\u080c\u0003",
    "\u0002\u0002\u0002\u080f\u080d\u0003\u0002\u0002\u0002\u080f\u080e\u0003",
    "\u0002\u0002\u0002\u0810\u0137\u0003\u0002\u0002\u0002\u0811\u0814\u0005",
    "\u0136\u009c\u0002\u0812\u0814\u0007k\u0002\u0002\u0813\u0811\u0003",
    "\u0002\u0002\u0002\u0813\u0812\u0003\u0002\u0002\u0002\u0814\u0139\u0003",
    "\u0002\u0002\u0002\u0815\u0816\t\f\u0002\u0002\u0816\u013b\u0003\u0002",
    "\u0002\u0002\u0817\u081a\u0005\u0154\u00ab\u0002\u0818\u081a\u0005\u0118",
    "\u008d\u0002\u0819\u0817\u0003\u0002\u0002\u0002\u0819\u0818\u0003\u0002",
    "\u0002\u0002\u081a\u013d\u0003\u0002\u0002\u0002\u081b\u081e\u0005\u0140",
    "\u00a1\u0002\u081c\u081e\u0005\u0142\u00a2\u0002\u081d\u081b\u0003\u0002",
    "\u0002\u0002\u081d\u081c\u0003\u0002\u0002\u0002\u081e\u013f\u0003\u0002",
    "\u0002\u0002\u081f\u0821\u0005\u008cG\u0002\u0820\u081f\u0003\u0002",
    "\u0002\u0002\u0820\u0821\u0003\u0002\u0002\u0002\u0821\u0825\u0003\u0002",
    "\u0002\u0002\u0822\u0824\u0005\u0144\u00a3\u0002\u0823\u0822\u0003\u0002",
    "\u0002\u0002\u0824\u0827\u0003\u0002\u0002\u0002\u0825\u0823\u0003\u0002",
    "\u0002\u0002\u0825\u0826\u0003\u0002\u0002\u0002\u0826\u0828\u0003\u0002",
    "\u0002\u0002\u0827\u0825\u0003\u0002\u0002\u0002\u0828\u082a\u00072",
    "\u0002\u0002\u0829\u082b\u0005\u0146\u00a4\u0002\u082a\u0829\u0003\u0002",
    "\u0002\u0002\u082a\u082b\u0003\u0002\u0002\u0002\u082b\u082c\u0003\u0002",
    "\u0002\u0002\u082c\u082d\u0007\u00a1\u0002\u0002\u082d\u082e\u0005R",
    "*\u0002\u082e\u0830\u0005\u0148\u00a5\u0002\u082f\u0831\u0005\u014a",
    "\u00a6\u0002\u0830\u082f\u0003\u0002\u0002\u0002\u0830\u0831\u0003\u0002",
    "\u0002\u0002\u0831\u0837\u0003\u0002\u0002\u0002\u0832\u0834\u0007\u0101",
    "\u0002\u0002\u0833\u0835\u0005\u014c\u00a7\u0002\u0834\u0833\u0003\u0002",
    "\u0002\u0002\u0834\u0835\u0003\u0002\u0002\u0002\u0835\u0836\u0003\u0002",
    "\u0002\u0002\u0836\u0838\u0007\u0102\u0002\u0002\u0837\u0832\u0003\u0002",
    "\u0002\u0002\u0837\u0838\u0003\u0002\u0002\u0002\u0838\u0839\u0003\u0002",
    "\u0002\u0002\u0839\u083a\u0005\u00a0Q\u0002\u083a\u0141\u0003\u0002",
    "\u0002\u0002\u083b\u083d\u0005\u008cG\u0002\u083c\u083b\u0003\u0002",
    "\u0002\u0002\u083c\u083d\u0003\u0002\u0002\u0002\u083d\u0841\u0003\u0002",
    "\u0002\u0002\u083e\u0840\u0005\u0144\u00a3\u0002\u083f\u083e\u0003\u0002",
    "\u0002\u0002\u0840\u0843\u0003\u0002\u0002\u0002\u0841\u083f\u0003\u0002",
    "\u0002\u0002\u0841\u0842\u0003\u0002\u0002\u0002\u0842\u0844\u0003\u0002",
    "\u0002\u0002\u0843\u0841\u0003\u0002\u0002\u0002\u0844\u0846\u00072",
    "\u0002\u0002\u0845\u0847\u0005\u0146\u00a4\u0002\u0846\u0845\u0003\u0002",
    "\u0002\u0002\u0846\u0847\u0003\u0002\u0002\u0002\u0847\u0848\u0003\u0002",
    "\u0002\u0002\u0848\u0849\u0007J\u0002\u0002\u0849\u084a\u0005R*\u0002",
    "\u084a\u084c\u0005\u0148\u00a5\u0002\u084b\u084d\u0005\u014a\u00a6\u0002",
    "\u084c\u084b\u0003\u0002\u0002\u0002\u084c\u084d\u0003\u0002\u0002\u0002",
    "\u084d\u0853\u0003\u0002\u0002\u0002\u084e\u0850\u0007\u0101\u0002\u0002",
    "\u084f\u0851\u0005\u014c\u00a7\u0002\u0850\u084f\u0003\u0002\u0002\u0002",
    "\u0850\u0851\u0003\u0002\u0002\u0002\u0851\u0852\u0003\u0002\u0002\u0002",
    "\u0852\u0854\u0007\u0102\u0002\u0002\u0853\u084e\u0003\u0002\u0002\u0002",
    "\u0853\u0854\u0003\u0002\u0002\u0002\u0854\u085a\u0003\u0002\u0002\u0002",
    "\u0855\u0857\u0007\n\u0002\u0002\u0856\u0858\u0005\u008cG\u0002\u0857",
    "\u0856\u0003\u0002\u0002\u0002\u0857\u0858\u0003\u0002\u0002\u0002\u0858",
    "\u0859\u0003\u0002\u0002\u0002\u0859\u085b\u0005\u00ccg\u0002\u085a",
    "\u0855\u0003\u0002\u0002\u0002\u085a\u085b\u0003\u0002\u0002\u0002\u085b",
    "\u085c\u0003\u0002\u0002\u0002\u085c\u085d\u0005\u00a0Q\u0002\u085d",
    "\u0143\u0003\u0002\u0002\u0002\u085e\u0862\u0005~@\u0002\u085f\u0862",
    "\u0007\u0096\u0002\u0002\u0860\u0862\u0007\u0081\u0002\u0002\u0861\u085e",
    "\u0003\u0002\u0002\u0002\u0861\u085f\u0003\u0002\u0002\u0002\u0861\u0860",
    "\u0003\u0002\u0002\u0002\u0862\u0145\u0003\u0002\u0002\u0002\u0863\u0864",
    "\t\r\u0002\u0002\u0864\u0147\u0003\u0002\u0002\u0002\u0865\u0866\u0007",
    "b\u0002\u0002\u0866\u0867\u0005H%\u0002\u0867\u0149\u0003\u0002\u0002",
    "\u0002\u0868\u0869\u0007\u0006\u0002\u0002\u0869\u086a\u0005H%\u0002",
    "\u086a\u014b\u0003\u0002\u0002\u0002\u086b\u0870\u0005\u014e\u00a8\u0002",
    "\u086c\u086d\u0007\u00ed\u0002\u0002\u086d\u086f\u0005\u014e\u00a8\u0002",
    "\u086e\u086c\u0003\u0002\u0002\u0002\u086f\u0872\u0003\u0002\u0002\u0002",
    "\u0870\u086e\u0003\u0002\u0002\u0002\u0870\u0871\u0003\u0002\u0002\u0002",
    "\u0871\u014d\u0003\u0002\u0002\u0002\u0872\u0870\u0003\u0002\u0002\u0002",
    "\u0873\u0875\u0005\u008cG\u0002\u0874\u0873\u0003\u0002\u0002\u0002",
    "\u0874\u0875\u0003\u0002\u0002\u0002\u0875\u0879\u0003\u0002\u0002\u0002",
    "\u0876\u0878\u0005\u0150\u00a9\u0002\u0877\u0876\u0003\u0002\u0002\u0002",
    "\u0878\u087b\u0003\u0002\u0002\u0002\u0879\u0877\u0003\u0002\u0002\u0002",
    "\u0879\u087a\u0003\u0002\u0002\u0002\u087a\u087c\u0003\u0002\u0002\u0002",
    "\u087b\u0879\u0003\u0002\u0002\u0002\u087c\u087f\u0005\u0152\u00aa\u0002",
    "\u087d\u087e\u0007\n\u0002\u0002\u087e\u0880\u0005\u00ccg\u0002\u087f",
    "\u087d\u0003\u0002\u0002\u0002\u087f\u0880\u0003\u0002\u0002\u0002\u0880",
    "\u0883\u0003\u0002\u0002\u0002\u0881\u0882\u0007\u00ef\u0002\u0002\u0882",
    "\u0884\u0005\u0242\u0122\u0002\u0883\u0881\u0003\u0002\u0002\u0002\u0883",
    "\u0884\u0003\u0002\u0002\u0002\u0884\u014f\u0003\u0002\u0002\u0002\u0885",
    "\u0886\t\u000e\u0002\u0002\u0886\u0151\u0003\u0002\u0002\u0002\u0887",
    "\u0888\u0005R*\u0002\u0888\u0889\u0005\u00dco\u0002\u0889\u0153\u0003",
    "\u0002\u0002\u0002\u088a\u088b\u0007P\u0002\u0002\u088b\u088c\u0005",
    "\u0156\u00ac\u0002\u088c\u0155\u0003\u0002\u0002\u0002\u088d\u0892\u0005",
    "\u0158\u00ad\u0002\u088e\u088f\u0007\u00ed\u0002\u0002\u088f\u0891\u0005",
    "\u0158\u00ad\u0002\u0890\u088e\u0003\u0002\u0002\u0002\u0891\u0894\u0003",
    "\u0002\u0002\u0002\u0892\u0890\u0003\u0002\u0002\u0002\u0892\u0893\u0003",
    "\u0002\u0002\u0002\u0893\u0157\u0003\u0002\u0002\u0002\u0894\u0892\u0003",
    "\u0002\u0002\u0002\u0895\u0896\u0005R*\u0002\u0896\u0897\u0007\u00fb",
    "\u0002\u0002\u0897\u0898\u0005T+\u0002\u0898\u08a3\u0003\u0002\u0002",
    "\u0002\u0899\u089a\u0007l\u0002\u0002\u089a\u089b\u0007\u00fb\u0002",
    "\u0002\u089b\u08a3\u0005T+\u0002\u089c\u089d\u0007m\u0002\u0002\u089d",
    "\u089e\u0007\u00fb\u0002\u0002\u089e\u08a3\u0005T+\u0002\u089f\u08a0",
    "\u0007f\u0002\u0002\u08a0\u08a1\u0007\u00fb\u0002\u0002\u08a1\u08a3",
    "\u0005T+\u0002\u08a2\u0895\u0003\u0002\u0002\u0002\u08a2\u0899\u0003",
    "\u0002\u0002\u0002\u08a2\u089c\u0003\u0002\u0002\u0002\u08a2\u089f\u0003",
    "\u0002\u0002\u0002\u08a3\u0159\u0003\u0002\u0002\u0002\u08a4\u08a6\u0005",
    "\u008cG\u0002\u08a5\u08a4\u0003\u0002\u0002\u0002\u08a5\u08a6\u0003",
    "\u0002\u0002\u0002\u08a6\u08aa\u0003\u0002\u0002\u0002\u08a7\u08a9\u0005",
    "\u015c\u00af\u0002\u08a8\u08a7\u0003\u0002\u0002\u0002\u08a9\u08ac\u0003",
    "\u0002\u0002\u0002\u08aa\u08a8\u0003\u0002\u0002\u0002\u08aa\u08ab\u0003",
    "\u0002\u0002\u0002\u08ab\u08ad\u0003\u0002\u0002\u0002\u08ac\u08aa\u0003",
    "\u0002\u0002\u0002\u08ad\u08ae\u0007\u00a1\u0002\u0002\u08ae\u08b4\u0007",
    "p\u0002\u0002\u08af\u08b1\u0007\u0101\u0002\u0002\u08b0\u08b2\u0005",
    "\u014c\u00a7\u0002\u08b1\u08b0\u0003\u0002\u0002\u0002\u08b1\u08b2\u0003",
    "\u0002\u0002\u0002\u08b2\u08b3\u0003\u0002\u0002\u0002\u08b3\u08b5\u0007",
    "\u0102\u0002\u0002\u08b4\u08af\u0003\u0002\u0002\u0002\u08b4\u08b5\u0003",
    "\u0002\u0002\u0002\u08b5\u08b6\u0003\u0002\u0002\u0002\u08b6\u08b8\u0007",
    "\u00e9\u0002\u0002\u08b7\u08b9\u0005\u01b0\u00d9\u0002\u08b8\u08b7\u0003",
    "\u0002\u0002\u0002\u08b8\u08b9\u0003\u0002\u0002\u0002\u08b9\u08ba\u0003",
    "\u0002\u0002\u0002\u08ba\u08bb\u0007>\u0002\u0002\u08bb\u08bc\u0007",
    "\u00a1\u0002\u0002\u08bc\u08bd\u0005\u00a0Q\u0002\u08bd\u015b\u0003",
    "\u0002\u0002\u0002\u08be\u08c1\u0005~@\u0002\u08bf\u08c1\u0007\u0097",
    "\u0002\u0002\u08c0\u08be\u0003\u0002\u0002\u0002\u08c0\u08bf\u0003\u0002",
    "\u0002\u0002\u08c1\u015d\u0003\u0002\u0002\u0002\u08c2\u08c5\u0005\u0160",
    "\u00b1\u0002\u08c3\u08c5\u0005\u016a\u00b6\u0002\u08c4\u08c2\u0003\u0002",
    "\u0002\u0002\u08c4\u08c3\u0003\u0002\u0002\u0002\u08c5\u015f\u0003\u0002",
    "\u0002\u0002\u08c6\u08c8\u0005\u008cG\u0002\u08c7\u08c6\u0003\u0002",
    "\u0002\u0002\u08c7\u08c8\u0003\u0002\u0002\u0002\u08c8\u08cc\u0003\u0002",
    "\u0002\u0002\u08c9\u08cb\u0005\u0166\u00b4\u0002\u08ca\u08c9\u0003\u0002",
    "\u0002\u0002\u08cb\u08ce\u0003\u0002\u0002\u0002\u08cc\u08ca\u0003\u0002",
    "\u0002\u0002\u08cc\u08cd\u0003\u0002\u0002\u0002\u08cd\u08cf\u0003\u0002",
    "\u0002\u0002\u08ce\u08cc\u0003\u0002\u0002\u0002\u08cf\u08d0\u0007C",
    "\u0002\u0002\u08d0\u08d1\u0005R*\u0002\u08d1\u08d3\u0005\u0164\u00b3",
    "\u0002\u08d2\u08d4\u0005\u0118\u008d\u0002\u08d3\u08d2\u0003\u0002\u0002",
    "\u0002\u08d3\u08d4\u0003\u0002\u0002\u0002\u08d4\u08d5\u0003\u0002\u0002",
    "\u0002\u08d5\u08d6\u0005\u00a0Q\u0002\u08d6\u0161\u0003\u0002\u0002",
    "\u0002\u08d7\u08d9\u0005\u008cG\u0002\u08d8\u08d7\u0003\u0002\u0002",
    "\u0002\u08d8\u08d9\u0003\u0002\u0002\u0002\u08d9\u08dd\u0003\u0002\u0002",
    "\u0002\u08da\u08dc\u0005\u0168\u00b5\u0002\u08db\u08da\u0003\u0002\u0002",
    "\u0002\u08dc\u08df\u0003\u0002\u0002\u0002\u08dd\u08db\u0003\u0002\u0002",
    "\u0002\u08dd\u08de\u0003\u0002\u0002\u0002\u08de\u08e0\u0003\u0002\u0002",
    "\u0002\u08df\u08dd\u0003\u0002\u0002\u0002\u08e0\u08e1\u0007C\u0002",
    "\u0002\u08e1\u08e2\u0005R*\u0002\u08e2\u08e3\u0005\u0164\u00b3\u0002",
    "\u08e3\u08e4\u0005\u00a0Q\u0002\u08e4\u0163\u0003\u0002\u0002\u0002",
    "\u08e5\u08e7\u0007\u0101\u0002\u0002\u08e6\u08e8\u0005\u014c\u00a7\u0002",
    "\u08e7\u08e6\u0003\u0002\u0002\u0002\u08e7\u08e8\u0003\u0002\u0002\u0002",
    "\u08e8\u08e9\u0003\u0002\u0002\u0002\u08e9\u08eb\u0007\u0102\u0002\u0002",
    "\u08ea\u08e5\u0003\u0002\u0002\u0002\u08ea\u08eb\u0003\u0002\u0002\u0002",
    "\u08eb\u08ef\u0003\u0002\u0002\u0002\u08ec\u08ed\u0007\n\u0002\u0002",
    "\u08ed\u08ef\u0005\u00ceh\u0002\u08ee\u08ea\u0003\u0002\u0002\u0002",
    "\u08ee\u08ec\u0003\u0002\u0002\u0002\u08ef\u0165\u0003\u0002\u0002\u0002",
    "\u08f0\u08f4\u0005~@\u0002\u08f1\u08f4\u0007\u0096\u0002\u0002\u08f2",
    "\u08f4\u0007\u0097\u0002\u0002\u08f3\u08f0\u0003\u0002\u0002\u0002\u08f3",
    "\u08f1\u0003\u0002\u0002\u0002\u08f3\u08f2\u0003\u0002\u0002\u0002\u08f4",
    "\u0167\u0003\u0002\u0002\u0002\u08f5\u08f6\u0007\u0096\u0002\u0002\u08f6",
    "\u0169\u0003\u0002\u0002\u0002\u08f7\u08f9\u0005\u008cG\u0002\u08f8",
    "\u08f7\u0003\u0002\u0002\u0002\u08f8\u08f9\u0003\u0002\u0002\u0002\u08f9",
    "\u08fd\u0003\u0002\u0002\u0002\u08fa\u08fc\u0005\u0166\u00b4\u0002\u08fb",
    "\u08fa\u0003\u0002\u0002\u0002\u08fc\u08ff\u0003\u0002\u0002\u0002\u08fd",
    "\u08fb\u0003\u0002\u0002\u0002\u08fd\u08fe\u0003\u0002\u0002\u0002\u08fe",
    "\u0900\u0003\u0002\u0002\u0002\u08ff\u08fd\u0003\u0002\u0002\u0002\u0900",
    "\u0901\u0007/\u0002\u0002\u0901\u0902\u0007C\u0002\u0002\u0902\u0903",
    "\u0005R*\u0002\u0903\u0904\u0007\n\u0002\u0002\u0904\u0906\u0005\u00cc",
    "g\u0002\u0905\u0907\u0005\u0118\u008d\u0002\u0906\u0905\u0003\u0002",
    "\u0002\u0002\u0906\u0907\u0003\u0002\u0002\u0002\u0907\u0908\u0003\u0002",
    "\u0002\u0002\u0908\u090a\u0005\u00a0Q\u0002\u0909\u090b\u0005\u016c",
    "\u00b7\u0002\u090a\u0909\u0003\u0002\u0002\u0002\u090b\u090c\u0003\u0002",
    "\u0002\u0002\u090c\u090a\u0003\u0002\u0002\u0002\u090c\u090d\u0003\u0002",
    "\u0002\u0002\u090d\u090e\u0003\u0002\u0002\u0002\u090e\u090f\u0007>",
    "\u0002\u0002\u090f\u0910\u0007C\u0002\u0002\u0910\u0911\u0005\u00a0",
    "Q\u0002\u0911\u016b\u0003\u0002\u0002\u0002\u0912\u0916\u0005\u016e",
    "\u00b8\u0002\u0913\u0916\u0005\u0170\u00b9\u0002\u0914\u0916\u0005\u0172",
    "\u00ba\u0002\u0915\u0912\u0003\u0002\u0002\u0002\u0915\u0913\u0003\u0002",
    "\u0002\u0002\u0915\u0914\u0003\u0002\u0002\u0002\u0916\u016d\u0003\u0002",
    "\u0002\u0002\u0917\u0919\u0005\u008cG\u0002\u0918\u0917\u0003\u0002",
    "\u0002\u0002\u0918\u0919\u0003\u0002\u0002\u0002\u0919\u091a\u0003\u0002",
    "\u0002\u0002\u091a\u091b\u0007\u0003\u0002\u0002\u091b\u091c\u0007\u0101",
    "\u0002\u0002\u091c\u091d\u0005\u014c\u00a7\u0002\u091d\u091e\u0007\u0102",
    "\u0002\u0002\u091e\u0920\u0007\u00e9\u0002\u0002\u091f\u0921\u0005\u01b0",
    "\u00d9\u0002\u0920\u091f\u0003\u0002\u0002\u0002\u0920\u0921\u0003\u0002",
    "\u0002\u0002\u0921\u0922\u0003\u0002\u0002\u0002\u0922\u0923\u0007>",
    "\u0002\u0002\u0923\u0924\u0007\u0003\u0002\u0002\u0924\u0925\u0005\u00a0",
    "Q\u0002\u0925\u016f\u0003\u0002\u0002\u0002\u0926\u0928\u0005\u008c",
    "G\u0002\u0927\u0926\u0003\u0002\u0002\u0002\u0927\u0928\u0003\u0002",
    "\u0002\u0002\u0928\u0929\u0003\u0002\u0002\u0002\u0929\u092a\u0007\u0090",
    "\u0002\u0002\u092a\u092b\u0007\u0101\u0002\u0002\u092b\u092c\u0005\u014c",
    "\u00a7\u0002\u092c\u092d\u0007\u0102\u0002\u0002\u092d\u092f\u0007\u00e9",
    "\u0002\u0002\u092e\u0930\u0005\u01b0\u00d9\u0002\u092f\u092e\u0003\u0002",
    "\u0002\u0002\u092f\u0930\u0003\u0002\u0002\u0002\u0930\u0931\u0003\u0002",
    "\u0002\u0002\u0931\u0932\u0007>\u0002\u0002\u0932\u0933\u0007\u0090",
    "\u0002\u0002\u0933\u0934\u0005\u00a0Q\u0002\u0934\u0171\u0003\u0002",
    "\u0002\u0002\u0935\u0937\u0005\u008cG\u0002\u0936\u0935\u0003\u0002",
    "\u0002\u0002\u0936\u0937\u0003\u0002\u0002\u0002\u0937\u0938\u0003\u0002",
    "\u0002\u0002\u0938\u0939\u0007\u008b\u0002\u0002\u0939\u093a\u0007\u0101",
    "\u0002\u0002\u093a\u093b\u0005\u014c\u00a7\u0002\u093b\u093c\u0007\u0102",
    "\u0002\u0002\u093c\u093e\u0007\u00e9\u0002\u0002\u093d\u093f\u0005\u01b0",
    "\u00d9\u0002\u093e\u093d\u0003\u0002\u0002\u0002\u093e\u093f\u0003\u0002",
    "\u0002\u0002\u093f\u0940\u0003\u0002\u0002\u0002\u0940\u0941\u0007>",
    "\u0002\u0002\u0941\u0942\u0007\u008b\u0002\u0002\u0942\u0943\u0005\u00a0",
    "Q\u0002\u0943\u0173\u0003\u0002\u0002\u0002\u0944\u0946\u0005\u008c",
    "G\u0002\u0945\u0944\u0003\u0002\u0002\u0002\u0945\u0946\u0003\u0002",
    "\u0002\u0002\u0946\u094a\u0003\u0002\u0002\u0002\u0947\u0949\u0005\u0176",
    "\u00bc\u0002\u0948\u0947\u0003\u0002\u0002\u0002\u0949\u094c\u0003\u0002",
    "\u0002\u0002\u094a\u0948\u0003\u0002\u0002\u0002\u094a\u094b\u0003\u0002",
    "\u0002\u0002\u094b\u094d\u0003\u0002\u0002\u0002\u094c\u094a\u0003\u0002",
    "\u0002\u0002\u094d\u094e\u0007%\u0002\u0002\u094e\u094f\u0005\u0178",
    "\u00bd\u0002\u094f\u0950\u0005\u00a0Q\u0002\u0950\u0175\u0003\u0002",
    "\u0002\u0002\u0951\u0954\u0005~@\u0002\u0952\u0954\u0007\u0096\u0002",
    "\u0002\u0953\u0951\u0003\u0002\u0002\u0002\u0953\u0952\u0003\u0002\u0002",
    "\u0002\u0954\u0177\u0003\u0002\u0002\u0002\u0955\u095a\u0005\u017a\u00be",
    "\u0002\u0956\u0957\u0007\u00ed\u0002\u0002\u0957\u0959\u0005\u017a\u00be",
    "\u0002\u0958\u0956\u0003\u0002\u0002\u0002\u0959\u095c\u0003\u0002\u0002",
    "\u0002\u095a\u0958\u0003\u0002\u0002\u0002\u095a\u095b\u0003\u0002\u0002",
    "\u0002\u095b\u0179\u0003\u0002\u0002\u0002\u095c\u095a\u0003\u0002\u0002",
    "\u0002\u095d\u0960\u0005R*\u0002\u095e\u095f\u0007\n\u0002\u0002\u095f",
    "\u0961\u0005\u00ccg\u0002\u0960\u095e\u0003\u0002\u0002\u0002\u0960",
    "\u0961\u0003\u0002\u0002\u0002\u0961\u0962\u0003\u0002\u0002\u0002\u0962",
    "\u0963\u0007\u00ef\u0002\u0002\u0963\u0964\u0005\u0242\u0122\u0002\u0964",
    "\u0965\u0005\u00a0Q\u0002\u0965\u017b\u0003\u0002\u0002\u0002\u0966",
    "\u0968\u0005\u008cG\u0002\u0967\u0966\u0003\u0002\u0002\u0002\u0967",
    "\u0968\u0003\u0002\u0002\u0002\u0968\u096a\u0003\u0002\u0002\u0002\u0969",
    "\u096b\u0005\u017e\u00c0\u0002\u096a\u0969\u0003\u0002\u0002\u0002\u096b",
    "\u096c\u0003\u0002\u0002\u0002\u096c\u096a\u0003\u0002\u0002\u0002\u096c",
    "\u096d\u0003\u0002\u0002\u0002\u096d\u096e\u0003\u0002\u0002\u0002\u096e",
    "\u096f\u0005\u0180\u00c1\u0002\u096f\u0970\u0005\u00a0Q\u0002\u0970",
    "\u017d\u0003\u0002\u0002\u0002\u0971\u0978\u0005~@\u0002\u0972\u0978",
    "\u0007\u0096\u0002\u0002\u0973\u0978\u0007\u0097\u0002\u0002\u0974\u0978",
    "\u0007\u008c\u0002\u0002\u0975\u0978\u0007\u00b7\u0002\u0002\u0976\u0978",
    "\u00076\u0002\u0002\u0977\u0971\u0003\u0002\u0002\u0002\u0977\u0972",
    "\u0003\u0002\u0002\u0002\u0977\u0973\u0003\u0002\u0002\u0002\u0977\u0974",
    "\u0003\u0002\u0002\u0002\u0977\u0975\u0003\u0002\u0002\u0002\u0977\u0976",
    "\u0003\u0002\u0002\u0002\u0978\u017f\u0003\u0002\u0002\u0002\u0979\u097e",
    "\u0005\u0182\u00c2\u0002\u097a\u097b\u0007\u00ed\u0002\u0002\u097b\u097d",
    "\u0005\u0182\u00c2\u0002\u097c\u097a\u0003\u0002\u0002\u0002\u097d\u0980",
    "\u0003\u0002\u0002\u0002\u097e\u097c\u0003\u0002\u0002\u0002\u097e\u097f",
    "\u0003\u0002\u0002\u0002\u097f\u0181\u0003\u0002\u0002\u0002\u0980\u097e",
    "\u0003\u0002\u0002\u0002\u0981\u0982\u0005\u0184\u00c3\u0002\u0982\u0983",
    "\u0007\n\u0002\u0002\u0983\u0984\u0005\u0266\u0134\u0002\u0984\u098f",
    "\u0003\u0002\u0002\u0002\u0985\u0988\u0005\u0184\u00c3\u0002\u0986\u0987",
    "\u0007\n\u0002\u0002\u0987\u0989\u0005\u00ccg\u0002\u0988\u0986\u0003",
    "\u0002\u0002\u0002\u0988\u0989\u0003\u0002\u0002\u0002\u0989\u098c\u0003",
    "\u0002\u0002\u0002\u098a\u098b\u0007\u00ef\u0002\u0002\u098b\u098d\u0005",
    "\u023e\u0120\u0002\u098c\u098a\u0003\u0002\u0002\u0002\u098c\u098d\u0003",
    "\u0002\u0002\u0002\u098d\u098f\u0003\u0002\u0002\u0002\u098e\u0981\u0003",
    "\u0002\u0002\u0002\u098e\u0985\u0003\u0002\u0002\u0002\u098f\u0183\u0003",
    "\u0002\u0002\u0002\u0990\u0995\u0005\u0186\u00c4\u0002\u0991\u0992\u0007",
    "\u00ed\u0002\u0002\u0992\u0994\u0005\u0186\u00c4\u0002\u0993\u0991\u0003",
    "\u0002\u0002\u0002\u0994\u0997\u0003\u0002\u0002\u0002\u0995\u0993\u0003",
    "\u0002\u0002\u0002\u0995\u0996\u0003\u0002\u0002\u0002\u0996\u0185\u0003",
    "\u0002\u0002\u0002\u0997\u0995\u0003\u0002\u0002\u0002\u0998\u0999\u0005",
    "R*\u0002\u0999\u099a\u0005\u00dco\u0002\u099a\u0187\u0003\u0002\u0002",
    "\u0002\u099b\u099c\u0007\u0101\u0002\u0002\u099c\u099d\u0005\u018a\u00c6",
    "\u0002\u099d\u099f\u0007\u0102\u0002\u0002\u099e\u09a0\u0005\u010c\u0087",
    "\u0002\u099f\u099e\u0003\u0002\u0002\u0002\u099f\u09a0\u0003\u0002\u0002",
    "\u0002\u09a0\u0189\u0003\u0002\u0002\u0002\u09a1\u09a6\u0005\u018c\u00c7",
    "\u0002\u09a2\u09a3\u0007\u00ed\u0002\u0002\u09a3\u09a5\u0005\u018c\u00c7",
    "\u0002\u09a4\u09a2\u0003\u0002\u0002\u0002\u09a5\u09a8\u0003\u0002\u0002",
    "\u0002\u09a6\u09a4\u0003\u0002\u0002\u0002\u09a6\u09a7\u0003\u0002\u0002",
    "\u0002\u09a7\u018b\u0003\u0002\u0002\u0002\u09a8\u09a6\u0003\u0002\u0002",
    "\u0002\u09a9\u09ae\u0005\u023e\u0120\u0002\u09aa\u09ab\u0007\u00df\u0002",
    "\u0002\u09ab\u09ac\u0007\u00a7\u0002\u0002\u09ac\u09ae\u0005\u023e\u0120",
    "\u0002\u09ad\u09a9\u0003\u0002\u0002\u0002\u09ad\u09aa\u0003\u0002\u0002",
    "\u0002\u09ae\u018d\u0003\u0002\u0002\u0002\u09af\u09b3\u0005\u0192\u00ca",
    "\u0002\u09b0\u09b3\u0005\u0194\u00cb\u0002\u09b1\u09b3\u0005\u0196\u00cc",
    "\u0002\u09b2\u09af\u0003\u0002\u0002\u0002\u09b2\u09b0\u0003\u0002\u0002",
    "\u0002\u09b2\u09b1\u0003\u0002\u0002\u0002\u09b3\u018f\u0003\u0002\u0002",
    "\u0002\u09b4\u09b5\u0007\u0088\u0002\u0002\u09b5\u09bb\u0005R*\u0002",
    "\u09b6\u09b8\u0007\u0101\u0002\u0002\u09b7\u09b9\u0005\u014c\u00a7\u0002",
    "\u09b8\u09b7\u0003\u0002\u0002\u0002\u09b8\u09b9\u0003\u0002\u0002\u0002",
    "\u09b9\u09ba\u0003\u0002\u0002\u0002\u09ba\u09bc\u0007\u0102\u0002\u0002",
    "\u09bb\u09b6\u0003\u0002\u0002\u0002\u09bb\u09bc\u0003\u0002\u0002\u0002",
    "\u09bc\u09c2\u0003\u0002\u0002\u0002\u09bd\u09bf\u0007\n\u0002\u0002",
    "\u09be\u09c0\u0005\u008cG\u0002\u09bf\u09be\u0003\u0002\u0002\u0002",
    "\u09bf\u09c0\u0003\u0002\u0002\u0002\u09c0\u09c1\u0003\u0002\u0002\u0002",
    "\u09c1\u09c3\u0005\u00ccg\u0002\u09c2\u09bd\u0003\u0002\u0002\u0002",
    "\u09c2\u09c3\u0003\u0002\u0002\u0002\u09c3\u0191\u0003\u0002\u0002\u0002",
    "\u09c4\u09c6\u0005\u008cG\u0002\u09c5\u09c4\u0003\u0002\u0002\u0002",
    "\u09c5\u09c6\u0003\u0002\u0002\u0002\u09c6\u09ca\u0003\u0002\u0002\u0002",
    "\u09c7\u09c9\u0005\u019c\u00cf\u0002\u09c8\u09c7\u0003\u0002\u0002\u0002",
    "\u09c9\u09cc\u0003\u0002\u0002\u0002\u09ca\u09c8\u0003\u0002\u0002\u0002",
    "\u09ca\u09cb\u0003\u0002\u0002\u0002\u09cb\u09cd\u0003\u0002\u0002\u0002",
    "\u09cc\u09ca\u0003\u0002\u0002\u0002\u09cd\u09cf\u0005\u0190\u00c9\u0002",
    "\u09ce\u09d0\u0005\u0118\u008d\u0002\u09cf\u09ce\u0003\u0002\u0002\u0002",
    "\u09cf\u09d0\u0003\u0002\u0002\u0002\u09d0\u09d1\u0003\u0002\u0002\u0002",
    "\u09d1\u09d3\u0007\u00e9\u0002\u0002\u09d2\u09d4\u0005\u01a2\u00d2\u0002",
    "\u09d3\u09d2\u0003\u0002\u0002\u0002\u09d4\u09d5\u0003\u0002\u0002\u0002",
    "\u09d5\u09d3\u0003\u0002\u0002\u0002\u09d5\u09d6\u0003\u0002\u0002\u0002",
    "\u09d6\u09d7\u0003\u0002\u0002\u0002\u09d7\u09d8\u0007>\u0002\u0002",
    "\u09d8\u09d9\u0007\u0088\u0002\u0002\u09d9\u09da\u0005\u00a0Q\u0002",
    "\u09da\u0193\u0003\u0002\u0002\u0002\u09db\u09dd\u0005\u008cG\u0002",
    "\u09dc\u09db\u0003\u0002\u0002\u0002\u09dc\u09dd\u0003\u0002\u0002\u0002",
    "\u09dd\u09df\u0003\u0002\u0002\u0002\u09de\u09e0\u0005\u019e\u00d0\u0002",
    "\u09df\u09de\u0003\u0002\u0002\u0002\u09e0\u09e1\u0003\u0002\u0002\u0002",
    "\u09e1\u09df\u0003\u0002\u0002\u0002\u09e1\u09e2\u0003\u0002\u0002\u0002",
    "\u09e2\u09e3\u0003\u0002\u0002\u0002\u09e3\u09e5\u0005\u0190\u00c9\u0002",
    "\u09e4\u09e6\u0005\u0118\u008d\u0002\u09e5\u09e4\u0003\u0002\u0002\u0002",
    "\u09e5\u09e6\u0003\u0002\u0002\u0002\u09e6\u09e7\u0003\u0002\u0002\u0002",
    "\u09e7\u09e8\u0005\u00a0Q\u0002\u09e8\u0195\u0003\u0002\u0002\u0002",
    "\u09e9\u09eb\u0005\u008cG\u0002\u09ea\u09e9\u0003\u0002\u0002\u0002",
    "\u09ea\u09eb\u0003\u0002\u0002\u0002\u09eb\u09ef\u0003\u0002\u0002\u0002",
    "\u09ec\u09ee\u0005\u019a\u00ce\u0002\u09ed\u09ec\u0003\u0002\u0002\u0002",
    "\u09ee\u09f1\u0003\u0002\u0002\u0002\u09ef\u09ed\u0003\u0002\u0002\u0002",
    "\u09ef\u09f0\u0003\u0002\u0002\u0002\u09f0\u09f2\u0003\u0002\u0002\u0002",
    "\u09f1\u09ef\u0003\u0002\u0002\u0002\u09f2\u09f3\u0007\u0088\u0002\u0002",
    "\u09f3\u09f9\u0005R*\u0002\u09f4\u09f6\u0007\u0101\u0002\u0002\u09f5",
    "\u09f7\u0005\u014c\u00a7\u0002\u09f6\u09f5\u0003\u0002\u0002\u0002\u09f6",
    "\u09f7\u0003\u0002\u0002\u0002\u09f7\u09f8\u0003\u0002\u0002\u0002\u09f8",
    "\u09fa\u0007\u0102\u0002\u0002\u09f9\u09f4\u0003\u0002\u0002\u0002\u09f9",
    "\u09fa\u0003\u0002\u0002\u0002\u09fa\u0a00\u0003\u0002\u0002\u0002\u09fb",
    "\u09fd\u0007\n\u0002\u0002\u09fc\u09fe\u0005\u008cG\u0002\u09fd\u09fc",
    "\u0003\u0002\u0002\u0002\u09fd\u09fe\u0003\u0002\u0002\u0002\u09fe\u09ff",
    "\u0003\u0002\u0002\u0002\u09ff\u0a01\u0005\u00ccg\u0002\u0a00\u09fb",
    "\u0003\u0002\u0002\u0002\u0a00\u0a01\u0003\u0002\u0002\u0002\u0a01\u0a04",
    "\u0003\u0002\u0002\u0002\u0a02\u0a03\u0007\u00ef\u0002\u0002\u0a03\u0a05",
    "\u0005\u023e\u0120\u0002\u0a04\u0a02\u0003\u0002\u0002\u0002\u0a04\u0a05",
    "\u0003\u0002\u0002\u0002\u0a05\u0a07\u0003\u0002\u0002\u0002\u0a06\u0a08",
    "\u0005\u0118\u008d\u0002\u0a07\u0a06\u0003\u0002\u0002\u0002\u0a07\u0a08",
    "\u0003\u0002\u0002\u0002\u0a08\u0a09\u0003\u0002\u0002\u0002\u0a09\u0a0a",
    "\u0007\u00e9\u0002\u0002\u0a0a\u0a35\u0003\u0002\u0002\u0002\u0a0b\u0a0d",
    "\u0005\u008cG\u0002\u0a0c\u0a0b\u0003\u0002\u0002\u0002\u0a0c\u0a0d",
    "\u0003\u0002\u0002\u0002\u0a0d\u0a11\u0003\u0002\u0002\u0002\u0a0e\u0a10",
    "\u0005\u019a\u00ce\u0002\u0a0f\u0a0e\u0003\u0002\u0002\u0002\u0a10\u0a13",
    "\u0003\u0002\u0002\u0002\u0a11\u0a0f\u0003\u0002\u0002\u0002\u0a11\u0a12",
    "\u0003\u0002\u0002\u0002\u0a12\u0a14\u0003\u0002\u0002\u0002\u0a13\u0a11",
    "\u0003\u0002\u0002\u0002\u0a14\u0a15\u0007\u0088\u0002\u0002\u0a15\u0a1b",
    "\u0005R*\u0002\u0a16\u0a18\u0007\u0101\u0002\u0002\u0a17\u0a19\u0005",
    "\u014c\u00a7\u0002\u0a18\u0a17\u0003\u0002\u0002\u0002\u0a18\u0a19\u0003",
    "\u0002\u0002\u0002\u0a19\u0a1a\u0003\u0002\u0002\u0002\u0a1a\u0a1c\u0007",
    "\u0102\u0002\u0002\u0a1b\u0a16\u0003\u0002\u0002\u0002\u0a1b\u0a1c\u0003",
    "\u0002\u0002\u0002\u0a1c\u0a1d\u0003\u0002\u0002\u0002\u0a1d\u0a1f\u0007",
    "\n\u0002\u0002\u0a1e\u0a20\u0005\u008cG\u0002\u0a1f\u0a1e\u0003\u0002",
    "\u0002\u0002\u0a1f\u0a20\u0003\u0002\u0002\u0002\u0a20\u0a21\u0003\u0002",
    "\u0002\u0002\u0a21\u0a2a\u0007p\u0002\u0002\u0a22\u0a28\u0005\u00ce",
    "h\u0002\u0a23\u0a25\u0007\u0101\u0002\u0002\u0a24\u0a26\u0005\u025e",
    "\u0130\u0002\u0a25\u0a24\u0003\u0002\u0002\u0002\u0a25\u0a26\u0003\u0002",
    "\u0002\u0002\u0a26\u0a27\u0003\u0002\u0002\u0002\u0a27\u0a29\u0007\u0102",
    "\u0002\u0002\u0a28\u0a23\u0003\u0002\u0002\u0002\u0a28\u0a29\u0003\u0002",
    "\u0002\u0002\u0a29\u0a2b\u0003\u0002\u0002\u0002\u0a2a\u0a22\u0003\u0002",
    "\u0002\u0002\u0a2a\u0a2b\u0003\u0002\u0002\u0002\u0a2b\u0a2d\u0003\u0002",
    "\u0002\u0002\u0a2c\u0a2e\u0005\u0268\u0135\u0002\u0a2d\u0a2c\u0003\u0002",
    "\u0002\u0002\u0a2d\u0a2e\u0003\u0002\u0002\u0002\u0a2e\u0a30\u0003\u0002",
    "\u0002\u0002\u0a2f\u0a31\u0005\u0118\u008d\u0002\u0a30\u0a2f\u0003\u0002",
    "\u0002\u0002\u0a30\u0a31\u0003\u0002\u0002\u0002\u0a31\u0a32\u0003\u0002",
    "\u0002\u0002\u0a32\u0a33\u0007\u00e9\u0002\u0002\u0a33\u0a35\u0003\u0002",
    "\u0002\u0002\u0a34\u09ea\u0003\u0002\u0002\u0002\u0a34\u0a0c\u0003\u0002",
    "\u0002\u0002\u0a35\u0197\u0003\u0002\u0002\u0002\u0a36\u0a38\u0005\u008c",
    "G\u0002\u0a37\u0a36\u0003\u0002\u0002\u0002\u0a37\u0a38\u0003\u0002",
    "\u0002\u0002\u0a38\u0a3c\u0003\u0002\u0002\u0002\u0a39\u0a3b\u0005\u01a0",
    "\u00d1\u0002\u0a3a\u0a39\u0003\u0002\u0002\u0002\u0a3b\u0a3e\u0003\u0002",
    "\u0002\u0002\u0a3c\u0a3a\u0003\u0002\u0002\u0002\u0a3c\u0a3d\u0003\u0002",
    "\u0002\u0002\u0a3d\u0a3f\u0003\u0002\u0002\u0002\u0a3e\u0a3c\u0003\u0002",
    "\u0002\u0002\u0a3f\u0a40\u0005\u0190\u00c9\u0002\u0a40\u0a41\u0005\u00a0",
    "Q\u0002\u0a41\u0199\u0003\u0002\u0002\u0002\u0a42\u0a4a\u0005~@\u0002",
    "\u0a43\u0a4a\u0007\u0096\u0002\u0002\u0a44\u0a4a\u0007\u0097\u0002\u0002",
    "\u0a45\u0a4a\u0007\u0082\u0002\u0002\u0a46\u0a4a\u0007u\u0002\u0002",
    "\u0a47\u0a4a\u0007\u0083\u0002\u0002\u0a48\u0a4a\u0007\u0081\u0002\u0002",
    "\u0a49\u0a42\u0003\u0002\u0002\u0002\u0a49\u0a43\u0003\u0002\u0002\u0002",
    "\u0a49\u0a44\u0003\u0002\u0002\u0002\u0a49\u0a45\u0003\u0002\u0002\u0002",
    "\u0a49\u0a46\u0003\u0002\u0002\u0002\u0a49\u0a47\u0003\u0002\u0002\u0002",
    "\u0a49\u0a48\u0003\u0002\u0002\u0002\u0a4a\u019b\u0003\u0002\u0002\u0002",
    "\u0a4b\u0a51\u0005\u019a\u00ce\u0002\u0a4c\u0a51\u00073\u0002\u0002",
    "\u0a4d\u0a51\u0007\u008c\u0002\u0002\u0a4e\u0a51\u0007\u00b8\u0002\u0002",
    "\u0a4f\u0a51\u0007^\u0002\u0002\u0a50\u0a4b\u0003\u0002\u0002\u0002",
    "\u0a50\u0a4c\u0003\u0002\u0002\u0002\u0a50\u0a4d\u0003\u0002\u0002\u0002",
    "\u0a50\u0a4e\u0003\u0002\u0002\u0002\u0a50\u0a4f\u0003\u0002\u0002\u0002",
    "\u0a51\u019d\u0003\u0002\u0002\u0002\u0a52\u0a55\u0005\u019c\u00cf\u0002",
    "\u0a53\u0a55\u0007k\u0002\u0002\u0a54\u0a52\u0003\u0002\u0002\u0002",
    "\u0a54\u0a53\u0003\u0002\u0002\u0002\u0a55\u019f\u0003\u0002\u0002\u0002",
    "\u0a56\u0a57\t\u000f\u0002\u0002\u0a57\u01a1\u0003\u0002\u0002\u0002",
    "\u0a58\u0a5b\u0005\u01a4\u00d3\u0002\u0a59\u0a5b\u0005\u01a6\u00d4\u0002",
    "\u0a5a\u0a58\u0003\u0002\u0002\u0002\u0a5a\u0a59\u0003\u0002\u0002\u0002",
    "\u0a5b\u01a3\u0003\u0002\u0002\u0002\u0a5c\u0a5e\u0005\u008cG\u0002",
    "\u0a5d\u0a5c\u0003\u0002\u0002\u0002\u0a5d\u0a5e\u0003\u0002\u0002\u0002",
    "\u0a5e\u0a60\u0003\u0002\u0002\u0002\u0a5f\u0a61\u0005~@\u0002\u0a60",
    "\u0a5f\u0003\u0002\u0002\u0002\u0a60\u0a61\u0003\u0002\u0002\u0002\u0a61",
    "\u0a62\u0003\u0002\u0002\u0002\u0a62\u0a63\u0007K\u0002\u0002\u0a63",
    "\u0a65\u0007\u00e9\u0002\u0002\u0a64\u0a66\u0005\u01b0\u00d9\u0002\u0a65",
    "\u0a64\u0003\u0002\u0002\u0002\u0a65\u0a66\u0003\u0002\u0002\u0002\u0a66",
    "\u0a67\u0003\u0002\u0002\u0002\u0a67\u0a68\u0007>\u0002\u0002\u0a68",
    "\u0a69\u0007K\u0002\u0002\u0a69\u0a6a\u0005\u00a0Q\u0002\u0a6a\u01a5",
    "\u0003\u0002\u0002\u0002\u0a6b\u0a6d\u0005\u008cG\u0002\u0a6c\u0a6b",
    "\u0003\u0002\u0002\u0002\u0a6c\u0a6d\u0003\u0002\u0002\u0002\u0a6d\u0a6f",
    "\u0003\u0002\u0002\u0002\u0a6e\u0a70\u0005~@\u0002\u0a6f\u0a6e\u0003",
    "\u0002\u0002\u0002\u0a6f\u0a70\u0003\u0002\u0002\u0002\u0a70\u0a71\u0003",
    "\u0002\u0002\u0002\u0a71\u0a77\u0007\u0095\u0002\u0002\u0a72\u0a74\u0007",
    "\u0101\u0002\u0002\u0a73\u0a75\u0005\u014c\u00a7\u0002\u0a74\u0a73\u0003",
    "\u0002\u0002\u0002\u0a74\u0a75\u0003\u0002\u0002\u0002\u0a75\u0a76\u0003",
    "\u0002\u0002\u0002\u0a76\u0a78\u0007\u0102\u0002\u0002\u0a77\u0a72\u0003",
    "\u0002\u0002\u0002\u0a77\u0a78\u0003\u0002\u0002\u0002\u0a78\u0a79\u0003",
    "\u0002\u0002\u0002\u0a79\u0a7b\u0007\u00e9\u0002\u0002\u0a7a\u0a7c\u0005",
    "\u01b0\u00d9\u0002\u0a7b\u0a7a\u0003\u0002\u0002\u0002\u0a7b\u0a7c\u0003",
    "\u0002\u0002\u0002\u0a7c\u0a7d\u0003\u0002\u0002\u0002\u0a7d\u0a7e\u0007",
    ">\u0002\u0002\u0a7e\u0a7f\u0007\u0095\u0002\u0002\u0a7f\u0a80\u0005",
    "\u00a0Q\u0002\u0a80\u01a7\u0003\u0002\u0002\u0002\u0a81\u0a83\u0005",
    "\u008cG\u0002\u0a82\u0a81\u0003\u0002\u0002\u0002\u0a82\u0a83\u0003",
    "\u0002\u0002\u0002\u0a83\u0a87\u0003\u0002\u0002\u0002\u0a84\u0a86\u0005",
    "\u01aa\u00d6\u0002\u0a85\u0a84\u0003\u0002\u0002\u0002\u0a86\u0a89\u0003",
    "\u0002\u0002\u0002\u0a87\u0a85\u0003\u0002\u0002\u0002\u0a87\u0a88\u0003",
    "\u0002\u0002\u0002\u0a88\u0a8a\u0003\u0002\u0002\u0002\u0a89\u0a87\u0003",
    "\u0002\u0002\u0002\u0a8a\u0a8b\u0007z\u0002\u0002\u0a8b\u0a8c\u0005",
    "\u01ac\u00d7\u0002\u0a8c\u0a8d\u0007\u0101\u0002\u0002\u0a8d\u0a8e\u0005",
    "\u014c\u00a7\u0002\u0a8e\u0a94\u0007\u0102\u0002\u0002\u0a8f\u0a91\u0007",
    "\n\u0002\u0002\u0a90\u0a92\u0005\u008cG\u0002\u0a91\u0a90\u0003\u0002",
    "\u0002\u0002\u0a91\u0a92\u0003\u0002\u0002\u0002\u0a92\u0a93\u0003\u0002",
    "\u0002\u0002\u0a93\u0a95\u0005\u00ccg\u0002\u0a94\u0a8f\u0003\u0002",
    "\u0002\u0002\u0a94\u0a95\u0003\u0002\u0002\u0002\u0a95\u0a96\u0003\u0002",
    "\u0002\u0002\u0a96\u0a98\u0007\u00e9\u0002\u0002\u0a97\u0a99\u0005\u01b0",
    "\u00d9\u0002\u0a98\u0a97\u0003\u0002\u0002\u0002\u0a98\u0a99\u0003\u0002",
    "\u0002\u0002\u0a99\u0a9a\u0003\u0002\u0002\u0002\u0a9a\u0a9b\u0007>",
    "\u0002\u0002\u0a9b\u0a9c\u0007z\u0002\u0002\u0a9c\u0a9d\u0005\u00a0",
    "Q\u0002\u0a9d\u01a9\u0003\u0002\u0002\u0002\u0a9e\u0a9f\t\u0010\u0002",
    "\u0002\u0a9f\u01ab\u0003\u0002\u0002\u0002\u0aa0\u0abd\u0005h5\u0002",
    "\u0aa1\u0abd\u0007\u00ee\u0002\u0002\u0aa2\u0abd\u0007\u00f2\u0002\u0002",
    "\u0aa3\u0abd\u0007\u00f3\u0002\u0002\u0aa4\u0abd\u0007\u00f7\u0002\u0002",
    "\u0aa5\u0abd\u0007c\u0002\u0002\u0aa6\u0abd\u0007h\u0002\u0002\u0aa7",
    "\u0abd\u0007\u0007\u0002\u0002\u0aa8\u0abd\u0007}\u0002\u0002\u0aa9",
    "\u0abd\u0007\u00b9\u0002\u0002\u0aaa\u0abd\u0007\u00f4\u0002\u0002\u0aab",
    "\u0aac\u0007\u00f0\u0002\u0002\u0aac\u0abd\u0007\u00f0\u0002\u0002\u0aad",
    "\u0aae\u0007\u00f1\u0002\u0002\u0aae\u0abd\u0007\u00f1\u0002\u0002\u0aaf",
    "\u0abd\u0007\u00ef\u0002\u0002\u0ab0\u0ab1\u0007\u00f0\u0002\u0002\u0ab1",
    "\u0abd\u0007\u00f1\u0002\u0002\u0ab2\u0abd\u0007\u00f1\u0002\u0002\u0ab3",
    "\u0abd\u0007\u00f0\u0002\u0002\u0ab4\u0ab5\u0007\u00f1\u0002\u0002\u0ab5",
    "\u0abd\u0007\u00ef\u0002\u0002\u0ab6\u0ab7\u0007\u00f0\u0002\u0002\u0ab7",
    "\u0abd\u0007\u00ef\u0002\u0002\u0ab8\u0abd\u0007r\u0002\u0002\u0ab9",
    "\u0abd\u0007\\\u0002\u0002\u0aba\u0abd\u0007[\u0002\u0002\u0abb\u0abd",
    "\u0007+\u0002\u0002\u0abc\u0aa0\u0003\u0002\u0002\u0002\u0abc\u0aa1",
    "\u0003\u0002\u0002\u0002\u0abc\u0aa2\u0003\u0002\u0002\u0002\u0abc\u0aa3",
    "\u0003\u0002\u0002\u0002\u0abc\u0aa4\u0003\u0002\u0002\u0002\u0abc\u0aa5",
    "\u0003\u0002\u0002\u0002\u0abc\u0aa6\u0003\u0002\u0002\u0002\u0abc\u0aa7",
    "\u0003\u0002\u0002\u0002\u0abc\u0aa8\u0003\u0002\u0002\u0002\u0abc\u0aa9",
    "\u0003\u0002\u0002\u0002\u0abc\u0aaa\u0003\u0002\u0002\u0002\u0abc\u0aab",
    "\u0003\u0002\u0002\u0002\u0abc\u0aad\u0003\u0002\u0002\u0002\u0abc\u0aaf",
    "\u0003\u0002\u0002\u0002\u0abc\u0ab0\u0003\u0002\u0002\u0002\u0abc\u0ab2",
    "\u0003\u0002\u0002\u0002\u0abc\u0ab3\u0003\u0002\u0002\u0002\u0abc\u0ab4",
    "\u0003\u0002\u0002\u0002\u0abc\u0ab6\u0003\u0002\u0002\u0002\u0abc\u0ab8",
    "\u0003\u0002\u0002\u0002\u0abc\u0ab9\u0003\u0002\u0002\u0002\u0abc\u0aba",
    "\u0003\u0002\u0002\u0002\u0abc\u0abb\u0003\u0002\u0002\u0002\u0abd\u01ad",
    "\u0003\u0002\u0002\u0002\u0abe\u0ace\u0005\u01b2\u00da\u0002\u0abf\u0ace",
    "\u0005\u01b8\u00dd\u0002\u0ac0\u0ace\u0005\u01bc\u00df\u0002\u0ac1\u0ace",
    "\u0005\u01be\u00e0\u0002\u0ac2\u0ace\u0005\u01c0\u00e1\u0002\u0ac3\u0ace",
    "\u0005\u01c8\u00e5\u0002\u0ac4\u0ace\u0005\u01d2\u00ea\u0002\u0ac5\u0ace",
    "\u0005\u01d4\u00eb\u0002\u0ac6\u0ace\u0005\u01ec\u00f7\u0002\u0ac7\u0ace",
    "\u0005\u0200\u0101\u0002\u0ac8\u0ace\u0005\u0218\u010d\u0002\u0ac9\u0ace",
    "\u0005\u022a\u0116\u0002\u0aca\u0ace\u0005\u0236\u011c\u0002\u0acb\u0ace",
    "\u0005\u023a\u011e\u0002\u0acc\u0ace\u0005\u023c\u011f\u0002\u0acd\u0abe",
    "\u0003\u0002\u0002\u0002\u0acd\u0abf\u0003\u0002\u0002\u0002\u0acd\u0ac0",
    "\u0003\u0002\u0002\u0002\u0acd\u0ac1\u0003\u0002\u0002\u0002\u0acd\u0ac2",
    "\u0003\u0002\u0002\u0002\u0acd\u0ac3\u0003\u0002\u0002\u0002\u0acd\u0ac4",
    "\u0003\u0002\u0002\u0002\u0acd\u0ac5\u0003\u0002\u0002\u0002\u0acd\u0ac6",
    "\u0003\u0002\u0002\u0002\u0acd\u0ac7\u0003\u0002\u0002\u0002\u0acd\u0ac8",
    "\u0003\u0002\u0002\u0002\u0acd\u0ac9\u0003\u0002\u0002\u0002\u0acd\u0aca",
    "\u0003\u0002\u0002\u0002\u0acd\u0acb\u0003\u0002\u0002\u0002\u0acd\u0acc",
    "\u0003\u0002\u0002\u0002\u0ace\u01af\u0003\u0002\u0002\u0002\u0acf\u0ad0",
    "\u0005\u01b6\u00dc\u0002\u0ad0\u01b1\u0003\u0002\u0002\u0002\u0ad1\u0ad2",
    "\u0005\u01b4\u00db\u0002\u0ad2\u0ad3\u0007\u00f5\u0002\u0002\u0ad3\u01b3",
    "\u0003\u0002\u0002\u0002\u0ad4\u0ad7\u0005R*\u0002\u0ad5\u0ad7\u0005",
    "\u000e\b\u0002\u0ad6\u0ad4\u0003\u0002\u0002\u0002\u0ad6\u0ad5\u0003",
    "\u0002\u0002\u0002\u0ad7\u01b5\u0003\u0002\u0002\u0002\u0ad8\u0adf\u0005",
    "\u01ae\u00d8\u0002\u0ad9\u0adb\u0007\u00f5\u0002\u0002\u0ada\u0adc\u0005",
    "\u01ae\u00d8\u0002\u0adb\u0ada\u0003\u0002\u0002\u0002\u0adb\u0adc\u0003",
    "\u0002\u0002\u0002\u0adc\u0ade\u0003\u0002\u0002\u0002\u0add\u0ad9\u0003",
    "\u0002\u0002\u0002\u0ade\u0ae1\u0003\u0002\u0002\u0002\u0adf\u0add\u0003",
    "\u0002\u0002\u0002\u0adf\u0ae0\u0003\u0002\u0002\u0002\u0ae0\u0aeb\u0003",
    "\u0002\u0002\u0002\u0ae1\u0adf\u0003\u0002\u0002\u0002\u0ae2\u0ae4\u0007",
    "\u00f5\u0002\u0002\u0ae3\u0ae5\u0005\u01ae\u00d8\u0002\u0ae4\u0ae3\u0003",
    "\u0002\u0002\u0002\u0ae4\u0ae5\u0003\u0002\u0002\u0002\u0ae5\u0ae7\u0003",
    "\u0002\u0002\u0002\u0ae6\u0ae2\u0003\u0002\u0002\u0002\u0ae7\u0ae8\u0003",
    "\u0002\u0002\u0002\u0ae8\u0ae6\u0003\u0002\u0002\u0002\u0ae8\u0ae9\u0003",
    "\u0002\u0002\u0002\u0ae9\u0aeb\u0003\u0002\u0002\u0002\u0aea\u0ad8\u0003",
    "\u0002\u0002\u0002\u0aea\u0ae6\u0003\u0002\u0002\u0002\u0aeb\u01b7\u0003",
    "\u0002\u0002\u0002\u0aec\u0aed\u0005\u01ba\u00de\u0002\u0aed\u0aee\u0005",
    "\u0180\u00c1\u0002\u0aee\u0aef\u0005\u00a0Q\u0002\u0aef\u01b9\u0003",
    "\u0002\u0002\u0002\u0af0\u0af1\t\u0011\u0002\u0002\u0af1\u01bb\u0003",
    "\u0002\u0002\u0002\u0af2\u0af3\u0007\u00b6\u0002\u0002\u0af3\u0af4\u0005",
    "\u023e\u0120\u0002\u0af4\u0af6\u0005\u00a0Q\u0002\u0af5\u0af7\u0005",
    "\u01b0\u00d9\u0002\u0af6\u0af5\u0003\u0002\u0002\u0002\u0af6\u0af7\u0003",
    "\u0002\u0002\u0002\u0af7\u0af8\u0003\u0002\u0002\u0002\u0af8\u0af9\u0007",
    ">\u0002\u0002\u0af9\u0afa\u0007\u00b6\u0002\u0002\u0afa\u0afb\u0005",
    "\u00a0Q\u0002\u0afb\u01bd\u0003\u0002\u0002\u0002\u0afc\u0afd\u0007",
    "\u00a2\u0002\u0002\u0afd\u0afe\u0005\u023e\u0120\u0002\u0afe\u0b00\u0005",
    "\u00a0Q\u0002\u0aff\u0b01\u0005\u01b0\u00d9\u0002\u0b00\u0aff\u0003",
    "\u0002\u0002\u0002\u0b00\u0b01\u0003\u0002\u0002\u0002\u0b01\u0b02\u0003",
    "\u0002\u0002\u0002\u0b02\u0b03\u0007>\u0002\u0002\u0b03\u0b04\u0007",
    "\u00a2\u0002\u0002\u0b04\u0b05\u0005\u00a0Q\u0002\u0b05\u01bf\u0003",
    "\u0002\u0002\u0002\u0b06\u0b0a\u0005\u01c2\u00e2\u0002\u0b07\u0b0a\u0005",
    "\u01c4\u00e3\u0002\u0b08\u0b0a\u0005\u01c6\u00e4\u0002\u0b09\u0b06\u0003",
    "\u0002\u0002\u0002\u0b09\u0b07\u0003\u0002\u0002\u0002\u0b09\u0b08\u0003",
    "\u0002\u0002\u0002\u0b0a\u01c1\u0003\u0002\u0002\u0002\u0b0b\u0b0c\u0007",
    "\u008b\u0002\u0002\u0b0c\u0b12\u0005T+\u0002\u0b0d\u0b0f\u0007\u0101",
    "\u0002\u0002\u0b0e\u0b10\u0005\u025e\u0130\u0002\u0b0f\u0b0e\u0003\u0002",
    "\u0002\u0002\u0b0f\u0b10\u0003\u0002\u0002\u0002\u0b10\u0b11\u0003\u0002",
    "\u0002\u0002\u0b11\u0b13\u0007\u0102\u0002\u0002\u0b12\u0b0d\u0003\u0002",
    "\u0002\u0002\u0b12\u0b13\u0003\u0002\u0002\u0002\u0b13\u0b14\u0003\u0002",
    "\u0002\u0002\u0b14\u0b15\u0005\u00a0Q\u0002\u0b15\u01c3\u0003\u0002",
    "\u0002\u0002\u0b16\u0b17\u0007\u0003\u0002\u0002\u0b17\u0b18\u0005\u023e",
    "\u0120\u0002\u0b18\u0b19\u0007\u00ed\u0002\u0002\u0b19\u0b1a\u0005\u023e",
    "\u0120\u0002\u0b1a\u0b1b\u0005\u00a0Q\u0002\u0b1b\u01c5\u0003\u0002",
    "\u0002\u0002\u0b1c\u0b1d\u0007\u0090\u0002\u0002\u0b1d\u0b1e\u0005\u023e",
    "\u0120\u0002\u0b1e\u0b1f\u0007\u00ed\u0002\u0002\u0b1f\u0b20\u0005\u023e",
    "\u0120\u0002\u0b20\u0b21\u0005\u00a0Q\u0002\u0b21\u01c7\u0003\u0002",
    "\u0002\u0002\u0b22\u0b26\u0005\u01ca\u00e6\u0002\u0b23\u0b26\u0005\u01cc",
    "\u00e7\u0002\u0b24\u0b26\u0005\u01d0\u00e9\u0002\u0b25\u0b22\u0003\u0002",
    "\u0002\u0002\u0b25\u0b23\u0003\u0002\u0002\u0002\u0b25\u0b24\u0003\u0002",
    "\u0002\u0002\u0b26\u01c9\u0003\u0002\u0002\u0002\u0b27\u0b28\u0005\u023e",
    "\u0120\u0002\u0b28\u0b29\u0007\u00ef\u0002\u0002\u0b29\u0b2a\u0005\u023e",
    "\u0120\u0002\u0b2a\u0b2b\u0005\u00a0Q\u0002\u0b2b\u01cb\u0003\u0002",
    "\u0002\u0002\u0b2c\u0b2d\u0005\u023e\u0120\u0002\u0b2d\u0b2f\u0005\u01ce",
    "\u00e8\u0002\u0b2e\u0b30\u0007\u00e9\u0002\u0002\u0b2f\u0b2e\u0003\u0002",
    "\u0002\u0002\u0b2f\u0b30\u0003\u0002\u0002\u0002\u0b30\u0b31\u0003\u0002",
    "\u0002\u0002\u0b31\u0b32\u0005\u023e\u0120\u0002\u0b32\u0b33\u0005\u00a0",
    "Q\u0002\u0b33\u01cd\u0003\u0002\u0002\u0002\u0b34\u0b35\u0007\u00f4",
    "\u0002\u0002\u0b35\u0b49\u0007\u00ef\u0002\u0002\u0b36\u0b37\u0007\u00ee",
    "\u0002\u0002\u0b37\u0b49\u0007\u00ef\u0002\u0002\u0b38\u0b39\u0007\u00f2",
    "\u0002\u0002\u0b39\u0b49\u0007\u00ef\u0002\u0002\u0b3a\u0b3b\u0007\u00f3",
    "\u0002\u0002\u0b3b\u0b49\u0007\u00ef\u0002\u0002\u0b3c\u0b3d\u0007\u00fd",
    "\u0002\u0002\u0b3d\u0b49\u0007\u00ef\u0002\u0002\u0b3e\u0b3f\u0007\u00fc",
    "\u0002\u0002\u0b3f\u0b49\u0007\u00ef\u0002\u0002\u0b40\u0b41\u0007\u00f7",
    "\u0002\u0002\u0b41\u0b49\u0007\u00ef\u0002\u0002\u0b42\u0b43\u0007\u00f0",
    "\u0002\u0002\u0b43\u0b44\u0007\u00f0\u0002\u0002\u0b44\u0b49\u0007\u00ef",
    "\u0002\u0002\u0b45\u0b46\u0007\u00f1\u0002\u0002\u0b46\u0b47\u0007\u00f1",
    "\u0002\u0002\u0b47\u0b49\u0007\u00ef\u0002\u0002\u0b48\u0b34\u0003\u0002",
    "\u0002\u0002\u0b48\u0b36\u0003\u0002\u0002\u0002\u0b48\u0b38\u0003\u0002",
    "\u0002\u0002\u0b48\u0b3a\u0003\u0002\u0002\u0002\u0b48\u0b3c\u0003\u0002",
    "\u0002\u0002\u0b48\u0b3e\u0003\u0002\u0002\u0002\u0b48\u0b40\u0003\u0002",
    "\u0002\u0002\u0b48\u0b42\u0003\u0002\u0002\u0002\u0b48\u0b45\u0003\u0002",
    "\u0002\u0002\u0b49\u01cf\u0003\u0002\u0002\u0002\u0b4a\u0b4c\u0007g",
    "\u0002\u0002\u0b4b\u0b4d\u0007\u00ff\u0002\u0002\u0b4c\u0b4b\u0003\u0002",
    "\u0002\u0002\u0b4c\u0b4d\u0003\u0002\u0002\u0002\u0b4d\u0b4e\u0003\u0002",
    "\u0002\u0002\u0b4e\u0b4f\u0007\u0101\u0002\u0002\u0b4f\u0b50\u0005\u023e",
    "\u0120\u0002\u0b50\u0b51\u0007\u00ed\u0002\u0002\u0b51\u0b54\u0005\u023e",
    "\u0120\u0002\u0b52\u0b53\u0007\u00ed\u0002\u0002\u0b53\u0b55\u0005\u023e",
    "\u0120\u0002\u0b54\u0b52\u0003\u0002\u0002\u0002\u0b54\u0b55\u0003\u0002",
    "\u0002\u0002\u0b55\u0b56\u0003\u0002\u0002\u0002\u0b56\u0b57\u0007\u0102",
    "\u0002\u0002\u0b57\u0b58\u0007\u00ef\u0002\u0002\u0b58\u0b59\u0005\u023e",
    "\u0120\u0002\u0b59\u0b5a\u0005\u00a0Q\u0002\u0b5a\u01d1\u0003\u0002",
    "\u0002\u0002\u0b5b\u0b5d\u0007\u0016\u0002\u0002\u0b5c\u0b5b\u0003\u0002",
    "\u0002\u0002\u0b5c\u0b5d\u0003\u0002\u0002\u0002\u0b5d\u0b5e\u0003\u0002",
    "\u0002\u0002\u0b5e\u0b64\u0005\u023e\u0120\u0002\u0b5f\u0b61\u0007\u0101",
    "\u0002\u0002\u0b60\u0b62\u0005\u025e\u0130\u0002\u0b61\u0b60\u0003\u0002",
    "\u0002\u0002\u0b61\u0b62\u0003\u0002\u0002\u0002\u0b62\u0b63\u0003\u0002",
    "\u0002\u0002\u0b63\u0b65\u0007\u0102\u0002\u0002\u0b64\u0b5f\u0003\u0002",
    "\u0002\u0002\u0b64\u0b65\u0003\u0002\u0002\u0002\u0b65\u0b66\u0003\u0002",
    "\u0002\u0002\u0b66\u0b67\u0005\u00a0Q\u0002\u0b67\u01d3\u0003\u0002",
    "\u0002\u0002\u0b68\u0b6b\u0005\u01d6\u00ec\u0002\u0b69\u0b6b\u0005\u01e0",
    "\u00f1\u0002\u0b6a\u0b68\u0003\u0002\u0002\u0002\u0b6a\u0b69\u0003\u0002",
    "\u0002\u0002\u0b6b\u01d5\u0003\u0002\u0002\u0002\u0b6c\u0b6f\u0005\u01d8",
    "\u00ed\u0002\u0b6d\u0b6f\u0005\u01de\u00f0\u0002\u0b6e\u0b6c\u0003\u0002",
    "\u0002\u0002\u0b6e\u0b6d\u0003\u0002\u0002\u0002\u0b6f\u01d7\u0003\u0002",
    "\u0002\u0002\u0b70\u0b71\u0007Q\u0002\u0002\u0b71\u0b73\u0005\u0288",
    "\u0145\u0002\u0b72\u0b74\u0007\u00a5\u0002\u0002\u0b73\u0b72\u0003\u0002",
    "\u0002\u0002\u0b73\u0b74\u0003\u0002\u0002\u0002\u0b74\u0b75\u0003\u0002",
    "\u0002\u0002\u0b75\u0b77\u0005\u00a0Q\u0002\u0b76\u0b78\u0005\u01b0",
    "\u00d9\u0002\u0b77\u0b76\u0003\u0002\u0002\u0002\u0b77\u0b78\u0003\u0002",
    "\u0002\u0002\u0b78\u0b7c\u0003\u0002\u0002\u0002\u0b79\u0b7b\u0005\u01da",
    "\u00ee\u0002\u0b7a\u0b79\u0003\u0002\u0002\u0002\u0b7b\u0b7e\u0003\u0002",
    "\u0002\u0002\u0b7c\u0b7a\u0003\u0002\u0002\u0002\u0b7c\u0b7d\u0003\u0002",
    "\u0002\u0002\u0b7d\u0b80\u0003\u0002\u0002\u0002\u0b7e\u0b7c\u0003\u0002",
    "\u0002\u0002\u0b7f\u0b81\u0005\u01dc\u00ef\u0002\u0b80\u0b7f\u0003\u0002",
    "\u0002\u0002\u0b80\u0b81\u0003\u0002\u0002\u0002\u0b81\u0b82\u0003\u0002",
    "\u0002\u0002\u0b82\u0b83\u0007>\u0002\u0002\u0b83\u0b84\u0007Q\u0002",
    "\u0002\u0b84\u0b85\u0005\u00a0Q\u0002\u0b85\u01d9\u0003\u0002\u0002",
    "\u0002\u0b86\u0b87\u0005Z.\u0002\u0b87\u0b89\u0005\u0288\u0145\u0002",
    "\u0b88\u0b8a\u0007\u00a5\u0002\u0002\u0b89\u0b88\u0003\u0002\u0002\u0002",
    "\u0b89\u0b8a\u0003\u0002\u0002\u0002\u0b8a\u0b8b\u0003\u0002\u0002\u0002",
    "\u0b8b\u0b8d\u0005\u00a0Q\u0002\u0b8c\u0b8e\u0005\u01b0\u00d9\u0002",
    "\u0b8d\u0b8c\u0003\u0002\u0002\u0002\u0b8d\u0b8e\u0003\u0002\u0002\u0002",
    "\u0b8e\u01db\u0003\u0002\u0002\u0002\u0b8f\u0b90\u0007<\u0002\u0002",
    "\u0b90\u0b92\u0005\u00a0Q\u0002\u0b91\u0b93\u0005\u01b0\u00d9\u0002",
    "\u0b92\u0b91\u0003\u0002\u0002\u0002\u0b92\u0b93\u0003\u0002\u0002\u0002",
    "\u0b93\u01dd\u0003\u0002\u0002\u0002\u0b94\u0b95\u0007Q\u0002\u0002",
    "\u0b95\u0b96\u0005\u0288\u0145\u0002\u0b96\u0b97\u0007\u00a5\u0002\u0002",
    "\u0b97\u0b9a\u0005\u01b6\u00dc\u0002\u0b98\u0b99\u0007<\u0002\u0002",
    "\u0b99\u0b9b\u0005\u01b6\u00dc\u0002\u0b9a\u0b98\u0003\u0002\u0002\u0002",
    "\u0b9a\u0b9b\u0003\u0002\u0002\u0002\u0b9b\u0b9c\u0003\u0002\u0002\u0002",
    "\u0b9c\u0b9d\u0005\u00a0Q\u0002\u0b9d\u01df\u0003\u0002\u0002\u0002",
    "\u0b9e\u0ba0\u0007\u0094\u0002\u0002\u0b9f\u0ba1\u0007\u0017\u0002\u0002",
    "\u0ba0\u0b9f\u0003\u0002\u0002\u0002\u0ba0\u0ba1\u0003\u0002\u0002\u0002",
    "\u0ba1\u0ba2\u0003\u0002\u0002\u0002\u0ba2\u0ba3\u0005\u023e\u0120\u0002",
    "\u0ba3\u0ba7\u0005\u00a0Q\u0002\u0ba4\u0ba6\u0005\u01e2\u00f2\u0002",
    "\u0ba5\u0ba4\u0003\u0002\u0002\u0002\u0ba6\u0ba9\u0003\u0002\u0002\u0002",
    "\u0ba7\u0ba5\u0003\u0002\u0002\u0002\u0ba7\u0ba8\u0003\u0002\u0002\u0002",
    "\u0ba8\u0bab\u0003\u0002\u0002\u0002\u0ba9\u0ba7\u0003\u0002\u0002\u0002",
    "\u0baa\u0bac\u0005\u01ea\u00f6\u0002\u0bab\u0baa\u0003\u0002\u0002\u0002",
    "\u0bab\u0bac\u0003\u0002\u0002\u0002\u0bac\u0bad\u0003\u0002\u0002\u0002",
    "\u0bad\u0bae\u0007>\u0002\u0002\u0bae\u0baf\u0007\u0094\u0002\u0002",
    "\u0baf\u0bb0\u0005\u00a0Q\u0002\u0bb0\u01e1\u0003\u0002\u0002\u0002",
    "\u0bb1\u0bb2\u0007\u0017\u0002\u0002\u0bb2\u0bb3\u0005\u01e4\u00f3\u0002",
    "\u0bb3\u0bb5\u0005\u00a0Q\u0002\u0bb4\u0bb6\u0005\u01b0\u00d9\u0002",
    "\u0bb5\u0bb4\u0003\u0002\u0002\u0002\u0bb5\u0bb6\u0003\u0002\u0002\u0002",
    "\u0bb6\u01e3\u0003\u0002\u0002\u0002\u0bb7\u0bbc\u0005\u01e6\u00f4\u0002",
    "\u0bb8\u0bb9\u0007\u00ed\u0002\u0002\u0bb9\u0bbb\u0005\u01e6\u00f4\u0002",
    "\u0bba\u0bb8\u0003\u0002\u0002\u0002\u0bbb\u0bbe\u0003\u0002\u0002\u0002",
    "\u0bbc\u0bba\u0003\u0002\u0002\u0002\u0bbc\u0bbd\u0003\u0002\u0002\u0002",
    "\u0bbd\u01e5\u0003\u0002\u0002\u0002\u0bbe\u0bbc\u0003\u0002\u0002\u0002",
    "\u0bbf\u0bc1\u0007Z\u0002\u0002\u0bc0\u0bc2\u0007\u00e9\u0002\u0002",
    "\u0bc1\u0bc0\u0003\u0002\u0002\u0002\u0bc1\u0bc2\u0003\u0002\u0002\u0002",
    "\u0bc2\u0bc4\u0003\u0002\u0002\u0002\u0bc3\u0bbf\u0003\u0002\u0002\u0002",
    "\u0bc3\u0bc4\u0003\u0002\u0002\u0002\u0bc4\u0bc5\u0003\u0002\u0002\u0002",
    "\u0bc5\u0bc7\u0005\u01e8\u00f5\u0002\u0bc6\u0bc8\u0007\u00e9\u0002\u0002",
    "\u0bc7\u0bc6\u0003\u0002\u0002\u0002\u0bc7\u0bc8\u0003\u0002\u0002\u0002",
    "\u0bc8\u0bc9\u0003\u0002\u0002\u0002\u0bc9\u0bca\u0005\u023e\u0120\u0002",
    "\u0bca\u0bd1\u0003\u0002\u0002\u0002\u0bcb\u0bce\u0005\u023e\u0120\u0002",
    "\u0bcc\u0bcd\u0007\u00a7\u0002\u0002\u0bcd\u0bcf\u0005\u023e\u0120\u0002",
    "\u0bce\u0bcc\u0003\u0002\u0002\u0002\u0bce\u0bcf\u0003\u0002\u0002\u0002",
    "\u0bcf\u0bd1\u0003\u0002\u0002\u0002\u0bd0\u0bc3\u0003\u0002\u0002\u0002",
    "\u0bd0\u0bcb\u0003\u0002\u0002\u0002\u0bd1\u01e7\u0003\u0002\u0002\u0002",
    "\u0bd2\u0bdc\u0007\u00ef\u0002\u0002\u0bd3\u0bd4\u0007\u00f0\u0002\u0002",
    "\u0bd4\u0bdc\u0007\u00f1\u0002\u0002\u0bd5\u0bdc\u0007\u00f0\u0002\u0002",
    "\u0bd6\u0bdc\u0007\u00f1\u0002\u0002\u0bd7\u0bd8\u0007\u00f1\u0002\u0002",
    "\u0bd8\u0bdc\u0007\u00ef\u0002\u0002\u0bd9\u0bda\u0007\u00f0\u0002\u0002",
    "\u0bda\u0bdc\u0007\u00ef\u0002\u0002\u0bdb\u0bd2\u0003\u0002\u0002\u0002",
    "\u0bdb\u0bd3\u0003\u0002\u0002\u0002\u0bdb\u0bd5\u0003\u0002\u0002\u0002",
    "\u0bdb\u0bd6\u0003\u0002\u0002\u0002\u0bdb\u0bd7\u0003\u0002\u0002\u0002",
    "\u0bdb\u0bd9\u0003\u0002\u0002\u0002\u0bdc\u01e9\u0003\u0002\u0002\u0002",
    "\u0bdd\u0bde\u0007\u0017\u0002\u0002\u0bde\u0bdf\u0007<\u0002\u0002",
    "\u0bdf\u0be1\u0005\u00a0Q\u0002\u0be0\u0be2\u0005\u01b0\u00d9\u0002",
    "\u0be1\u0be0\u0003\u0002\u0002\u0002\u0be1\u0be2\u0003\u0002\u0002\u0002",
    "\u0be2\u01eb\u0003\u0002\u0002\u0002\u0be3\u0be8\u0005\u01ee\u00f8\u0002",
    "\u0be4\u0be8\u0005\u01f0\u00f9\u0002\u0be5\u0be8\u0005\u01f8\u00fd\u0002",
    "\u0be6\u0be8\u0005\u01fe\u0100\u0002\u0be7\u0be3\u0003\u0002\u0002\u0002",
    "\u0be7\u0be4\u0003\u0002\u0002\u0002\u0be7\u0be5\u0003\u0002\u0002\u0002",
    "\u0be7\u0be6\u0003\u0002\u0002\u0002\u0be8\u01ed\u0003\u0002\u0002\u0002",
    "\u0be9\u0bea\u0007\u00b4\u0002\u0002\u0bea\u0beb\u0005\u0288\u0145\u0002",
    "\u0beb\u0bed\u0005\u00a0Q\u0002\u0bec\u0bee\u0005\u01b0\u00d9\u0002",
    "\u0bed\u0bec\u0003\u0002\u0002\u0002\u0bed\u0bee\u0003\u0002\u0002\u0002",
    "\u0bee\u0bef\u0003\u0002\u0002\u0002\u0bef\u0bf0\u0007>\u0002\u0002",
    "\u0bf0\u0bf1\u0007\u00b4\u0002\u0002\u0bf1\u0bf2\u0005\u00a0Q\u0002",
    "\u0bf2\u01ef\u0003\u0002\u0002\u0002\u0bf3\u0bf6\u0005\u01f2\u00fa\u0002",
    "\u0bf4\u0bf6\u0005\u01f4\u00fb\u0002\u0bf5\u0bf3\u0003\u0002\u0002\u0002",
    "\u0bf5\u0bf4\u0003\u0002\u0002\u0002\u0bf6\u01f1\u0003\u0002\u0002\u0002",
    "\u0bf7\u0bfb\u00079\u0002\u0002\u0bf8\u0bf9\u0005\u01f6\u00fc\u0002",
    "\u0bf9\u0bfa\u0005\u0288\u0145\u0002\u0bfa\u0bfc\u0003\u0002\u0002\u0002",
    "\u0bfb\u0bf8\u0003\u0002\u0002\u0002\u0bfb\u0bfc\u0003\u0002\u0002\u0002",
    "\u0bfc\u0bfd\u0003\u0002\u0002\u0002\u0bfd\u0bff\u0005\u00a0Q\u0002",
    "\u0bfe\u0c00\u0005\u01b0\u00d9\u0002\u0bff\u0bfe\u0003\u0002\u0002\u0002",
    "\u0bff\u0c00\u0003\u0002\u0002\u0002\u0c00\u0c01\u0003\u0002\u0002\u0002",
    "\u0c01\u0c02\u0007e\u0002\u0002\u0c02\u0c03\u0005\u00a0Q\u0002\u0c03",
    "\u01f3\u0003\u0002\u0002\u0002\u0c04\u0c05\u00079\u0002\u0002\u0c05",
    "\u0c07\u0005\u00a0Q\u0002\u0c06\u0c08\u0005\u01b0\u00d9\u0002\u0c07",
    "\u0c06\u0003\u0002\u0002\u0002\u0c07\u0c08\u0003\u0002\u0002\u0002\u0c08",
    "\u0c09\u0003\u0002\u0002\u0002\u0c09\u0c0a\u0007e\u0002\u0002\u0c0a",
    "\u0c0b\u0005\u01f6\u00fc\u0002\u0c0b\u0c0c\u0005\u0288\u0145\u0002\u0c0c",
    "\u0c0d\u0005\u00a0Q\u0002\u0c0d\u01f5\u0003\u0002\u0002\u0002\u0c0e",
    "\u0c0f\t\u0012\u0002\u0002\u0c0f\u01f7\u0003\u0002\u0002\u0002\u0c10",
    "\u0c11\u0007G\u0002\u0002\u0c11\u0c12\u0005\u01fa\u00fe\u0002\u0c12",
    "\u0c13\u0007\u00ef\u0002\u0002\u0c13\u0c14\u0005\u023e\u0120\u0002\u0c14",
    "\u0c15\u0007\u00a7\u0002\u0002\u0c15\u0c18\u0005\u023e\u0120\u0002\u0c16",
    "\u0c17\u0007\u009c\u0002\u0002\u0c17\u0c19\u0005\u023e\u0120\u0002\u0c18",
    "\u0c16\u0003\u0002\u0002\u0002\u0c18\u0c19\u0003\u0002\u0002\u0002\u0c19",
    "\u0c1a\u0003\u0002\u0002\u0002\u0c1a\u0c1c\u0005\u00a0Q\u0002\u0c1b",
    "\u0c1d\u0005\u01b0\u00d9\u0002\u0c1c\u0c1b\u0003\u0002\u0002\u0002\u0c1c",
    "\u0c1d\u0003\u0002\u0002\u0002\u0c1d\u0c23\u0003\u0002\u0002\u0002\u0c1e",
    "\u0c20\u0007q\u0002\u0002\u0c1f\u0c21\u0005\u01fc\u00ff\u0002\u0c20",
    "\u0c1f\u0003\u0002\u0002\u0002\u0c20\u0c21\u0003\u0002\u0002\u0002\u0c21",
    "\u0c22\u0003\u0002\u0002\u0002\u0c22\u0c24\u0005\u00a0Q\u0002\u0c23",
    "\u0c1e\u0003\u0002\u0002\u0002\u0c23\u0c24\u0003\u0002\u0002\u0002\u0c24",
    "\u01f9\u0003\u0002\u0002\u0002\u0c25\u0c2a\u0005R*\u0002\u0c26\u0c27",
    "\u0005\u00dco\u0002\u0c27\u0c28\u0007\n\u0002\u0002\u0c28\u0c29\u0005",
    "\u00ccg\u0002\u0c29\u0c2b\u0003\u0002\u0002\u0002\u0c2a\u0c26\u0003",
    "\u0002\u0002\u0002\u0c2a\u0c2b\u0003\u0002\u0002\u0002\u0c2b\u0c2e\u0003",
    "\u0002\u0002\u0002\u0c2c\u0c2e\u0005\u023e\u0120\u0002\u0c2d\u0c25\u0003",
    "\u0002\u0002\u0002\u0c2d\u0c2c\u0003\u0002\u0002\u0002\u0c2e\u01fb\u0003",
    "\u0002\u0002\u0002\u0c2f\u0c34\u0005\u023e\u0120\u0002\u0c30\u0c31\u0007",
    "\u00ed\u0002\u0002\u0c31\u0c33\u0005\u023e\u0120\u0002\u0c32\u0c30\u0003",
    "\u0002\u0002\u0002\u0c33\u0c36\u0003\u0002\u0002\u0002\u0c34\u0c32\u0003",
    "\u0002\u0002\u0002\u0c34\u0c35\u0003\u0002\u0002\u0002\u0c35\u01fd\u0003",
    "\u0002\u0002\u0002\u0c36\u0c34\u0003\u0002\u0002\u0002\u0c37\u0c38\u0007",
    "G\u0002\u0002\u0c38\u0c39\u0007;\u0002\u0002\u0c39\u0c3a\u0005\u01fa",
    "\u00fe\u0002\u0c3a\u0c3c\u0007T\u0002\u0002\u0c3b\u0c3d\u0007\u00e9",
    "\u0002\u0002\u0c3c\u0c3b\u0003\u0002\u0002\u0002\u0c3c\u0c3d\u0003\u0002",
    "\u0002\u0002\u0c3d\u0c3e\u0003\u0002\u0002\u0002\u0c3e\u0c3f\u0005\u023e",
    "\u0120\u0002\u0c3f\u0c41\u0005\u00a0Q\u0002\u0c40\u0c42\u0005\u01b0",
    "\u00d9\u0002\u0c41\u0c40\u0003\u0002\u0002\u0002\u0c41\u0c42\u0003\u0002",
    "\u0002\u0002\u0c42\u0c48\u0003\u0002\u0002\u0002\u0c43\u0c45\u0007q",
    "\u0002\u0002\u0c44\u0c46\u0005\u01fc\u00ff\u0002\u0c45\u0c44\u0003\u0002",
    "\u0002\u0002\u0c45\u0c46\u0003\u0002\u0002\u0002\u0c46\u0c47\u0003\u0002",
    "\u0002\u0002\u0c47\u0c49\u0005\u00a0Q\u0002\u0c48\u0c43\u0003\u0002",
    "\u0002\u0002\u0c48\u0c49\u0003\u0002\u0002\u0002\u0c49\u01ff\u0003\u0002",
    "\u0002\u0002\u0c4a\u0c4d\u0005\u0202\u0102\u0002\u0c4b\u0c4d\u0005\u020c",
    "\u0107\u0002\u0c4c\u0c4a\u0003\u0002\u0002\u0002\u0c4c\u0c4b\u0003\u0002",
    "\u0002\u0002\u0c4d\u0201\u0003\u0002\u0002\u0002\u0c4e\u0c51\u0005\u020a",
    "\u0106\u0002\u0c4f\u0c51\u0005\u0204\u0103\u0002\u0c50\u0c4e\u0003\u0002",
    "\u0002\u0002\u0c50\u0c4f\u0003\u0002\u0002\u0002\u0c51\u0203\u0003\u0002",
    "\u0002\u0002\u0c52\u0c53\u0007\u00a8\u0002\u0002\u0c53\u0c55\u0005\u00a0",
    "Q\u0002\u0c54\u0c56\u0005\u01b0\u00d9\u0002\u0c55\u0c54\u0003\u0002",
    "\u0002\u0002\u0c55\u0c56\u0003\u0002\u0002\u0002\u0c56\u0c5a\u0003\u0002",
    "\u0002\u0002\u0c57\u0c59\u0005\u0208\u0105\u0002\u0c58\u0c57\u0003\u0002",
    "\u0002\u0002\u0c59\u0c5c\u0003\u0002\u0002\u0002\u0c5a\u0c58\u0003\u0002",
    "\u0002\u0002\u0c5a\u0c5b\u0003\u0002\u0002\u0002\u0c5b\u0c5e\u0003\u0002",
    "\u0002\u0002\u0c5c\u0c5a\u0003\u0002\u0002\u0002\u0c5d\u0c5f\u0005\u0206",
    "\u0104\u0002\u0c5e\u0c5d\u0003\u0002\u0002\u0002\u0c5e\u0c5f\u0003\u0002",
    "\u0002\u0002\u0c5f\u0c60\u0003\u0002\u0002\u0002\u0c60\u0c61\u0007>",
    "\u0002\u0002\u0c61\u0c62\u0007\u00a8\u0002\u0002\u0c62\u0c63\u0005\u00a0",
    "Q\u0002\u0c63\u0205\u0003\u0002\u0002\u0002\u0c64\u0c65\u0007F\u0002",
    "\u0002\u0c65\u0c67\u0005\u00a0Q\u0002\u0c66\u0c68\u0005\u01b0\u00d9",
    "\u0002\u0c67\u0c66\u0003\u0002\u0002\u0002\u0c67\u0c68\u0003\u0002\u0002",
    "\u0002\u0c68\u0207\u0003\u0002\u0002\u0002\u0c69\u0c6f\u0007\u0018\u0002",
    "\u0002\u0c6a\u0c6d\u0005R*\u0002\u0c6b\u0c6c\u0007\n\u0002\u0002\u0c6c",
    "\u0c6e\u0005\u00ceh\u0002\u0c6d\u0c6b\u0003\u0002\u0002\u0002\u0c6d",
    "\u0c6e\u0003\u0002\u0002\u0002\u0c6e\u0c70\u0003\u0002\u0002\u0002\u0c6f",
    "\u0c6a\u0003\u0002\u0002\u0002\u0c6f\u0c70\u0003\u0002\u0002\u0002\u0c70",
    "\u0c73\u0003\u0002\u0002\u0002\u0c71\u0c72\u0007\u00b2\u0002\u0002\u0c72",
    "\u0c74\u0005\u0288\u0145\u0002\u0c73\u0c71\u0003\u0002\u0002\u0002\u0c73",
    "\u0c74\u0003\u0002\u0002\u0002\u0c74\u0c75\u0003\u0002\u0002\u0002\u0c75",
    "\u0c77\u0005\u00a0Q\u0002\u0c76\u0c78\u0005\u01b0\u00d9\u0002\u0c77",
    "\u0c76\u0003\u0002\u0002\u0002\u0c77\u0c78\u0003\u0002\u0002\u0002\u0c78",
    "\u0209\u0003\u0002\u0002\u0002\u0c79\u0c7b\u0007\u00a6\u0002\u0002\u0c7a",
    "\u0c7c\u0005\u023e\u0120\u0002\u0c7b\u0c7a\u0003\u0002\u0002\u0002\u0c7b",
    "\u0c7c\u0003\u0002\u0002\u0002\u0c7c\u0c7d\u0003\u0002\u0002\u0002\u0c7d",
    "\u0c7e\u0005\u00a0Q\u0002\u0c7e\u020b\u0003\u0002\u0002\u0002\u0c7f",
    "\u0c83\u0005\u020e\u0108\u0002\u0c80\u0c83\u0005\u0210\u0109\u0002\u0c81",
    "\u0c83\u0005\u0214\u010b\u0002\u0c82\u0c7f\u0003\u0002\u0002\u0002\u0c82",
    "\u0c80\u0003\u0002\u0002\u0002\u0c82\u0c81\u0003\u0002\u0002\u0002\u0c83",
    "\u020d\u0003\u0002\u0002\u0002\u0c84\u0c85\u0007B\u0002\u0002\u0c85",
    "\u0c86\u0005\u023e\u0120\u0002\u0c86\u0c87\u0005\u00a0Q\u0002\u0c87",
    "\u020f\u0003\u0002\u0002\u0002\u0c88\u0c89\u0007y\u0002\u0002\u0c89",
    "\u0c8a\u0007B\u0002\u0002\u0c8a\u0c8b\u0005\u0212\u010a\u0002\u0c8b",
    "\u0c8c\u0005\u00a0Q\u0002\u0c8c\u0211\u0003\u0002\u0002\u0002\u0c8d",
    "\u0c8e\u0007N\u0002\u0002\u0c8e\u0c8f\u0007\u00fc\u0002\u0002\u0c8f",
    "\u0c96\u0007\u00e0\u0002\u0002\u0c90\u0c91\u0007N\u0002\u0002\u0c91",
    "\u0c96\u0007\u00df\u0002\u0002\u0c92\u0c96\u0005\u021a\u010e\u0002\u0c93",
    "\u0c94\u0007\u0091\u0002\u0002\u0c94\u0c96\u0007q\u0002\u0002\u0c95",
    "\u0c8d\u0003\u0002\u0002\u0002\u0c95\u0c90\u0003\u0002\u0002\u0002\u0c95",
    "\u0c92\u0003\u0002\u0002\u0002\u0c95\u0c93\u0003\u0002\u0002\u0002\u0c96",
    "\u0213\u0003\u0002\u0002\u0002\u0c97\u0c99\u0007\u0091\u0002\u0002\u0c98",
    "\u0c9a\u0005\u0216\u010c\u0002\u0c99\u0c98\u0003\u0002\u0002\u0002\u0c99",
    "\u0c9a\u0003\u0002\u0002\u0002\u0c9a\u0c9b\u0003\u0002\u0002\u0002\u0c9b",
    "\u0c9c\u0005\u00a0Q\u0002\u0c9c\u0215\u0003\u0002\u0002\u0002\u0c9d",
    "\u0ca0\u0007q\u0002\u0002\u0c9e\u0ca0\u0005\u01b4\u00db\u0002\u0c9f",
    "\u0c9d\u0003\u0002\u0002\u0002\u0c9f\u0c9e\u0003\u0002\u0002\u0002\u0ca0",
    "\u0217\u0003\u0002\u0002\u0002\u0ca1\u0ca8\u0005\u021a\u010e\u0002\u0ca2",
    "\u0ca8\u0005\u021c\u010f\u0002\u0ca3\u0ca8\u0005\u0220\u0111\u0002\u0ca4",
    "\u0ca8\u0005\u0224\u0113\u0002\u0ca5\u0ca8\u0005\u0226\u0114\u0002\u0ca6",
    "\u0ca8\u0005\u0228\u0115\u0002\u0ca7\u0ca1\u0003\u0002\u0002\u0002\u0ca7",
    "\u0ca2\u0003\u0002\u0002\u0002\u0ca7\u0ca3\u0003\u0002\u0002\u0002\u0ca7",
    "\u0ca4\u0003\u0002\u0002\u0002\u0ca7\u0ca5\u0003\u0002\u0002\u0002\u0ca7",
    "\u0ca6\u0003\u0002\u0002\u0002\u0ca8\u0219\u0003\u0002\u0002\u0002\u0ca9",
    "\u0caa\u0007N\u0002\u0002\u0caa\u0cab\u0005\u01b4\u00db\u0002\u0cab",
    "\u0cac\u0005\u00a0Q\u0002\u0cac\u021b\u0003\u0002\u0002\u0002\u0cad",
    "\u0cae\u0007D\u0002\u0002\u0cae\u0caf\u0005\u021e\u0110\u0002\u0caf",
    "\u0cb0\u0005\u00a0Q\u0002\u0cb0\u021d\u0003\u0002\u0002\u0002\u0cb1",
    "\u0cb2\t\u0013\u0002\u0002\u0cb2\u021f\u0003\u0002\u0002\u0002\u0cb3",
    "\u0cb4\u0007&\u0002\u0002\u0cb4\u0cb5\u0005\u0222\u0112\u0002\u0cb5",
    "\u0cb6\u0005\u00a0Q\u0002\u0cb6\u0221\u0003\u0002\u0002\u0002\u0cb7",
    "\u0cb8\t\u0014\u0002\u0002\u0cb8\u0223\u0003\u0002\u0002\u0002\u0cb9",
    "\u0cba\u0007\u009d\u0002\u0002\u0cba\u0cbb\u0005\u00a0Q\u0002\u0cbb",
    "\u0225\u0003\u0002\u0002\u0002\u0cbc\u0cbd\u0007>\u0002\u0002\u0cbd",
    "\u0cbe\u0005\u00a0Q\u0002\u0cbe\u0227\u0003\u0002\u0002\u0002\u0cbf",
    "\u0cc1\u0007\u0092\u0002\u0002\u0cc0\u0cc2\u0005\u023e\u0120\u0002\u0cc1",
    "\u0cc0\u0003\u0002\u0002\u0002\u0cc1\u0cc2\u0003\u0002\u0002\u0002\u0cc2",
    "\u0cc3\u0003\u0002\u0002\u0002\u0cc3\u0cc4\u0005\u00a0Q\u0002\u0cc4",
    "\u0229\u0003\u0002\u0002\u0002\u0cc5\u0cc8\u0005\u022c\u0117\u0002\u0cc6",
    "\u0cc8\u0005\u0232\u011a\u0002\u0cc7\u0cc5\u0003\u0002\u0002\u0002\u0cc7",
    "\u0cc6\u0003\u0002\u0002\u0002\u0cc8\u022b\u0003\u0002\u0002\u0002\u0cc9",
    "\u0ccb\u0007\u008d\u0002\u0002\u0cca\u0ccc\u0007\u0086\u0002\u0002\u0ccb",
    "\u0cca\u0003\u0002\u0002\u0002\u0ccb\u0ccc\u0003\u0002\u0002\u0002\u0ccc",
    "\u0ccd\u0003\u0002\u0002\u0002\u0ccd\u0cce\u0005\u022e\u0118\u0002\u0cce",
    "\u0ccf\u0005\u00a0Q\u0002\u0ccf\u022d\u0003\u0002\u0002\u0002\u0cd0",
    "\u0cd5\u0005\u0230\u0119\u0002\u0cd1\u0cd2\u0007\u00ed\u0002\u0002\u0cd2",
    "\u0cd4\u0005\u0230\u0119\u0002\u0cd3\u0cd1\u0003\u0002\u0002\u0002\u0cd4",
    "\u0cd7\u0003\u0002\u0002\u0002\u0cd5\u0cd3\u0003\u0002\u0002\u0002\u0cd5",
    "\u0cd6\u0003\u0002\u0002\u0002\u0cd6\u022f\u0003\u0002\u0002\u0002\u0cd7",
    "\u0cd5\u0003\u0002\u0002\u0002\u0cd8\u0cd9\u0005\u023e\u0120\u0002\u0cd9",
    "\u0cda\u0005\u0188\u00c5\u0002\u0cda\u0231\u0003\u0002\u0002\u0002\u0cdb",
    "\u0cdc\u0007A\u0002\u0002\u0cdc\u0cdd\u0005\u0234\u011b\u0002\u0cdd",
    "\u0cde\u0005\u00a0Q\u0002\u0cde\u0233\u0003\u0002\u0002\u0002\u0cdf",
    "\u0ce4\u0005\u023e\u0120\u0002\u0ce0\u0ce1\u0007\u00ed\u0002\u0002\u0ce1",
    "\u0ce3\u0005\u023e\u0120\u0002\u0ce2\u0ce0\u0003\u0002\u0002\u0002\u0ce3",
    "\u0ce6\u0003\u0002\u0002\u0002\u0ce4\u0ce2\u0003\u0002\u0002\u0002\u0ce4",
    "\u0ce5\u0003\u0002\u0002\u0002\u0ce5\u0235\u0003\u0002\u0002\u0002\u0ce6",
    "\u0ce4\u0003\u0002\u0002\u0002\u0ce7\u0ce8\u0007\u00b0\u0002\u0002\u0ce8",
    "\u0ce9\u0005\u0238\u011d\u0002\u0ce9\u0ceb\u0005\u00a0Q\u0002\u0cea",
    "\u0cec\u0005\u01b0\u00d9\u0002\u0ceb\u0cea\u0003\u0002\u0002\u0002\u0ceb",
    "\u0cec\u0003\u0002\u0002\u0002\u0cec\u0ced\u0003\u0002\u0002\u0002\u0ced",
    "\u0cee\u0007>\u0002\u0002\u0cee\u0cef\u0007\u00b0\u0002\u0002\u0cef",
    "\u0cf0\u0005\u00a0Q\u0002\u0cf0\u0237\u0003\u0002\u0002\u0002\u0cf1",
    "\u0cf4\u0005\u0180\u00c1\u0002\u0cf2\u0cf4\u0005\u023e\u0120\u0002\u0cf3",
    "\u0cf1\u0003\u0002\u0002\u0002\u0cf3\u0cf2\u0003\u0002\u0002\u0002\u0cf4",
    "\u0239\u0003\u0002\u0002\u0002\u0cf5\u0cf6\u0005\u031a\u018e\u0002\u0cf6",
    "\u0cf7\u0005\u00a0Q\u0002\u0cf7\u023b\u0003\u0002\u0002\u0002\u0cf8",
    "\u0cf9\u0007\u00ba\u0002\u0002\u0cf9\u0cfa\u0005\u023e\u0120\u0002\u0cfa",
    "\u0cfb\u0005\u00a0Q\u0002\u0cfb\u023d\u0003\u0002\u0002\u0002\u0cfc",
    "\u0cfd\b\u0120\u0001\u0002\u0cfd\u0d19\u0005\u0244\u0123\u0002\u0cfe",
    "\u0d19\u0005\u0250\u0129\u0002\u0cff\u0d19\u0005\u025a\u012e\u0002\u0d00",
    "\u0d19\u0005\u025c\u012f\u0002\u0d01\u0d19\u0005\u0264\u0133\u0002\u0d02",
    "\u0d19\u0005\u0280\u0141\u0002\u0d03\u0d19\u0005\u0284\u0143\u0002\u0d04",
    "\u0d19\u0005\u0286\u0144\u0002\u0d05\u0d06\u0007r\u0002\u0002\u0d06",
    "\u0d19\u0005\u023e\u0120\u0016\u0d07\u0d19\u0005\u031a\u018e\u0002\u0d08",
    "\u0d19\u0005\u02c6\u0164\u0002\u0d09\u0d19\u0005\u028a\u0146\u0002\u0d0a",
    "\u0d19\u0005\u0296\u014c\u0002\u0d0b\u0d19\u0005\u02c8\u0165\u0002\u0d0c",
    "\u0d0e\u0005\u0240\u0121\u0002\u0d0d\u0d0c\u0003\u0002\u0002\u0002\u0d0d",
    "\u0d0e\u0003\u0002\u0002\u0002\u0d0e\u0d0f\u0003\u0002\u0002\u0002\u0d0f",
    "\u0d10\u0007\u00fb\u0002\u0002\u0d10\u0d16\u0005T+\u0002\u0d11\u0d12",
    "\u0007\u0101\u0002\u0002\u0d12\u0d13\u0007w\u0002\u0002\u0d13\u0d14",
    "\u0005\u00d6l\u0002\u0d14\u0d15\u0007\u0102\u0002\u0002\u0d15\u0d17",
    "\u0003\u0002\u0002\u0002\u0d16\u0d11\u0003\u0002\u0002\u0002\u0d16\u0d17",
    "\u0003\u0002\u0002\u0002\u0d17\u0d19\u0003\u0002\u0002\u0002\u0d18\u0cfc",
    "\u0003\u0002\u0002\u0002\u0d18\u0cfe\u0003\u0002\u0002\u0002\u0d18\u0cff",
    "\u0003\u0002\u0002\u0002\u0d18\u0d00\u0003\u0002\u0002\u0002\u0d18\u0d01",
    "\u0003\u0002\u0002\u0002\u0d18\u0d02\u0003\u0002\u0002\u0002\u0d18\u0d03",
    "\u0003\u0002\u0002\u0002\u0d18\u0d04\u0003\u0002\u0002\u0002\u0d18\u0d05",
    "\u0003\u0002\u0002\u0002\u0d18\u0d07\u0003\u0002\u0002\u0002\u0d18\u0d08",
    "\u0003\u0002\u0002\u0002\u0d18\u0d09\u0003\u0002\u0002\u0002\u0d18\u0d0a",
    "\u0003\u0002\u0002\u0002\u0d18\u0d0b\u0003\u0002\u0002\u0002\u0d18\u0d0d",
    "\u0003\u0002\u0002\u0002\u0d19\u0df7\u0003\u0002\u0002\u0002\u0d1a\u0d1b",
    "\f.\u0002\u0002\u0d1b\u0d1d\u0007Z\u0002\u0002\u0d1c\u0d1e\u0007\u00e9",
    "\u0002\u0002\u0d1d\u0d1c\u0003\u0002\u0002\u0002\u0d1d\u0d1e\u0003\u0002",
    "\u0002\u0002\u0d1e\u0d1f\u0003\u0002\u0002\u0002\u0d1f\u0df6\u0005\u023e",
    "\u0120/\u0d20\u0d21\f-\u0002\u0002\u0d21\u0d23\u0007]\u0002\u0002\u0d22",
    "\u0d24\u0007\u00e9\u0002\u0002\u0d23\u0d22\u0003\u0002\u0002\u0002\u0d23",
    "\u0d24\u0003\u0002\u0002\u0002\u0d24\u0d25\u0003\u0002\u0002\u0002\u0d25",
    "\u0df6\u0005\u023e\u0120.\u0d26\u0d27\f\'\u0002\u0002\u0d27\u0d29\u0007",
    "\u00fd\u0002\u0002\u0d28\u0d2a\u0007\u00e9\u0002\u0002\u0d29\u0d28\u0003",
    "\u0002\u0002\u0002\u0d29\u0d2a\u0003\u0002\u0002\u0002\u0d2a\u0d2b\u0003",
    "\u0002\u0002\u0002\u0d2b\u0df6\u0005\u023e\u0120(\u0d2c\u0d2d\f&\u0002",
    "\u0002\u0d2d\u0d2f\u0007\u00fc\u0002\u0002\u0d2e\u0d30\u0007\u00e9\u0002",
    "\u0002\u0d2f\u0d2e\u0003\u0002\u0002\u0002\u0d2f\u0d30\u0003\u0002\u0002",
    "\u0002\u0d30\u0d31\u0003\u0002\u0002\u0002\u0d31\u0df6\u0005\u023e\u0120",
    "\'\u0d32\u0d33\f%\u0002\u0002\u0d33\u0d35\u0007\u00ee\u0002\u0002\u0d34",
    "\u0d36\u0007\u00e9\u0002\u0002\u0d35\u0d34\u0003\u0002\u0002\u0002\u0d35",
    "\u0d36\u0003\u0002\u0002\u0002\u0d36\u0d37\u0003\u0002\u0002\u0002\u0d37",
    "\u0df6\u0005\u023e\u0120&\u0d38\u0d39\f$\u0002\u0002\u0d39\u0d3b\u0007",
    "\u00f2\u0002\u0002\u0d3a\u0d3c\u0007\u00e9\u0002\u0002\u0d3b\u0d3a\u0003",
    "\u0002\u0002\u0002\u0d3b\u0d3c\u0003\u0002\u0002\u0002\u0d3c\u0d3d\u0003",
    "\u0002\u0002\u0002\u0d3d\u0df6\u0005\u023e\u0120%\u0d3e\u0d3f\f#\u0002",
    "\u0002\u0d3f\u0d41\u0007\u00f3\u0002\u0002\u0d40\u0d42\u0007\u00e9\u0002",
    "\u0002\u0d41\u0d40\u0003\u0002\u0002\u0002\u0d41\u0d42\u0003\u0002\u0002",
    "\u0002\u0d42\u0d43\u0003\u0002\u0002\u0002\u0d43\u0df6\u0005\u023e\u0120",
    "$\u0d44\u0d45\f\"\u0002\u0002\u0d45\u0d47\u0007h\u0002\u0002\u0d46\u0d48",
    "\u0007\u00e9\u0002\u0002\u0d47\u0d46\u0003\u0002\u0002\u0002\u0d47\u0d48",
    "\u0003\u0002\u0002\u0002\u0d48\u0d49\u0003\u0002\u0002\u0002\u0d49\u0df6",
    "\u0005\u023e\u0120#\u0d4a\u0d4b\f!\u0002\u0002\u0d4b\u0d4d\u0007\u00f4",
    "\u0002\u0002\u0d4c\u0d4e\u0007\u00e9\u0002\u0002\u0d4d\u0d4c\u0003\u0002",
    "\u0002\u0002\u0d4d\u0d4e\u0003\u0002\u0002\u0002\u0d4e\u0d4f\u0003\u0002",
    "\u0002\u0002\u0d4f\u0df6\u0005\u023e\u0120\"\u0d50\u0d51\f \u0002\u0002",
    "\u0d51\u0d53\u0007\u00ef\u0002\u0002\u0d52\u0d54\u0007\u00e9\u0002\u0002",
    "\u0d53\u0d52\u0003\u0002\u0002\u0002\u0d53\u0d54\u0003\u0002\u0002\u0002",
    "\u0d54\u0d55\u0003\u0002\u0002\u0002\u0d55\u0df6\u0005\u023e\u0120!",
    "\u0d56\u0d57\f\u001f\u0002\u0002\u0d57\u0d58\u0007\u00f0\u0002\u0002",
    "\u0d58\u0d5a\u0007\u00f1\u0002\u0002\u0d59\u0d5b\u0007\u00e9\u0002\u0002",
    "\u0d5a\u0d59\u0003\u0002\u0002\u0002\u0d5a\u0d5b\u0003\u0002\u0002\u0002",
    "\u0d5b\u0d5c\u0003\u0002\u0002\u0002\u0d5c\u0df6\u0005\u023e\u0120 ",
    "\u0d5d\u0d5e\f\u001e\u0002\u0002\u0d5e\u0d60\u0007\u00f0\u0002\u0002",
    "\u0d5f\u0d61\u0007\u00e9\u0002\u0002\u0d60\u0d5f\u0003\u0002\u0002\u0002",
    "\u0d60\u0d61\u0003\u0002\u0002\u0002\u0d61\u0d62\u0003\u0002\u0002\u0002",
    "\u0d62\u0df6\u0005\u023e\u0120\u001f\u0d63\u0d64\f\u001d\u0002\u0002",
    "\u0d64\u0d66\u0007\u00f1\u0002\u0002\u0d65\u0d67\u0007\u00e9\u0002\u0002",
    "\u0d66\u0d65\u0003\u0002\u0002\u0002\u0d66\u0d67\u0003\u0002\u0002\u0002",
    "\u0d67\u0d68\u0003\u0002\u0002\u0002\u0d68\u0df6\u0005\u023e\u0120\u001e",
    "\u0d69\u0d6a\f\u001c\u0002\u0002\u0d6a\u0d6b\u0007\u00f0\u0002\u0002",
    "\u0d6b\u0d6d\u0007\u00ef\u0002\u0002\u0d6c\u0d6e\u0007\u00e9\u0002\u0002",
    "\u0d6d\u0d6c\u0003\u0002\u0002\u0002\u0d6d\u0d6e\u0003\u0002\u0002\u0002",
    "\u0d6e\u0d6f\u0003\u0002\u0002\u0002\u0d6f\u0df6\u0005\u023e\u0120\u001d",
    "\u0d70\u0d71\f\u001b\u0002\u0002\u0d71\u0d72\u0007\u00f1\u0002\u0002",
    "\u0d72\u0d74\u0007\u00ef\u0002\u0002\u0d73\u0d75\u0007\u00e9\u0002\u0002",
    "\u0d74\u0d73\u0003\u0002\u0002\u0002\u0d74\u0d75\u0003\u0002\u0002\u0002",
    "\u0d75\u0d76\u0003\u0002\u0002\u0002\u0d76\u0df6\u0005\u023e\u0120\u001c",
    "\u0d77\u0d78\f\u001a\u0002\u0002\u0d78\u0d7a\u0007c\u0002\u0002\u0d79",
    "\u0d7b\u0007\u00e9\u0002\u0002\u0d7a\u0d79\u0003\u0002\u0002\u0002\u0d7a",
    "\u0d7b\u0003\u0002\u0002\u0002\u0d7b\u0d7c\u0003\u0002\u0002\u0002\u0d7c",
    "\u0df6\u0005\u023e\u0120\u001b\u0d7d\u0d7e\f\u0019\u0002\u0002\u0d7e",
    "\u0d80\u0007\u00f7\u0002\u0002\u0d7f\u0d81\u0007\u00e9\u0002\u0002\u0d80",
    "\u0d7f\u0003\u0002\u0002\u0002\u0d80\u0d81\u0003\u0002\u0002\u0002\u0d81",
    "\u0d82\u0003\u0002\u0002\u0002\u0d82\u0df6\u0005\u023e\u0120\u001a\u0d83",
    "\u0d84\f\u0018\u0002\u0002\u0d84\u0d86\u0007\b\u0002\u0002\u0d85\u0d87",
    "\u0007\u00e9\u0002\u0002\u0d86\u0d85\u0003\u0002\u0002\u0002\u0d86\u0d87",
    "\u0003\u0002\u0002\u0002\u0d87\u0d88\u0003\u0002\u0002\u0002\u0d88\u0df6",
    "\u0005\u023e\u0120\u0019\u0d89\u0d8a\f\u0017\u0002\u0002\u0d8a\u0d8c",
    "\u0007\u007f\u0002\u0002\u0d8b\u0d8d\u0007\u00e9\u0002\u0002\u0d8c\u0d8b",
    "\u0003\u0002\u0002\u0002\u0d8c\u0d8d\u0003\u0002\u0002\u0002\u0d8d\u0d8e",
    "\u0003\u0002\u0002\u0002\u0d8e\u0df6\u0005\u023e\u0120\u0018\u0d8f\u0d90",
    "\f\u0015\u0002\u0002\u0d90\u0d92\u0007\u0007\u0002\u0002\u0d91\u0d93",
    "\u0007\u00e9\u0002\u0002\u0d92\u0d91\u0003\u0002\u0002\u0002\u0d92\u0d93",
    "\u0003\u0002\u0002\u0002\u0d93\u0d94\u0003\u0002\u0002\u0002\u0d94\u0df6",
    "\u0005\u023e\u0120\u0016\u0d95\u0d96\f\u0014\u0002\u0002\u0d96\u0d98",
    "\u0007}\u0002\u0002\u0d97\u0d99\u0007\u00e9\u0002\u0002\u0d98\u0d97",
    "\u0003\u0002\u0002\u0002\u0d98\u0d99\u0003\u0002\u0002\u0002\u0d99\u0d9a",
    "\u0003\u0002\u0002\u0002\u0d9a\u0df6\u0005\u023e\u0120\u0015\u0d9b\u0d9c",
    "\f\u0013\u0002\u0002\u0d9c\u0d9e\u0007\u00b9\u0002\u0002\u0d9d\u0d9f",
    "\u0007\u00e9\u0002\u0002\u0d9e\u0d9d\u0003\u0002\u0002\u0002\u0d9e\u0d9f",
    "\u0003\u0002\u0002\u0002\u0d9f\u0da0\u0003\u0002\u0002\u0002\u0da0\u0df6",
    "\u0005\u023e\u0120\u0014\u0da1\u0da2\f\u0012\u0002\u0002\u0da2\u0da3",
    "\u0007\u00f0\u0002\u0002\u0da3\u0da5\u0007\u00f0\u0002\u0002\u0da4\u0da6",
    "\u0007\u00e9\u0002\u0002\u0da5\u0da4\u0003\u0002\u0002\u0002\u0da5\u0da6",
    "\u0003\u0002\u0002\u0002\u0da6\u0da7\u0003\u0002\u0002\u0002\u0da7\u0df6",
    "\u0005\u023e\u0120\u0013\u0da8\u0da9\f\u0011\u0002\u0002\u0da9\u0daa",
    "\u0007\u00f1\u0002\u0002\u0daa\u0dac\u0007\u00f1\u0002\u0002\u0dab\u0dad",
    "\u0007\u00e9\u0002\u0002\u0dac\u0dab\u0003\u0002\u0002\u0002\u0dac\u0dad",
    "\u0003\u0002\u0002\u0002\u0dad\u0dae\u0003\u0002\u0002\u0002\u0dae\u0df6",
    "\u0005\u023e\u0120\u0012\u0daf\u0db0\f\u000b\u0002\u0002\u0db0\u0db2",
    "\u0007\u00fb\u0002\u0002\u0db1\u0db3\u0007\u00e9\u0002\u0002\u0db2\u0db1",
    "\u0003\u0002\u0002\u0002\u0db2\u0db3\u0003\u0002\u0002\u0002\u0db3\u0db4",
    "\u0003\u0002\u0002\u0002\u0db4\u0db5\u0007\u00f0\u0002\u0002\u0db5\u0db6",
    "\u0005\u030e\u0188\u0002\u0db6\u0db7\u0007\u00f1\u0002\u0002\u0db7\u0df6",
    "\u0003\u0002\u0002\u0002\u0db8\u0db9\f\n\u0002\u0002\u0db9\u0dbb\u0007",
    "\u00fb\u0002\u0002\u0dba\u0dbc\u0007\u00e9\u0002\u0002\u0dbb\u0dba\u0003",
    "\u0002\u0002\u0002\u0dbb\u0dbc\u0003\u0002\u0002\u0002\u0dbc\u0dbd\u0003",
    "\u0002\u0002\u0002\u0dbd\u0dbf\u0007\u0100\u0002\u0002\u0dbe\u0dc0\u0007",
    "\u00e9\u0002\u0002\u0dbf\u0dbe\u0003\u0002\u0002\u0002\u0dbf\u0dc0\u0003",
    "\u0002\u0002\u0002\u0dc0\u0dc1\u0003\u0002\u0002\u0002\u0dc1\u0dc2\u0007",
    "\u00f0\u0002\u0002\u0dc2\u0dc3\u0005\u030e\u0188\u0002\u0dc3\u0dc4\u0007",
    "\u00f1\u0002\u0002\u0dc4\u0df6\u0003\u0002\u0002\u0002\u0dc5\u0dc6\f",
    "\t\u0002\u0002\u0dc6\u0dc8\u0007\u00fb\u0002\u0002\u0dc7\u0dc9\u0007",
    "\u00e9\u0002\u0002\u0dc8\u0dc7\u0003\u0002\u0002\u0002\u0dc8\u0dc9\u0003",
    "\u0002\u0002\u0002\u0dc9\u0dca\u0003\u0002\u0002\u0002\u0dca\u0dcc\u0007",
    "\u0100\u0002\u0002\u0dcb\u0dcd\u0007\u00e9\u0002\u0002\u0dcc\u0dcb\u0003",
    "\u0002\u0002\u0002\u0dcc\u0dcd\u0003\u0002\u0002\u0002\u0dcd\u0dce\u0003",
    "\u0002\u0002\u0002\u0dce\u0df6\u0005T+\u0002\u0dcf\u0dd0\f\b\u0002\u0002",
    "\u0dd0\u0dd1\u0007\u00fb\u0002\u0002\u0dd1\u0dd2\u0007\u00fb\u0002\u0002",
    "\u0dd2\u0dd4\u0007\u00fb\u0002\u0002\u0dd3\u0dd5\u0007\u00e9\u0002\u0002",
    "\u0dd4\u0dd3\u0003\u0002\u0002\u0002\u0dd4\u0dd5\u0003\u0002\u0002\u0002",
    "\u0dd5\u0dd6\u0003\u0002\u0002\u0002\u0dd6\u0dd7\u0007\u00f0\u0002\u0002",
    "\u0dd7\u0df6\u0005\u030e\u0188\u0002\u0dd8\u0dde\f\u0007\u0002\u0002",
    "\u0dd9\u0ddb\u0007\u0101\u0002\u0002\u0dda\u0ddc\u0005\u025e\u0130\u0002",
    "\u0ddb\u0dda\u0003\u0002\u0002\u0002\u0ddb\u0ddc\u0003\u0002\u0002\u0002",
    "\u0ddc\u0ddd\u0003\u0002\u0002\u0002\u0ddd\u0ddf\u0007\u0102\u0002\u0002",
    "\u0dde\u0dd9\u0003\u0002\u0002\u0002\u0ddf\u0de0\u0003\u0002\u0002\u0002",
    "\u0de0\u0dde\u0003\u0002\u0002\u0002\u0de0\u0de1\u0003\u0002\u0002\u0002",
    "\u0de1\u0df6\u0003\u0002\u0002\u0002\u0de2\u0de3\f\u0006\u0002\u0002",
    "\u0de3\u0de5\u0007\u0101\u0002\u0002\u0de4\u0de6\u0005\u025e\u0130\u0002",
    "\u0de5\u0de4\u0003\u0002\u0002\u0002\u0de5\u0de6\u0003\u0002\u0002\u0002",
    "\u0de6\u0de7\u0003\u0002\u0002\u0002\u0de7\u0df6\u0007\u0102\u0002\u0002",
    "\u0de8\u0de9\f\u0005\u0002\u0002\u0de9\u0dea\u0007\u00fb\u0002\u0002",
    "\u0dea\u0df0\u0005T+\u0002\u0deb\u0dec\u0007\u0101\u0002\u0002\u0dec",
    "\u0ded\u0007w\u0002\u0002\u0ded\u0dee\u0005\u00d6l\u0002\u0dee\u0def",
    "\u0007\u0102\u0002\u0002\u0def\u0df1\u0003\u0002\u0002\u0002\u0df0\u0deb",
    "\u0003\u0002\u0002\u0002\u0df0\u0df1\u0003\u0002\u0002\u0002\u0df1\u0df6",
    "\u0003\u0002\u0002\u0002\u0df2\u0df3\f\u0003\u0002\u0002\u0df3\u0df4",
    "\u0007\u00f8\u0002\u0002\u0df4\u0df6\u0005T+\u0002\u0df5\u0d1a\u0003",
    "\u0002\u0002\u0002\u0df5\u0d20\u0003\u0002\u0002\u0002\u0df5\u0d26\u0003",
    "\u0002\u0002\u0002\u0df5\u0d2c\u0003\u0002\u0002\u0002\u0df5\u0d32\u0003",
    "\u0002\u0002\u0002\u0df5\u0d38\u0003\u0002\u0002\u0002\u0df5\u0d3e\u0003",
    "\u0002\u0002\u0002\u0df5\u0d44\u0003\u0002\u0002\u0002\u0df5\u0d4a\u0003",
    "\u0002\u0002\u0002\u0df5\u0d50\u0003\u0002\u0002\u0002\u0df5\u0d56\u0003",
    "\u0002\u0002\u0002\u0df5\u0d5d\u0003\u0002\u0002\u0002\u0df5\u0d63\u0003",
    "\u0002\u0002\u0002\u0df5\u0d69\u0003\u0002\u0002\u0002\u0df5\u0d70\u0003",
    "\u0002\u0002\u0002\u0df5\u0d77\u0003\u0002\u0002\u0002\u0df5\u0d7d\u0003",
    "\u0002\u0002\u0002\u0df5\u0d83\u0003\u0002\u0002\u0002\u0df5\u0d89\u0003",
    "\u0002\u0002\u0002\u0df5\u0d8f\u0003\u0002\u0002\u0002\u0df5\u0d95\u0003",
    "\u0002\u0002\u0002\u0df5\u0d9b\u0003\u0002\u0002\u0002\u0df5\u0da1\u0003",
    "\u0002\u0002\u0002\u0df5\u0da8\u0003\u0002\u0002\u0002\u0df5\u0daf\u0003",
    "\u0002\u0002\u0002\u0df5\u0db8\u0003\u0002\u0002\u0002\u0df5\u0dc5\u0003",
    "\u0002\u0002\u0002\u0df5\u0dcf\u0003\u0002\u0002\u0002\u0df5\u0dd8\u0003",
    "\u0002\u0002\u0002\u0df5\u0de2\u0003\u0002\u0002\u0002\u0df5\u0de8\u0003",
    "\u0002\u0002\u0002\u0df5\u0df2\u0003\u0002\u0002\u0002\u0df6\u0df9\u0003",
    "\u0002\u0002\u0002\u0df7\u0df5\u0003\u0002\u0002\u0002\u0df7\u0df8\u0003",
    "\u0002\u0002\u0002\u0df8\u023f\u0003\u0002\u0002\u0002\u0df9\u0df7\u0003",
    "\u0002\u0002\u0002\u0dfa\u0dff\u0005\u00ceh\u0002\u0dfb\u0dff\u0007",
    "M\u0002\u0002\u0dfc\u0dff\u0007m\u0002\u0002\u0dfd\u0dff\u0007l\u0002",
    "\u0002\u0dfe\u0dfa\u0003\u0002\u0002\u0002\u0dfe\u0dfb\u0003\u0002\u0002",
    "\u0002\u0dfe\u0dfc\u0003\u0002\u0002\u0002\u0dfe\u0dfd\u0003\u0002\u0002",
    "\u0002\u0dff\u0241\u0003\u0002\u0002\u0002\u0e00\u0e01\u0005\u023e\u0120",
    "\u0002\u0e01\u0243\u0003\u0002\u0002\u0002\u0e02\u0e08\u0005\u0246\u0124",
    "\u0002\u0e03\u0e08\u0005\u0248\u0125\u0002\u0e04\u0e08\u0005\u024a\u0126",
    "\u0002\u0e05\u0e08\u0005\u024c\u0127\u0002\u0e06\u0e08\u0005\u024e\u0128",
    "\u0002\u0e07\u0e02\u0003\u0002\u0002\u0002\u0e07\u0e03\u0003\u0002\u0002",
    "\u0002\u0e07\u0e04\u0003\u0002\u0002\u0002\u0e07\u0e05\u0003\u0002\u0002",
    "\u0002\u0e07\u0e06\u0003\u0002\u0002\u0002\u0e08\u0245\u0003\u0002\u0002",
    "\u0002\u0e09\u0e0a\u0005X-\u0002\u0e0a\u0247\u0003\u0002\u0002\u0002",
    "\u0e0b\u0e0c\u0007\u0101\u0002\u0002\u0e0c\u0e0d\u0005\u023e\u0120\u0002",
    "\u0e0d\u0e0e\u0007\u0102\u0002\u0002\u0e0e\u0249\u0003\u0002\u0002\u0002",
    "\u0e0f\u0e10\u0007f\u0002\u0002\u0e10\u024b\u0003\u0002\u0002\u0002",
    "\u0e11\u0e17\u0005R*\u0002\u0e12\u0e13\u0007\u0101\u0002\u0002\u0e13",
    "\u0e14\u0007w\u0002\u0002\u0e14\u0e15\u0005\u00d6l\u0002\u0e15\u0e16",
    "\u0007\u0102\u0002\u0002\u0e16\u0e18\u0003\u0002\u0002\u0002\u0e17\u0e12",
    "\u0003\u0002\u0002\u0002\u0e17\u0e18\u0003\u0002\u0002\u0002\u0e18\u024d",
    "\u0003\u0002\u0002\u0002\u0e19\u0e1a\u0007\u0004\u0002\u0002\u0e1a\u0e1b",
    "\u0005\u023e\u0120\u0002\u0e1b\u024f\u0003\u0002\u0002\u0002\u0e1c\u0e1d",
    "\u0007L\u0002\u0002\u0e1d\u0e1e\u0007\u0101\u0002\u0002\u0e1e\u0e1f",
    "\u0005\u0252\u012a\u0002\u0e1f\u0e20\u0007\u0102\u0002\u0002\u0e20\u0251",
    "\u0003\u0002\u0002\u0002\u0e21\u0e24\u0005\u00ccg\u0002\u0e22\u0e24",
    "\u0005\u0254\u012b\u0002\u0e23\u0e21\u0003\u0002\u0002\u0002\u0e23\u0e22",
    "\u0003\u0002\u0002\u0002\u0e24\u0253\u0003\u0002\u0002\u0002\u0e25\u0e27",
    "\u0005R*\u0002\u0e26\u0e28\u0005\u0256\u012c\u0002\u0e27\u0e26\u0003",
    "\u0002\u0002\u0002\u0e27\u0e28\u0003\u0002\u0002\u0002\u0e28\u0e30\u0003",
    "\u0002\u0002\u0002\u0e29\u0e2a\u0007\u00fb\u0002\u0002\u0e2a\u0e2c\u0005",
    "T+\u0002\u0e2b\u0e2d\u0005\u0256\u012c\u0002\u0e2c\u0e2b\u0003\u0002",
    "\u0002\u0002\u0e2c\u0e2d\u0003\u0002\u0002\u0002\u0e2d\u0e2f\u0003\u0002",
    "\u0002\u0002\u0e2e\u0e29\u0003\u0002\u0002\u0002\u0e2f\u0e32\u0003\u0002",
    "\u0002\u0002\u0e30\u0e2e\u0003\u0002\u0002\u0002\u0e30\u0e31\u0003\u0002",
    "\u0002\u0002\u0e31\u0e44\u0003\u0002\u0002\u0002\u0e32\u0e30\u0003\u0002",
    "\u0002\u0002\u0e33\u0e34\u0007M\u0002\u0002\u0e34\u0e35\u0007\u00fb",
    "\u0002\u0002\u0e35\u0e37\u0005T+\u0002\u0e36\u0e38\u0005\u0256\u012c",
    "\u0002\u0e37\u0e36\u0003\u0002\u0002\u0002\u0e37\u0e38\u0003\u0002\u0002",
    "\u0002\u0e38\u0e40\u0003\u0002\u0002\u0002\u0e39\u0e3a\u0007\u00fb\u0002",
    "\u0002\u0e3a\u0e3c\u0005T+\u0002\u0e3b\u0e3d\u0005\u0256\u012c\u0002",
    "\u0e3c\u0e3b\u0003\u0002\u0002\u0002\u0e3c\u0e3d\u0003\u0002\u0002\u0002",
    "\u0e3d\u0e3f\u0003\u0002\u0002\u0002\u0e3e\u0e39\u0003\u0002\u0002\u0002",
    "\u0e3f\u0e42\u0003\u0002\u0002\u0002\u0e40\u0e3e\u0003\u0002\u0002\u0002",
    "\u0e40\u0e41\u0003\u0002\u0002\u0002\u0e41\u0e44\u0003\u0002\u0002\u0002",
    "\u0e42\u0e40\u0003\u0002\u0002\u0002\u0e43\u0e25\u0003\u0002\u0002\u0002",
    "\u0e43\u0e33\u0003\u0002\u0002\u0002\u0e44\u0255\u0003\u0002\u0002\u0002",
    "\u0e45\u0e46\u0007\u0101\u0002\u0002\u0e46\u0e48\u0007w\u0002\u0002",
    "\u0e47\u0e49\u0005\u0258\u012d\u0002\u0e48\u0e47\u0003\u0002\u0002\u0002",
    "\u0e48\u0e49\u0003\u0002\u0002\u0002\u0e49\u0e4a\u0003\u0002\u0002\u0002",
    "\u0e4a\u0e4b\u0007\u0102\u0002\u0002\u0e4b\u0257\u0003\u0002\u0002\u0002",
    "\u0e4c\u0e50\u0007\u00ed\u0002\u0002\u0e4d\u0e4f\u0007\u00ed\u0002\u0002",
    "\u0e4e\u0e4d\u0003\u0002\u0002\u0002\u0e4f\u0e52\u0003\u0002\u0002\u0002",
    "\u0e50\u0e4e\u0003\u0002\u0002\u0002\u0e50\u0e51\u0003\u0002\u0002\u0002",
    "\u0e51\u0259\u0003\u0002\u0002\u0002\u0e52\u0e50\u0003\u0002\u0002\u0002",
    "\u0e53\u0e54\u0007\u00aa\u0002\u0002\u0e54\u0e55\u0005\u023e\u0120\u0002",
    "\u0e55\u0e57\u0007Z\u0002\u0002\u0e56\u0e58\u0007\u00e9\u0002\u0002",
    "\u0e57\u0e56\u0003\u0002\u0002\u0002\u0e57\u0e58\u0003\u0002\u0002\u0002",
    "\u0e58\u0e59\u0003\u0002\u0002\u0002\u0e59\u0e5a\u0005\u00ccg\u0002",
    "\u0e5a\u025b\u0003\u0002\u0002\u0002\u0e5b\u0e5c\u0007\u00bb\u0002\u0002",
    "\u0e5c\u0e5e\u0007\u0101\u0002\u0002\u0e5d\u0e5f\u0005\u0308\u0185\u0002",
    "\u0e5e\u0e5d\u0003\u0002\u0002\u0002\u0e5e\u0e5f\u0003\u0002\u0002\u0002",
    "\u0e5f\u0e60\u0003\u0002\u0002\u0002\u0e60\u0e61\u0007\u0102\u0002\u0002",
    "\u0e61\u025d\u0003\u0002\u0002\u0002\u0e62\u0e69\u0005\u0260\u0131\u0002",
    "\u0e63\u0e64\u0005\u0260\u0131\u0002\u0e64\u0e65\u0007\u00ed\u0002\u0002",
    "\u0e65\u0e66\u0005\u0262\u0132\u0002\u0e66\u0e69\u0003\u0002\u0002\u0002",
    "\u0e67\u0e69\u0005\u0262\u0132\u0002\u0e68\u0e62\u0003\u0002\u0002\u0002",
    "\u0e68\u0e63\u0003\u0002\u0002\u0002\u0e68\u0e67\u0003\u0002\u0002\u0002",
    "\u0e69\u025f\u0003\u0002\u0002\u0002\u0e6a\u0e71\u0005\u023e\u0120\u0002",
    "\u0e6b\u0e6d\u0007\u00ed\u0002\u0002\u0e6c\u0e6e\u0005\u023e\u0120\u0002",
    "\u0e6d\u0e6c\u0003\u0002\u0002\u0002\u0e6d\u0e6e\u0003\u0002\u0002\u0002",
    "\u0e6e\u0e70\u0003\u0002\u0002\u0002\u0e6f\u0e6b\u0003\u0002\u0002\u0002",
    "\u0e70\u0e73\u0003\u0002\u0002\u0002\u0e71\u0e6f\u0003\u0002\u0002\u0002",
    "\u0e71\u0e72\u0003\u0002\u0002\u0002\u0e72\u0261\u0003\u0002\u0002\u0002",
    "\u0e73\u0e71\u0003\u0002\u0002\u0002\u0e74\u0e75\u0005T+\u0002\u0e75",
    "\u0e76\u0007\u00f5\u0002\u0002\u0e76\u0e77\u0007\u00ef\u0002\u0002\u0e77",
    "\u0e80\u0005\u023e\u0120\u0002\u0e78\u0e79\u0007\u00ed\u0002\u0002\u0e79",
    "\u0e7a\u0005T+\u0002\u0e7a\u0e7b\u0007\u00f5\u0002\u0002\u0e7b\u0e7c",
    "\u0007\u00ef\u0002\u0002\u0e7c\u0e7d\u0005\u023e\u0120\u0002\u0e7d\u0e7f",
    "\u0003\u0002\u0002\u0002\u0e7e\u0e78\u0003\u0002\u0002\u0002\u0e7f\u0e82",
    "\u0003\u0002\u0002\u0002\u0e80\u0e7e\u0003\u0002\u0002\u0002\u0e80\u0e81",
    "\u0003\u0002\u0002\u0002\u0e81\u0263\u0003\u0002\u0002\u0002\u0e82\u0e80",
    "\u0003\u0002\u0002\u0002\u0e83\u0e87\u0005\u0266\u0134\u0002\u0e84\u0e87",
    "\u0005\u0278\u013d\u0002\u0e85\u0e87\u0005\u027e\u0140\u0002\u0e86\u0e83",
    "\u0003\u0002\u0002\u0002\u0e86\u0e84\u0003\u0002\u0002\u0002\u0e86\u0e85",
    "\u0003\u0002\u0002\u0002\u0e87\u0265\u0003\u0002\u0002\u0002\u0e88\u0e89",
    "\u0007p\u0002\u0002\u0e89\u0e8f\u0005\u00ceh\u0002\u0e8a\u0e8c\u0007",
    "\u0101\u0002\u0002\u0e8b\u0e8d\u0005\u025e\u0130\u0002\u0e8c\u0e8b\u0003",
    "\u0002\u0002\u0002\u0e8c\u0e8d\u0003\u0002\u0002\u0002\u0e8d\u0e8e\u0003",
    "\u0002\u0002\u0002\u0e8e\u0e90\u0007\u0102\u0002\u0002\u0e8f\u0e8a\u0003",
    "\u0002\u0002\u0002\u0e8f\u0e90\u0003\u0002\u0002\u0002\u0e90\u0e92\u0003",
    "\u0002\u0002\u0002\u0e91\u0e93\u0005\u0268\u0135\u0002\u0e92\u0e91\u0003",
    "\u0002\u0002\u0002\u0e92\u0e93\u0003\u0002\u0002\u0002\u0e93\u0267\u0003",
    "\u0002\u0002\u0002\u0e94\u0e97\u0005\u026a\u0136\u0002\u0e95\u0e97\u0005",
    "\u0270\u0139\u0002\u0e96\u0e94\u0003\u0002\u0002\u0002\u0e96\u0e95\u0003",
    "\u0002\u0002\u0002\u0e97\u0269\u0003\u0002\u0002\u0002\u0e98\u0e99\u0007",
    "\u00b6\u0002\u0002\u0e99\u0e9a\u0007\u0103\u0002\u0002\u0e9a\u0e9b\u0005",
    "\u026c\u0137\u0002\u0e9b\u0e9c\u0007\u0104\u0002\u0002\u0e9c\u026b\u0003",
    "\u0002\u0002\u0002\u0e9d\u0ea2\u0005\u026e\u0138\u0002\u0e9e\u0e9f\u0007",
    "\u00ed\u0002\u0002\u0e9f\u0ea1\u0005\u026e\u0138\u0002\u0ea0\u0e9e\u0003",
    "\u0002\u0002\u0002\u0ea1\u0ea4\u0003\u0002\u0002\u0002\u0ea2\u0ea0\u0003",
    "\u0002\u0002\u0002\u0ea2\u0ea3\u0003\u0002\u0002\u0002\u0ea3\u026d\u0003",
    "\u0002\u0002\u0002\u0ea4\u0ea2\u0003\u0002\u0002\u0002\u0ea5\u0ea7\u0007",
    "`\u0002\u0002\u0ea6\u0ea5\u0003\u0002\u0002\u0002\u0ea6\u0ea7\u0003",
    "\u0002\u0002\u0002\u0ea7\u0eac\u0003\u0002\u0002\u0002\u0ea8\u0ea9\u0007",
    "\u00fb\u0002\u0002\u0ea9\u0eaa\u0005T+\u0002\u0eaa\u0eab\u0007\u00ef",
    "\u0002\u0002\u0eab\u0ead\u0003\u0002\u0002\u0002\u0eac\u0ea8\u0003\u0002",
    "\u0002\u0002\u0eac\u0ead\u0003\u0002\u0002\u0002\u0ead\u0eae\u0003\u0002",
    "\u0002\u0002\u0eae\u0eaf\u0005\u023e\u0120\u0002\u0eaf\u026f\u0003\u0002",
    "\u0002\u0002\u0eb0\u0eb1\u0007I\u0002\u0002\u0eb1\u0eb2\u0005\u0272",
    "\u013a\u0002\u0eb2\u0271\u0003\u0002\u0002\u0002\u0eb3\u0eb5\u0007\u0103",
    "\u0002\u0002\u0eb4\u0eb6\u0005\u0274\u013b\u0002\u0eb5\u0eb4\u0003\u0002",
    "\u0002\u0002\u0eb5\u0eb6\u0003\u0002\u0002\u0002\u0eb6\u0eb7\u0003\u0002",
    "\u0002\u0002\u0eb7\u0eb8\u0007\u0104\u0002\u0002\u0eb8\u0273\u0003\u0002",
    "\u0002\u0002\u0eb9\u0ebe\u0005\u0276\u013c\u0002\u0eba\u0ebb\u0007\u00ed",
    "\u0002\u0002\u0ebb\u0ebd\u0005\u0276\u013c\u0002\u0ebc\u0eba\u0003\u0002",
    "\u0002\u0002\u0ebd\u0ec0\u0003\u0002\u0002\u0002\u0ebe\u0ebc\u0003\u0002",
    "\u0002\u0002\u0ebe\u0ebf\u0003\u0002\u0002\u0002\u0ebf\u0275\u0003\u0002",
    "\u0002\u0002\u0ec0\u0ebe\u0003\u0002\u0002\u0002\u0ec1\u0ec4\u0005\u023e",
    "\u0120\u0002\u0ec2\u0ec4\u0005\u0272\u013a\u0002\u0ec3\u0ec1\u0003\u0002",
    "\u0002\u0002\u0ec3\u0ec2\u0003\u0002\u0002\u0002\u0ec4\u0277\u0003\u0002",
    "\u0002\u0002\u0ec5\u0ec8\u0005\u027a\u013e\u0002\u0ec6\u0ec8\u0005\u027c",
    "\u013f\u0002\u0ec7\u0ec5\u0003\u0002\u0002\u0002\u0ec7\u0ec6\u0003\u0002",
    "\u0002\u0002\u0ec8\u0279\u0003\u0002\u0002\u0002\u0ec9\u0eca\u0007p",
    "\u0002\u0002\u0eca\u0ecb\u0005\u00ceh\u0002\u0ecb\u0ecc\u0005\u0112",
    "\u008a\u0002\u0ecc\u0ecd\u0005\u0272\u013a\u0002\u0ecd\u027b\u0003\u0002",
    "\u0002\u0002\u0ece\u0ecf\u0005\u0272\u013a\u0002\u0ecf\u027d\u0003\u0002",
    "\u0002\u0002\u0ed0\u0ed1\u0007p\u0002\u0002\u0ed1\u0ed2\u0005\u026a",
    "\u0136\u0002\u0ed2\u027f\u0003\u0002\u0002\u0002\u0ed3\u0ed4\u00077",
    "\u0002\u0002\u0ed4\u0ed5\u0007\u0101\u0002\u0002\u0ed5\u0ed6\u0005\u023e",
    "\u0120\u0002\u0ed6\u0ed7\u0007\u00ed\u0002\u0002\u0ed7\u0ed8\u0005\u00cc",
    "g\u0002\u0ed8\u0ed9\u0007\u0102\u0002\u0002\u0ed9\u0eee\u0003\u0002",
    "\u0002\u0002\u0eda\u0edb\u0007\u00a9\u0002\u0002\u0edb\u0edc\u0007\u0101",
    "\u0002\u0002\u0edc\u0edd\u0005\u023e\u0120\u0002\u0edd\u0ede\u0007\u00ed",
    "\u0002\u0002\u0ede\u0edf\u0005\u00ccg\u0002\u0edf\u0ee0\u0007\u0102",
    "\u0002\u0002\u0ee0\u0eee\u0003\u0002\u0002\u0002\u0ee1\u0ee2\u0007+",
    "\u0002\u0002\u0ee2\u0ee3\u0007\u0101\u0002\u0002\u0ee3\u0ee4\u0005\u023e",
    "\u0120\u0002\u0ee4\u0ee5\u0007\u00ed\u0002\u0002\u0ee5\u0ee6\u0005\u00cc",
    "g\u0002\u0ee6\u0ee7\u0007\u0102\u0002\u0002\u0ee7\u0eee\u0003\u0002",
    "\u0002\u0002\u0ee8\u0ee9\u0005\u0282\u0142\u0002\u0ee9\u0eea\u0007\u0101",
    "\u0002\u0002\u0eea\u0eeb\u0005\u023e\u0120\u0002\u0eeb\u0eec\u0007\u0102",
    "\u0002\u0002\u0eec\u0eee\u0003\u0002\u0002\u0002\u0eed\u0ed3\u0003\u0002",
    "\u0002\u0002\u0eed\u0eda\u0003\u0002\u0002\u0002\u0eed\u0ee1\u0003\u0002",
    "\u0002\u0002\u0eed\u0ee8\u0003\u0002\u0002\u0002\u0eee\u0281\u0003\u0002",
    "\u0002\u0002\u0eef\u0ef0\t\u0015\u0002\u0002\u0ef0\u0283\u0003\u0002",
    "\u0002\u0002\u0ef1\u0ef2\u0007\u00fd\u0002\u0002\u0ef2\u0ef3\u0005\u023e",
    "\u0120\u0002\u0ef3\u0285\u0003\u0002\u0002\u0002\u0ef4\u0ef5\u0007\u00fc",
    "\u0002\u0002\u0ef5\u0ef6\u0005\u023e\u0120\u0002\u0ef6\u0287\u0003\u0002",
    "\u0002\u0002\u0ef7\u0ef8\u0005\u023e\u0120\u0002\u0ef8\u0289\u0003\u0002",
    "\u0002\u0002\u0ef9\u0efc\u0005\u028c\u0147\u0002\u0efa\u0efc\u0005\u028e",
    "\u0148\u0002\u0efb\u0ef9\u0003\u0002\u0002\u0002\u0efb\u0efa\u0003\u0002",
    "\u0002\u0002\u0efc\u028b\u0003\u0002\u0002\u0002\u0efd\u0eff\u0005\u0294",
    "\u014b\u0002\u0efe\u0efd\u0003\u0002\u0002\u0002\u0eff\u0f02\u0003\u0002",
    "\u0002\u0002\u0f00\u0efe\u0003\u0002\u0002\u0002\u0f00\u0f01\u0003\u0002",
    "\u0002\u0002\u0f01\u0f03\u0003\u0002\u0002\u0002\u0f02\u0f00\u0003\u0002",
    "\u0002\u0002\u0f03\u0f09\u0007J\u0002\u0002\u0f04\u0f06\u0007\u0101",
    "\u0002\u0002\u0f05\u0f07\u0005\u014c\u00a7\u0002\u0f06\u0f05\u0003\u0002",
    "\u0002\u0002\u0f06\u0f07\u0003\u0002\u0002\u0002\u0f07\u0f08\u0003\u0002",
    "\u0002\u0002\u0f08\u0f0a\u0007\u0102\u0002\u0002\u0f09\u0f04\u0003\u0002",
    "\u0002\u0002\u0f09\u0f0a\u0003\u0002\u0002\u0002\u0f0a\u0f0b\u0003\u0002",
    "\u0002\u0002\u0f0b\u0f16\u0005\u023e\u0120\u0002\u0f0c\u0f12\u0007\u00a1",
    "\u0002\u0002\u0f0d\u0f0f\u0007\u0101\u0002\u0002\u0f0e\u0f10\u0005\u014c",
    "\u00a7\u0002\u0f0f\u0f0e\u0003\u0002\u0002\u0002\u0f0f\u0f10\u0003\u0002",
    "\u0002\u0002\u0f10\u0f11\u0003\u0002\u0002\u0002\u0f11\u0f13\u0007\u0102",
    "\u0002\u0002\u0f12\u0f0d\u0003\u0002\u0002\u0002\u0f12\u0f13\u0003\u0002",
    "\u0002\u0002\u0f13\u0f14\u0003\u0002\u0002\u0002\u0f14\u0f16\u0005\u01ae",
    "\u00d8\u0002\u0f15\u0f00\u0003\u0002\u0002\u0002\u0f15\u0f0c\u0003\u0002",
    "\u0002\u0002\u0f16\u028d\u0003\u0002\u0002\u0002\u0f17\u0f1a\u0005\u0290",
    "\u0149\u0002\u0f18\u0f1a\u0005\u0292\u014a\u0002\u0f19\u0f17\u0003\u0002",
    "\u0002\u0002\u0f19\u0f18\u0003\u0002\u0002\u0002\u0f1a\u028f\u0003\u0002",
    "\u0002\u0002\u0f1b\u0f1d\u0005\u0294\u014b\u0002\u0f1c\u0f1b\u0003\u0002",
    "\u0002\u0002\u0f1d\u0f20\u0003\u0002\u0002\u0002\u0f1e\u0f1c\u0003\u0002",
    "\u0002\u0002\u0f1e\u0f1f\u0003\u0002\u0002\u0002\u0f1f\u0f21\u0003\u0002",
    "\u0002\u0002\u0f20\u0f1e\u0003\u0002\u0002\u0002\u0f21\u0f27\u0007J",
    "\u0002\u0002\u0f22\u0f24\u0007\u0101\u0002\u0002\u0f23\u0f25\u0005\u014c",
    "\u00a7\u0002\u0f24\u0f23\u0003\u0002\u0002\u0002\u0f24\u0f25\u0003\u0002",
    "\u0002\u0002\u0f25\u0f26\u0003\u0002\u0002\u0002\u0f26\u0f28\u0007\u0102",
    "\u0002\u0002\u0f27\u0f22\u0003\u0002\u0002\u0002\u0f27\u0f28\u0003\u0002",
    "\u0002\u0002\u0f28\u0f2b\u0003\u0002\u0002\u0002\u0f29\u0f2a\u0007\n",
    "\u0002\u0002\u0f2a\u0f2c\u0005\u00ccg\u0002\u0f2b\u0f29\u0003\u0002",
    "\u0002\u0002\u0f2b\u0f2c\u0003\u0002\u0002\u0002\u0f2c\u0f2d\u0003\u0002",
    "\u0002\u0002\u0f2d\u0f2e\u0007\u00e9\u0002\u0002\u0f2e\u0f2f\u0005\u01b0",
    "\u00d9\u0002\u0f2f\u0f30\u0007>\u0002\u0002\u0f30\u0f31\u0007J\u0002",
    "\u0002\u0f31\u0291\u0003\u0002\u0002\u0002\u0f32\u0f34\u0005\u0294\u014b",
    "\u0002\u0f33\u0f32\u0003\u0002\u0002\u0002\u0f34\u0f37\u0003\u0002\u0002",
    "\u0002\u0f35\u0f33\u0003\u0002\u0002\u0002\u0f35\u0f36\u0003\u0002\u0002",
    "\u0002\u0f36\u0f38\u0003\u0002\u0002\u0002\u0f37\u0f35\u0003\u0002\u0002",
    "\u0002\u0f38\u0f3e\u0007\u00a1\u0002\u0002\u0f39\u0f3b\u0007\u0101\u0002",
    "\u0002\u0f3a\u0f3c\u0005\u014c\u00a7\u0002\u0f3b\u0f3a\u0003\u0002\u0002",
    "\u0002\u0f3b\u0f3c\u0003\u0002\u0002\u0002\u0f3c\u0f3d\u0003\u0002\u0002",
    "\u0002\u0f3d\u0f3f\u0007\u0102\u0002\u0002\u0f3e\u0f39\u0003\u0002\u0002",
    "\u0002\u0f3e\u0f3f\u0003\u0002\u0002\u0002\u0f3f\u0f40\u0003\u0002\u0002",
    "\u0002\u0f40\u0f41\u0007\u00e9\u0002\u0002\u0f41\u0f42\u0005\u01b0\u00d9",
    "\u0002\u0f42\u0f43\u0007>\u0002\u0002\u0f43\u0f44\u0007\u00a1\u0002",
    "\u0002\u0f44\u0293\u0003\u0002\u0002\u0002\u0f45\u0f46\t\u0016\u0002",
    "\u0002\u0f46\u0295\u0003\u0002\u0002\u0002\u0f47\u0f4b\u0005\u0298\u014d",
    "\u0002\u0f48\u0f4a\u0005\u029a\u014e\u0002\u0f49\u0f48\u0003\u0002\u0002",
    "\u0002\u0f4a\u0f4d\u0003\u0002\u0002\u0002\u0f4b\u0f49\u0003\u0002\u0002",
    "\u0002\u0f4b\u0f4c\u0003\u0002\u0002\u0002\u0f4c\u0297\u0003\u0002\u0002",
    "\u0002\u0f4d\u0f4b\u0003\u0002\u0002\u0002\u0f4e\u0f51\u0005\u02a6\u0154",
    "\u0002\u0f4f\u0f51\u0005\u02c2\u0162\u0002\u0f50\u0f4e\u0003\u0002\u0002",
    "\u0002\u0f50\u0f4f\u0003\u0002\u0002\u0002\u0f51\u0299\u0003\u0002\u0002",
    "\u0002\u0f52\u0f5d\u0005\u02a6\u0154\u0002\u0f53\u0f5d\u0005\u02c2\u0162",
    "\u0002\u0f54\u0f5d\u0005\u02b0\u0159\u0002\u0f55\u0f5d\u0005\u02b2\u015a",
    "\u0002\u0f56\u0f5d\u0005\u02b4\u015b\u0002\u0f57\u0f5d\u0005\u02b8\u015d",
    "\u0002\u0f58\u0f5d\u0005\u02b6\u015c\u0002\u0f59\u0f5d\u0005\u02ae\u0158",
    "\u0002\u0f5a\u0f5d\u0005\u02c0\u0161\u0002\u0f5b\u0f5d\u0005\u029c\u014f",
    "\u0002\u0f5c\u0f52\u0003\u0002\u0002\u0002\u0f5c\u0f53\u0003\u0002\u0002",
    "\u0002\u0f5c\u0f54\u0003\u0002\u0002\u0002\u0f5c\u0f55\u0003\u0002\u0002",
    "\u0002\u0f5c\u0f56\u0003\u0002\u0002\u0002\u0f5c\u0f57\u0003\u0002\u0002",
    "\u0002\u0f5c\u0f58\u0003\u0002\u0002\u0002\u0f5c\u0f59\u0003\u0002\u0002",
    "\u0002\u0f5c\u0f5a\u0003\u0002\u0002\u0002\u0f5c\u0f5b\u0003\u0002\u0002",
    "\u0002\u0f5d\u029b\u0003\u0002\u0002\u0002\u0f5e\u0f61\u0005\u02a8\u0155",
    "\u0002\u0f5f\u0f61\u0005\u02c4\u0163\u0002\u0f60\u0f5e\u0003\u0002\u0002",
    "\u0002\u0f60\u0f5f\u0003\u0002\u0002\u0002\u0f61\u029d\u0003\u0002\u0002",
    "\u0002\u0f62\u0f67\u0005\u02a0\u0151\u0002\u0f63\u0f64\u0007\u00ed\u0002",
    "\u0002\u0f64\u0f66\u0005\u02a0\u0151\u0002\u0f65\u0f63\u0003\u0002\u0002",
    "\u0002\u0f66\u0f69\u0003\u0002\u0002\u0002\u0f67\u0f65\u0003\u0002\u0002",
    "\u0002\u0f67\u0f68\u0003\u0002\u0002\u0002\u0f68\u029f\u0003\u0002\u0002",
    "\u0002\u0f69\u0f67\u0003\u0002\u0002\u0002\u0f6a\u0f6d\u0005R*\u0002",
    "\u0f6b\u0f6c\u0007\n\u0002\u0002\u0f6c\u0f6e\u0005\u00ccg\u0002\u0f6d",
    "\u0f6b\u0003\u0002\u0002\u0002\u0f6d\u0f6e\u0003\u0002\u0002\u0002\u0f6e",
    "\u0f6f\u0003\u0002\u0002\u0002\u0f6f\u0f71\u0007T\u0002\u0002\u0f70",
    "\u0f72\u0007\u00e9\u0002\u0002\u0f71\u0f70\u0003\u0002\u0002\u0002\u0f71",
    "\u0f72\u0003\u0002\u0002\u0002\u0f72\u0f73\u0003\u0002\u0002\u0002\u0f73",
    "\u0f74\u0005\u023e\u0120\u0002\u0f74\u02a1\u0003\u0002\u0002\u0002\u0f75",
    "\u0f7a\u0005\u02a4\u0153\u0002\u0f76\u0f77\u0007\u00ed\u0002\u0002\u0f77",
    "\u0f79\u0005\u02a4\u0153\u0002\u0f78\u0f76\u0003\u0002\u0002\u0002\u0f79",
    "\u0f7c\u0003\u0002\u0002\u0002\u0f7a\u0f78\u0003\u0002\u0002\u0002\u0f7a",
    "\u0f7b\u0003\u0002\u0002\u0002\u0f7b\u02a3\u0003\u0002\u0002\u0002\u0f7c",
    "\u0f7a\u0003\u0002\u0002\u0002\u0f7d\u0f80\u0005R*\u0002\u0f7e\u0f7f",
    "\u0007\n\u0002\u0002\u0f7f\u0f81\u0005\u00ccg\u0002\u0f80\u0f7e\u0003",
    "\u0002\u0002\u0002\u0f80\u0f81\u0003\u0002\u0002\u0002\u0f81\u0f82\u0003",
    "\u0002\u0002\u0002\u0f82\u0f83\u0007\u00ef\u0002\u0002\u0f83\u0f84\u0005",
    "\u023e\u0120\u0002\u0f84\u02a5\u0003\u0002\u0002\u0002\u0f85\u0f87\u0007",
    "\u00e9\u0002\u0002\u0f86\u0f85\u0003\u0002\u0002\u0002\u0f86\u0f87\u0003",
    "\u0002\u0002\u0002\u0f87\u0f88\u0003\u0002\u0002\u0002\u0f88\u0f8a\u0007",
    "I\u0002\u0002\u0f89\u0f8b\u0007\u00e9\u0002\u0002\u0f8a\u0f89\u0003",
    "\u0002\u0002\u0002\u0f8a\u0f8b\u0003\u0002\u0002\u0002\u0f8b\u0f8c\u0003",
    "\u0002\u0002\u0002\u0f8c\u0f8d\u0005\u029e\u0150\u0002\u0f8d\u02a7\u0003",
    "\u0002\u0002\u0002\u0f8e\u0f90\u0007\u00e9\u0002\u0002\u0f8f\u0f8e\u0003",
    "\u0002\u0002\u0002\u0f8f\u0f90\u0003\u0002\u0002\u0002\u0f90\u0f91\u0003",
    "\u0002\u0002\u0002\u0f91\u0f93\u0007_\u0002\u0002\u0f92\u0f94\u0007",
    "\u00e9\u0002\u0002\u0f93\u0f92\u0003\u0002\u0002\u0002\u0f93\u0f94\u0003",
    "\u0002\u0002\u0002\u0f94\u0f95\u0003\u0002\u0002\u0002\u0f95\u0f97\u0005",
    "\u02a0\u0151\u0002\u0f96\u0f98\u0005\u029c\u014f\u0002\u0f97\u0f96\u0003",
    "\u0002\u0002\u0002\u0f97\u0f98\u0003\u0002\u0002\u0002\u0f98\u0f9a\u0003",
    "\u0002\u0002\u0002\u0f99\u0f9b\u0007\u00e9\u0002\u0002\u0f9a\u0f99\u0003",
    "\u0002\u0002\u0002\u0f9a\u0f9b\u0003\u0002\u0002\u0002\u0f9b\u0f9c\u0003",
    "\u0002\u0002\u0002\u0f9c\u0f9e\u0007y\u0002\u0002\u0f9d\u0f9f\u0007",
    "\u00e9\u0002\u0002\u0f9e\u0f9d\u0003\u0002\u0002\u0002\u0f9e\u0f9f\u0003",
    "\u0002\u0002\u0002\u0f9f\u0fa0\u0003\u0002\u0002\u0002\u0fa0\u0fa1\u0005",
    "\u02aa\u0156\u0002\u0fa1\u02a9\u0003\u0002\u0002\u0002\u0fa2\u0faa\u0005",
    "\u02ac\u0157\u0002\u0fa3\u0fa5\u0007\u0007\u0002\u0002\u0fa4\u0fa6\u0007",
    "\u00e9\u0002\u0002\u0fa5\u0fa4\u0003\u0002\u0002\u0002\u0fa5\u0fa6\u0003",
    "\u0002\u0002\u0002\u0fa6\u0fa7\u0003\u0002\u0002\u0002\u0fa7\u0fa9\u0005",
    "\u02ac\u0157\u0002\u0fa8\u0fa3\u0003\u0002\u0002\u0002\u0fa9\u0fac\u0003",
    "\u0002\u0002\u0002\u0faa\u0fa8\u0003\u0002\u0002\u0002\u0faa\u0fab\u0003",
    "\u0002\u0002\u0002\u0fab\u02ab\u0003\u0002\u0002\u0002\u0fac\u0faa\u0003",
    "\u0002\u0002\u0002\u0fad\u0fae\u0005\u023e\u0120\u0002\u0fae\u0fb0\u0007",
    "@\u0002\u0002\u0faf\u0fb1\u0007\u00e9\u0002\u0002\u0fb0\u0faf\u0003",
    "\u0002\u0002\u0002\u0fb0\u0fb1\u0003\u0002\u0002\u0002\u0fb1\u0fb2\u0003",
    "\u0002\u0002\u0002\u0fb2\u0fb3\u0005\u023e\u0120\u0002\u0fb3\u02ad\u0003",
    "\u0002\u0002\u0002\u0fb4\u0fb6\u0007\u00e9\u0002\u0002\u0fb5\u0fb4\u0003",
    "\u0002\u0002\u0002\u0fb5\u0fb6\u0003\u0002\u0002\u0002\u0fb6\u0fb7\u0003",
    "\u0002\u0002\u0002\u0fb7\u0fb9\u0007a\u0002\u0002\u0fb8\u0fba\u0007",
    "\u00e9\u0002\u0002\u0fb9\u0fb8\u0003\u0002\u0002\u0002\u0fb9\u0fba\u0003",
    "\u0002\u0002\u0002\u0fba\u0fbb\u0003\u0002\u0002\u0002\u0fbb\u0fbc\u0005",
    "\u02a2\u0152\u0002\u0fbc\u02af\u0003\u0002\u0002\u0002\u0fbd\u0fbf\u0007",
    "\u00e9\u0002\u0002\u0fbe\u0fbd\u0003\u0002\u0002\u0002\u0fbe\u0fbf\u0003",
    "\u0002\u0002\u0002\u0fbf\u0fc0\u0003\u0002\u0002\u0002\u0fc0\u0fc2\u0007",
    "\u0094\u0002\u0002\u0fc1\u0fc3\u0007\u00e9\u0002\u0002\u0fc2\u0fc1\u0003",
    "\u0002\u0002\u0002\u0fc2\u0fc3\u0003\u0002\u0002\u0002\u0fc3\u0fc4\u0003",
    "\u0002\u0002\u0002\u0fc4\u0fc5\u0005\u02a2\u0152\u0002\u0fc5\u02b1\u0003",
    "\u0002\u0002\u0002\u0fc6\u0fc8\u0007\u00e9\u0002\u0002\u0fc7\u0fc6\u0003",
    "\u0002\u0002\u0002\u0fc7\u0fc8\u0003\u0002\u0002\u0002\u0fc8\u0fc9\u0003",
    "\u0002\u0002\u0002\u0fc9\u0fcb\u00078\u0002\u0002\u0fca\u0fcc\u0007",
    "\u00e9\u0002\u0002\u0fcb\u0fca\u0003\u0002\u0002\u0002\u0fcb\u0fcc\u0003",
    "\u0002\u0002\u0002\u0fcc\u02b3\u0003\u0002\u0002\u0002\u0fcd\u0fcf\u0007",
    "\u00e9\u0002\u0002\u0fce\u0fcd\u0003\u0002\u0002\u0002\u0fce\u0fcf\u0003",
    "\u0002\u0002\u0002\u0fcf\u0fd0\u0003\u0002\u0002\u0002\u0fd0\u0fd2\u0007",
    "\u00b3\u0002\u0002\u0fd1\u0fd3\u0007\u00e9\u0002\u0002\u0fd2\u0fd1\u0003",
    "\u0002\u0002\u0002\u0fd2\u0fd3\u0003\u0002\u0002\u0002\u0fd3\u0fd4\u0003",
    "\u0002\u0002\u0002\u0fd4\u0fd5\u0005\u0288\u0145\u0002\u0fd5\u02b5\u0003",
    "\u0002\u0002\u0002\u0fd6\u0fd8\u0007\u00e9\u0002\u0002\u0fd7\u0fd6\u0003",
    "\u0002\u0002\u0002\u0fd7\u0fd8\u0003\u0002\u0002\u0002\u0fd8\u0fd9\u0003",
    "\u0002\u0002\u0002\u0fd9\u0fdb\u0007\u00a3\u0002\u0002\u0fda\u0fdc\u0007",
    "\u00e9\u0002\u0002\u0fdb\u0fda\u0003\u0002\u0002\u0002\u0fdb\u0fdc\u0003",
    "\u0002\u0002\u0002\u0fdc\u0fdd\u0003\u0002\u0002\u0002\u0fdd\u0ff9\u0005",
    "\u023e\u0120\u0002\u0fde\u0fe0\u0007\u00e9\u0002\u0002\u0fdf\u0fde\u0003",
    "\u0002\u0002\u0002\u0fdf\u0fe0\u0003\u0002\u0002\u0002\u0fe0\u0fe1\u0003",
    "\u0002\u0002\u0002\u0fe1\u0fe2\u0007\u00a3\u0002\u0002\u0fe2\u0fe4\u0007",
    "\u00b4\u0002\u0002\u0fe3\u0fe5\u0007\u00e9\u0002\u0002\u0fe4\u0fe3\u0003",
    "\u0002\u0002\u0002\u0fe4\u0fe5\u0003\u0002\u0002\u0002\u0fe5\u0fe6\u0003",
    "\u0002\u0002\u0002\u0fe6\u0ff9\u0005\u0288\u0145\u0002\u0fe7\u0fe9\u0007",
    "\u00e9\u0002\u0002\u0fe8\u0fe7\u0003\u0002\u0002\u0002\u0fe8\u0fe9\u0003",
    "\u0002\u0002\u0002\u0fe9\u0fea\u0003\u0002\u0002\u0002\u0fea\u0fec\u0007",
    "\u009a\u0002\u0002\u0feb\u0fed\u0007\u00e9\u0002\u0002\u0fec\u0feb\u0003",
    "\u0002\u0002\u0002\u0fec\u0fed\u0003\u0002\u0002\u0002\u0fed\u0fee\u0003",
    "\u0002\u0002\u0002\u0fee\u0ff9\u0005\u023e\u0120\u0002\u0fef\u0ff1\u0007",
    "\u00e9\u0002\u0002\u0ff0\u0fef\u0003\u0002\u0002\u0002\u0ff0\u0ff1\u0003",
    "\u0002\u0002\u0002\u0ff1\u0ff2\u0003\u0002\u0002\u0002\u0ff2\u0ff3\u0007",
    "\u009a\u0002\u0002\u0ff3\u0ff5\u0007\u00b4\u0002\u0002\u0ff4\u0ff6\u0007",
    "\u00e9\u0002\u0002\u0ff5\u0ff4\u0003\u0002\u0002\u0002\u0ff5\u0ff6\u0003",
    "\u0002\u0002\u0002\u0ff6\u0ff7\u0003\u0002\u0002\u0002\u0ff7\u0ff9\u0005",
    "\u0288\u0145\u0002\u0ff8\u0fd7\u0003\u0002\u0002\u0002\u0ff8\u0fdf\u0003",
    "\u0002\u0002\u0002\u0ff8\u0fe8\u0003\u0002\u0002\u0002\u0ff8\u0ff0\u0003",
    "\u0002\u0002\u0002\u0ff9\u02b7\u0003\u0002\u0002\u0002\u0ffa\u0ffc\u0007",
    "\u00e9\u0002\u0002\u0ffb\u0ffa\u0003\u0002\u0002\u0002\u0ffb\u0ffc\u0003",
    "\u0002\u0002\u0002\u0ffc\u0ffd\u0003\u0002\u0002\u0002\u0ffd\u0ffe\u0007",
    "~\u0002\u0002\u0ffe\u1000\u0007\u0012\u0002\u0002\u0fff\u1001\u0007",
    "\u00e9\u0002\u0002\u1000\u0fff\u0003\u0002\u0002\u0002\u1000\u1001\u0003",
    "\u0002\u0002\u0002\u1001\u1002\u0003\u0002\u0002\u0002\u1002\u1003\u0005",
    "\u02ba\u015e\u0002\u1003\u02b9\u0003\u0002\u0002\u0002\u1004\u1009\u0005",
    "\u02bc\u015f\u0002\u1005\u1006\u0007\u00ed\u0002\u0002\u1006\u1008\u0005",
    "\u02bc\u015f\u0002\u1007\u1005\u0003\u0002\u0002\u0002\u1008\u100b\u0003",
    "\u0002\u0002\u0002\u1009\u1007\u0003\u0002\u0002\u0002\u1009\u100a\u0003",
    "\u0002\u0002\u0002\u100a\u02bb\u0003\u0002\u0002\u0002\u100b\u1009\u0003",
    "\u0002\u0002\u0002\u100c\u100e\u0005\u023e\u0120\u0002\u100d\u100f\u0005",
    "\u02be\u0160\u0002\u100e\u100d\u0003\u0002\u0002\u0002\u100e\u100f\u0003",
    "\u0002\u0002\u0002\u100f\u02bd\u0003\u0002\u0002\u0002\u1010\u1011\t",
    "\u0017\u0002\u0002\u1011\u02bf\u0003\u0002\u0002\u0002\u1012\u1014\u0007",
    "\u00e9\u0002\u0002\u1013\u1012\u0003\u0002\u0002\u0002\u1013\u1014\u0003",
    "\u0002\u0002\u0002\u1014\u1015\u0003\u0002\u0002\u0002\u1015\u101a\u0007",
    "O\u0002\u0002\u1016\u1018\u0007\u00e9\u0002\u0002\u1017\u1016\u0003",
    "\u0002\u0002\u0002\u1017\u1018\u0003\u0002\u0002\u0002\u1018\u1019\u0003",
    "\u0002\u0002\u0002\u1019\u101b\u0005\u02a2\u0152\u0002\u101a\u1017\u0003",
    "\u0002\u0002\u0002\u101a\u101b\u0003\u0002\u0002\u0002\u101b\u101d\u0003",
    "\u0002\u0002\u0002\u101c\u101e\u0007\u00e9\u0002\u0002\u101d\u101c\u0003",
    "\u0002\u0002\u0002\u101d\u101e\u0003\u0002\u0002\u0002\u101e\u101f\u0003",
    "\u0002\u0002\u0002\u101f\u1021\u0007\u0012\u0002\u0002\u1020\u1022\u0007",
    "\u00e9\u0002\u0002\u1021\u1020\u0003\u0002\u0002\u0002\u1021\u1022\u0003",
    "\u0002\u0002\u0002\u1022\u1023\u0003\u0002\u0002\u0002\u1023\u1025\u0005",
    "\u02a2\u0152\u0002\u1024\u1026\u0007\u00e9\u0002\u0002\u1025\u1024\u0003",
    "\u0002\u0002\u0002\u1025\u1026\u0003\u0002\u0002\u0002\u1026\u1027\u0003",
    "\u0002\u0002\u0002\u1027\u1029\u0007Y\u0002\u0002\u1028\u102a\u0007",
    "\u00e9\u0002\u0002\u1029\u1028\u0003\u0002\u0002\u0002\u1029\u102a\u0003",
    "\u0002\u0002\u0002\u102a\u102b\u0003\u0002\u0002\u0002\u102b\u102c\u0005",
    "\u02a2\u0152\u0002\u102c\u02c1\u0003\u0002\u0002\u0002\u102d\u102f\u0007",
    "\u00e9\u0002\u0002\u102e\u102d\u0003\u0002\u0002\u0002\u102e\u102f\u0003",
    "\u0002\u0002\u0002\u102f\u1030\u0003\u0002\u0002\u0002\u1030\u1032\u0007",
    "\u0005\u0002\u0002\u1031\u1033\u0007\u00e9\u0002\u0002\u1032\u1031\u0003",
    "\u0002\u0002\u0002\u1032\u1033\u0003\u0002\u0002\u0002\u1033\u1034\u0003",
    "\u0002\u0002\u0002\u1034\u1038\u0005\u02a0\u0151\u0002\u1035\u1037\u0005",
    "\u029a\u014e\u0002\u1036\u1035\u0003\u0002\u0002\u0002\u1037\u103a\u0003",
    "\u0002\u0002\u0002\u1038\u1036\u0003\u0002\u0002\u0002\u1038\u1039\u0003",
    "\u0002\u0002\u0002\u1039\u103c\u0003\u0002\u0002\u0002\u103a\u1038\u0003",
    "\u0002\u0002\u0002\u103b\u103d\u0007\u00e9\u0002\u0002\u103c\u103b\u0003",
    "\u0002\u0002\u0002\u103c\u103d\u0003\u0002\u0002\u0002\u103d\u103e\u0003",
    "\u0002\u0002\u0002\u103e\u1040\u0007Y\u0002\u0002\u103f\u1041\u0007",
    "\u00e9\u0002\u0002\u1040\u103f\u0003\u0002\u0002\u0002\u1040\u1041\u0003",
    "\u0002\u0002\u0002\u1041\u1042\u0003\u0002\u0002\u0002\u1042\u1043\u0005",
    "\u02a2\u0152\u0002\u1043\u02c3\u0003\u0002\u0002\u0002\u1044\u1046\u0007",
    "\u00e9\u0002\u0002\u1045\u1044\u0003\u0002\u0002\u0002\u1045\u1046\u0003",
    "\u0002\u0002\u0002\u1046\u1047\u0003\u0002\u0002\u0002\u1047\u1048\u0007",
    "O\u0002\u0002\u1048\u104a\u0007_\u0002\u0002\u1049\u104b\u0007\u00e9",
    "\u0002\u0002\u104a\u1049\u0003\u0002\u0002\u0002\u104a\u104b\u0003\u0002",
    "\u0002\u0002\u104b\u104c\u0003\u0002\u0002\u0002\u104c\u104e\u0005\u02a0",
    "\u0151\u0002\u104d\u104f\u0005\u029c\u014f\u0002\u104e\u104d\u0003\u0002",
    "\u0002\u0002\u104e\u104f\u0003\u0002\u0002\u0002\u104f\u1051\u0003\u0002",
    "\u0002\u0002\u1050\u1052\u0007\u00e9\u0002\u0002\u1051\u1050\u0003\u0002",
    "\u0002\u0002\u1051\u1052\u0003\u0002\u0002\u0002\u1052\u1053\u0003\u0002",
    "\u0002\u0002\u1053\u1055\u0007y\u0002\u0002\u1054\u1056\u0007\u00e9",
    "\u0002\u0002\u1055\u1054\u0003\u0002\u0002\u0002\u1055\u1056\u0003\u0002",
    "\u0002\u0002\u1056\u1057\u0003\u0002\u0002\u0002\u1057\u1059\u0005\u02aa",
    "\u0156\u0002\u1058\u105a\u0007\u00e9\u0002\u0002\u1059\u1058\u0003\u0002",
    "\u0002\u0002\u1059\u105a\u0003\u0002\u0002\u0002\u105a\u105b\u0003\u0002",
    "\u0002\u0002\u105b\u105d\u0007Y\u0002\u0002\u105c\u105e\u0007\u00e9",
    "\u0002\u0002\u105d\u105c\u0003\u0002\u0002\u0002\u105d\u105e\u0003\u0002",
    "\u0002\u0002\u105e\u105f\u0003\u0002\u0002\u0002\u105f\u1060\u0005\u02a2",
    "\u0152\u0002\u1060\u02c5\u0003\u0002\u0002\u0002\u1061\u1062\u0007Q",
    "\u0002\u0002\u1062\u1063\u0007\u0101\u0002\u0002\u1063\u1064\u0005\u0288",
    "\u0145\u0002\u1064\u1065\u0007\u00ed\u0002\u0002\u1065\u1066\u0005\u023e",
    "\u0120\u0002\u1066\u1067\u0007\u00ed\u0002\u0002\u1067\u1068\u0005\u023e",
    "\u0120\u0002\u1068\u1069\u0007\u0102\u0002\u0002\u1069\u1072\u0003\u0002",
    "\u0002\u0002\u106a\u106b\u0007Q\u0002\u0002\u106b\u106c\u0007\u0101",
    "\u0002\u0002\u106c\u106d\u0005\u023e\u0120\u0002\u106d\u106e\u0007\u00ed",
    "\u0002\u0002\u106e\u106f\u0005\u023e\u0120\u0002\u106f\u1070\u0007\u0102",
    "\u0002\u0002\u1070\u1072\u0003\u0002\u0002\u0002\u1071\u1061\u0003\u0002",
    "\u0002\u0002\u1071\u106a\u0003\u0002\u0002\u0002\u1072\u02c7\u0003\u0002",
    "\u0002\u0002\u1073\u1079\u0005\u02cc\u0167\u0002\u1074\u1079\u0005\u02e6",
    "\u0174\u0002\u1075\u1079\u0005\u0314\u018b\u0002\u1076\u1079\u0005\u0316",
    "\u018c\u0002\u1077\u1079\u0005\u0318\u018d\u0002\u1078\u1073\u0003\u0002",
    "\u0002\u0002\u1078\u1074\u0003\u0002\u0002\u0002\u1078\u1075\u0003\u0002",
    "\u0002\u0002\u1078\u1076\u0003\u0002\u0002\u0002\u1078\u1077\u0003\u0002",
    "\u0002\u0002\u1079\u02c9\u0003\u0002\u0002\u0002\u107a\u107b\u0007\u00f0",
    "\u0002\u0002\u107b\u107c\u0007\u00fe\u0002\u0002\u107c\u107e\u0007\u00ef",
    "\u0002\u0002\u107d\u107f\u0007\u00e9\u0002\u0002\u107e\u107d\u0003\u0002",
    "\u0002\u0002\u107e\u107f\u0003\u0002\u0002\u0002\u107f\u1080\u0003\u0002",
    "\u0002\u0002\u1080\u1082\u0005\u023e\u0120\u0002\u1081\u1083\u0007\u00e9",
    "\u0002\u0002\u1082\u1081\u0003\u0002\u0002\u0002\u1082\u1083\u0003\u0002",
    "\u0002\u0002\u1083\u1084\u0003\u0002\u0002\u0002\u1084\u1085\u0007\u00fe",
    "\u0002\u0002\u1085\u1086\u0007\u00f1\u0002\u0002\u1086\u02cb\u0003\u0002",
    "\u0002\u0002\u1087\u108b\u0005\u02ce\u0168\u0002\u1088\u108a\u0005\u02e2",
    "\u0172\u0002\u1089\u1088\u0003\u0002\u0002\u0002\u108a\u108d\u0003\u0002",
    "\u0002\u0002\u108b\u1089\u0003\u0002\u0002\u0002\u108b\u108c\u0003\u0002",
    "\u0002\u0002\u108c\u108e\u0003\u0002\u0002\u0002\u108d\u108b\u0003\u0002",
    "\u0002\u0002\u108e\u1092\u0005\u02e4\u0173\u0002\u108f\u1091\u0005\u02e2",
    "\u0172\u0002\u1090\u108f\u0003\u0002\u0002\u0002\u1091\u1094\u0003\u0002",
    "\u0002\u0002\u1092\u1090\u0003\u0002\u0002\u0002\u1092\u1093\u0003\u0002",
    "\u0002\u0002\u1093\u02cd\u0003\u0002\u0002\u0002\u1094\u1092\u0003\u0002",
    "\u0002\u0002\u1095\u1096\u0007\u00f0\u0002\u0002\u1096\u1097\u0007\u00ec",
    "\u0002\u0002\u1097\u1098\u0007\u00d4\u0002\u0002\u1098\u109a\u0005\u02d0",
    "\u0169\u0002\u1099\u109b\u0005\u02d4\u016b\u0002\u109a\u1099\u0003\u0002",
    "\u0002\u0002\u109a\u109b\u0003\u0002\u0002\u0002\u109b\u109d\u0003\u0002",
    "\u0002\u0002\u109c\u109e\u0005\u02dc\u016f\u0002\u109d\u109c\u0003\u0002",
    "\u0002\u0002\u109d\u109e\u0003\u0002\u0002\u0002\u109e\u10a0\u0003\u0002",
    "\u0002\u0002\u109f\u10a1\u0007\u00c4\u0002\u0002\u10a0\u109f\u0003\u0002",
    "\u0002\u0002\u10a0\u10a1\u0003\u0002\u0002\u0002\u10a1\u10a2\u0003\u0002",
    "\u0002\u0002\u10a2\u10a3\u0007\u00ec\u0002\u0002\u10a3\u10a4\u0007\u00f1",
    "\u0002\u0002\u10a4\u02cf\u0003\u0002\u0002\u0002\u10a5\u10a6\u0007\u00c4",
    "\u0002\u0002\u10a6\u10a8\u0007\u00d3\u0002\u0002\u10a7\u10a9\u0007\u00c4",
    "\u0002\u0002\u10a8\u10a7\u0003\u0002\u0002\u0002\u10a8\u10a9\u0003\u0002",
    "\u0002\u0002\u10a9\u10aa\u0003\u0002\u0002\u0002\u10aa\u10ac\u0007\u00ef",
    "\u0002\u0002\u10ab\u10ad\u0007\u00c4\u0002\u0002\u10ac\u10ab\u0003\u0002",
    "\u0002\u0002\u10ac\u10ad\u0003\u0002\u0002\u0002\u10ad\u10ae\u0003\u0002",
    "\u0002\u0002\u10ae\u10af\u0005\u02d2\u016a\u0002\u10af\u02d1\u0003\u0002",
    "\u0002\u0002\u10b0\u10b1\u0007\u00ea\u0002\u0002\u10b1\u10b2\u0007\u00e0",
    "\u0002\u0002\u10b2\u10b3\u0007\u00fb\u0002\u0002\u10b3\u10b4\u0007\u00df",
    "\u0002\u0002\u10b4\u10bb\u0007\u00ea\u0002\u0002\u10b5\u10b6\u0007\u00eb",
    "\u0002\u0002\u10b6\u10b7\u0007\u00e0\u0002\u0002\u10b7\u10b8\u0007\u00fb",
    "\u0002\u0002\u10b8\u10b9\u0007\u00df\u0002\u0002\u10b9\u10bb\u0007\u00eb",
    "\u0002\u0002\u10ba\u10b0\u0003\u0002\u0002\u0002\u10ba\u10b5\u0003\u0002",
    "\u0002\u0002\u10bb\u02d3\u0003\u0002\u0002\u0002\u10bc\u10bd\u0007\u00c4",
    "\u0002\u0002\u10bd\u10bf\u0007\u00d7\u0002\u0002\u10be\u10c0\u0007\u00c4",
    "\u0002\u0002\u10bf\u10be\u0003\u0002\u0002\u0002\u10bf\u10c0\u0003\u0002",
    "\u0002\u0002\u10c0\u10c1\u0003\u0002\u0002\u0002\u10c1\u10c3\u0007\u00ef",
    "\u0002\u0002\u10c2\u10c4\u0007\u00c4\u0002\u0002\u10c3\u10c2\u0003\u0002",
    "\u0002\u0002\u10c3\u10c4\u0003\u0002\u0002\u0002\u10c4\u10c5\u0003\u0002",
    "\u0002\u0002\u10c5\u10c6\u0005\u02d6\u016c\u0002\u10c6\u02d5\u0003\u0002",
    "\u0002\u0002\u10c7\u10c8\u0007\u00ea\u0002\u0002\u10c8\u10c9\u0005\u02d8",
    "\u016d\u0002\u10c9\u10ca\u0007\u00ea\u0002\u0002\u10ca\u10d0\u0003\u0002",
    "\u0002\u0002\u10cb\u10cc\u0007\u00eb\u0002\u0002\u10cc\u10cd\u0005\u02d8",
    "\u016d\u0002\u10cd\u10ce\u0007\u00eb\u0002\u0002\u10ce\u10d0\u0003\u0002",
    "\u0002\u0002\u10cf\u10c7\u0003\u0002\u0002\u0002\u10cf\u10cb\u0003\u0002",
    "\u0002\u0002\u10d0\u02d7\u0003\u0002\u0002\u0002\u10d1\u10d5\u0007\u00c9",
    "\u0002\u0002\u10d2\u10d4\u0005\u02da\u016e\u0002\u10d3\u10d2\u0003\u0002",
    "\u0002\u0002\u10d4\u10d7\u0003\u0002\u0002\u0002\u10d5\u10d3\u0003\u0002",
    "\u0002\u0002\u10d5\u10d6\u0003\u0002\u0002\u0002\u10d6\u02d9\u0003\u0002",
    "\u0002\u0002\u10d7\u10d5\u0003\u0002\u0002\u0002\u10d8\u10d9\t\u0018",
    "\u0002\u0002\u10d9\u02db\u0003\u0002\u0002\u0002\u10da\u10db\u0007\u00c4",
    "\u0002\u0002\u10db\u10dd\u0007\u00d8\u0002\u0002\u10dc\u10de\u0007\u00c4",
    "\u0002\u0002\u10dd\u10dc\u0003\u0002\u0002\u0002\u10dd\u10de\u0003\u0002",
    "\u0002\u0002\u10de\u10df\u0003\u0002\u0002\u0002\u10df\u10e1\u0007\u00ef",
    "\u0002\u0002\u10e0\u10e2\u0007\u00c4\u0002\u0002\u10e1\u10e0\u0003\u0002",
    "\u0002\u0002\u10e1\u10e2\u0003\u0002\u0002\u0002\u10e2\u10e3\u0003\u0002",
    "\u0002\u0002\u10e3\u10e4\u0005\u02de\u0170\u0002\u10e4\u02dd\u0003\u0002",
    "\u0002\u0002\u10e5\u10e6\u0007\u00ea\u0002\u0002\u10e6\u10e7\u0005\u02e0",
    "\u0171\u0002\u10e7\u10e8\u0007\u00ea\u0002\u0002\u10e8\u10ee\u0003\u0002",
    "\u0002\u0002\u10e9\u10ea\u0007\u00eb\u0002\u0002\u10ea\u10eb\u0005\u02e0",
    "\u0171\u0002\u10eb\u10ec\u0007\u00eb\u0002\u0002\u10ec\u10ee\u0003\u0002",
    "\u0002\u0002\u10ed\u10e5\u0003\u0002\u0002\u0002\u10ed\u10e9\u0003\u0002",
    "\u0002\u0002\u10ee\u02df\u0003\u0002\u0002\u0002\u10ef\u10f0\t\u0019",
    "\u0002\u0002\u10f0\u02e1\u0003\u0002\u0002\u0002\u10f1\u10f5\u0005\u0316",
    "\u018c\u0002\u10f2\u10f5\u0005\u0314\u018b\u0002\u10f3\u10f5\u0007\u00c4",
    "\u0002\u0002\u10f4\u10f1\u0003\u0002\u0002\u0002\u10f4\u10f2\u0003\u0002",
    "\u0002\u0002\u10f4\u10f3\u0003\u0002\u0002\u0002\u10f5\u02e3\u0003\u0002",
    "\u0002\u0002\u10f6\u10f9\u0005\u02e6\u0174\u0002\u10f7\u10f9\u0005\u02ca",
    "\u0166\u0002\u10f8\u10f6\u0003\u0002\u0002\u0002\u10f8\u10f7\u0003\u0002",
    "\u0002\u0002\u10f9\u02e5\u0003\u0002\u0002\u0002\u10fa\u1100\u0005\u02e8",
    "\u0175\u0002\u10fb\u10fc\u0005\u02ea\u0176\u0002\u10fc\u10fd\u0005\u02ee",
    "\u0178\u0002\u10fd\u10fe\u0005\u02ec\u0177\u0002\u10fe\u1100\u0003\u0002",
    "\u0002\u0002\u10ff\u10fa\u0003\u0002\u0002\u0002\u10ff\u10fb\u0003\u0002",
    "\u0002\u0002\u1100\u02e7\u0003\u0002\u0002\u0002\u1101\u1102\u0007\u00f0",
    "\u0002\u0002\u1102\u1106\u0005\u030c\u0187\u0002\u1103\u1105\u0005\u02f2",
    "\u017a\u0002\u1104\u1103\u0003\u0002\u0002\u0002\u1105\u1108\u0003\u0002",
    "\u0002\u0002\u1106\u1104\u0003\u0002\u0002\u0002\u1106\u1107\u0003\u0002",
    "\u0002\u0002\u1107\u110a\u0003\u0002\u0002\u0002\u1108\u1106\u0003\u0002",
    "\u0002\u0002\u1109\u110b\u0007\u00c4\u0002\u0002\u110a\u1109\u0003\u0002",
    "\u0002\u0002\u110a\u110b\u0003\u0002\u0002\u0002\u110b\u110c\u0003\u0002",
    "\u0002\u0002\u110c\u110d\u0007\u00f2\u0002\u0002\u110d\u110e\u0007\u00f1",
    "\u0002\u0002\u110e\u02e9\u0003\u0002\u0002\u0002\u110f\u1110\u0007\u00f0",
    "\u0002\u0002\u1110\u1114\u0005\u030c\u0187\u0002\u1111\u1113\u0005\u02f2",
    "\u017a\u0002\u1112\u1111\u0003\u0002\u0002\u0002\u1113\u1116\u0003\u0002",
    "\u0002\u0002\u1114\u1112\u0003\u0002\u0002\u0002\u1114\u1115\u0003\u0002",
    "\u0002\u0002\u1115\u1118\u0003\u0002\u0002\u0002\u1116\u1114\u0003\u0002",
    "\u0002\u0002\u1117\u1119\u0007\u00c4\u0002\u0002\u1118\u1117\u0003\u0002",
    "\u0002\u0002\u1118\u1119\u0003\u0002\u0002\u0002\u1119\u111a\u0003\u0002",
    "\u0002\u0002\u111a\u111b\u0007\u00f1\u0002\u0002\u111b\u02eb\u0003\u0002",
    "\u0002\u0002\u111c\u111d\u0007\u00f0\u0002\u0002\u111d\u111e\u0007\u00f2",
    "\u0002\u0002\u111e\u1128\u0007\u00f1\u0002\u0002\u111f\u1120\u0007\u00f0",
    "\u0002\u0002\u1120\u1121\u0007\u00f2\u0002\u0002\u1121\u1123\u0005\u030e",
    "\u0188\u0002\u1122\u1124\u0007\u00c4\u0002\u0002\u1123\u1122\u0003\u0002",
    "\u0002\u0002\u1123\u1124\u0003\u0002\u0002\u0002\u1124\u1125\u0003\u0002",
    "\u0002\u0002\u1125\u1126\u0007\u00f1\u0002\u0002\u1126\u1128\u0003\u0002",
    "\u0002\u0002\u1127\u111c\u0003\u0002\u0002\u0002\u1127\u111f\u0003\u0002",
    "\u0002\u0002\u1128\u02ed\u0003\u0002\u0002\u0002\u1129\u112b\u0007\u00d1",
    "\u0002\u0002\u112a\u1129\u0003\u0002\u0002\u0002\u112a\u112b\u0003\u0002",
    "\u0002\u0002\u112b\u1130\u0003\u0002\u0002\u0002\u112c\u112e\u0005\u02f0",
    "\u0179\u0002\u112d\u112f\u0007\u00d1\u0002\u0002\u112e\u112d\u0003\u0002",
    "\u0002\u0002\u112e\u112f\u0003\u0002\u0002\u0002\u112f\u1131\u0003\u0002",
    "\u0002\u0002\u1130\u112c\u0003\u0002\u0002\u0002\u1131\u1132\u0003\u0002",
    "\u0002\u0002\u1132\u1130\u0003\u0002\u0002\u0002\u1132\u1133\u0003\u0002",
    "\u0002\u0002\u1133\u02ef\u0003\u0002\u0002\u0002\u1134\u113b\u0005\u02e6",
    "\u0174\u0002\u1135\u113b\u0005\u02fc\u017f\u0002\u1136\u113b\u0005\u0318",
    "\u018d\u0002\u1137\u113b\u0005\u0314\u018b\u0002\u1138\u113b\u0005\u0316",
    "\u018c\u0002\u1139\u113b\u0005\u02ca\u0166\u0002\u113a\u1134\u0003\u0002",
    "\u0002\u0002\u113a\u1135\u0003\u0002\u0002\u0002\u113a\u1136\u0003\u0002",
    "\u0002\u0002\u113a\u1137\u0003\u0002\u0002\u0002\u113a\u1138\u0003\u0002",
    "\u0002\u0002\u113a\u1139\u0003\u0002\u0002\u0002\u113b\u02f1\u0003\u0002",
    "\u0002\u0002\u113c\u113d\u0007\u00c4\u0002\u0002\u113d\u113f\u0005\u02f4",
    "\u017b\u0002\u113e\u1140\u0007\u00c4\u0002\u0002\u113f\u113e\u0003\u0002",
    "\u0002\u0002\u113f\u1140\u0003\u0002\u0002\u0002\u1140\u1141\u0003\u0002",
    "\u0002\u0002\u1141\u1143\u0007\u00ef\u0002\u0002\u1142\u1144\u0007\u00c4",
    "\u0002\u0002\u1143\u1142\u0003\u0002\u0002\u0002\u1143\u1144\u0003\u0002",
    "\u0002\u0002\u1144\u1145\u0003\u0002\u0002\u0002\u1145\u1146\u0005\u02f6",
    "\u017c\u0002\u1146\u114a\u0003\u0002\u0002\u0002\u1147\u1148\u0007\u00c4",
    "\u0002\u0002\u1148\u114a\u0005\u02ca\u0166\u0002\u1149\u113c\u0003\u0002",
    "\u0002\u0002\u1149\u1147\u0003\u0002\u0002\u0002\u114a\u02f3\u0003\u0002",
    "\u0002\u0002\u114b\u114e\u0005\u030c\u0187\u0002\u114c\u114e\u0005\u0302",
    "\u0182\u0002\u114d\u114b\u0003\u0002\u0002\u0002\u114d\u114c\u0003\u0002",
    "\u0002\u0002\u114e\u02f5\u0003\u0002\u0002\u0002\u114f\u1153\u0007\u00eb",
    "\u0002\u0002\u1150\u1152\u0005\u02f8\u017d\u0002\u1151\u1150\u0003\u0002",
    "\u0002\u0002\u1152\u1155\u0003\u0002\u0002\u0002\u1153\u1151\u0003\u0002",
    "\u0002\u0002\u1153\u1154\u0003\u0002\u0002\u0002\u1154\u1156\u0003\u0002",
    "\u0002\u0002\u1155\u1153\u0003\u0002\u0002\u0002\u1156\u1161\u0007\u00eb",
    "\u0002\u0002\u1157\u115b\u0007\u00ea\u0002\u0002\u1158\u115a\u0005\u02fa",
    "\u017e\u0002\u1159\u1158\u0003\u0002\u0002\u0002\u115a\u115d\u0003\u0002",
    "\u0002\u0002\u115b\u1159\u0003\u0002\u0002\u0002\u115b\u115c\u0003\u0002",
    "\u0002\u0002\u115c\u115e\u0003\u0002\u0002\u0002\u115d\u115b\u0003\u0002",
    "\u0002\u0002\u115e\u1161\u0007\u00ea\u0002\u0002\u115f\u1161\u0005\u02ca",
    "\u0166\u0002\u1160\u114f\u0003\u0002\u0002\u0002\u1160\u1157\u0003\u0002",
    "\u0002\u0002\u1160\u115f\u0003\u0002\u0002\u0002\u1161\u02f7\u0003\u0002",
    "\u0002\u0002\u1162\u1165\u0007\u00dd\u0002\u0002\u1163\u1165\u0005\u02fc",
    "\u017f\u0002\u1164\u1162\u0003\u0002\u0002\u0002\u1164\u1163\u0003\u0002",
    "\u0002\u0002\u1165\u02f9\u0003\u0002\u0002\u0002\u1166\u1169\u0007\u00de",
    "\u0002\u0002\u1167\u1169\u0005\u02fc\u017f\u0002\u1168\u1166\u0003\u0002",
    "\u0002\u0002\u1168\u1167\u0003\u0002\u0002\u0002\u1169\u02fb\u0003\u0002",
    "\u0002\u0002\u116a\u116d\u0005\u02fe\u0180\u0002\u116b\u116d\u0005\u0300",
    "\u0181\u0002\u116c\u116a\u0003\u0002\u0002\u0002\u116c\u116b\u0003\u0002",
    "\u0002\u0002\u116d\u02fd\u0003\u0002\u0002\u0002\u116e\u116f\u0007\u00f7",
    "\u0002\u0002\u116f\u1170\u0007\u00db\u0002\u0002\u1170\u1171\u0007\u00f6",
    "\u0002\u0002\u1171\u02ff\u0003\u0002\u0002\u0002\u1172\u1173\u0007\u00f7",
    "\u0002\u0002\u1173\u1175\u0007\u00f9\u0002\u0002\u1174\u1176\u0007\u00ca",
    "\u0002\u0002\u1175\u1174\u0003\u0002\u0002\u0002\u1176\u1177\u0003\u0002",
    "\u0002\u0002\u1177\u1175\u0003\u0002\u0002\u0002\u1177\u1178\u0003\u0002",
    "\u0002\u0002\u1178\u1179\u0003\u0002\u0002\u0002\u1179\u117a\u0007\u00f6",
    "\u0002\u0002\u117a\u0301\u0003\u0002\u0002\u0002\u117b\u117e\u0005\u0304",
    "\u0183\u0002\u117c\u117e\u0005\u0306\u0184\u0002\u117d\u117b\u0003\u0002",
    "\u0002\u0002\u117d\u117c\u0003\u0002\u0002\u0002\u117e\u0303\u0003\u0002",
    "\u0002\u0002\u117f\u1180\u0007\u00d6\u0002\u0002\u1180\u1181\u0007\u00f5",
    "\u0002\u0002\u1181\u1182\u0005\u0308\u0185\u0002\u1182\u0305\u0003\u0002",
    "\u0002\u0002\u1183\u1184\u0007\u00d6\u0002\u0002\u1184\u0307\u0003\u0002",
    "\u0002\u0002\u1185\u1189\u0007\u00dc\u0002\u0002\u1186\u1188\u0005\u030a",
    "\u0186\u0002\u1187\u1186\u0003\u0002\u0002\u0002\u1188\u118b\u0003\u0002",
    "\u0002\u0002\u1189\u1187\u0003\u0002\u0002\u0002\u1189\u118a\u0003\u0002",
    "\u0002\u0002\u118a\u0309\u0003\u0002\u0002\u0002\u118b\u1189\u0003\u0002",
    "\u0002\u0002\u118c\u118d\t\u001a\u0002\u0002\u118d\u030b\u0003\u0002",
    "\u0002\u0002\u118e\u1191\u0005\u030e\u0188\u0002\u118f\u1191\u0005\u02ca",
    "\u0166\u0002\u1190\u118e\u0003\u0002\u0002\u0002\u1190\u118f\u0003\u0002",
    "\u0002\u0002\u1191\u030d\u0003\u0002\u0002\u0002\u1192\u1195\u0005\u0310",
    "\u0189\u0002\u1193\u1195\u0005\u0312\u018a\u0002\u1194\u1192\u0003\u0002",
    "\u0002\u0002\u1194\u1193\u0003\u0002\u0002\u0002\u1195\u030f\u0003\u0002",
    "\u0002\u0002\u1196\u1197\u0005\u0308\u0185\u0002\u1197\u1198\u0007\u00f5",
    "\u0002\u0002\u1198\u1199\u0005\u0308\u0185\u0002\u1199\u0311\u0003\u0002",
    "\u0002\u0002\u119a\u119b\u0005\u0308\u0185\u0002\u119b\u0313\u0003\u0002",
    "\u0002\u0002\u119c\u119d\u0007\u00f0\u0002\u0002\u119d\u119e\u0007\u00ec",
    "\u0002\u0002\u119e\u11a3\u0007\u00c6\u0002\u0002\u119f\u11a1\u0007\u00c4",
    "\u0002\u0002\u11a0\u11a2\u0007\u00c7\u0002\u0002\u11a1\u11a0\u0003\u0002",
    "\u0002\u0002\u11a1\u11a2\u0003\u0002\u0002\u0002\u11a2\u11a4\u0003\u0002",
    "\u0002\u0002\u11a3\u119f\u0003\u0002\u0002\u0002\u11a3\u11a4\u0003\u0002",
    "\u0002\u0002\u11a4\u11a5\u0003\u0002\u0002\u0002\u11a5\u11a6\u0007\u00ec",
    "\u0002\u0002\u11a6\u11a7\u0007\u00f1\u0002\u0002\u11a7\u0315\u0003\u0002",
    "\u0002\u0002\u11a8\u11a9\u0007\u00f0\u0002\u0002\u11a9\u11aa\u0007\u00f8",
    "\u0002\u0002\u11aa\u11ab\u0007\u00fc\u0002\u0002\u11ab\u11af\u0007\u00fc",
    "\u0002\u0002\u11ac\u11ae\u0007\u00cf\u0002\u0002\u11ad\u11ac\u0003\u0002",
    "\u0002\u0002\u11ae\u11b1\u0003\u0002\u0002\u0002\u11af\u11ad\u0003\u0002",
    "\u0002\u0002\u11af\u11b0\u0003\u0002\u0002\u0002\u11b0\u11b2\u0003\u0002",
    "\u0002\u0002\u11b1\u11af\u0003\u0002\u0002\u0002\u11b2\u11b3\u0007\u00fc",
    "\u0002\u0002\u11b3\u11b4\u0007\u00fc\u0002\u0002\u11b4\u11b5\u0007\u00f1",
    "\u0002\u0002\u11b5\u0317\u0003\u0002\u0002\u0002\u11b6\u11b7\u0007\u00f0",
    "\u0002\u0002\u11b7\u11be\u0007\u00f8\u0002\u0002\u11b8\u11b9\u0007\u00d5",
    "\u0002\u0002\u11b9\u11bb\u0007\u0105\u0002\u0002\u11ba\u11bc\u0007\u00d0",
    "\u0002\u0002\u11bb\u11ba\u0003\u0002\u0002\u0002\u11bb\u11bc\u0003\u0002",
    "\u0002\u0002\u11bc\u11bd\u0003\u0002\u0002\u0002\u11bd\u11bf\u0007\u0106",
    "\u0002\u0002\u11be\u11b8\u0003\u0002\u0002\u0002\u11be\u11bf\u0003\u0002",
    "\u0002\u0002\u11bf\u11c0\u0003\u0002\u0002\u0002\u11c0\u11c1\u0007\u00f1",
    "\u0002\u0002\u11c1\u0319\u0003\u0002\u0002\u0002\u11c2\u11c3\u0007\u000f",
    "\u0002\u0002\u11c3\u11c4\u0005\u023e\u0120\u0002\u11c4\u031b\u0003\u0002",
    "\u0002\u0002\u0242\u0326\u032b\u033a\u033f\u0346\u034d\u0351\u0356\u035a",
    "\u035f\u0365\u036a\u036f\u0373\u038d\u0395\u03a7\u03b5\u03bc\u03c1\u03c5",
    "\u03cb\u03d0\u03d6\u03dc\u03e2\u03e9\u03f1\u03f5\u03fb\u0408\u040e\u0414",
    "\u0419\u041f\u0429\u0432\u0437\u043c\u0441\u044c\u0454\u0477\u047d\u0498",
    "\u04aa\u04b7\u04bd\u04c3\u04c7\u04d2\u04d8\u04e1\u04e7\u04f3\u0501\u050a",
    "\u0510\u0514\u051f\u0526\u052d\u0532\u0535\u053a\u053e\u0545\u054b\u0550",
    "\u0553\u055d\u0562\u0566\u056e\u0579\u0584\u0589\u0592\u05a0\u05ad\u05b3",
    "\u05be\u05c2\u05cb\u05d3\u05d7\u05df\u05eb\u05f2\u05f7\u05fb\u0602\u0606",
    "\u060f\u0614\u0618\u061d\u0621\u0628\u062d\u0631\u0634\u0640\u0645\u0649",
    "\u064c\u064f\u065c\u0664\u0669\u0670\u0675\u067c\u0682\u0689\u068e\u0693",
    "\u0698\u069e\u06a2\u06a7\u06ad\u06b8\u06c6\u06c9\u06ce\u06d4\u06da\u06e0",
    "\u06e9\u06f3\u06f6\u06fb\u0704\u0712\u0715\u071a\u0720\u0726\u072c\u073c",
    "\u0743\u074b\u074f\u0756\u075a\u075d\u0762\u076b\u0775\u077e\u0786\u078a",
    "\u078f\u0793\u0796\u079b\u079f\u07a2\u07a6\u07a9\u07ac\u07b1\u07b6\u07bf",
    "\u07c4\u07c8\u07cd\u07d2\u07d9\u07de\u07e3\u07ec\u07f1\u07f5\u07fa\u07ff",
    "\u080f\u0813\u0819\u081d\u0820\u0825\u082a\u0830\u0834\u0837\u083c\u0841",
    "\u0846\u084c\u0850\u0853\u0857\u085a\u0861\u0870\u0874\u0879\u087f\u0883",
    "\u0892\u08a2\u08a5\u08aa\u08b1\u08b4\u08b8\u08c0\u08c4\u08c7\u08cc\u08d3",
    "\u08d8\u08dd\u08e7\u08ea\u08ee\u08f3\u08f8\u08fd\u0906\u090c\u0915\u0918",
    "\u0920\u0927\u092f\u0936\u093e\u0945\u094a\u0953\u095a\u0960\u0967\u096c",
    "\u0977\u097e\u0988\u098c\u098e\u0995\u099f\u09a6\u09ad\u09b2\u09b8\u09bb",
    "\u09bf\u09c2\u09c5\u09ca\u09cf\u09d5\u09dc\u09e1\u09e5\u09ea\u09ef\u09f6",
    "\u09f9\u09fd\u0a00\u0a04\u0a07\u0a0c\u0a11\u0a18\u0a1b\u0a1f\u0a25\u0a28",
    "\u0a2a\u0a2d\u0a30\u0a34\u0a37\u0a3c\u0a49\u0a50\u0a54\u0a5a\u0a5d\u0a60",
    "\u0a65\u0a6c\u0a6f\u0a74\u0a77\u0a7b\u0a82\u0a87\u0a91\u0a94\u0a98\u0abc",
    "\u0acd\u0ad6\u0adb\u0adf\u0ae4\u0ae8\u0aea\u0af6\u0b00\u0b09\u0b0f\u0b12",
    "\u0b25\u0b2f\u0b48\u0b4c\u0b54\u0b5c\u0b61\u0b64\u0b6a\u0b6e\u0b73\u0b77",
    "\u0b7c\u0b80\u0b89\u0b8d\u0b92\u0b9a\u0ba0\u0ba7\u0bab\u0bb5\u0bbc\u0bc1",
    "\u0bc3\u0bc7\u0bce\u0bd0\u0bdb\u0be1\u0be7\u0bed\u0bf5\u0bfb\u0bff\u0c07",
    "\u0c18\u0c1c\u0c20\u0c23\u0c2a\u0c2d\u0c34\u0c3c\u0c41\u0c45\u0c48\u0c4c",
    "\u0c50\u0c55\u0c5a\u0c5e\u0c67\u0c6d\u0c6f\u0c73\u0c77\u0c7b\u0c82\u0c95",
    "\u0c99\u0c9f\u0ca7\u0cc1\u0cc7\u0ccb\u0cd5\u0ce4\u0ceb\u0cf3\u0d0d\u0d16",
    "\u0d18\u0d1d\u0d23\u0d29\u0d2f\u0d35\u0d3b\u0d41\u0d47\u0d4d\u0d53\u0d5a",
    "\u0d60\u0d66\u0d6d\u0d74\u0d7a\u0d80\u0d86\u0d8c\u0d92\u0d98\u0d9e\u0da5",
    "\u0dac\u0db2\u0dbb\u0dbf\u0dc8\u0dcc\u0dd4\u0ddb\u0de0\u0de5\u0df0\u0df5",
    "\u0df7\u0dfe\u0e07\u0e17\u0e23\u0e27\u0e2c\u0e30\u0e37\u0e3c\u0e40\u0e43",
    "\u0e48\u0e50\u0e57\u0e5e\u0e68\u0e6d\u0e71\u0e80\u0e86\u0e8c\u0e8f\u0e92",
    "\u0e96\u0ea2\u0ea6\u0eac\u0eb5\u0ebe\u0ec3\u0ec7\u0eed\u0efb\u0f00\u0f06",
    "\u0f09\u0f0f\u0f12\u0f15\u0f19\u0f1e\u0f24\u0f27\u0f2b\u0f35\u0f3b\u0f3e",
    "\u0f4b\u0f50\u0f5c\u0f60\u0f67\u0f6d\u0f71\u0f7a\u0f80\u0f86\u0f8a\u0f8f",
    "\u0f93\u0f97\u0f9a\u0f9e\u0fa5\u0faa\u0fb0\u0fb5\u0fb9\u0fbe\u0fc2\u0fc7",
    "\u0fcb\u0fce\u0fd2\u0fd7\u0fdb\u0fdf\u0fe4\u0fe8\u0fec\u0ff0\u0ff5\u0ff8",
    "\u0ffb\u1000\u1009\u100e\u1013\u1017\u101a\u101d\u1021\u1025\u1029\u102e",
    "\u1032\u1038\u103c\u1040\u1045\u104a\u104e\u1051\u1055\u1059\u105d\u1071",
    "\u1078\u107e\u1082\u108b\u1092\u109a\u109d\u10a0\u10a8\u10ac\u10ba\u10bf",
    "\u10c3\u10cf\u10d5\u10dd\u10e1\u10ed\u10f4\u10f8\u10ff\u1106\u110a\u1114",
    "\u1118\u1123\u1127\u112a\u112e\u1132\u113a\u113f\u1143\u1149\u114d\u1153",
    "\u115b\u1160\u1164\u1168\u116c\u1177\u117d\u1189\u1190\u1194\u11a1\u11a3",
    "\u11af\u11bb\u11be"].join("");
const atn = new antlr4_1.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4_1.default.dfa.DFA(ds, index));
const sharedContextCache = new antlr4_1.default.PredictionContextCache();
class vbParser extends antlr4_1.default.Parser {
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = vbParser.ruleNames;
        this.literalNames = vbParser.literalNames;
        this.symbolicNames = vbParser.symbolicNames;
    }
    get atn() {
        return atn;
    }
    sempred(localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 47:
                return this.cCExpression_sempred(localctx, predIndex);
            case 102:
                return this.nonArrayTypeName_sempred(localctx, predIndex);
            case 286:
                return this.expression_sempred(localctx, predIndex);
            default:
                throw "No predicate with index:" + ruleIndex;
        }
    }
    cCExpression_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 2);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    nonArrayTypeName_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 1:
                return this.precpred(this._ctx, 1);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    expression_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 2:
                return this.precpred(this._ctx, 44);
            case 3:
                return this.precpred(this._ctx, 43);
            case 4:
                return this.precpred(this._ctx, 37);
            case 5:
                return this.precpred(this._ctx, 36);
            case 6:
                return this.precpred(this._ctx, 35);
            case 7:
                return this.precpred(this._ctx, 34);
            case 8:
                return this.precpred(this._ctx, 33);
            case 9:
                return this.precpred(this._ctx, 32);
            case 10:
                return this.precpred(this._ctx, 31);
            case 11:
                return this.precpred(this._ctx, 30);
            case 12:
                return this.precpred(this._ctx, 29);
            case 13:
                return this.precpred(this._ctx, 28);
            case 14:
                return this.precpred(this._ctx, 27);
            case 15:
                return this.precpred(this._ctx, 26);
            case 16:
                return this.precpred(this._ctx, 25);
            case 17:
                return this.precpred(this._ctx, 24);
            case 18:
                return this.precpred(this._ctx, 23);
            case 19:
                return this.precpred(this._ctx, 22);
            case 20:
                return this.precpred(this._ctx, 21);
            case 21:
                return this.precpred(this._ctx, 19);
            case 22:
                return this.precpred(this._ctx, 18);
            case 23:
                return this.precpred(this._ctx, 17);
            case 24:
                return this.precpred(this._ctx, 16);
            case 25:
                return this.precpred(this._ctx, 15);
            case 26:
                return this.precpred(this._ctx, 9);
            case 27:
                return this.precpred(this._ctx, 8);
            case 28:
                return this.precpred(this._ctx, 7);
            case 29:
                return this.precpred(this._ctx, 6);
            case 30:
                return this.precpred(this._ctx, 5);
            case 31:
                return this.precpred(this._ctx, 4);
            case 32:
                return this.precpred(this._ctx, 3);
            case 33:
                return this.precpred(this._ctx, 1);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    start() {
        let localctx = new StartContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, vbParser.RULE_start);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 794;
            this.classMemberDeclaration();
            this.state = 795;
            this.match(vbParser.EOF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    hexDigit() {
        let localctx = new HexDigitContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, vbParser.RULE_hexDigit);
        try {
            this.state = 804;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.ZERO:
                case vbParser.ONE:
                case vbParser.TWO:
                case vbParser.THREE:
                case vbParser.FOUR:
                case vbParser.FIVE:
                case vbParser.SIX:
                case vbParser.SEVEN:
                case vbParser.EIGHT:
                case vbParser.NINE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 797;
                    this.decimalDigit();
                    break;
                case vbParser.A:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 798;
                    this.match(vbParser.A);
                    break;
                case vbParser.B:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 799;
                    this.match(vbParser.B);
                    break;
                case vbParser.C:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 800;
                    this.match(vbParser.C);
                    break;
                case vbParser.D:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 801;
                    this.match(vbParser.D);
                    break;
                case vbParser.E:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 802;
                    this.match(vbParser.E);
                    break;
                case vbParser.F:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 803;
                    this.match(vbParser.F);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    decimalDigit() {
        let localctx = new DecimalDigitContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, vbParser.RULE_decimalDigit);
        try {
            this.state = 809;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.ZERO:
                case vbParser.ONE:
                case vbParser.TWO:
                case vbParser.THREE:
                case vbParser.FOUR:
                case vbParser.FIVE:
                case vbParser.SIX:
                case vbParser.SEVEN:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 806;
                    this.octalDigit();
                    break;
                case vbParser.EIGHT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 807;
                    this.match(vbParser.EIGHT);
                    break;
                case vbParser.NINE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 808;
                    this.match(vbParser.NINE);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    octalDigit() {
        let localctx = new OctalDigitContext(this, this._ctx, this.state);
        this.enterRule(localctx, 6, vbParser.RULE_octalDigit);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 811;
            _la = this._input.LA(1);
            if (!(((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    alphaCharacter() {
        let localctx = new AlphaCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 8, vbParser.RULE_alphaCharacter);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 813;
            _la = this._input.LA(1);
            if (!(((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    booleanLiteral() {
        let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, vbParser.RULE_booleanLiteral);
        try {
            this.state = 824;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.T:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 815;
                    this.match(vbParser.T);
                    this.state = 816;
                    this.match(vbParser.R);
                    this.state = 817;
                    this.match(vbParser.U);
                    this.state = 818;
                    this.match(vbParser.E);
                    break;
                case vbParser.F:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 819;
                    this.match(vbParser.F);
                    this.state = 820;
                    this.match(vbParser.A);
                    this.state = 821;
                    this.match(vbParser.L);
                    this.state = 822;
                    this.match(vbParser.S);
                    this.state = 823;
                    this.match(vbParser.E);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    intLiteral() {
        let localctx = new IntLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, vbParser.RULE_intLiteral);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 827;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 826;
                        this.decimalDigit();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 829;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    hexLiteral() {
        let localctx = new HexLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 14, vbParser.RULE_hexLiteral);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 831;
            this.match(vbParser.AMPERSAND);
            this.state = 832;
            this.match(vbParser.H);
            this.state = 834;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 833;
                        this.hexDigit();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 836;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 4, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    octalLiteral() {
        let localctx = new OctalLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 16, vbParser.RULE_octalLiteral);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 838;
            this.match(vbParser.AMPERSAND);
            this.state = 839;
            this.match(vbParser.O);
            this.state = 841;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 840;
                        this.octalDigit();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 843;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 5, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    integerLiteral() {
        let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 18, vbParser.RULE_integerLiteral);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 845;
            this.integerLiteralValue();
            this.state = 847;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 6, this._ctx);
            if (la_ === 1) {
                this.state = 846;
                this.integralTypeCharacter();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    integerLiteralValue() {
        let localctx = new IntegerLiteralValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 20, vbParser.RULE_integerLiteralValue);
        try {
            this.state = 852;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 7, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 849;
                    this.intLiteral();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 850;
                    this.hexLiteral();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 851;
                    this.octalLiteral();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    floatingPointLiteral() {
        let localctx = new FloatingPointLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 22, vbParser.RULE_floatingPointLiteral);
        try {
            this.state = 861;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 9, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 854;
                    this.floatingPointLiteralValue();
                    this.state = 856;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);
                    if (la_ === 1) {
                        this.state = 855;
                        this.floatingPointTypeCharacter();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 858;
                    this.intLiteral();
                    this.state = 859;
                    this.floatingPointTypeCharacter();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    floatingPointLiteralValue() {
        let localctx = new FloatingPointLiteralValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 24, vbParser.RULE_floatingPointLiteralValue);
        try {
            this.state = 877;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 12, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 863;
                    this.intLiteral();
                    this.state = 864;
                    this.match(vbParser.PERIOD);
                    this.state = 865;
                    this.intLiteral();
                    this.state = 867;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);
                    if (la_ === 1) {
                        this.state = 866;
                        this.exponent();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 869;
                    this.match(vbParser.PERIOD);
                    this.state = 870;
                    this.intLiteral();
                    this.state = 872;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 11, this._ctx);
                    if (la_ === 1) {
                        this.state = 871;
                        this.exponent();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 874;
                    this.intLiteral();
                    this.state = 875;
                    this.exponent();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    exponent() {
        let localctx = new ExponentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 26, vbParser.RULE_exponent);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 879;
            this.match(vbParser.E);
            this.state = 881;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.MINUS || _la === vbParser.PLUS) {
                this.state = 880;
                this.sign();
            }
            this.state = 883;
            this.intLiteral();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    sign() {
        let localctx = new SignContext(this, this._ctx, this.state);
        this.enterRule(localctx, 28, vbParser.RULE_sign);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 885;
            _la = this._input.LA(1);
            if (!(_la === vbParser.MINUS || _la === vbParser.PLUS)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    singleTypeCharacter() {
        let localctx = new SingleTypeCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 30, vbParser.RULE_singleTypeCharacter);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 887;
            this.match(vbParser.EXCLAMATION);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    doubleTypeCharacter() {
        let localctx = new DoubleTypeCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 32, vbParser.RULE_doubleTypeCharacter);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 889;
            this.match(vbParser.POUND);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    longTypeCharacter() {
        let localctx = new LongTypeCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 34, vbParser.RULE_longTypeCharacter);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 891;
            this.match(vbParser.AMPERSAND);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    stringTypeCharacter() {
        let localctx = new StringTypeCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 36, vbParser.RULE_stringTypeCharacter);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 893;
            this.match(vbParser.DOLLAR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    integerTypeCharacter() {
        let localctx = new IntegerTypeCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 38, vbParser.RULE_integerTypeCharacter);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 895;
            this.match(vbParser.PERCENT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    decimalTypeCharacter() {
        let localctx = new DecimalTypeCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 40, vbParser.RULE_decimalTypeCharacter);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 897;
            this.match(vbParser.AT);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    integralTypeCharacter() {
        let localctx = new IntegralTypeCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 42, vbParser.RULE_integralTypeCharacter);
        try {
            this.state = 907;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.SHORT_CHARACTER:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 899;
                    this.match(vbParser.SHORT_CHARACTER);
                    break;
                case vbParser.UNSIGNED_SHORT_CHARACTER:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 900;
                    this.match(vbParser.UNSIGNED_SHORT_CHARACTER);
                    break;
                case vbParser.INTEGER_CHARACTER:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 901;
                    this.match(vbParser.INTEGER_CHARACTER);
                    break;
                case vbParser.UNSIGNED_INTEGER_CHARACTER:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 902;
                    this.match(vbParser.UNSIGNED_INTEGER_CHARACTER);
                    break;
                case vbParser.LONG_CHARACTER:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 903;
                    this.match(vbParser.LONG_CHARACTER);
                    break;
                case vbParser.UNSIGNED_LONG_CHARACTER:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 904;
                    this.match(vbParser.UNSIGNED_LONG_CHARACTER);
                    break;
                case vbParser.PERCENT:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 905;
                    this.integerTypeCharacter();
                    break;
                case vbParser.AMPERSAND:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 906;
                    this.longTypeCharacter();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    floatingPointTypeCharacter() {
        let localctx = new FloatingPointTypeCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 44, vbParser.RULE_floatingPointTypeCharacter);
        try {
            this.state = 915;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.SINGLE_CHARACTER:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 909;
                    this.match(vbParser.SINGLE_CHARACTER);
                    break;
                case vbParser.DOUBLE_CHARACTER:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 910;
                    this.match(vbParser.DOUBLE_CHARACTER);
                    break;
                case vbParser.DECIMAL_CHARACTER:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 911;
                    this.match(vbParser.DECIMAL_CHARACTER);
                    break;
                case vbParser.EXCLAMATION:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 912;
                    this.singleTypeCharacter();
                    break;
                case vbParser.POUND:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 913;
                    this.doubleTypeCharacter();
                    break;
                case vbParser.AT:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 914;
                    this.decimalTypeCharacter();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    monthValue() {
        let localctx = new MonthValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 46, vbParser.RULE_monthValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 917;
            this.intLiteral();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dayValue() {
        let localctx = new DayValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 48, vbParser.RULE_dayValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 919;
            this.intLiteral();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    yearValue() {
        let localctx = new YearValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 50, vbParser.RULE_yearValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 921;
            this.intLiteral();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    hourValue() {
        let localctx = new HourValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 52, vbParser.RULE_hourValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 923;
            this.intLiteral();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    minuteValue() {
        let localctx = new MinuteValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 54, vbParser.RULE_minuteValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 925;
            this.intLiteral();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    secondValue() {
        let localctx = new SecondValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 56, vbParser.RULE_secondValue);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 927;
            this.intLiteral();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    ampm() {
        let localctx = new AmpmContext(this, this._ctx, this.state);
        this.enterRule(localctx, 58, vbParser.RULE_ampm);
        try {
            this.state = 933;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.A:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 929;
                    this.match(vbParser.A);
                    this.state = 930;
                    this.match(vbParser.M);
                    break;
                case vbParser.P:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 931;
                    this.match(vbParser.P);
                    this.state = 932;
                    this.match(vbParser.M);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dateValue() {
        let localctx = new DateValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 60, vbParser.RULE_dateValue);
        try {
            this.state = 947;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 17, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 935;
                    this.monthValue();
                    this.state = 936;
                    this.match(vbParser.SLASH);
                    this.state = 937;
                    this.dayValue();
                    this.state = 938;
                    this.match(vbParser.SLASH);
                    this.state = 939;
                    this.yearValue();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 941;
                    this.monthValue();
                    this.state = 942;
                    this.match(vbParser.MINUS);
                    this.state = 943;
                    this.dayValue();
                    this.state = 944;
                    this.match(vbParser.MINUS);
                    this.state = 945;
                    this.yearValue();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    timeValue() {
        let localctx = new TimeValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 62, vbParser.RULE_timeValue);
        var _la = 0;
        try {
            this.state = 974;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 949;
                    this.hourValue();
                    this.state = 950;
                    this.match(vbParser.COLON);
                    this.state = 951;
                    this.minuteValue();
                    this.state = 954;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.COLON) {
                        this.state = 952;
                        this.match(vbParser.COLON);
                        this.state = 953;
                        this.secondValue();
                    }
                    this.state = 959;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 19, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 956;
                            this.match(vbParser.WS);
                        }
                        this.state = 961;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 19, this._ctx);
                    }
                    this.state = 963;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.A || _la === vbParser.P) {
                        this.state = 962;
                        this.ampm();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 965;
                    this.hourValue();
                    this.state = 969;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === vbParser.WS) {
                        this.state = 966;
                        this.match(vbParser.WS);
                        this.state = 971;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 972;
                    this.ampm();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dateOrTime() {
        let localctx = new DateOrTimeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 64, vbParser.RULE_dateOrTime);
        var _la = 0;
        try {
            this.state = 986;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 976;
                    this.dateValue();
                    this.state = 978;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 977;
                        this.match(vbParser.WS);
                        this.state = 980;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while (_la === vbParser.WS);
                    this.state = 982;
                    this.timeValue();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 984;
                    this.dateValue();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 985;
                    this.timeValue();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    dateLiteral() {
        let localctx = new DateLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 66, vbParser.RULE_dateLiteral);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 988;
            this.match(vbParser.POUND);
            this.state = 992;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.WS) {
                this.state = 989;
                this.match(vbParser.WS);
                this.state = 994;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 995;
            this.dateOrTime();
            this.state = 999;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.WS) {
                this.state = 996;
                this.match(vbParser.WS);
                this.state = 1001;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1002;
            this.match(vbParser.POUND);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    stringCharacter() {
        let localctx = new StringCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 68, vbParser.RULE_stringCharacter);
        try {
            this.state = 1011;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1005;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 1004;
                                this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 1007;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 27, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1009;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    this.state = 1010;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    stringLiteral() {
        let localctx = new StringLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 70, vbParser.RULE_stringLiteral);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1013;
            this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
            this.state = 1017;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 29, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1014;
                    this.stringCharacter();
                }
                this.state = 1019;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 29, this._ctx);
            }
            this.state = 1020;
            this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    characterLiteral() {
        let localctx = new CharacterLiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 72, vbParser.RULE_characterLiteral);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1022;
            this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
            this.state = 1023;
            this.stringCharacter();
            this.state = 1024;
            this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
            this.state = 1025;
            this.match(vbParser.C);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifierStart() {
        let localctx = new IdentifierStartContext(this, this._ctx, this.state);
        this.enterRule(localctx, 74, vbParser.RULE_identifierStart);
        try {
            this.state = 1030;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.A:
                case vbParser.B:
                case vbParser.C:
                case vbParser.D:
                case vbParser.E:
                case vbParser.F:
                case vbParser.G:
                case vbParser.H:
                case vbParser.I:
                case vbParser.J:
                case vbParser.K:
                case vbParser.L:
                case vbParser.M:
                case vbParser.N:
                case vbParser.O:
                case vbParser.P:
                case vbParser.Q:
                case vbParser.R:
                case vbParser.S:
                case vbParser.T:
                case vbParser.U:
                case vbParser.V:
                case vbParser.W:
                case vbParser.X:
                case vbParser.Y:
                case vbParser.Z:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1027;
                    this.alphaCharacter();
                    break;
                case vbParser.UNDERSCORE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1028;
                    this.match(vbParser.UNDERSCORE);
                    this.state = 1029;
                    this.identifierCharacter();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifierName() {
        let localctx = new IdentifierNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 76, vbParser.RULE_identifierName);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1032;
            this.identifierStart();
            this.state = 1036;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 31, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1033;
                    this.identifierCharacter();
                }
                this.state = 1038;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 31, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifierCharacter() {
        let localctx = new IdentifierCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 78, vbParser.RULE_identifierCharacter);
        try {
            this.state = 1042;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.UNDERSCORE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1039;
                    this.match(vbParser.UNDERSCORE);
                    break;
                case vbParser.A:
                case vbParser.B:
                case vbParser.C:
                case vbParser.D:
                case vbParser.E:
                case vbParser.F:
                case vbParser.G:
                case vbParser.H:
                case vbParser.I:
                case vbParser.J:
                case vbParser.K:
                case vbParser.L:
                case vbParser.M:
                case vbParser.N:
                case vbParser.O:
                case vbParser.P:
                case vbParser.Q:
                case vbParser.R:
                case vbParser.S:
                case vbParser.T:
                case vbParser.U:
                case vbParser.V:
                case vbParser.W:
                case vbParser.X:
                case vbParser.Y:
                case vbParser.Z:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1040;
                    this.alphaCharacter();
                    break;
                case vbParser.ZERO:
                case vbParser.ONE:
                case vbParser.TWO:
                case vbParser.THREE:
                case vbParser.FOUR:
                case vbParser.FIVE:
                case vbParser.SIX:
                case vbParser.SEVEN:
                case vbParser.EIGHT:
                case vbParser.NINE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1041;
                    this.decimalDigit();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifier() {
        let localctx = new IdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 80, vbParser.RULE_identifier);
        try {
            this.state = 1053;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 34, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1044;
                    this.identifierName();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1045;
                    this.identifierName();
                    this.state = 1047;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 33, this._ctx);
                    if (la_ === 1) {
                        this.state = 1046;
                        this.typeCharacter();
                    }
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1049;
                    this.match(vbParser.LEFT_SQUARE_BRACKET);
                    this.state = 1050;
                    this.identifierName();
                    this.state = 1051;
                    this.match(vbParser.RIGHT_SQUARE_BRACKET);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifierOrKeyword() {
        let localctx = new IdentifierOrKeywordContext(this, this._ctx, this.state);
        this.enterRule(localctx, 82, vbParser.RULE_identifierOrKeyword);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1055;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeCharacter() {
        let localctx = new TypeCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 84, vbParser.RULE_typeCharacter);
        try {
            this.state = 1063;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.PERCENT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1057;
                    this.integerTypeCharacter();
                    break;
                case vbParser.AMPERSAND:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1058;
                    this.longTypeCharacter();
                    break;
                case vbParser.AT:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1059;
                    this.decimalTypeCharacter();
                    break;
                case vbParser.EXCLAMATION:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1060;
                    this.singleTypeCharacter();
                    break;
                case vbParser.POUND:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1061;
                    this.doubleTypeCharacter();
                    break;
                case vbParser.DOLLAR:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 1062;
                    this.stringTypeCharacter();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    literal() {
        let localctx = new LiteralContext(this, this._ctx, this.state);
        this.enterRule(localctx, 86, vbParser.RULE_literal);
        try {
            this.state = 1072;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1065;
                    this.booleanLiteral();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1066;
                    this.integerLiteral();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1067;
                    this.floatingPointLiteral();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1068;
                    this.stringLiteral();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1069;
                    this.characterLiteral();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 1070;
                    this.dateLiteral();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 1071;
                    this.match(vbParser.NOTHING);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elseIf() {
        let localctx = new ElseIfContext(this, this._ctx, this.state);
        this.enterRule(localctx, 88, vbParser.RULE_elseIf);
        try {
            this.state = 1077;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.ELSEIF:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1074;
                    this.match(vbParser.ELSEIF);
                    break;
                case vbParser.ELSE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1075;
                    this.match(vbParser.ELSE);
                    this.state = 1076;
                    this.match(vbParser.IF);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCStart() {
        let localctx = new CCStartContext(this, this._ctx, this.state);
        this.enterRule(localctx, 90, vbParser.RULE_cCStart);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1082;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.POUND) {
                this.state = 1079;
                this.cCStatement();
                this.state = 1084;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCStatement() {
        let localctx = new CCStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 92, vbParser.RULE_cCStatement);
        try {
            this.state = 1087;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 39, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1085;
                    this.cCConstantDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1086;
                    this.cCIfGroup();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCExpression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new CCExpressionContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 94;
        this.enterRecursionRule(localctx, 94, vbParser.RULE_cCExpression, _p);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1098;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 40, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1090;
                    this.literalExpression();
                    break;
                case 2:
                    this.state = 1091;
                    this.cCParenthesizedExpression();
                    break;
                case 3:
                    this.state = 1092;
                    this.cCSimpleNameExpression();
                    break;
                case 4:
                    this.state = 1093;
                    this.cCCastExpression();
                    break;
                case 5:
                    this.state = 1094;
                    this.cCUnaryOperator();
                    this.state = 1095;
                    this.cCExpression(3);
                    break;
                case 6:
                    this.state = 1097;
                    this.cCConditionalExpression();
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            this.state = 1106;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    localctx = new CCExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_cCExpression);
                    this.state = 1100;
                    if (!(this.precpred(this._ctx, 2))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1101;
                    this.cCBinaryOperator();
                    this.state = 1102;
                    this.cCExpression(3);
                }
                this.state = 1108;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    cCParenthesizedExpression() {
        let localctx = new CCParenthesizedExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 96, vbParser.RULE_cCParenthesizedExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1109;
            this.match(vbParser.LEFT_PAREN);
            this.state = 1110;
            this.cCExpression(0);
            this.state = 1111;
            this.match(vbParser.RIGHT_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCSimpleNameExpression() {
        let localctx = new CCSimpleNameExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 98, vbParser.RULE_cCSimpleNameExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1113;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCCastExpression() {
        let localctx = new CCCastExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 100, vbParser.RULE_cCCastExpression);
        try {
            this.state = 1141;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.DIRECTCAST:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1115;
                    this.match(vbParser.DIRECTCAST);
                    this.state = 1116;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 1117;
                    this.cCExpression(0);
                    this.state = 1118;
                    this.match(vbParser.COMMA);
                    this.state = 1119;
                    this.typeName();
                    this.state = 1120;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
                case vbParser.TRYCAST:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1122;
                    this.match(vbParser.TRYCAST);
                    this.state = 1123;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 1124;
                    this.cCExpression(0);
                    this.state = 1125;
                    this.match(vbParser.COMMA);
                    this.state = 1126;
                    this.typeName();
                    this.state = 1127;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
                case vbParser.CTYPE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1129;
                    this.match(vbParser.CTYPE);
                    this.state = 1130;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 1131;
                    this.cCExpression(0);
                    this.state = 1132;
                    this.match(vbParser.COMMA);
                    this.state = 1133;
                    this.typeName();
                    this.state = 1134;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
                case vbParser.CBOOL:
                case vbParser.CBYTE:
                case vbParser.CCHAR:
                case vbParser.CDATE:
                case vbParser.CDBL:
                case vbParser.CDEC:
                case vbParser.CINT:
                case vbParser.CLNG:
                case vbParser.COBJ:
                case vbParser.CSBYTE:
                case vbParser.CSHORT:
                case vbParser.CSNG:
                case vbParser.CSTR:
                case vbParser.CUINT:
                case vbParser.CULNG:
                case vbParser.CUSHORT:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1136;
                    this.castTarget();
                    this.state = 1137;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 1138;
                    this.cCExpression(0);
                    this.state = 1139;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCPlusMinus() {
        let localctx = new CCPlusMinusContext(this, this._ctx, this.state);
        this.enterRule(localctx, 102, vbParser.RULE_cCPlusMinus);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1143;
            _la = this._input.LA(1);
            if (!(_la === vbParser.MINUS || _la === vbParser.PLUS)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCUnaryOperator() {
        let localctx = new CCUnaryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 104, vbParser.RULE_cCUnaryOperator);
        try {
            this.state = 1147;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.MINUS:
                case vbParser.PLUS:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1145;
                    this.cCPlusMinus();
                    break;
                case vbParser.NOT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1146;
                    this.match(vbParser.NOT);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCBinaryOperator() {
        let localctx = new CCBinaryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 106, vbParser.RULE_cCBinaryOperator);
        try {
            this.state = 1174;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 44, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1149;
                    this.cCPlusMinus();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1150;
                    this.match(vbParser.ASTERISK);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1151;
                    this.match(vbParser.SLASH);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1152;
                    this.match(vbParser.DOUBLE_BACK_SLASH);
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1153;
                    this.match(vbParser.MOD);
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 1154;
                    this.match(vbParser.CARET);
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 1155;
                    this.match(vbParser.EQUALS);
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 1156;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 1157;
                    this.match(vbParser.RIGHT_ARROW);
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 1158;
                    this.match(vbParser.LEFT_ARROW);
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 1159;
                    this.match(vbParser.RIGHT_ARROW);
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 1160;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 1161;
                    this.match(vbParser.EQUALS);
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 1162;
                    this.match(vbParser.RIGHT_ARROW);
                    this.state = 1163;
                    this.match(vbParser.EQUALS);
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    this.state = 1164;
                    this.match(vbParser.AMPERSAND);
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    this.state = 1165;
                    this.match(vbParser.AND);
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    this.state = 1166;
                    this.match(vbParser.OR);
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    this.state = 1167;
                    this.match(vbParser.XOR);
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    this.state = 1168;
                    this.match(vbParser.ANDALSO);
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    this.state = 1169;
                    this.match(vbParser.ORELSE);
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    this.state = 1170;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 1171;
                    this.match(vbParser.LEFT_ARROW);
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    this.state = 1172;
                    this.match(vbParser.RIGHT_ARROW);
                    this.state = 1173;
                    this.match(vbParser.RIGHT_ARROW);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCConditionalExpression() {
        let localctx = new CCConditionalExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 108, vbParser.RULE_cCConditionalExpression);
        try {
            this.state = 1192;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1176;
                    this.match(vbParser.IF);
                    this.state = 1177;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 1178;
                    this.cCExpression(0);
                    this.state = 1179;
                    this.match(vbParser.COMMA);
                    this.state = 1180;
                    this.cCExpression(0);
                    this.state = 1181;
                    this.match(vbParser.COMMA);
                    this.state = 1182;
                    this.cCExpression(0);
                    this.state = 1183;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1185;
                    this.match(vbParser.IF);
                    this.state = 1186;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 1187;
                    this.cCExpression(0);
                    this.state = 1188;
                    this.match(vbParser.COMMA);
                    this.state = 1189;
                    this.cCExpression(0);
                    this.state = 1190;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCConstantDeclaration() {
        let localctx = new CCConstantDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 110, vbParser.RULE_cCConstantDeclaration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1194;
            this.match(vbParser.POUND);
            this.state = 1195;
            this.match(vbParser.CONST);
            this.state = 1196;
            this.identifier();
            this.state = 1197;
            this.match(vbParser.EQUALS);
            this.state = 1198;
            this.cCExpression(0);
            this.state = 1199;
            this.match(vbParser.LINE_TERMINATOR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCIfGroup() {
        let localctx = new CCIfGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 112, vbParser.RULE_cCIfGroup);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1201;
            this.match(vbParser.POUND);
            this.state = 1202;
            this.match(vbParser.IF);
            this.state = 1203;
            this.cCExpression(0);
            this.state = 1205;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.THEN) {
                this.state = 1204;
                this.match(vbParser.THEN);
            }
            this.state = 1207;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 1211;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 47, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1208;
                    this.cCStatement();
                }
                this.state = 1213;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 47, this._ctx);
            }
            this.state = 1217;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 48, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1214;
                    this.cCElseIfGroup();
                }
                this.state = 1219;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 48, this._ctx);
            }
            this.state = 1221;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 49, this._ctx);
            if (la_ === 1) {
                this.state = 1220;
                this.cCElseGroup();
            }
            this.state = 1223;
            this.match(vbParser.POUND);
            this.state = 1224;
            this.match(vbParser.END);
            this.state = 1225;
            this.match(vbParser.IF);
            this.state = 1226;
            this.match(vbParser.LINE_TERMINATOR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCElseIfGroup() {
        let localctx = new CCElseIfGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 114, vbParser.RULE_cCElseIfGroup);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1228;
            this.match(vbParser.POUND);
            this.state = 1229;
            this.elseIf();
            this.state = 1230;
            this.cCExpression(0);
            this.state = 1232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.THEN) {
                this.state = 1231;
                this.match(vbParser.THEN);
            }
            this.state = 1234;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 1238;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1235;
                    this.cCStatement();
                }
                this.state = 1240;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    cCElseGroup() {
        let localctx = new CCElseGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 116, vbParser.RULE_cCElseGroup);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1241;
            this.match(vbParser.POUND);
            this.state = 1242;
            this.match(vbParser.ELSE);
            this.state = 1243;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 1247;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1244;
                    this.cCStatement();
                }
                this.state = 1249;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 52, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    regionStart() {
        let localctx = new RegionStartContext(this, this._ctx, this.state);
        this.enterRule(localctx, 118, vbParser.RULE_regionStart);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1253;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.POUND) {
                this.state = 1250;
                this.regionStatement();
                this.state = 1255;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    regionStatement() {
        let localctx = new RegionStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 120, vbParser.RULE_regionStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1256;
            this.regionGroup();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    regionGroup() {
        let localctx = new RegionGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 122, vbParser.RULE_regionGroup);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1258;
            this.match(vbParser.POUND);
            this.state = 1259;
            this.match(vbParser.REGION);
            this.state = 1260;
            this.stringLiteral();
            this.state = 1261;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 1265;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 54, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1262;
                    this.regionStatement();
                }
                this.state = 1267;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 54, this._ctx);
            }
            this.state = 1268;
            this.match(vbParser.POUND);
            this.state = 1269;
            this.match(vbParser.END);
            this.state = 1270;
            this.match(vbParser.REGION);
            this.state = 1271;
            this.match(vbParser.LINE_TERMINATOR);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    accessModifier() {
        let localctx = new AccessModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 124, vbParser.RULE_accessModifier);
        try {
            this.state = 1279;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 55, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1273;
                    this.match(vbParser.PUBLIC);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1274;
                    this.match(vbParser.PROTECTED);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1275;
                    this.match(vbParser.FRIEND);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1276;
                    this.match(vbParser.PRIVATE);
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1277;
                    this.match(vbParser.PROTECTED);
                    this.state = 1278;
                    this.match(vbParser.FRIEND);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameterList() {
        let localctx = new TypeParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 126, vbParser.RULE_typeParameterList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1281;
            this.match(vbParser.LEFT_PAREN);
            this.state = 1282;
            this.match(vbParser.OF);
            this.state = 1283;
            this.typeParameter();
            this.state = 1288;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 1284;
                this.match(vbParser.COMMA);
                this.state = 1285;
                this.typeParameter();
                this.state = 1290;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1291;
            this.match(vbParser.RIGHT_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameter() {
        let localctx = new TypeParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 128, vbParser.RULE_typeParameter);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1294;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.IN || _la === vbParser.OUT) {
                this.state = 1293;
                this.varianceModifier();
            }
            this.state = 1296;
            this.identifier();
            this.state = 1298;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 1297;
                this.typeParameterConstraints();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    varianceModifier() {
        let localctx = new VarianceModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 130, vbParser.RULE_varianceModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1300;
            _la = this._input.LA(1);
            if (!(_la === vbParser.IN || _la === vbParser.OUT)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameterConstraints() {
        let localctx = new TypeParameterConstraintsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 132, vbParser.RULE_typeParameterConstraints);
        try {
            this.state = 1309;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1302;
                    this.match(vbParser.AS);
                    this.state = 1303;
                    this.constraint();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1304;
                    this.match(vbParser.AS);
                    this.state = 1305;
                    this.match(vbParser.LEFT_BRACE);
                    this.state = 1306;
                    this.constraintList();
                    this.state = 1307;
                    this.match(vbParser.RIGHT_BRACE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constraintList() {
        let localctx = new ConstraintListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 134, vbParser.RULE_constraintList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1311;
            this.constraint();
            this.state = 1316;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 1312;
                this.match(vbParser.COMMA);
                this.state = 1313;
                this.constraint();
                this.state = 1318;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constraint() {
        let localctx = new ConstraintContext(this, this._ctx, this.state);
        this.enterRule(localctx, 136, vbParser.RULE_constraint);
        try {
            this.state = 1323;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.BOOLEAN:
                case vbParser.BYTE:
                case vbParser.CHAR:
                case vbParser.DATE:
                case vbParser.DECIMAL:
                case vbParser.DOUBLE:
                case vbParser.GLOBAL:
                case vbParser.INTEGER:
                case vbParser.LONG:
                case vbParser.OBJECT:
                case vbParser.SBYTE:
                case vbParser.SHORT:
                case vbParser.SINGLE:
                case vbParser.STRING:
                case vbParser.UINTEGER:
                case vbParser.ULONG:
                case vbParser.USHORT:
                case vbParser.UNDERSCORE:
                case vbParser.LEFT_SQUARE_BRACKET:
                case vbParser.A:
                case vbParser.B:
                case vbParser.C:
                case vbParser.D:
                case vbParser.E:
                case vbParser.F:
                case vbParser.G:
                case vbParser.H:
                case vbParser.I:
                case vbParser.J:
                case vbParser.K:
                case vbParser.L:
                case vbParser.M:
                case vbParser.N:
                case vbParser.O:
                case vbParser.P:
                case vbParser.Q:
                case vbParser.R:
                case vbParser.S:
                case vbParser.T:
                case vbParser.U:
                case vbParser.V:
                case vbParser.W:
                case vbParser.X:
                case vbParser.Y:
                case vbParser.Z:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1319;
                    this.typeName();
                    break;
                case vbParser.NEW:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1320;
                    this.match(vbParser.NEW);
                    break;
                case vbParser.STRUCTURE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1321;
                    this.match(vbParser.STRUCTURE);
                    break;
                case vbParser.CLASS:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1322;
                    this.match(vbParser.CLASS);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributes() {
        let localctx = new AttributesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 138, vbParser.RULE_attributes);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1326;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 1325;
                        this.attributeBlock();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 1328;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributeBlock() {
        let localctx = new AttributeBlockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 140, vbParser.RULE_attributeBlock);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1331;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 1330;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 1333;
            this.match(vbParser.LEFT_ARROW);
            this.state = 1334;
            this.attributeList();
            this.state = 1336;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 1335;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 1338;
            this.match(vbParser.RIGHT_ARROW);
            this.state = 1340;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 65, this._ctx);
            if (la_ === 1) {
                this.state = 1339;
                this.match(vbParser.LINE_TERMINATOR);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributeList() {
        let localctx = new AttributeListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 142, vbParser.RULE_attributeList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1342;
            this.attribute();
            this.state = 1347;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 1343;
                this.match(vbParser.COMMA);
                this.state = 1344;
                this.attribute();
                this.state = 1349;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attribute() {
        let localctx = new AttributeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 144, vbParser.RULE_attribute);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1353;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.ASSEMBLY || _la === vbParser.MODULE) {
                this.state = 1350;
                this.attributeModifier();
                this.state = 1351;
                this.match(vbParser.COLON);
            }
            this.state = 1355;
            this.simpleTypeName();
            this.state = 1361;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 1356;
                this.match(vbParser.LEFT_PAREN);
                this.state = 1358;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DOUBLE - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (vbParser.FROM - 71)) | (1 << (vbParser.FUNCTION - 71)) | (1 << (vbParser.GETTYPE - 71)) | (1 << (vbParser.GLOBAL - 71)) | (1 << (vbParser.IF - 71)) | (1 << (vbParser.INTEGER - 71)) | (1 << (vbParser.ITERATOR - 71)) | (1 << (vbParser.LONG - 71)) | (1 << (vbParser.ME - 71)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vbParser.MYBASE - 106)) | (1 << (vbParser.MYCLASS - 106)) | (1 << (vbParser.NEW - 106)) | (1 << (vbParser.NOT - 106)) | (1 << (vbParser.NOTHING - 106)) | (1 << (vbParser.OBJECT - 106)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.SUB - 145)) | (1 << (vbParser.TRYCAST - 145)) | (1 << (vbParser.TYPEOF - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || _la === vbParser.GET_XML_NAMESPACE || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                    this.state = 1357;
                    this.attributeArguments();
                }
                this.state = 1360;
                this.match(vbParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributeModifier() {
        let localctx = new AttributeModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 146, vbParser.RULE_attributeModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1363;
            _la = this._input.LA(1);
            if (!(_la === vbParser.ASSEMBLY || _la === vbParser.MODULE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributeArguments() {
        let localctx = new AttributeArgumentsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 148, vbParser.RULE_attributeArguments);
        try {
            this.state = 1371;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 70, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1365;
                    this.attributePositionalArgumentList();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1366;
                    this.attributePositionalArgumentList();
                    this.state = 1367;
                    this.match(vbParser.COMMA);
                    this.state = 1368;
                    this.variablePropertyInitializerList();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1370;
                    this.variablePropertyInitializerList();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributePositionalArgumentList() {
        let localctx = new AttributePositionalArgumentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 150, vbParser.RULE_attributePositionalArgumentList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1373;
            this.attributeArgumentExpression();
            this.state = 1380;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 72, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1374;
                    this.match(vbParser.COMMA);
                    this.state = 1376;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DOUBLE - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (vbParser.FROM - 71)) | (1 << (vbParser.FUNCTION - 71)) | (1 << (vbParser.GETTYPE - 71)) | (1 << (vbParser.GLOBAL - 71)) | (1 << (vbParser.IF - 71)) | (1 << (vbParser.INTEGER - 71)) | (1 << (vbParser.ITERATOR - 71)) | (1 << (vbParser.LONG - 71)) | (1 << (vbParser.ME - 71)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vbParser.MYBASE - 106)) | (1 << (vbParser.MYCLASS - 106)) | (1 << (vbParser.NEW - 106)) | (1 << (vbParser.NOT - 106)) | (1 << (vbParser.NOTHING - 106)) | (1 << (vbParser.OBJECT - 106)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.SUB - 145)) | (1 << (vbParser.TRYCAST - 145)) | (1 << (vbParser.TYPEOF - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || _la === vbParser.GET_XML_NAMESPACE || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                        this.state = 1375;
                        this.attributeArgumentExpression();
                    }
                }
                this.state = 1382;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 72, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variablePropertyInitializerList() {
        let localctx = new VariablePropertyInitializerListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 152, vbParser.RULE_variablePropertyInitializerList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1383;
            this.variablePropertyInitializer();
            this.state = 1388;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 1384;
                this.match(vbParser.COMMA);
                this.state = 1385;
                this.variablePropertyInitializer();
                this.state = 1390;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variablePropertyInitializer() {
        let localctx = new VariablePropertyInitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 154, vbParser.RULE_variablePropertyInitializer);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1391;
            this.identifierOrKeyword();
            this.state = 1392;
            this.match(vbParser.COLON);
            this.state = 1393;
            this.match(vbParser.EQUALS);
            this.state = 1394;
            this.attributeArgumentExpression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributeArgumentExpression() {
        let localctx = new AttributeArgumentExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 156, vbParser.RULE_attributeArgumentExpression);
        try {
            this.state = 1399;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 74, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1396;
                    this.constantExpression();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1397;
                    this.getTypeExpression();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1398;
                    this.arrayExpression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    statementTerminator() {
        let localctx = new StatementTerminatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 158, vbParser.RULE_statementTerminator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1401;
            _la = this._input.LA(1);
            if (!(_la === vbParser.EOF || _la === vbParser.LINE_TERMINATOR || _la === vbParser.COLON)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributesStatement() {
        let localctx = new AttributesStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 160, vbParser.RULE_attributesStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1403;
            this.attributes();
            this.state = 1404;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionStatement() {
        let localctx = new OptionStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 162, vbParser.RULE_optionStatement);
        try {
            this.state = 1410;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 75, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1406;
                    this.optionExplicitStatement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1407;
                    this.optionStrictStatement();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1408;
                    this.optionCompareStatement();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1409;
                    this.optionInferStatement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionExplicitStatement() {
        let localctx = new OptionExplicitStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 164, vbParser.RULE_optionExplicitStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1412;
            this.match(vbParser.OPTION);
            this.state = 1413;
            this.match(vbParser.EXPLICIT);
            this.state = 1415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.OFF || _la === vbParser.ON) {
                this.state = 1414;
                this.onOff();
            }
            this.state = 1417;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    onOff() {
        let localctx = new OnOffContext(this, this._ctx, this.state);
        this.enterRule(localctx, 166, vbParser.RULE_onOff);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1419;
            _la = this._input.LA(1);
            if (!(_la === vbParser.OFF || _la === vbParser.ON)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionStrictStatement() {
        let localctx = new OptionStrictStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 168, vbParser.RULE_optionStrictStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1421;
            this.match(vbParser.OPTION);
            this.state = 1422;
            this.match(vbParser.STRICT);
            this.state = 1424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.OFF || _la === vbParser.ON) {
                this.state = 1423;
                this.onOff();
            }
            this.state = 1426;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionCompareStatement() {
        let localctx = new OptionCompareStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 170, vbParser.RULE_optionCompareStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1428;
            this.match(vbParser.OPTION);
            this.state = 1429;
            this.match(vbParser.COMPARE);
            this.state = 1430;
            this.compareOption();
            this.state = 1431;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compareOption() {
        let localctx = new CompareOptionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 172, vbParser.RULE_compareOption);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1433;
            _la = this._input.LA(1);
            if (!(_la === vbParser.BINARY || _la === vbParser.TEXT)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    optionInferStatement() {
        let localctx = new OptionInferStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 174, vbParser.RULE_optionInferStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1435;
            this.match(vbParser.OPTION);
            this.state = 1436;
            this.match(vbParser.INFER);
            this.state = 1438;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.OFF || _la === vbParser.ON) {
                this.state = 1437;
                this.onOff();
            }
            this.state = 1440;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    importsStatement() {
        let localctx = new ImportsStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 176, vbParser.RULE_importsStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1442;
            this.match(vbParser.IMPORTS);
            this.state = 1443;
            this.importsClauses();
            this.state = 1444;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    importsClauses() {
        let localctx = new ImportsClausesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 178, vbParser.RULE_importsClauses);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1446;
            this.importsClause();
            this.state = 1451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 1447;
                this.match(vbParser.COMMA);
                this.state = 1448;
                this.importsClause();
                this.state = 1453;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    importsClause() {
        let localctx = new ImportsClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 180, vbParser.RULE_importsClause);
        try {
            this.state = 1457;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1454;
                    this.aliasImportsClause();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1455;
                    this.membersImportsClause();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1456;
                    this.xMLNamespaceImportsClause();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    aliasImportsClause() {
        let localctx = new AliasImportsClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 182, vbParser.RULE_aliasImportsClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1459;
            this.identifier();
            this.state = 1460;
            this.match(vbParser.EQUALS);
            this.state = 1461;
            this.typeName();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    membersImportsClause() {
        let localctx = new MembersImportsClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 184, vbParser.RULE_membersImportsClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1463;
            this.typeName();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLNamespaceImportsClause() {
        let localctx = new XMLNamespaceImportsClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 186, vbParser.RULE_xMLNamespaceImportsClause);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1465;
            this.match(vbParser.LEFT_ARROW);
            this.state = 1466;
            this.xMLNamespaceAttributeName();
            this.state = 1468;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 1467;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 1470;
            this.match(vbParser.EQUALS);
            this.state = 1472;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 1471;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 1474;
            this.xMLNamespaceValue();
            this.state = 1475;
            this.match(vbParser.RIGHT_ARROW);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLNamespaceValue() {
        let localctx = new XMLNamespaceValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 188, vbParser.RULE_xMLNamespaceValue);
        var _la = 0;
        try {
            this.state = 1493;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.DOUBLE_QUOTE_CHARACTER:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1477;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    this.state = 1481;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === vbParser.XMLNotDoubleQuote || _la === vbParser.AMPERSAND) {
                        this.state = 1478;
                        this.xMLAttributeDoubleQuoteValueCharacter();
                        this.state = 1483;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1484;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    break;
                case vbParser.SINGLE_QUOTE_CHAR:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1485;
                    this.match(vbParser.SINGLE_QUOTE_CHAR);
                    this.state = 1489;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === vbParser.XMLNotSingleQuote || _la === vbParser.AMPERSAND) {
                        this.state = 1486;
                        this.xMLAttributeSingleQuoteValueCharacter();
                        this.state = 1491;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1492;
                    this.match(vbParser.SINGLE_QUOTE_CHAR);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namespaceDeclaration() {
        let localctx = new NamespaceDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 190, vbParser.RULE_namespaceDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1495;
            this.match(vbParser.NAMESPACE);
            this.state = 1496;
            this.namespaceName();
            this.state = 1497;
            this.statementTerminator();
            this.state = 1501;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (vbParser.CLASS - 31)) | (1 << (vbParser.DELEGATE - 31)) | (1 << (vbParser.ENUM - 31)))) !== 0) || _la === vbParser.FRIEND || _la === vbParser.INTERFACE || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (vbParser.MODULE - 103)) | (1 << (vbParser.MUST_INHERIT - 103)) | (1 << (vbParser.NAMESPACE - 103)) | (1 << (vbParser.NOT_INHERITABLE - 103)) | (1 << (vbParser.PARTIAL - 103)) | (1 << (vbParser.PRIVATE - 103)))) !== 0) || ((((_la - 135)) & ~0x1f) == 0 && ((1 << (_la - 135)) & ((1 << (vbParser.PROTECTED - 135)) | (1 << (vbParser.PUBLIC - 135)) | (1 << (vbParser.SHADOWS - 135)) | (1 << (vbParser.STRUCTURE - 135)))) !== 0) || _la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1498;
                this.namespaceMemberDeclaration();
                this.state = 1503;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1504;
            this.match(vbParser.END);
            this.state = 1505;
            this.match(vbParser.NAMESPACE);
            this.state = 1506;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namespaceName() {
        let localctx = new NamespaceNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 192, vbParser.RULE_namespaceName);
        try {
            this.state = 1513;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 87, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1508;
                    this.relativeNamespaceName();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1509;
                    this.match(vbParser.GLOBAL);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1510;
                    this.match(vbParser.GLOBAL);
                    this.state = 1511;
                    this.match(vbParser.PERIOD);
                    this.state = 1512;
                    this.relativeNamespaceName();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    relativeNamespaceName() {
        let localctx = new RelativeNamespaceNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 194, vbParser.RULE_relativeNamespaceName);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1515;
            this.identifier();
            this.state = 1520;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.PERIOD) {
                this.state = 1516;
                this.match(vbParser.PERIOD);
                this.state = 1517;
                this.identifierOrKeyword();
                this.state = 1522;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namespaceMemberDeclaration() {
        let localctx = new NamespaceMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 196, vbParser.RULE_namespaceMemberDeclaration);
        try {
            this.state = 1525;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.NAMESPACE:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1523;
                    this.namespaceDeclaration();
                    break;
                case vbParser.CLASS:
                case vbParser.DELEGATE:
                case vbParser.ENUM:
                case vbParser.FRIEND:
                case vbParser.INTERFACE:
                case vbParser.MODULE:
                case vbParser.MUST_INHERIT:
                case vbParser.NOT_INHERITABLE:
                case vbParser.PARTIAL:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                case vbParser.SHADOWS:
                case vbParser.STRUCTURE:
                case vbParser.LINE_TERMINATOR:
                case vbParser.LEFT_ARROW:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1524;
                    this.typeDeclaration();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeDeclaration() {
        let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 198, vbParser.RULE_typeDeclaration);
        try {
            this.state = 1529;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 90, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1527;
                    this.moduleDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1528;
                    this.nonModuleDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    nonModuleDeclaration() {
        let localctx = new NonModuleDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 200, vbParser.RULE_nonModuleDeclaration);
        try {
            this.state = 1536;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 91, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1531;
                    this.enumDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1532;
                    this.structureDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1533;
                    this.interfaceDeclaration();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1534;
                    this.classDeclaration();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1535;
                    this.delegateDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeName() {
        let localctx = new TypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 202, vbParser.RULE_typeName);
        try {
            this.state = 1540;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 92, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1538;
                    this.arrayTypeName();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1539;
                    this.nonArrayTypeName(0);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    nonArrayTypeName(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new NonArrayTypeNameContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 204;
        this.enterRecursionRule(localctx, 204, vbParser.RULE_nonArrayTypeName, _p);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1543;
            this.simpleTypeName();
            this._ctx.stop = this._input.LT(-1);
            this.state = 1549;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 93, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    localctx = new NonArrayTypeNameContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_nonArrayTypeName);
                    this.state = 1545;
                    if (!(this.precpred(this._ctx, 1))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1546;
                    this.match(vbParser.QUESTION_MARK);
                }
                this.state = 1551;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 93, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    simpleTypeName() {
        let localctx = new SimpleTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 206, vbParser.RULE_simpleTypeName);
        try {
            this.state = 1554;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.GLOBAL:
                case vbParser.UNDERSCORE:
                case vbParser.LEFT_SQUARE_BRACKET:
                case vbParser.A:
                case vbParser.B:
                case vbParser.C:
                case vbParser.D:
                case vbParser.E:
                case vbParser.F:
                case vbParser.G:
                case vbParser.H:
                case vbParser.I:
                case vbParser.J:
                case vbParser.K:
                case vbParser.L:
                case vbParser.M:
                case vbParser.N:
                case vbParser.O:
                case vbParser.P:
                case vbParser.Q:
                case vbParser.R:
                case vbParser.S:
                case vbParser.T:
                case vbParser.U:
                case vbParser.V:
                case vbParser.W:
                case vbParser.X:
                case vbParser.Y:
                case vbParser.Z:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1552;
                    this.qualifiedTypeName();
                    break;
                case vbParser.BOOLEAN:
                case vbParser.BYTE:
                case vbParser.CHAR:
                case vbParser.DATE:
                case vbParser.DECIMAL:
                case vbParser.DOUBLE:
                case vbParser.INTEGER:
                case vbParser.LONG:
                case vbParser.OBJECT:
                case vbParser.SBYTE:
                case vbParser.SHORT:
                case vbParser.SINGLE:
                case vbParser.STRING:
                case vbParser.UINTEGER:
                case vbParser.ULONG:
                case vbParser.USHORT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1553;
                    this.builtInTypeName();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    qualifiedTypeName() {
        let localctx = new QualifiedTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 208, vbParser.RULE_qualifiedTypeName);
        try {
            this.state = 1586;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.UNDERSCORE:
                case vbParser.LEFT_SQUARE_BRACKET:
                case vbParser.A:
                case vbParser.B:
                case vbParser.C:
                case vbParser.D:
                case vbParser.E:
                case vbParser.F:
                case vbParser.G:
                case vbParser.H:
                case vbParser.I:
                case vbParser.J:
                case vbParser.K:
                case vbParser.L:
                case vbParser.M:
                case vbParser.N:
                case vbParser.O:
                case vbParser.P:
                case vbParser.Q:
                case vbParser.R:
                case vbParser.S:
                case vbParser.T:
                case vbParser.U:
                case vbParser.V:
                case vbParser.W:
                case vbParser.X:
                case vbParser.Y:
                case vbParser.Z:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1556;
                    this.identifier();
                    this.state = 1558;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);
                    if (la_ === 1) {
                        this.state = 1557;
                        this.typeArguments();
                    }
                    this.state = 1567;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 97, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1560;
                            this.match(vbParser.PERIOD);
                            this.state = 1561;
                            this.identifierOrKeyword();
                            this.state = 1563;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
                            if (la_ === 1) {
                                this.state = 1562;
                                this.typeArguments();
                            }
                        }
                        this.state = 1569;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 97, this._ctx);
                    }
                    break;
                case vbParser.GLOBAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1570;
                    this.match(vbParser.GLOBAL);
                    this.state = 1571;
                    this.match(vbParser.PERIOD);
                    this.state = 1572;
                    this.identifierOrKeyword();
                    this.state = 1574;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 98, this._ctx);
                    if (la_ === 1) {
                        this.state = 1573;
                        this.typeArguments();
                    }
                    this.state = 1583;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 100, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1576;
                            this.match(vbParser.PERIOD);
                            this.state = 1577;
                            this.identifierOrKeyword();
                            this.state = 1579;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 99, this._ctx);
                            if (la_ === 1) {
                                this.state = 1578;
                                this.typeArguments();
                            }
                        }
                        this.state = 1585;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 100, this._ctx);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeArguments() {
        let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 210, vbParser.RULE_typeArguments);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1588;
            this.match(vbParser.LEFT_PAREN);
            this.state = 1589;
            this.match(vbParser.OF);
            this.state = 1590;
            this.typeArgumentList();
            this.state = 1591;
            this.match(vbParser.RIGHT_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeArgumentList() {
        let localctx = new TypeArgumentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 212, vbParser.RULE_typeArgumentList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1593;
            this.typeName();
            this.state = 1598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 1594;
                this.match(vbParser.COMMA);
                this.state = 1595;
                this.typeName();
                this.state = 1600;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    builtInTypeName() {
        let localctx = new BuiltInTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 214, vbParser.RULE_builtInTypeName);
        try {
            this.state = 1603;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.OBJECT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1601;
                    this.match(vbParser.OBJECT);
                    break;
                case vbParser.BOOLEAN:
                case vbParser.BYTE:
                case vbParser.CHAR:
                case vbParser.DATE:
                case vbParser.DECIMAL:
                case vbParser.DOUBLE:
                case vbParser.INTEGER:
                case vbParser.LONG:
                case vbParser.SBYTE:
                case vbParser.SHORT:
                case vbParser.SINGLE:
                case vbParser.STRING:
                case vbParser.UINTEGER:
                case vbParser.ULONG:
                case vbParser.USHORT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1602;
                    this.primitiveTypeName();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeModifier() {
        let localctx = new TypeModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 216, vbParser.RULE_typeModifier);
        try {
            this.state = 1607;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1605;
                    this.accessModifier();
                    break;
                case vbParser.SHADOWS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1606;
                    this.match(vbParser.SHADOWS);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifierModifiers() {
        let localctx = new IdentifierModifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 218, vbParser.RULE_identifierModifiers);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.QUESTION_MARK) {
                this.state = 1609;
                this.nullableNameModifier();
            }
            this.state = 1613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 1612;
                this.arrayNameModifier();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    nullableNameModifier() {
        let localctx = new NullableNameModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 220, vbParser.RULE_nullableNameModifier);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1615;
            this.match(vbParser.QUESTION_MARK);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeImplementsClause() {
        let localctx = new TypeImplementsClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 222, vbParser.RULE_typeImplementsClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1617;
            this.match(vbParser.IMPLEMENTS);
            this.state = 1618;
            this.typeImplements();
            this.state = 1619;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeImplements() {
        let localctx = new TypeImplementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 224, vbParser.RULE_typeImplements);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1621;
            this.nonArrayTypeName(0);
            this.state = 1626;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 1622;
                this.match(vbParser.COMMA);
                this.state = 1623;
                this.nonArrayTypeName(0);
                this.state = 1628;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    primitiveTypeName() {
        let localctx = new PrimitiveTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 226, vbParser.RULE_primitiveTypeName);
        try {
            this.state = 1634;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.BYTE:
                case vbParser.DECIMAL:
                case vbParser.DOUBLE:
                case vbParser.INTEGER:
                case vbParser.LONG:
                case vbParser.SBYTE:
                case vbParser.SHORT:
                case vbParser.SINGLE:
                case vbParser.UINTEGER:
                case vbParser.ULONG:
                case vbParser.USHORT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1629;
                    this.numericTypeName();
                    break;
                case vbParser.BOOLEAN:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1630;
                    this.match(vbParser.BOOLEAN);
                    break;
                case vbParser.DATE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1631;
                    this.match(vbParser.DATE);
                    break;
                case vbParser.CHAR:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1632;
                    this.match(vbParser.CHAR);
                    break;
                case vbParser.STRING:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1633;
                    this.match(vbParser.STRING);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    numericTypeName() {
        let localctx = new NumericTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 228, vbParser.RULE_numericTypeName);
        try {
            this.state = 1639;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.BYTE:
                case vbParser.INTEGER:
                case vbParser.LONG:
                case vbParser.SBYTE:
                case vbParser.SHORT:
                case vbParser.UINTEGER:
                case vbParser.ULONG:
                case vbParser.USHORT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1636;
                    this.integralTypeName();
                    break;
                case vbParser.DOUBLE:
                case vbParser.SINGLE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1637;
                    this.floatingPointTypeName();
                    break;
                case vbParser.DECIMAL:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1638;
                    this.match(vbParser.DECIMAL);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    integralTypeName() {
        let localctx = new IntegralTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 230, vbParser.RULE_integralTypeName);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1641;
            _la = this._input.LA(1);
            if (!(_la === vbParser.BYTE || _la === vbParser.INTEGER || _la === vbParser.LONG || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    floatingPointTypeName() {
        let localctx = new FloatingPointTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 232, vbParser.RULE_floatingPointTypeName);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1643;
            _la = this._input.LA(1);
            if (!(_la === vbParser.DOUBLE || _la === vbParser.SINGLE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumDeclaration() {
        let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 234, vbParser.RULE_enumDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1646;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1645;
                this.attributes();
            }
            this.state = 1651;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)) | (1 << (vbParser.SHADOWS - 133)))) !== 0)) {
                this.state = 1648;
                this.typeModifier();
                this.state = 1653;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1654;
            this.match(vbParser.ENUM);
            this.state = 1655;
            this.identifier();
            this.state = 1658;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 1656;
                this.match(vbParser.AS);
                this.state = 1657;
                this.nonArrayTypeName(0);
            }
            this.state = 1660;
            this.statementTerminator();
            this.state = 1662;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1661;
                this.enumMemberDeclaration();
                this.state = 1664;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0));
            this.state = 1666;
            this.match(vbParser.END);
            this.state = 1667;
            this.match(vbParser.ENUM);
            this.state = 1668;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    enumMemberDeclaration() {
        let localctx = new EnumMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 236, vbParser.RULE_enumMemberDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1671;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1670;
                this.attributes();
            }
            this.state = 1673;
            this.identifier();
            this.state = 1676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.EQUALS) {
                this.state = 1674;
                this.match(vbParser.EQUALS);
                this.state = 1675;
                this.constantExpression();
            }
            this.state = 1678;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classDeclaration() {
        let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 238, vbParser.RULE_classDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1681;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1680;
                this.attributes();
            }
            this.state = 1686;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (vbParser.MUST_INHERIT - 104)) | (1 << (vbParser.NOT_INHERITABLE - 104)) | (1 << (vbParser.PARTIAL - 104)) | (1 << (vbParser.PRIVATE - 104)) | (1 << (vbParser.PROTECTED - 104)))) !== 0) || _la === vbParser.PUBLIC || _la === vbParser.SHADOWS) {
                this.state = 1683;
                this.classModifier();
                this.state = 1688;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1689;
            this.match(vbParser.CLASS);
            this.state = 1690;
            this.identifier();
            this.state = 1692;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 1691;
                this.typeParameterList();
            }
            this.state = 1694;
            this.statementTerminator();
            this.state = 1696;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.INHERITS) {
                this.state = 1695;
                this.classBase();
            }
            this.state = 1701;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.IMPLEMENTS) {
                this.state = 1698;
                this.typeImplementsClause();
                this.state = 1703;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1707;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (vbParser.ASYNC - 11)) | (1 << (vbParser.CLASS - 11)) | (1 << (vbParser.CONST - 11)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (vbParser.CUSTOM - 45)) | (1 << (vbParser.DECLARE - 45)) | (1 << (vbParser.DEFAULT - 45)) | (1 << (vbParser.DELEGATE - 45)) | (1 << (vbParser.DIM - 45)) | (1 << (vbParser.ENUM - 45)) | (1 << (vbParser.EVENT - 45)) | (1 << (vbParser.FRIEND - 45)) | (1 << (vbParser.FUNCTION - 45)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (vbParser.INTERFACE - 86)) | (1 << (vbParser.ITERATOR - 86)) | (1 << (vbParser.MUST_INHERIT - 86)) | (1 << (vbParser.MUSTOVERRIDE - 86)) | (1 << (vbParser.NARROWING - 86)) | (1 << (vbParser.NOT_INHERITABLE - 86)) | (1 << (vbParser.NOTOVERRIDABLE - 86)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (vbParser.OPERATORKEYWORD - 120)) | (1 << (vbParser.OVERLOADS - 120)) | (1 << (vbParser.OVERRIDABLE - 120)) | (1 << (vbParser.OVERRIDES - 120)) | (1 << (vbParser.PARTIAL - 120)) | (1 << (vbParser.PRIVATE - 120)) | (1 << (vbParser.PROPERTY - 120)) | (1 << (vbParser.PROTECTED - 120)) | (1 << (vbParser.PUBLIC - 120)) | (1 << (vbParser.READONLY - 120)) | (1 << (vbParser.SHADOWS - 120)) | (1 << (vbParser.SHARED - 120)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (vbParser.STRUCTURE - 158)) | (1 << (vbParser.SUB - 158)) | (1 << (vbParser.WIDENING - 158)) | (1 << (vbParser.WITH_EVENTS - 158)) | (1 << (vbParser.WRITEONLY - 158)))) !== 0) || _la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1704;
                this.classMemberDeclaration();
                this.state = 1709;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1710;
            this.match(vbParser.END);
            this.state = 1711;
            this.match(vbParser.CLASS);
            this.state = 1712;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classModifier() {
        let localctx = new ClassModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 240, vbParser.RULE_classModifier);
        try {
            this.state = 1718;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                case vbParser.SHADOWS:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1714;
                    this.typeModifier();
                    break;
                case vbParser.MUST_INHERIT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1715;
                    this.match(vbParser.MUST_INHERIT);
                    break;
                case vbParser.NOT_INHERITABLE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1716;
                    this.match(vbParser.NOT_INHERITABLE);
                    break;
                case vbParser.PARTIAL:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1717;
                    this.match(vbParser.PARTIAL);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classBase() {
        let localctx = new ClassBaseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 242, vbParser.RULE_classBase);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1720;
            this.match(vbParser.INHERITS);
            this.state = 1721;
            this.nonArrayTypeName(0);
            this.state = 1722;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classMemberDeclaration() {
        let localctx = new ClassMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 244, vbParser.RULE_classMemberDeclaration);
        try {
            this.state = 1732;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 123, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1724;
                    this.nonModuleDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1725;
                    this.eventMemberDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1726;
                    this.variableMemberDeclaration();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1727;
                    this.constantMemberDeclaration();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1728;
                    this.methodMemberDeclaration();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 1729;
                    this.propertyMemberDeclaration();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 1730;
                    this.constructorMemberDeclaration();
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 1731;
                    this.operatorDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    structureDeclaration() {
        let localctx = new StructureDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 246, vbParser.RULE_structureDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1734;
                this.attributes();
            }
            this.state = 1740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (vbParser.PARTIAL - 131)) | (1 << (vbParser.PRIVATE - 131)) | (1 << (vbParser.PROTECTED - 131)) | (1 << (vbParser.PUBLIC - 131)) | (1 << (vbParser.SHADOWS - 131)))) !== 0)) {
                this.state = 1737;
                this.structureModifier();
                this.state = 1742;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1743;
            this.match(vbParser.STRUCTURE);
            this.state = 1744;
            this.identifier();
            this.state = 1746;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 1745;
                this.typeParameterList();
            }
            this.state = 1748;
            this.statementTerminator();
            this.state = 1752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.IMPLEMENTS) {
                this.state = 1749;
                this.typeImplementsClause();
                this.state = 1754;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (vbParser.ASYNC - 11)) | (1 << (vbParser.CLASS - 11)) | (1 << (vbParser.CONST - 11)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (vbParser.CUSTOM - 45)) | (1 << (vbParser.DECLARE - 45)) | (1 << (vbParser.DEFAULT - 45)) | (1 << (vbParser.DELEGATE - 45)) | (1 << (vbParser.DIM - 45)) | (1 << (vbParser.ENUM - 45)) | (1 << (vbParser.EVENT - 45)) | (1 << (vbParser.FRIEND - 45)) | (1 << (vbParser.FUNCTION - 45)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (vbParser.INTERFACE - 86)) | (1 << (vbParser.ITERATOR - 86)) | (1 << (vbParser.MUST_INHERIT - 86)) | (1 << (vbParser.MUSTOVERRIDE - 86)) | (1 << (vbParser.NARROWING - 86)) | (1 << (vbParser.NOT_INHERITABLE - 86)) | (1 << (vbParser.NOTOVERRIDABLE - 86)))) !== 0) || ((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (vbParser.OPERATORKEYWORD - 120)) | (1 << (vbParser.OVERLOADS - 120)) | (1 << (vbParser.OVERRIDABLE - 120)) | (1 << (vbParser.OVERRIDES - 120)) | (1 << (vbParser.PARTIAL - 120)) | (1 << (vbParser.PRIVATE - 120)) | (1 << (vbParser.PROPERTY - 120)) | (1 << (vbParser.PROTECTED - 120)) | (1 << (vbParser.PUBLIC - 120)) | (1 << (vbParser.READONLY - 120)) | (1 << (vbParser.SHADOWS - 120)) | (1 << (vbParser.SHARED - 120)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (vbParser.STRUCTURE - 158)) | (1 << (vbParser.SUB - 158)) | (1 << (vbParser.WIDENING - 158)) | (1 << (vbParser.WITH_EVENTS - 158)) | (1 << (vbParser.WRITEONLY - 158)))) !== 0) || _la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1755;
                this.structMemberDeclaration();
                this.state = 1760;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1761;
            this.match(vbParser.END);
            this.state = 1762;
            this.match(vbParser.STRUCTURE);
            this.state = 1763;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    structureModifier() {
        let localctx = new StructureModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 248, vbParser.RULE_structureModifier);
        try {
            this.state = 1767;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                case vbParser.SHADOWS:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1765;
                    this.typeModifier();
                    break;
                case vbParser.PARTIAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1766;
                    this.match(vbParser.PARTIAL);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    structMemberDeclaration() {
        let localctx = new StructMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 250, vbParser.RULE_structMemberDeclaration);
        try {
            this.state = 1777;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 130, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1769;
                    this.nonModuleDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1770;
                    this.variableMemberDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1771;
                    this.constantMemberDeclaration();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1772;
                    this.eventMemberDeclaration();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1773;
                    this.methodMemberDeclaration();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 1774;
                    this.propertyMemberDeclaration();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 1775;
                    this.constructorMemberDeclaration();
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 1776;
                    this.operatorDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    moduleDeclaration() {
        let localctx = new ModuleDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 252, vbParser.RULE_moduleDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1779;
                this.attributes();
            }
            this.state = 1785;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)) | (1 << (vbParser.SHADOWS - 133)))) !== 0)) {
                this.state = 1782;
                this.typeModifier();
                this.state = 1787;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1788;
            this.match(vbParser.MODULE);
            this.state = 1789;
            this.identifier();
            this.state = 1790;
            this.statementTerminator();
            this.state = 1794;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (vbParser.ASYNC - 11)) | (1 << (vbParser.CLASS - 11)) | (1 << (vbParser.CONST - 11)))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (vbParser.CUSTOM - 45)) | (1 << (vbParser.DECLARE - 45)) | (1 << (vbParser.DEFAULT - 45)) | (1 << (vbParser.DELEGATE - 45)) | (1 << (vbParser.DIM - 45)) | (1 << (vbParser.ENUM - 45)) | (1 << (vbParser.EVENT - 45)) | (1 << (vbParser.FRIEND - 45)) | (1 << (vbParser.FUNCTION - 45)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (vbParser.INTERFACE - 86)) | (1 << (vbParser.ITERATOR - 86)) | (1 << (vbParser.MUST_INHERIT - 86)) | (1 << (vbParser.MUSTOVERRIDE - 86)) | (1 << (vbParser.NOT_INHERITABLE - 86)) | (1 << (vbParser.NOTOVERRIDABLE - 86)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (vbParser.OVERLOADS - 127)) | (1 << (vbParser.OVERRIDABLE - 127)) | (1 << (vbParser.OVERRIDES - 127)) | (1 << (vbParser.PARTIAL - 127)) | (1 << (vbParser.PRIVATE - 127)) | (1 << (vbParser.PROPERTY - 127)) | (1 << (vbParser.PROTECTED - 127)) | (1 << (vbParser.PUBLIC - 127)) | (1 << (vbParser.READONLY - 127)) | (1 << (vbParser.SHADOWS - 127)) | (1 << (vbParser.SHARED - 127)) | (1 << (vbParser.STRUCTURE - 127)))) !== 0) || ((((_la - 159)) & ~0x1f) == 0 && ((1 << (_la - 159)) & ((1 << (vbParser.SUB - 159)) | (1 << (vbParser.WITH_EVENTS - 159)) | (1 << (vbParser.WRITEONLY - 159)))) !== 0) || _la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1791;
                this.moduleMemberDeclaration();
                this.state = 1796;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1797;
            this.match(vbParser.END);
            this.state = 1798;
            this.match(vbParser.MODULE);
            this.state = 1799;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    moduleMemberDeclaration() {
        let localctx = new ModuleMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 254, vbParser.RULE_moduleMemberDeclaration);
        try {
            this.state = 1808;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 134, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1801;
                    this.nonModuleDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1802;
                    this.variableMemberDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1803;
                    this.constantMemberDeclaration();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1804;
                    this.eventMemberDeclaration();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1805;
                    this.methodMemberDeclaration();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 1806;
                    this.propertyMemberDeclaration();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 1807;
                    this.constructorMemberDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceDeclaration() {
        let localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 256, vbParser.RULE_interfaceDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1811;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1810;
                this.attributes();
            }
            this.state = 1816;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)) | (1 << (vbParser.SHADOWS - 133)))) !== 0)) {
                this.state = 1813;
                this.typeModifier();
                this.state = 1818;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1819;
            this.match(vbParser.INTERFACE);
            this.state = 1820;
            this.identifier();
            this.state = 1822;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 1821;
                this.typeParameterList();
            }
            this.state = 1824;
            this.statementTerminator();
            this.state = 1828;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.INHERITS) {
                this.state = 1825;
                this.interfaceBase();
                this.state = 1830;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1834;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (vbParser.CLASS - 31)) | (1 << (vbParser.DEFAULT - 31)) | (1 << (vbParser.DELEGATE - 31)) | (1 << (vbParser.ENUM - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (vbParser.EVENT - 65)) | (1 << (vbParser.FRIEND - 65)) | (1 << (vbParser.FUNCTION - 65)) | (1 << (vbParser.INTERFACE - 65)))) !== 0) || ((((_la - 104)) & ~0x1f) == 0 && ((1 << (_la - 104)) & ((1 << (vbParser.MUST_INHERIT - 104)) | (1 << (vbParser.NOT_INHERITABLE - 104)) | (1 << (vbParser.OVERLOADS - 104)) | (1 << (vbParser.PARTIAL - 104)) | (1 << (vbParser.PRIVATE - 104)) | (1 << (vbParser.PROPERTY - 104)) | (1 << (vbParser.PROTECTED - 104)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (vbParser.PUBLIC - 136)) | (1 << (vbParser.READONLY - 136)) | (1 << (vbParser.SHADOWS - 136)) | (1 << (vbParser.STRUCTURE - 136)) | (1 << (vbParser.SUB - 136)))) !== 0) || _la === vbParser.WRITEONLY || _la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1831;
                this.interfaceMemberDeclaration();
                this.state = 1836;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1837;
            this.match(vbParser.END);
            this.state = 1838;
            this.match(vbParser.INTERFACE);
            this.state = 1839;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceBase() {
        let localctx = new InterfaceBaseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 258, vbParser.RULE_interfaceBase);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1841;
            this.match(vbParser.INHERITS);
            this.state = 1842;
            this.interfaceBases();
            this.state = 1843;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceBases() {
        let localctx = new InterfaceBasesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 260, vbParser.RULE_interfaceBases);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1845;
            this.nonArrayTypeName(0);
            this.state = 1850;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 1846;
                this.match(vbParser.COMMA);
                this.state = 1847;
                this.nonArrayTypeName(0);
                this.state = 1852;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceMemberDeclaration() {
        let localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 262, vbParser.RULE_interfaceMemberDeclaration);
        try {
            this.state = 1857;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 141, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1853;
                    this.nonModuleDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1854;
                    this.interfaceEventMemberDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1855;
                    this.interfaceMethodMemberDeclaration();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1856;
                    this.interfacePropertyMemberDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayTypeName() {
        let localctx = new ArrayTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 264, vbParser.RULE_arrayTypeName);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1859;
            this.nonArrayTypeName(0);
            this.state = 1860;
            this.arrayTypeModifiers();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayTypeModifiers() {
        let localctx = new ArrayTypeModifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 266, vbParser.RULE_arrayTypeModifiers);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1863;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 1862;
                        this.arrayTypeModifier();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 1865;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 142, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayTypeModifier() {
        let localctx = new ArrayTypeModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 268, vbParser.RULE_arrayTypeModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1867;
            this.match(vbParser.LEFT_PAREN);
            this.state = 1869;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.COMMA) {
                this.state = 1868;
                this.rankList();
            }
            this.state = 1871;
            this.match(vbParser.RIGHT_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    rankList() {
        let localctx = new RankListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 270, vbParser.RULE_rankList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1874;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1873;
                this.match(vbParser.COMMA);
                this.state = 1876;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === vbParser.COMMA);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayNameModifier() {
        let localctx = new ArrayNameModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 272, vbParser.RULE_arrayNameModifier);
        try {
            this.state = 1880;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 145, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1878;
                    this.arrayTypeModifiers();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1879;
                    this.arraySizeInitializationModifier();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    delegateDeclaration() {
        let localctx = new DelegateDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 274, vbParser.RULE_delegateDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1883;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1882;
                this.attributes();
            }
            this.state = 1888;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)) | (1 << (vbParser.SHADOWS - 133)))) !== 0)) {
                this.state = 1885;
                this.typeModifier();
                this.state = 1890;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1891;
            this.match(vbParser.DELEGATE);
            this.state = 1892;
            this.methodSignature();
            this.state = 1893;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    methodSignature() {
        let localctx = new MethodSignatureContext(this, this._ctx, this.state);
        this.enterRule(localctx, 276, vbParser.RULE_methodSignature);
        try {
            this.state = 1897;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.SUB:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1895;
                    this.subSignature();
                    break;
                case vbParser.FUNCTION:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1896;
                    this.functionSignature();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    implementsClause() {
        let localctx = new ImplementsClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 278, vbParser.RULE_implementsClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1899;
            this.match(vbParser.IMPLEMENTS);
            this.state = 1900;
            this.implementsList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    implementsList() {
        let localctx = new ImplementsListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 280, vbParser.RULE_implementsList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1902;
            this.interfaceMemberSpecifier();
            this.state = 1907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 1903;
                this.match(vbParser.COMMA);
                this.state = 1904;
                this.interfaceMemberSpecifier();
                this.state = 1909;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceMemberSpecifier() {
        let localctx = new InterfaceMemberSpecifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 282, vbParser.RULE_interfaceMemberSpecifier);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1910;
            this.nonArrayTypeName(0);
            this.state = 1911;
            this.match(vbParser.PERIOD);
            this.state = 1912;
            this.identifierOrKeyword();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    methodMemberDeclaration() {
        let localctx = new MethodMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 284, vbParser.RULE_methodMemberDeclaration);
        try {
            this.state = 1916;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 150, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1914;
                    this.methodDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1915;
                    this.externalMethodDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceMethodMemberDeclaration() {
        let localctx = new InterfaceMethodMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 286, vbParser.RULE_interfaceMethodMemberDeclaration);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1918;
            this.interfaceMethodDeclaration();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    methodDeclaration() {
        let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 288, vbParser.RULE_methodDeclaration);
        try {
            this.state = 1924;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 151, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1920;
                    this.subDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1921;
                    this.mustOverrideSubDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1922;
                    this.functionDeclaration();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1923;
                    this.mustOverrideFunctionDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceMethodDeclaration() {
        let localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 290, vbParser.RULE_interfaceMethodDeclaration);
        try {
            this.state = 1928;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 152, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1926;
                    this.interfaceSubDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1927;
                    this.interfaceFunctionDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    subSignature() {
        let localctx = new SubSignatureContext(this, this._ctx, this.state);
        this.enterRule(localctx, 292, vbParser.RULE_subSignature);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1930;
            this.match(vbParser.SUB);
            this.state = 1931;
            this.identifier();
            this.state = 1933;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 153, this._ctx);
            if (la_ === 1) {
                this.state = 1932;
                this.typeParameterList();
            }
            this.state = 1940;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 1935;
                this.match(vbParser.LEFT_PAREN);
                this.state = 1937;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                    this.state = 1936;
                    this.parameterList();
                }
                this.state = 1939;
                this.match(vbParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionSignature() {
        let localctx = new FunctionSignatureContext(this, this._ctx, this.state);
        this.enterRule(localctx, 294, vbParser.RULE_functionSignature);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1942;
            this.match(vbParser.FUNCTION);
            this.state = 1943;
            this.identifier();
            this.state = 1945;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);
            if (la_ === 1) {
                this.state = 1944;
                this.typeParameterList();
            }
            this.state = 1952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 1947;
                this.match(vbParser.LEFT_PAREN);
                this.state = 1949;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                    this.state = 1948;
                    this.parameterList();
                }
                this.state = 1951;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 1959;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 1954;
                this.match(vbParser.AS);
                this.state = 1956;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                    this.state = 1955;
                    this.attributes();
                }
                this.state = 1958;
                this.typeName();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    subDeclaration() {
        let localctx = new SubDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 296, vbParser.RULE_subDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1962;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1961;
                this.attributes();
            }
            this.state = 1967;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.ASYNC || _la === vbParser.FRIEND || _la === vbParser.ITERATOR || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (vbParser.NOTOVERRIDABLE - 115)) | (1 << (vbParser.OVERLOADS - 115)) | (1 << (vbParser.OVERRIDABLE - 115)) | (1 << (vbParser.OVERRIDES - 115)) | (1 << (vbParser.PARTIAL - 115)) | (1 << (vbParser.PRIVATE - 115)) | (1 << (vbParser.PROTECTED - 115)) | (1 << (vbParser.PUBLIC - 115)))) !== 0) || _la === vbParser.SHADOWS || _la === vbParser.SHARED) {
                this.state = 1964;
                this.procedureModifier();
                this.state = 1969;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1970;
            this.subSignature();
            this.state = 1972;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.HANDLES || _la === vbParser.IMPLEMENTS) {
                this.state = 1971;
                this.handlesOrImplements();
            }
            this.state = 1974;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 1975;
            this.block();
            this.state = 1976;
            this.match(vbParser.END);
            this.state = 1977;
            this.match(vbParser.SUB);
            this.state = 1978;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    mustOverrideSubDeclaration() {
        let localctx = new MustOverrideSubDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 298, vbParser.RULE_mustOverrideSubDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1981;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1980;
                this.attributes();
            }
            this.state = 1984;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1983;
                this.mustOverrideProcedureModifier();
                this.state = 1986;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === vbParser.ASYNC || _la === vbParser.FRIEND || _la === vbParser.ITERATOR || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (vbParser.MUSTOVERRIDE - 105)) | (1 << (vbParser.NOTOVERRIDABLE - 105)) | (1 << (vbParser.OVERLOADS - 105)) | (1 << (vbParser.OVERRIDABLE - 105)) | (1 << (vbParser.OVERRIDES - 105)) | (1 << (vbParser.PARTIAL - 105)) | (1 << (vbParser.PRIVATE - 105)) | (1 << (vbParser.PROTECTED - 105)) | (1 << (vbParser.PUBLIC - 105)))) !== 0) || _la === vbParser.SHADOWS || _la === vbParser.SHARED);
            this.state = 1988;
            this.subSignature();
            this.state = 1990;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.HANDLES || _la === vbParser.IMPLEMENTS) {
                this.state = 1989;
                this.handlesOrImplements();
            }
            this.state = 1992;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceSubDeclaration() {
        let localctx = new InterfaceSubDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 300, vbParser.RULE_interfaceSubDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1995;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 1994;
                this.attributes();
            }
            this.state = 2000;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.OVERLOADS || _la === vbParser.SHADOWS) {
                this.state = 1997;
                this.interfaceProcedureModifier();
                this.state = 2002;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2003;
            this.subSignature();
            this.state = 2004;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionDeclaration() {
        let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 302, vbParser.RULE_functionDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2007;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2006;
                this.attributes();
            }
            this.state = 2012;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.ASYNC || _la === vbParser.FRIEND || _la === vbParser.ITERATOR || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (vbParser.NOTOVERRIDABLE - 115)) | (1 << (vbParser.OVERLOADS - 115)) | (1 << (vbParser.OVERRIDABLE - 115)) | (1 << (vbParser.OVERRIDES - 115)) | (1 << (vbParser.PARTIAL - 115)) | (1 << (vbParser.PRIVATE - 115)) | (1 << (vbParser.PROTECTED - 115)) | (1 << (vbParser.PUBLIC - 115)))) !== 0) || _la === vbParser.SHADOWS || _la === vbParser.SHARED) {
                this.state = 2009;
                this.procedureModifier();
                this.state = 2014;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2015;
            this.functionSignature();
            this.state = 2017;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.HANDLES || _la === vbParser.IMPLEMENTS) {
                this.state = 2016;
                this.handlesOrImplements();
            }
            this.state = 2019;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 2020;
            this.block();
            this.state = 2021;
            this.match(vbParser.END);
            this.state = 2022;
            this.match(vbParser.FUNCTION);
            this.state = 2023;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    mustOverrideFunctionDeclaration() {
        let localctx = new MustOverrideFunctionDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 304, vbParser.RULE_mustOverrideFunctionDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2026;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2025;
                this.attributes();
            }
            this.state = 2029;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2028;
                this.mustOverrideProcedureModifier();
                this.state = 2031;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === vbParser.ASYNC || _la === vbParser.FRIEND || _la === vbParser.ITERATOR || ((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (vbParser.MUSTOVERRIDE - 105)) | (1 << (vbParser.NOTOVERRIDABLE - 105)) | (1 << (vbParser.OVERLOADS - 105)) | (1 << (vbParser.OVERRIDABLE - 105)) | (1 << (vbParser.OVERRIDES - 105)) | (1 << (vbParser.PARTIAL - 105)) | (1 << (vbParser.PRIVATE - 105)) | (1 << (vbParser.PROTECTED - 105)) | (1 << (vbParser.PUBLIC - 105)))) !== 0) || _la === vbParser.SHADOWS || _la === vbParser.SHARED);
            this.state = 2033;
            this.functionSignature();
            this.state = 2035;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.HANDLES || _la === vbParser.IMPLEMENTS) {
                this.state = 2034;
                this.handlesOrImplements();
            }
            this.state = 2037;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceFunctionDeclaration() {
        let localctx = new InterfaceFunctionDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 306, vbParser.RULE_interfaceFunctionDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2039;
                this.attributes();
            }
            this.state = 2045;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.OVERLOADS || _la === vbParser.SHADOWS) {
                this.state = 2042;
                this.interfaceProcedureModifier();
                this.state = 2047;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2048;
            this.functionSignature();
            this.state = 2049;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    procedureModifier() {
        let localctx = new ProcedureModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 308, vbParser.RULE_procedureModifier);
        try {
            this.state = 2061;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2051;
                    this.accessModifier();
                    break;
                case vbParser.SHADOWS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2052;
                    this.match(vbParser.SHADOWS);
                    break;
                case vbParser.SHARED:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2053;
                    this.match(vbParser.SHARED);
                    break;
                case vbParser.OVERRIDABLE:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2054;
                    this.match(vbParser.OVERRIDABLE);
                    break;
                case vbParser.NOTOVERRIDABLE:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2055;
                    this.match(vbParser.NOTOVERRIDABLE);
                    break;
                case vbParser.OVERRIDES:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 2056;
                    this.match(vbParser.OVERRIDES);
                    break;
                case vbParser.OVERLOADS:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 2057;
                    this.match(vbParser.OVERLOADS);
                    break;
                case vbParser.PARTIAL:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 2058;
                    this.match(vbParser.PARTIAL);
                    break;
                case vbParser.ITERATOR:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 2059;
                    this.match(vbParser.ITERATOR);
                    break;
                case vbParser.ASYNC:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 2060;
                    this.match(vbParser.ASYNC);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    mustOverrideProcedureModifier() {
        let localctx = new MustOverrideProcedureModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 310, vbParser.RULE_mustOverrideProcedureModifier);
        try {
            this.state = 2065;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.ASYNC:
                case vbParser.FRIEND:
                case vbParser.ITERATOR:
                case vbParser.NOTOVERRIDABLE:
                case vbParser.OVERLOADS:
                case vbParser.OVERRIDABLE:
                case vbParser.OVERRIDES:
                case vbParser.PARTIAL:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                case vbParser.SHADOWS:
                case vbParser.SHARED:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2063;
                    this.procedureModifier();
                    break;
                case vbParser.MUSTOVERRIDE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2064;
                    this.match(vbParser.MUSTOVERRIDE);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceProcedureModifier() {
        let localctx = new InterfaceProcedureModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 312, vbParser.RULE_interfaceProcedureModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2067;
            _la = this._input.LA(1);
            if (!(_la === vbParser.OVERLOADS || _la === vbParser.SHADOWS)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    handlesOrImplements() {
        let localctx = new HandlesOrImplementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 314, vbParser.RULE_handlesOrImplements);
        try {
            this.state = 2071;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.HANDLES:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2069;
                    this.handlesClause();
                    break;
                case vbParser.IMPLEMENTS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2070;
                    this.implementsClause();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    externalMethodDeclaration() {
        let localctx = new ExternalMethodDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 316, vbParser.RULE_externalMethodDeclaration);
        try {
            this.state = 2075;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 180, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2073;
                    this.externalSubDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2074;
                    this.externalFunctionDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    externalSubDeclaration() {
        let localctx = new ExternalSubDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 318, vbParser.RULE_externalSubDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2078;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2077;
                this.attributes();
            }
            this.state = 2083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (vbParser.OVERLOADS - 127)) | (1 << (vbParser.PRIVATE - 127)) | (1 << (vbParser.PROTECTED - 127)) | (1 << (vbParser.PUBLIC - 127)) | (1 << (vbParser.SHADOWS - 127)))) !== 0)) {
                this.state = 2080;
                this.externalMethodModifier();
                this.state = 2085;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2086;
            this.match(vbParser.DECLARE);
            this.state = 2088;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.ANSI || _la === vbParser.AUTO || _la === vbParser.UNICODE) {
                this.state = 2087;
                this.charsetModifier();
            }
            this.state = 2090;
            this.match(vbParser.SUB);
            this.state = 2091;
            this.identifier();
            this.state = 2092;
            this.libraryClause();
            this.state = 2094;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.ALIAS) {
                this.state = 2093;
                this.aliasClause();
            }
            this.state = 2101;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 2096;
                this.match(vbParser.LEFT_PAREN);
                this.state = 2098;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                    this.state = 2097;
                    this.parameterList();
                }
                this.state = 2100;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 2103;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    externalFunctionDeclaration() {
        let localctx = new ExternalFunctionDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 320, vbParser.RULE_externalFunctionDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2106;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2105;
                this.attributes();
            }
            this.state = 2111;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (vbParser.OVERLOADS - 127)) | (1 << (vbParser.PRIVATE - 127)) | (1 << (vbParser.PROTECTED - 127)) | (1 << (vbParser.PUBLIC - 127)) | (1 << (vbParser.SHADOWS - 127)))) !== 0)) {
                this.state = 2108;
                this.externalMethodModifier();
                this.state = 2113;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2114;
            this.match(vbParser.DECLARE);
            this.state = 2116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.ANSI || _la === vbParser.AUTO || _la === vbParser.UNICODE) {
                this.state = 2115;
                this.charsetModifier();
            }
            this.state = 2118;
            this.match(vbParser.FUNCTION);
            this.state = 2119;
            this.identifier();
            this.state = 2120;
            this.libraryClause();
            this.state = 2122;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.ALIAS) {
                this.state = 2121;
                this.aliasClause();
            }
            this.state = 2129;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 2124;
                this.match(vbParser.LEFT_PAREN);
                this.state = 2126;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                    this.state = 2125;
                    this.parameterList();
                }
                this.state = 2128;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 2136;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 2131;
                this.match(vbParser.AS);
                this.state = 2133;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                    this.state = 2132;
                    this.attributes();
                }
                this.state = 2135;
                this.typeName();
            }
            this.state = 2138;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    externalMethodModifier() {
        let localctx = new ExternalMethodModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 322, vbParser.RULE_externalMethodModifier);
        try {
            this.state = 2143;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2140;
                    this.accessModifier();
                    break;
                case vbParser.SHADOWS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2141;
                    this.match(vbParser.SHADOWS);
                    break;
                case vbParser.OVERLOADS:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2142;
                    this.match(vbParser.OVERLOADS);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    charsetModifier() {
        let localctx = new CharsetModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 324, vbParser.RULE_charsetModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2145;
            _la = this._input.LA(1);
            if (!(_la === vbParser.ANSI || _la === vbParser.AUTO || _la === vbParser.UNICODE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    libraryClause() {
        let localctx = new LibraryClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 326, vbParser.RULE_libraryClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2147;
            this.match(vbParser.LIB);
            this.state = 2148;
            this.stringLiteral();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    aliasClause() {
        let localctx = new AliasClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 328, vbParser.RULE_aliasClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2150;
            this.match(vbParser.ALIAS);
            this.state = 2151;
            this.stringLiteral();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterList() {
        let localctx = new ParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 330, vbParser.RULE_parameterList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2153;
            this.parameter();
            this.state = 2158;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 2154;
                this.match(vbParser.COMMA);
                this.state = 2155;
                this.parameter();
                this.state = 2160;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameter() {
        let localctx = new ParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 332, vbParser.RULE_parameter);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2162;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2161;
                this.attributes();
            }
            this.state = 2167;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY) {
                this.state = 2164;
                this.parameterModifier();
                this.state = 2169;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2170;
            this.parameterIdentifier();
            this.state = 2173;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 2171;
                this.match(vbParser.AS);
                this.state = 2172;
                this.typeName();
            }
            this.state = 2177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.EQUALS) {
                this.state = 2175;
                this.match(vbParser.EQUALS);
                this.state = 2176;
                this.constantExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterModifier() {
        let localctx = new ParameterModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 334, vbParser.RULE_parameterModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2179;
            _la = this._input.LA(1);
            if (!(_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parameterIdentifier() {
        let localctx = new ParameterIdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 336, vbParser.RULE_parameterIdentifier);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2181;
            this.identifier();
            this.state = 2182;
            this.identifierModifiers();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    handlesClause() {
        let localctx = new HandlesClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 338, vbParser.RULE_handlesClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2184;
            this.match(vbParser.HANDLES);
            this.state = 2185;
            this.eventHandlesList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    eventHandlesList() {
        let localctx = new EventHandlesListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 340, vbParser.RULE_eventHandlesList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2187;
            this.eventMemberSpecifier();
            this.state = 2192;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 2188;
                this.match(vbParser.COMMA);
                this.state = 2189;
                this.eventMemberSpecifier();
                this.state = 2194;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    eventMemberSpecifier() {
        let localctx = new EventMemberSpecifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 342, vbParser.RULE_eventMemberSpecifier);
        try {
            this.state = 2208;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.UNDERSCORE:
                case vbParser.LEFT_SQUARE_BRACKET:
                case vbParser.A:
                case vbParser.B:
                case vbParser.C:
                case vbParser.D:
                case vbParser.E:
                case vbParser.F:
                case vbParser.G:
                case vbParser.H:
                case vbParser.I:
                case vbParser.J:
                case vbParser.K:
                case vbParser.L:
                case vbParser.M:
                case vbParser.N:
                case vbParser.O:
                case vbParser.P:
                case vbParser.Q:
                case vbParser.R:
                case vbParser.S:
                case vbParser.T:
                case vbParser.U:
                case vbParser.V:
                case vbParser.W:
                case vbParser.X:
                case vbParser.Y:
                case vbParser.Z:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2195;
                    this.identifier();
                    this.state = 2196;
                    this.match(vbParser.PERIOD);
                    this.state = 2197;
                    this.identifierOrKeyword();
                    break;
                case vbParser.MYBASE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2199;
                    this.match(vbParser.MYBASE);
                    this.state = 2200;
                    this.match(vbParser.PERIOD);
                    this.state = 2201;
                    this.identifierOrKeyword();
                    break;
                case vbParser.MYCLASS:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2202;
                    this.match(vbParser.MYCLASS);
                    this.state = 2203;
                    this.match(vbParser.PERIOD);
                    this.state = 2204;
                    this.identifierOrKeyword();
                    break;
                case vbParser.ME:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2205;
                    this.match(vbParser.ME);
                    this.state = 2206;
                    this.match(vbParser.PERIOD);
                    this.state = 2207;
                    this.identifierOrKeyword();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constructorMemberDeclaration() {
        let localctx = new ConstructorMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 344, vbParser.RULE_constructorMemberDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2211;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2210;
                this.attributes();
            }
            this.state = 2216;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)) | (1 << (vbParser.SHARED - 133)))) !== 0)) {
                this.state = 2213;
                this.constructorModifier();
                this.state = 2218;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2219;
            this.match(vbParser.SUB);
            this.state = 2220;
            this.match(vbParser.NEW);
            this.state = 2226;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 2221;
                this.match(vbParser.LEFT_PAREN);
                this.state = 2223;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                    this.state = 2222;
                    this.parameterList();
                }
                this.state = 2225;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 2228;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 2230;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 207, this._ctx);
            if (la_ === 1) {
                this.state = 2229;
                this.block();
            }
            this.state = 2232;
            this.match(vbParser.END);
            this.state = 2233;
            this.match(vbParser.SUB);
            this.state = 2234;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constructorModifier() {
        let localctx = new ConstructorModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 346, vbParser.RULE_constructorModifier);
        try {
            this.state = 2238;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2236;
                    this.accessModifier();
                    break;
                case vbParser.SHARED:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2237;
                    this.match(vbParser.SHARED);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    eventMemberDeclaration() {
        let localctx = new EventMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 348, vbParser.RULE_eventMemberDeclaration);
        try {
            this.state = 2242;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 209, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2240;
                    this.regularEventMemberDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2241;
                    this.customEventMemberDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    regularEventMemberDeclaration() {
        let localctx = new RegularEventMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 350, vbParser.RULE_regularEventMemberDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2245;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2244;
                this.attributes();
            }
            this.state = 2250;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)) | (1 << (vbParser.SHADOWS - 133)) | (1 << (vbParser.SHARED - 133)))) !== 0)) {
                this.state = 2247;
                this.eventModifiers();
                this.state = 2252;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2253;
            this.match(vbParser.EVENT);
            this.state = 2254;
            this.identifier();
            this.state = 2255;
            this.parametersOrType();
            this.state = 2257;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.IMPLEMENTS) {
                this.state = 2256;
                this.implementsClause();
            }
            this.state = 2259;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceEventMemberDeclaration() {
        let localctx = new InterfaceEventMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 352, vbParser.RULE_interfaceEventMemberDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2262;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2261;
                this.attributes();
            }
            this.state = 2267;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.SHADOWS) {
                this.state = 2264;
                this.interfaceEventModifiers();
                this.state = 2269;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2270;
            this.match(vbParser.EVENT);
            this.state = 2271;
            this.identifier();
            this.state = 2272;
            this.parametersOrType();
            this.state = 2273;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parametersOrType() {
        let localctx = new ParametersOrTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 354, vbParser.RULE_parametersOrType);
        var _la = 0;
        try {
            this.state = 2284;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.EOF:
                case vbParser.IMPLEMENTS:
                case vbParser.LINE_TERMINATOR:
                case vbParser.COLON:
                case vbParser.LEFT_PAREN:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2280;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LEFT_PAREN) {
                        this.state = 2275;
                        this.match(vbParser.LEFT_PAREN);
                        this.state = 2277;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                            this.state = 2276;
                            this.parameterList();
                        }
                        this.state = 2279;
                        this.match(vbParser.RIGHT_PAREN);
                    }
                    break;
                case vbParser.AS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2282;
                    this.match(vbParser.AS);
                    this.state = 2283;
                    this.nonArrayTypeName(0);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    eventModifiers() {
        let localctx = new EventModifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 356, vbParser.RULE_eventModifiers);
        try {
            this.state = 2289;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2286;
                    this.accessModifier();
                    break;
                case vbParser.SHADOWS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2287;
                    this.match(vbParser.SHADOWS);
                    break;
                case vbParser.SHARED:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2288;
                    this.match(vbParser.SHARED);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceEventModifiers() {
        let localctx = new InterfaceEventModifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 358, vbParser.RULE_interfaceEventModifiers);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2291;
            this.match(vbParser.SHADOWS);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    customEventMemberDeclaration() {
        let localctx = new CustomEventMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 360, vbParser.RULE_customEventMemberDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2294;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2293;
                this.attributes();
            }
            this.state = 2299;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)) | (1 << (vbParser.SHADOWS - 133)) | (1 << (vbParser.SHARED - 133)))) !== 0)) {
                this.state = 2296;
                this.eventModifiers();
                this.state = 2301;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2302;
            this.match(vbParser.CUSTOM);
            this.state = 2303;
            this.match(vbParser.EVENT);
            this.state = 2304;
            this.identifier();
            this.state = 2305;
            this.match(vbParser.AS);
            this.state = 2306;
            this.typeName();
            this.state = 2308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.IMPLEMENTS) {
                this.state = 2307;
                this.implementsClause();
            }
            this.state = 2310;
            this.statementTerminator();
            this.state = 2312;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2311;
                this.eventAccessorDeclaration();
                this.state = 2314;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === vbParser.ADDHANDLER || _la === vbParser.RAISEEVENT || _la === vbParser.REMOVEHANDLER || _la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW);
            this.state = 2316;
            this.match(vbParser.END);
            this.state = 2317;
            this.match(vbParser.EVENT);
            this.state = 2318;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    eventAccessorDeclaration() {
        let localctx = new EventAccessorDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 362, vbParser.RULE_eventAccessorDeclaration);
        try {
            this.state = 2323;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 223, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2320;
                    this.addHandlerDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2321;
                    this.removeHandlerDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2322;
                    this.raiseEventDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    addHandlerDeclaration() {
        let localctx = new AddHandlerDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 364, vbParser.RULE_addHandlerDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2325;
                this.attributes();
            }
            this.state = 2328;
            this.match(vbParser.ADDHANDLER);
            this.state = 2329;
            this.match(vbParser.LEFT_PAREN);
            this.state = 2330;
            this.parameterList();
            this.state = 2331;
            this.match(vbParser.RIGHT_PAREN);
            this.state = 2332;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 2334;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 225, this._ctx);
            if (la_ === 1) {
                this.state = 2333;
                this.block();
            }
            this.state = 2336;
            this.match(vbParser.END);
            this.state = 2337;
            this.match(vbParser.ADDHANDLER);
            this.state = 2338;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    removeHandlerDeclaration() {
        let localctx = new RemoveHandlerDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 366, vbParser.RULE_removeHandlerDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2341;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2340;
                this.attributes();
            }
            this.state = 2343;
            this.match(vbParser.REMOVEHANDLER);
            this.state = 2344;
            this.match(vbParser.LEFT_PAREN);
            this.state = 2345;
            this.parameterList();
            this.state = 2346;
            this.match(vbParser.RIGHT_PAREN);
            this.state = 2347;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 2349;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 227, this._ctx);
            if (la_ === 1) {
                this.state = 2348;
                this.block();
            }
            this.state = 2351;
            this.match(vbParser.END);
            this.state = 2352;
            this.match(vbParser.REMOVEHANDLER);
            this.state = 2353;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    raiseEventDeclaration() {
        let localctx = new RaiseEventDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 368, vbParser.RULE_raiseEventDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2355;
                this.attributes();
            }
            this.state = 2358;
            this.match(vbParser.RAISEEVENT);
            this.state = 2359;
            this.match(vbParser.LEFT_PAREN);
            this.state = 2360;
            this.parameterList();
            this.state = 2361;
            this.match(vbParser.RIGHT_PAREN);
            this.state = 2362;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 2364;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 229, this._ctx);
            if (la_ === 1) {
                this.state = 2363;
                this.block();
            }
            this.state = 2366;
            this.match(vbParser.END);
            this.state = 2367;
            this.match(vbParser.RAISEEVENT);
            this.state = 2368;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constantMemberDeclaration() {
        let localctx = new ConstantMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 370, vbParser.RULE_constantMemberDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2371;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2370;
                this.attributes();
            }
            this.state = 2376;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)) | (1 << (vbParser.SHADOWS - 133)))) !== 0)) {
                this.state = 2373;
                this.constantModifier();
                this.state = 2378;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2379;
            this.match(vbParser.CONST);
            this.state = 2380;
            this.constantDeclarators();
            this.state = 2381;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constantModifier() {
        let localctx = new ConstantModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 372, vbParser.RULE_constantModifier);
        try {
            this.state = 2385;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2383;
                    this.accessModifier();
                    break;
                case vbParser.SHADOWS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2384;
                    this.match(vbParser.SHADOWS);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constantDeclarators() {
        let localctx = new ConstantDeclaratorsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 374, vbParser.RULE_constantDeclarators);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2387;
            this.constantDeclarator();
            this.state = 2392;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 2388;
                this.match(vbParser.COMMA);
                this.state = 2389;
                this.constantDeclarator();
                this.state = 2394;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constantDeclarator() {
        let localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 376, vbParser.RULE_constantDeclarator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2395;
            this.identifier();
            this.state = 2398;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 2396;
                this.match(vbParser.AS);
                this.state = 2397;
                this.typeName();
            }
            this.state = 2400;
            this.match(vbParser.EQUALS);
            this.state = 2401;
            this.constantExpression();
            this.state = 2402;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variableMemberDeclaration() {
        let localctx = new VariableMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 378, vbParser.RULE_variableMemberDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2405;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2404;
                this.attributes();
            }
            this.state = 2408;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2407;
                this.variableModifier();
                this.state = 2410;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === vbParser.DIM || _la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)) | (1 << (vbParser.READONLY - 133)) | (1 << (vbParser.SHADOWS - 133)) | (1 << (vbParser.SHARED - 133)))) !== 0) || _la === vbParser.WITH_EVENTS);
            this.state = 2412;
            this.variableDeclarators();
            this.state = 2413;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variableModifier() {
        let localctx = new VariableModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 380, vbParser.RULE_variableModifier);
        try {
            this.state = 2421;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2415;
                    this.accessModifier();
                    break;
                case vbParser.SHADOWS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2416;
                    this.match(vbParser.SHADOWS);
                    break;
                case vbParser.SHARED:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2417;
                    this.match(vbParser.SHARED);
                    break;
                case vbParser.READONLY:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2418;
                    this.match(vbParser.READONLY);
                    break;
                case vbParser.WITH_EVENTS:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2419;
                    this.match(vbParser.WITH_EVENTS);
                    break;
                case vbParser.DIM:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 2420;
                    this.match(vbParser.DIM);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variableDeclarators() {
        let localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 382, vbParser.RULE_variableDeclarators);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2423;
            this.variableDeclarator();
            this.state = 2428;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 2424;
                this.match(vbParser.COMMA);
                this.state = 2425;
                this.variableDeclarator();
                this.state = 2430;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variableDeclarator() {
        let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 384, vbParser.RULE_variableDeclarator);
        var _la = 0;
        try {
            this.state = 2444;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 241, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2431;
                    this.variableIdentifiers();
                    this.state = 2432;
                    this.match(vbParser.AS);
                    this.state = 2433;
                    this.objectCreationExpression();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2435;
                    this.variableIdentifiers();
                    this.state = 2438;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.AS) {
                        this.state = 2436;
                        this.match(vbParser.AS);
                        this.state = 2437;
                        this.typeName();
                    }
                    this.state = 2442;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.EQUALS) {
                        this.state = 2440;
                        this.match(vbParser.EQUALS);
                        this.state = 2441;
                        this.expression(0);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variableIdentifiers() {
        let localctx = new VariableIdentifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 386, vbParser.RULE_variableIdentifiers);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2446;
            this.variableIdentifier();
            this.state = 2451;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 242, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2447;
                    this.match(vbParser.COMMA);
                    this.state = 2448;
                    this.variableIdentifier();
                }
                this.state = 2453;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 242, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variableIdentifier() {
        let localctx = new VariableIdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 388, vbParser.RULE_variableIdentifier);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2454;
            this.identifier();
            this.state = 2455;
            this.identifierModifiers();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arraySizeInitializationModifier() {
        let localctx = new ArraySizeInitializationModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 390, vbParser.RULE_arraySizeInitializationModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2457;
            this.match(vbParser.LEFT_PAREN);
            this.state = 2458;
            this.boundList();
            this.state = 2459;
            this.match(vbParser.RIGHT_PAREN);
            this.state = 2461;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 2460;
                this.arrayTypeModifiers();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    boundList() {
        let localctx = new BoundListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 392, vbParser.RULE_boundList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2463;
            this.bound();
            this.state = 2468;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 2464;
                this.match(vbParser.COMMA);
                this.state = 2465;
                this.bound();
                this.state = 2470;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    bound() {
        let localctx = new BoundContext(this, this._ctx, this.state);
        this.enterRule(localctx, 394, vbParser.RULE_bound);
        try {
            this.state = 2475;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 245, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2471;
                    this.expression(0);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2472;
                    this.match(vbParser.ZERO);
                    this.state = 2473;
                    this.match(vbParser.TO);
                    this.state = 2474;
                    this.expression(0);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    propertyMemberDeclaration() {
        let localctx = new PropertyMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 396, vbParser.RULE_propertyMemberDeclaration);
        try {
            this.state = 2480;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 246, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2477;
                    this.regularPropertyMemberDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2478;
                    this.mustOverridePropertyMemberDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2479;
                    this.autoPropertyMemberDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    propertySignature() {
        let localctx = new PropertySignatureContext(this, this._ctx, this.state);
        this.enterRule(localctx, 398, vbParser.RULE_propertySignature);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2482;
            this.match(vbParser.PROPERTY);
            this.state = 2483;
            this.identifier();
            this.state = 2489;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 2484;
                this.match(vbParser.LEFT_PAREN);
                this.state = 2486;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                    this.state = 2485;
                    this.parameterList();
                }
                this.state = 2488;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 2496;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 2491;
                this.match(vbParser.AS);
                this.state = 2493;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                    this.state = 2492;
                    this.attributes();
                }
                this.state = 2495;
                this.typeName();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    regularPropertyMemberDeclaration() {
        let localctx = new RegularPropertyMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 400, vbParser.RULE_regularPropertyMemberDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2498;
                this.attributes();
            }
            this.state = 2504;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.DEFAULT || _la === vbParser.FRIEND || _la === vbParser.ITERATOR || _la === vbParser.NOTOVERRIDABLE || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (vbParser.OVERLOADS - 127)) | (1 << (vbParser.OVERRIDABLE - 127)) | (1 << (vbParser.OVERRIDES - 127)) | (1 << (vbParser.PRIVATE - 127)) | (1 << (vbParser.PROTECTED - 127)) | (1 << (vbParser.PUBLIC - 127)) | (1 << (vbParser.READONLY - 127)) | (1 << (vbParser.SHADOWS - 127)) | (1 << (vbParser.SHARED - 127)))) !== 0) || _la === vbParser.WRITEONLY) {
                this.state = 2501;
                this.propertyModifier();
                this.state = 2506;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2507;
            this.propertySignature();
            this.state = 2509;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.IMPLEMENTS) {
                this.state = 2508;
                this.implementsClause();
            }
            this.state = 2511;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 2513;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2512;
                this.propertyAccessorDeclaration();
                this.state = 2515;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === vbParser.FRIEND || _la === vbParser.GET || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)) | (1 << (vbParser.SET - 133)))) !== 0) || _la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW);
            this.state = 2517;
            this.match(vbParser.END);
            this.state = 2518;
            this.match(vbParser.PROPERTY);
            this.state = 2519;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    mustOverridePropertyMemberDeclaration() {
        let localctx = new MustOverridePropertyMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 402, vbParser.RULE_mustOverridePropertyMemberDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2522;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2521;
                this.attributes();
            }
            this.state = 2525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 2524;
                this.mustOverridePropertyModifier();
                this.state = 2527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === vbParser.DEFAULT || _la === vbParser.FRIEND || ((((_la - 92)) & ~0x1f) == 0 && ((1 << (_la - 92)) & ((1 << (vbParser.ITERATOR - 92)) | (1 << (vbParser.MUSTOVERRIDE - 92)) | (1 << (vbParser.NOTOVERRIDABLE - 92)))) !== 0) || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (vbParser.OVERLOADS - 127)) | (1 << (vbParser.OVERRIDABLE - 127)) | (1 << (vbParser.OVERRIDES - 127)) | (1 << (vbParser.PRIVATE - 127)) | (1 << (vbParser.PROTECTED - 127)) | (1 << (vbParser.PUBLIC - 127)) | (1 << (vbParser.READONLY - 127)) | (1 << (vbParser.SHADOWS - 127)) | (1 << (vbParser.SHARED - 127)))) !== 0) || _la === vbParser.WRITEONLY);
            this.state = 2529;
            this.propertySignature();
            this.state = 2531;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.IMPLEMENTS) {
                this.state = 2530;
                this.implementsClause();
            }
            this.state = 2533;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    autoPropertyMemberDeclaration() {
        let localctx = new AutoPropertyMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 404, vbParser.RULE_autoPropertyMemberDeclaration);
        var _la = 0;
        try {
            this.state = 2610;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 276, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2536;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                        this.state = 2535;
                        this.attributes();
                    }
                    this.state = 2541;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === vbParser.FRIEND || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (vbParser.NOTOVERRIDABLE - 115)) | (1 << (vbParser.OVERLOADS - 115)) | (1 << (vbParser.OVERRIDABLE - 115)) | (1 << (vbParser.OVERRIDES - 115)) | (1 << (vbParser.PRIVATE - 115)) | (1 << (vbParser.PROTECTED - 115)) | (1 << (vbParser.PUBLIC - 115)))) !== 0) || _la === vbParser.SHADOWS || _la === vbParser.SHARED) {
                        this.state = 2538;
                        this.autoPropertyModifier();
                        this.state = 2543;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2544;
                    this.match(vbParser.PROPERTY);
                    this.state = 2545;
                    this.identifier();
                    this.state = 2551;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LEFT_PAREN) {
                        this.state = 2546;
                        this.match(vbParser.LEFT_PAREN);
                        this.state = 2548;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                            this.state = 2547;
                            this.parameterList();
                        }
                        this.state = 2550;
                        this.match(vbParser.RIGHT_PAREN);
                    }
                    this.state = 2558;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.AS) {
                        this.state = 2553;
                        this.match(vbParser.AS);
                        this.state = 2555;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                            this.state = 2554;
                            this.attributes();
                        }
                        this.state = 2557;
                        this.typeName();
                    }
                    this.state = 2562;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.EQUALS) {
                        this.state = 2560;
                        this.match(vbParser.EQUALS);
                        this.state = 2561;
                        this.expression(0);
                    }
                    this.state = 2565;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.IMPLEMENTS) {
                        this.state = 2564;
                        this.implementsClause();
                    }
                    this.state = 2567;
                    this.match(vbParser.LINE_TERMINATOR);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2570;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                        this.state = 2569;
                        this.attributes();
                    }
                    this.state = 2575;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === vbParser.FRIEND || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (vbParser.NOTOVERRIDABLE - 115)) | (1 << (vbParser.OVERLOADS - 115)) | (1 << (vbParser.OVERRIDABLE - 115)) | (1 << (vbParser.OVERRIDES - 115)) | (1 << (vbParser.PRIVATE - 115)) | (1 << (vbParser.PROTECTED - 115)) | (1 << (vbParser.PUBLIC - 115)))) !== 0) || _la === vbParser.SHADOWS || _la === vbParser.SHARED) {
                        this.state = 2572;
                        this.autoPropertyModifier();
                        this.state = 2577;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2578;
                    this.match(vbParser.PROPERTY);
                    this.state = 2579;
                    this.identifier();
                    this.state = 2585;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LEFT_PAREN) {
                        this.state = 2580;
                        this.match(vbParser.LEFT_PAREN);
                        this.state = 2582;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                            this.state = 2581;
                            this.parameterList();
                        }
                        this.state = 2584;
                        this.match(vbParser.RIGHT_PAREN);
                    }
                    this.state = 2587;
                    this.match(vbParser.AS);
                    this.state = 2589;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                        this.state = 2588;
                        this.attributes();
                    }
                    this.state = 2591;
                    this.match(vbParser.NEW);
                    this.state = 2600;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CHAR))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (vbParser.DATE - 46)) | (1 << (vbParser.DECIMAL - 46)) | (1 << (vbParser.DOUBLE - 46)) | (1 << (vbParser.GLOBAL - 46)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (vbParser.INTEGER - 85)) | (1 << (vbParser.LONG - 85)) | (1 << (vbParser.OBJECT - 85)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || ((((_la - 248)) & ~0x1f) == 0 && ((1 << (_la - 248)) & ((1 << (vbParser.UNDERSCORE - 248)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 248)) | (1 << (vbParser.A - 248)) | (1 << (vbParser.B - 248)) | (1 << (vbParser.C - 248)) | (1 << (vbParser.D - 248)) | (1 << (vbParser.E - 248)) | (1 << (vbParser.F - 248)) | (1 << (vbParser.G - 248)) | (1 << (vbParser.H - 248)) | (1 << (vbParser.I - 248)) | (1 << (vbParser.J - 248)))) !== 0) || ((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (vbParser.K - 280)) | (1 << (vbParser.L - 280)) | (1 << (vbParser.M - 280)) | (1 << (vbParser.N - 280)) | (1 << (vbParser.O - 280)) | (1 << (vbParser.P - 280)) | (1 << (vbParser.Q - 280)) | (1 << (vbParser.R - 280)) | (1 << (vbParser.S - 280)) | (1 << (vbParser.T - 280)) | (1 << (vbParser.U - 280)) | (1 << (vbParser.V - 280)) | (1 << (vbParser.W - 280)) | (1 << (vbParser.X - 280)) | (1 << (vbParser.Y - 280)) | (1 << (vbParser.Z - 280)))) !== 0)) {
                        this.state = 2592;
                        this.nonArrayTypeName(0);
                        this.state = 2598;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.LEFT_PAREN) {
                            this.state = 2593;
                            this.match(vbParser.LEFT_PAREN);
                            this.state = 2595;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DOUBLE - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (vbParser.FROM - 71)) | (1 << (vbParser.FUNCTION - 71)) | (1 << (vbParser.GETTYPE - 71)) | (1 << (vbParser.GLOBAL - 71)) | (1 << (vbParser.IF - 71)) | (1 << (vbParser.INTEGER - 71)) | (1 << (vbParser.ITERATOR - 71)) | (1 << (vbParser.LONG - 71)) | (1 << (vbParser.ME - 71)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vbParser.MYBASE - 106)) | (1 << (vbParser.MYCLASS - 106)) | (1 << (vbParser.NEW - 106)) | (1 << (vbParser.NOT - 106)) | (1 << (vbParser.NOTHING - 106)) | (1 << (vbParser.OBJECT - 106)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.SUB - 145)) | (1 << (vbParser.TRYCAST - 145)) | (1 << (vbParser.TYPEOF - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || _la === vbParser.GET_XML_NAMESPACE || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                                this.state = 2594;
                                this.argumentList();
                            }
                            this.state = 2597;
                            this.match(vbParser.RIGHT_PAREN);
                        }
                    }
                    this.state = 2603;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.FROM || _la === vbParser.WITH) {
                        this.state = 2602;
                        this.objectCreationExpressionInitializer();
                    }
                    this.state = 2606;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.IMPLEMENTS) {
                        this.state = 2605;
                        this.implementsClause();
                    }
                    this.state = 2608;
                    this.match(vbParser.LINE_TERMINATOR);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfacePropertyMemberDeclaration() {
        let localctx = new InterfacePropertyMemberDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 406, vbParser.RULE_interfacePropertyMemberDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2613;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2612;
                this.attributes();
            }
            this.state = 2618;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.DEFAULT || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (vbParser.OVERLOADS - 127)) | (1 << (vbParser.READONLY - 127)) | (1 << (vbParser.SHADOWS - 127)))) !== 0) || _la === vbParser.WRITEONLY) {
                this.state = 2615;
                this.interfacePropertyModifier();
                this.state = 2620;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2621;
            this.propertySignature();
            this.state = 2622;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    autoPropertyModifier() {
        let localctx = new AutoPropertyModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 408, vbParser.RULE_autoPropertyModifier);
        try {
            this.state = 2631;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2624;
                    this.accessModifier();
                    break;
                case vbParser.SHADOWS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2625;
                    this.match(vbParser.SHADOWS);
                    break;
                case vbParser.SHARED:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2626;
                    this.match(vbParser.SHARED);
                    break;
                case vbParser.OVERRIDABLE:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2627;
                    this.match(vbParser.OVERRIDABLE);
                    break;
                case vbParser.NOTOVERRIDABLE:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2628;
                    this.match(vbParser.NOTOVERRIDABLE);
                    break;
                case vbParser.OVERRIDES:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 2629;
                    this.match(vbParser.OVERRIDES);
                    break;
                case vbParser.OVERLOADS:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 2630;
                    this.match(vbParser.OVERLOADS);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    propertyModifier() {
        let localctx = new PropertyModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 410, vbParser.RULE_propertyModifier);
        try {
            this.state = 2638;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.FRIEND:
                case vbParser.NOTOVERRIDABLE:
                case vbParser.OVERLOADS:
                case vbParser.OVERRIDABLE:
                case vbParser.OVERRIDES:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                case vbParser.SHADOWS:
                case vbParser.SHARED:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2633;
                    this.autoPropertyModifier();
                    break;
                case vbParser.DEFAULT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2634;
                    this.match(vbParser.DEFAULT);
                    break;
                case vbParser.READONLY:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2635;
                    this.match(vbParser.READONLY);
                    break;
                case vbParser.WRITEONLY:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2636;
                    this.match(vbParser.WRITEONLY);
                    break;
                case vbParser.ITERATOR:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2637;
                    this.match(vbParser.ITERATOR);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    mustOverridePropertyModifier() {
        let localctx = new MustOverridePropertyModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 412, vbParser.RULE_mustOverridePropertyModifier);
        try {
            this.state = 2642;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.DEFAULT:
                case vbParser.FRIEND:
                case vbParser.ITERATOR:
                case vbParser.NOTOVERRIDABLE:
                case vbParser.OVERLOADS:
                case vbParser.OVERRIDABLE:
                case vbParser.OVERRIDES:
                case vbParser.PRIVATE:
                case vbParser.PROTECTED:
                case vbParser.PUBLIC:
                case vbParser.READONLY:
                case vbParser.SHADOWS:
                case vbParser.SHARED:
                case vbParser.WRITEONLY:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2640;
                    this.propertyModifier();
                    break;
                case vbParser.MUSTOVERRIDE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2641;
                    this.match(vbParser.MUSTOVERRIDE);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfacePropertyModifier() {
        let localctx = new InterfacePropertyModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 414, vbParser.RULE_interfacePropertyModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2644;
            _la = this._input.LA(1);
            if (!(_la === vbParser.DEFAULT || ((((_la - 127)) & ~0x1f) == 0 && ((1 << (_la - 127)) & ((1 << (vbParser.OVERLOADS - 127)) | (1 << (vbParser.READONLY - 127)) | (1 << (vbParser.SHADOWS - 127)))) !== 0) || _la === vbParser.WRITEONLY)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    propertyAccessorDeclaration() {
        let localctx = new PropertyAccessorDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 416, vbParser.RULE_propertyAccessorDeclaration);
        try {
            this.state = 2648;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 282, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2646;
                    this.propertyGetDeclaration();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2647;
                    this.propertySetDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    propertyGetDeclaration() {
        let localctx = new PropertyGetDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 418, vbParser.RULE_propertyGetDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2651;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2650;
                this.attributes();
            }
            this.state = 2654;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)))) !== 0)) {
                this.state = 2653;
                this.accessModifier();
            }
            this.state = 2656;
            this.match(vbParser.GET);
            this.state = 2657;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 2659;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 285, this._ctx);
            if (la_ === 1) {
                this.state = 2658;
                this.block();
            }
            this.state = 2661;
            this.match(vbParser.END);
            this.state = 2662;
            this.match(vbParser.GET);
            this.state = 2663;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    propertySetDeclaration() {
        let localctx = new PropertySetDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 420, vbParser.RULE_propertySetDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2666;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2665;
                this.attributes();
            }
            this.state = 2669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.FRIEND || ((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (vbParser.PRIVATE - 133)) | (1 << (vbParser.PROTECTED - 133)) | (1 << (vbParser.PUBLIC - 133)))) !== 0)) {
                this.state = 2668;
                this.accessModifier();
            }
            this.state = 2671;
            this.match(vbParser.SET);
            this.state = 2677;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 2672;
                this.match(vbParser.LEFT_PAREN);
                this.state = 2674;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                    this.state = 2673;
                    this.parameterList();
                }
                this.state = 2676;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 2679;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 2681;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 290, this._ctx);
            if (la_ === 1) {
                this.state = 2680;
                this.block();
            }
            this.state = 2683;
            this.match(vbParser.END);
            this.state = 2684;
            this.match(vbParser.SET);
            this.state = 2685;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    operatorDeclaration() {
        let localctx = new OperatorDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 422, vbParser.RULE_operatorDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2688;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                this.state = 2687;
                this.attributes();
            }
            this.state = 2693;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (vbParser.NARROWING - 109)) | (1 << (vbParser.OVERLOADS - 109)) | (1 << (vbParser.PUBLIC - 109)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (vbParser.SHADOWS - 148)) | (1 << (vbParser.SHARED - 148)) | (1 << (vbParser.WIDENING - 148)))) !== 0)) {
                this.state = 2690;
                this.operatorModifier();
                this.state = 2695;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2696;
            this.match(vbParser.OPERATORKEYWORD);
            this.state = 2697;
            this.overloadableOperator();
            this.state = 2698;
            this.match(vbParser.LEFT_PAREN);
            this.state = 2699;
            this.parameterList();
            this.state = 2700;
            this.match(vbParser.RIGHT_PAREN);
            this.state = 2706;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 2701;
                this.match(vbParser.AS);
                this.state = 2703;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.LINE_TERMINATOR || _la === vbParser.LEFT_ARROW) {
                    this.state = 2702;
                    this.attributes();
                }
                this.state = 2705;
                this.typeName();
            }
            this.state = 2708;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 2710;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 295, this._ctx);
            if (la_ === 1) {
                this.state = 2709;
                this.block();
            }
            this.state = 2712;
            this.match(vbParser.END);
            this.state = 2713;
            this.match(vbParser.OPERATORKEYWORD);
            this.state = 2714;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    operatorModifier() {
        let localctx = new OperatorModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 424, vbParser.RULE_operatorModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2716;
            _la = this._input.LA(1);
            if (!(((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (vbParser.NARROWING - 109)) | (1 << (vbParser.OVERLOADS - 109)) | (1 << (vbParser.PUBLIC - 109)))) !== 0) || ((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (vbParser.SHADOWS - 148)) | (1 << (vbParser.SHARED - 148)) | (1 << (vbParser.WIDENING - 148)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    overloadableOperator() {
        let localctx = new OverloadableOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 426, vbParser.RULE_overloadableOperator);
        try {
            this.state = 2746;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 296, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2718;
                    this.cCPlusMinus();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2719;
                    this.match(vbParser.ASTERISK);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2720;
                    this.match(vbParser.SLASH);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2721;
                    this.match(vbParser.DOUBLE_BACK_SLASH);
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2722;
                    this.match(vbParser.AMPERSAND);
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 2723;
                    this.match(vbParser.LIKE);
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 2724;
                    this.match(vbParser.MOD);
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 2725;
                    this.match(vbParser.AND);
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 2726;
                    this.match(vbParser.OR);
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 2727;
                    this.match(vbParser.XOR);
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 2728;
                    this.match(vbParser.CARET);
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 2729;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 2730;
                    this.match(vbParser.LEFT_ARROW);
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    this.state = 2731;
                    this.match(vbParser.RIGHT_ARROW);
                    this.state = 2732;
                    this.match(vbParser.RIGHT_ARROW);
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    this.state = 2733;
                    this.match(vbParser.EQUALS);
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    this.state = 2734;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 2735;
                    this.match(vbParser.RIGHT_ARROW);
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    this.state = 2736;
                    this.match(vbParser.RIGHT_ARROW);
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    this.state = 2737;
                    this.match(vbParser.LEFT_ARROW);
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    this.state = 2738;
                    this.match(vbParser.RIGHT_ARROW);
                    this.state = 2739;
                    this.match(vbParser.EQUALS);
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    this.state = 2740;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 2741;
                    this.match(vbParser.EQUALS);
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    this.state = 2742;
                    this.match(vbParser.NOT);
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    this.state = 2743;
                    this.match(vbParser.IS_TRUE);
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    this.state = 2744;
                    this.match(vbParser.IS_FALSE);
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    this.state = 2745;
                    this.match(vbParser.CTYPE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    statement() {
        let localctx = new StatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 428, vbParser.RULE_statement);
        try {
            this.state = 2763;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 297, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2748;
                    this.labelDeclarationStatement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2749;
                    this.localDeclarationStatement();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2750;
                    this.withStatement();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2751;
                    this.syncLockStatement();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2752;
                    this.eventStatement();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 2753;
                    this.assignmentStatement();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 2754;
                    this.invocationStatement();
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 2755;
                    this.conditionalStatement();
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 2756;
                    this.loopStatement();
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 2757;
                    this.errorHandlingStatement();
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 2758;
                    this.branchStatement();
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 2759;
                    this.arrayHandlingStatement();
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    this.state = 2760;
                    this.usingStatement();
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    this.state = 2761;
                    this.awaitStatement();
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    this.state = 2762;
                    this.yieldStatement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    block() {
        let localctx = new BlockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 430, vbParser.RULE_block);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2765;
            this.statements();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    labelDeclarationStatement() {
        let localctx = new LabelDeclarationStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 432, vbParser.RULE_labelDeclarationStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2767;
            this.labelName();
            this.state = 2768;
            this.match(vbParser.COLON);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    labelName() {
        let localctx = new LabelNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 434, vbParser.RULE_labelName);
        try {
            this.state = 2772;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.UNDERSCORE:
                case vbParser.LEFT_SQUARE_BRACKET:
                case vbParser.A:
                case vbParser.B:
                case vbParser.C:
                case vbParser.D:
                case vbParser.E:
                case vbParser.F:
                case vbParser.G:
                case vbParser.H:
                case vbParser.I:
                case vbParser.J:
                case vbParser.K:
                case vbParser.L:
                case vbParser.M:
                case vbParser.N:
                case vbParser.O:
                case vbParser.P:
                case vbParser.Q:
                case vbParser.R:
                case vbParser.S:
                case vbParser.T:
                case vbParser.U:
                case vbParser.V:
                case vbParser.W:
                case vbParser.X:
                case vbParser.Y:
                case vbParser.Z:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2770;
                    this.identifier();
                    break;
                case vbParser.ZERO:
                case vbParser.ONE:
                case vbParser.TWO:
                case vbParser.THREE:
                case vbParser.FOUR:
                case vbParser.FIVE:
                case vbParser.SIX:
                case vbParser.SEVEN:
                case vbParser.EIGHT:
                case vbParser.NINE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2771;
                    this.intLiteral();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    statements() {
        let localctx = new StatementsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 436, vbParser.RULE_statements);
        try {
            this.state = 2792;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.ADDHANDLER:
                case vbParser.ADDRESSOF:
                case vbParser.AGGREGATE:
                case vbParser.ASYNC:
                case vbParser.AWAIT:
                case vbParser.BOOLEAN:
                case vbParser.BYTE:
                case vbParser.CALL:
                case vbParser.CBOOL:
                case vbParser.CBYTE:
                case vbParser.CCHAR:
                case vbParser.CDATE:
                case vbParser.CDBL:
                case vbParser.CDEC:
                case vbParser.CHAR:
                case vbParser.CINT:
                case vbParser.CLNG:
                case vbParser.COBJ:
                case vbParser.CONST:
                case vbParser.CONTINUE:
                case vbParser.CSBYTE:
                case vbParser.CSHORT:
                case vbParser.CSNG:
                case vbParser.CSTR:
                case vbParser.CTYPE:
                case vbParser.CUINT:
                case vbParser.CULNG:
                case vbParser.CUSHORT:
                case vbParser.DATE:
                case vbParser.DECIMAL:
                case vbParser.DIM:
                case vbParser.DIRECTCAST:
                case vbParser.DO:
                case vbParser.DOUBLE:
                case vbParser.END:
                case vbParser.ERASE:
                case vbParser.ERROR:
                case vbParser.EXIT:
                case vbParser.FOR:
                case vbParser.FROM:
                case vbParser.FUNCTION:
                case vbParser.GETTYPE:
                case vbParser.GLOBAL:
                case vbParser.GOTO:
                case vbParser.IF:
                case vbParser.INTEGER:
                case vbParser.ITERATOR:
                case vbParser.LONG:
                case vbParser.ME:
                case vbParser.MID:
                case vbParser.MYBASE:
                case vbParser.MYCLASS:
                case vbParser.NEW:
                case vbParser.NOT:
                case vbParser.NOTHING:
                case vbParser.OBJECT:
                case vbParser.ON:
                case vbParser.RAISEEVENT:
                case vbParser.REDIM:
                case vbParser.REMOVEHANDLER:
                case vbParser.RESUME:
                case vbParser.RETURN:
                case vbParser.SBYTE:
                case vbParser.SELECT:
                case vbParser.SHORT:
                case vbParser.SINGLE:
                case vbParser.STATIC:
                case vbParser.STOP:
                case vbParser.STRING:
                case vbParser.SUB:
                case vbParser.SYNCLOCK:
                case vbParser.THROW:
                case vbParser.TRY:
                case vbParser.TRYCAST:
                case vbParser.TYPEOF:
                case vbParser.UINTEGER:
                case vbParser.ULONG:
                case vbParser.USHORT:
                case vbParser.USING:
                case vbParser.WHILE:
                case vbParser.WITH:
                case vbParser.YIELD:
                case vbParser.GET_XML_NAMESPACE:
                case vbParser.ZERO:
                case vbParser.ONE:
                case vbParser.TWO:
                case vbParser.THREE:
                case vbParser.FOUR:
                case vbParser.FIVE:
                case vbParser.SIX:
                case vbParser.SEVEN:
                case vbParser.EIGHT:
                case vbParser.NINE:
                case vbParser.LINE_TERMINATOR:
                case vbParser.DOUBLE_QUOTE_CHARACTER:
                case vbParser.LEFT_ARROW:
                case vbParser.AMPERSAND:
                case vbParser.POUND:
                case vbParser.UNDERSCORE:
                case vbParser.PERIOD:
                case vbParser.MINUS:
                case vbParser.PLUS:
                case vbParser.LEFT_PAREN:
                case vbParser.LEFT_BRACE:
                case vbParser.LEFT_SQUARE_BRACKET:
                case vbParser.A:
                case vbParser.B:
                case vbParser.C:
                case vbParser.D:
                case vbParser.E:
                case vbParser.F:
                case vbParser.G:
                case vbParser.H:
                case vbParser.I:
                case vbParser.J:
                case vbParser.K:
                case vbParser.L:
                case vbParser.M:
                case vbParser.N:
                case vbParser.O:
                case vbParser.P:
                case vbParser.Q:
                case vbParser.R:
                case vbParser.S:
                case vbParser.T:
                case vbParser.U:
                case vbParser.V:
                case vbParser.W:
                case vbParser.X:
                case vbParser.Y:
                case vbParser.Z:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2774;
                    this.statement();
                    this.state = 2781;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 300, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 2775;
                            this.match(vbParser.COLON);
                            this.state = 2777;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 299, this._ctx);
                            if (la_ === 1) {
                                this.state = 2776;
                                this.statement();
                            }
                        }
                        this.state = 2783;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 300, this._ctx);
                    }
                    break;
                case vbParser.COLON:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2788;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 2784;
                                this.match(vbParser.COLON);
                                this.state = 2786;
                                this._errHandler.sync(this);
                                var la_ = this._interp.adaptivePredict(this._input, 301, this._ctx);
                                if (la_ === 1) {
                                    this.state = 2785;
                                    this.statement();
                                }
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 2790;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 302, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    localDeclarationStatement() {
        let localctx = new LocalDeclarationStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 438, vbParser.RULE_localDeclarationStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2794;
            this.localModifier();
            this.state = 2795;
            this.variableDeclarators();
            this.state = 2796;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    localModifier() {
        let localctx = new LocalModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 440, vbParser.RULE_localModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2798;
            _la = this._input.LA(1);
            if (!(_la === vbParser.CONST || _la === vbParser.DIM || _la === vbParser.STATIC)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    withStatement() {
        let localctx = new WithStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 442, vbParser.RULE_withStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2800;
            this.match(vbParser.WITH);
            this.state = 2801;
            this.expression(0);
            this.state = 2802;
            this.statementTerminator();
            this.state = 2804;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 304, this._ctx);
            if (la_ === 1) {
                this.state = 2803;
                this.block();
            }
            this.state = 2806;
            this.match(vbParser.END);
            this.state = 2807;
            this.match(vbParser.WITH);
            this.state = 2808;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    syncLockStatement() {
        let localctx = new SyncLockStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 444, vbParser.RULE_syncLockStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2810;
            this.match(vbParser.SYNCLOCK);
            this.state = 2811;
            this.expression(0);
            this.state = 2812;
            this.statementTerminator();
            this.state = 2814;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 305, this._ctx);
            if (la_ === 1) {
                this.state = 2813;
                this.block();
            }
            this.state = 2816;
            this.match(vbParser.END);
            this.state = 2817;
            this.match(vbParser.SYNCLOCK);
            this.state = 2818;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    eventStatement() {
        let localctx = new EventStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 446, vbParser.RULE_eventStatement);
        try {
            this.state = 2823;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.RAISEEVENT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2820;
                    this.raiseEventStatement();
                    break;
                case vbParser.ADDHANDLER:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2821;
                    this.addHandlerStatement();
                    break;
                case vbParser.REMOVEHANDLER:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2822;
                    this.removeHandlerStatement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    raiseEventStatement() {
        let localctx = new RaiseEventStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 448, vbParser.RULE_raiseEventStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2825;
            this.match(vbParser.RAISEEVENT);
            this.state = 2826;
            this.identifierOrKeyword();
            this.state = 2832;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 2827;
                this.match(vbParser.LEFT_PAREN);
                this.state = 2829;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DOUBLE - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (vbParser.FROM - 71)) | (1 << (vbParser.FUNCTION - 71)) | (1 << (vbParser.GETTYPE - 71)) | (1 << (vbParser.GLOBAL - 71)) | (1 << (vbParser.IF - 71)) | (1 << (vbParser.INTEGER - 71)) | (1 << (vbParser.ITERATOR - 71)) | (1 << (vbParser.LONG - 71)) | (1 << (vbParser.ME - 71)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vbParser.MYBASE - 106)) | (1 << (vbParser.MYCLASS - 106)) | (1 << (vbParser.NEW - 106)) | (1 << (vbParser.NOT - 106)) | (1 << (vbParser.NOTHING - 106)) | (1 << (vbParser.OBJECT - 106)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.SUB - 145)) | (1 << (vbParser.TRYCAST - 145)) | (1 << (vbParser.TYPEOF - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || _la === vbParser.GET_XML_NAMESPACE || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                    this.state = 2828;
                    this.argumentList();
                }
                this.state = 2831;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 2834;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    addHandlerStatement() {
        let localctx = new AddHandlerStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 450, vbParser.RULE_addHandlerStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2836;
            this.match(vbParser.ADDHANDLER);
            this.state = 2837;
            this.expression(0);
            this.state = 2838;
            this.match(vbParser.COMMA);
            this.state = 2839;
            this.expression(0);
            this.state = 2840;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    removeHandlerStatement() {
        let localctx = new RemoveHandlerStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 452, vbParser.RULE_removeHandlerStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2842;
            this.match(vbParser.REMOVEHANDLER);
            this.state = 2843;
            this.expression(0);
            this.state = 2844;
            this.match(vbParser.COMMA);
            this.state = 2845;
            this.expression(0);
            this.state = 2846;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignmentStatement() {
        let localctx = new AssignmentStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 454, vbParser.RULE_assignmentStatement);
        try {
            this.state = 2851;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 309, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2848;
                    this.regularAssignmentStatement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2849;
                    this.compoundAssignmentStatement();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2850;
                    this.midAssignmentStatement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    regularAssignmentStatement() {
        let localctx = new RegularAssignmentStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 456, vbParser.RULE_regularAssignmentStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2853;
            this.expression(0);
            this.state = 2854;
            this.match(vbParser.EQUALS);
            this.state = 2855;
            this.expression(0);
            this.state = 2856;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compoundAssignmentStatement() {
        let localctx = new CompoundAssignmentStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 458, vbParser.RULE_compoundAssignmentStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2858;
            this.expression(0);
            this.state = 2859;
            this.compoundBinaryOperator();
            this.state = 2861;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 310, this._ctx);
            if (la_ === 1) {
                this.state = 2860;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 2863;
            this.expression(0);
            this.state = 2864;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    compoundBinaryOperator() {
        let localctx = new CompoundBinaryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 460, vbParser.RULE_compoundBinaryOperator);
        try {
            this.state = 2886;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.CARET:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2866;
                    this.match(vbParser.CARET);
                    this.state = 2867;
                    this.match(vbParser.EQUALS);
                    break;
                case vbParser.ASTERISK:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2868;
                    this.match(vbParser.ASTERISK);
                    this.state = 2869;
                    this.match(vbParser.EQUALS);
                    break;
                case vbParser.SLASH:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 2870;
                    this.match(vbParser.SLASH);
                    this.state = 2871;
                    this.match(vbParser.EQUALS);
                    break;
                case vbParser.DOUBLE_BACK_SLASH:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 2872;
                    this.match(vbParser.DOUBLE_BACK_SLASH);
                    this.state = 2873;
                    this.match(vbParser.EQUALS);
                    break;
                case vbParser.PLUS:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 2874;
                    this.match(vbParser.PLUS);
                    this.state = 2875;
                    this.match(vbParser.EQUALS);
                    break;
                case vbParser.MINUS:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 2876;
                    this.match(vbParser.MINUS);
                    this.state = 2877;
                    this.match(vbParser.EQUALS);
                    break;
                case vbParser.AMPERSAND:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 2878;
                    this.match(vbParser.AMPERSAND);
                    this.state = 2879;
                    this.match(vbParser.EQUALS);
                    break;
                case vbParser.LEFT_ARROW:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 2880;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 2881;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 2882;
                    this.match(vbParser.EQUALS);
                    break;
                case vbParser.RIGHT_ARROW:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 2883;
                    this.match(vbParser.RIGHT_ARROW);
                    this.state = 2884;
                    this.match(vbParser.RIGHT_ARROW);
                    this.state = 2885;
                    this.match(vbParser.EQUALS);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    midAssignmentStatement() {
        let localctx = new MidAssignmentStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 462, vbParser.RULE_midAssignmentStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2888;
            this.match(vbParser.MID);
            this.state = 2890;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.DOLLAR) {
                this.state = 2889;
                this.match(vbParser.DOLLAR);
            }
            this.state = 2892;
            this.match(vbParser.LEFT_PAREN);
            this.state = 2893;
            this.expression(0);
            this.state = 2894;
            this.match(vbParser.COMMA);
            this.state = 2895;
            this.expression(0);
            this.state = 2898;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.COMMA) {
                this.state = 2896;
                this.match(vbParser.COMMA);
                this.state = 2897;
                this.expression(0);
            }
            this.state = 2900;
            this.match(vbParser.RIGHT_PAREN);
            this.state = 2901;
            this.match(vbParser.EQUALS);
            this.state = 2902;
            this.expression(0);
            this.state = 2903;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    invocationStatement() {
        let localctx = new InvocationStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 464, vbParser.RULE_invocationStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2906;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.CALL) {
                this.state = 2905;
                this.match(vbParser.CALL);
            }
            this.state = 2908;
            this.expression(0);
            this.state = 2914;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 2909;
                this.match(vbParser.LEFT_PAREN);
                this.state = 2911;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DOUBLE - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (vbParser.FROM - 71)) | (1 << (vbParser.FUNCTION - 71)) | (1 << (vbParser.GETTYPE - 71)) | (1 << (vbParser.GLOBAL - 71)) | (1 << (vbParser.IF - 71)) | (1 << (vbParser.INTEGER - 71)) | (1 << (vbParser.ITERATOR - 71)) | (1 << (vbParser.LONG - 71)) | (1 << (vbParser.ME - 71)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vbParser.MYBASE - 106)) | (1 << (vbParser.MYCLASS - 106)) | (1 << (vbParser.NEW - 106)) | (1 << (vbParser.NOT - 106)) | (1 << (vbParser.NOTHING - 106)) | (1 << (vbParser.OBJECT - 106)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.SUB - 145)) | (1 << (vbParser.TRYCAST - 145)) | (1 << (vbParser.TYPEOF - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || _la === vbParser.GET_XML_NAMESPACE || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                    this.state = 2910;
                    this.argumentList();
                }
                this.state = 2913;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 2916;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conditionalStatement() {
        let localctx = new ConditionalStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 466, vbParser.RULE_conditionalStatement);
        try {
            this.state = 2920;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.IF:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2918;
                    this.ifStatement();
                    break;
                case vbParser.SELECT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2919;
                    this.selectStatement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    ifStatement() {
        let localctx = new IfStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 468, vbParser.RULE_ifStatement);
        try {
            this.state = 2924;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 318, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 2922;
                    this.blockIfStatement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 2923;
                    this.lineIfThenStatement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    blockIfStatement() {
        let localctx = new BlockIfStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 470, vbParser.RULE_blockIfStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2926;
            this.match(vbParser.IF);
            this.state = 2927;
            this.booleanExpression();
            this.state = 2929;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.THEN) {
                this.state = 2928;
                this.match(vbParser.THEN);
            }
            this.state = 2931;
            this.statementTerminator();
            this.state = 2933;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 320, this._ctx);
            if (la_ === 1) {
                this.state = 2932;
                this.block();
            }
            this.state = 2938;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 321, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2935;
                    this.elseIfStatement();
                }
                this.state = 2940;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 321, this._ctx);
            }
            this.state = 2942;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.ELSE) {
                this.state = 2941;
                this.elseStatement();
            }
            this.state = 2944;
            this.match(vbParser.END);
            this.state = 2945;
            this.match(vbParser.IF);
            this.state = 2946;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elseIfStatement() {
        let localctx = new ElseIfStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 472, vbParser.RULE_elseIfStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2948;
            this.elseIf();
            this.state = 2949;
            this.booleanExpression();
            this.state = 2951;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.THEN) {
                this.state = 2950;
                this.match(vbParser.THEN);
            }
            this.state = 2953;
            this.statementTerminator();
            this.state = 2955;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 324, this._ctx);
            if (la_ === 1) {
                this.state = 2954;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elseStatement() {
        let localctx = new ElseStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 474, vbParser.RULE_elseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2957;
            this.match(vbParser.ELSE);
            this.state = 2958;
            this.statementTerminator();
            this.state = 2960;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 325, this._ctx);
            if (la_ === 1) {
                this.state = 2959;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lineIfThenStatement() {
        let localctx = new LineIfThenStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 476, vbParser.RULE_lineIfThenStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2962;
            this.match(vbParser.IF);
            this.state = 2963;
            this.booleanExpression();
            this.state = 2964;
            this.match(vbParser.THEN);
            this.state = 2965;
            this.statements();
            this.state = 2968;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.ELSE) {
                this.state = 2966;
                this.match(vbParser.ELSE);
                this.state = 2967;
                this.statements();
            }
            this.state = 2970;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    selectStatement() {
        let localctx = new SelectStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 478, vbParser.RULE_selectStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2972;
            this.match(vbParser.SELECT);
            this.state = 2974;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.CASE) {
                this.state = 2973;
                this.match(vbParser.CASE);
            }
            this.state = 2976;
            this.expression(0);
            this.state = 2977;
            this.statementTerminator();
            this.state = 2981;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 328, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 2978;
                    this.caseStatement();
                }
                this.state = 2983;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 328, this._ctx);
            }
            this.state = 2985;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.CASE) {
                this.state = 2984;
                this.caseElseStatement();
            }
            this.state = 2987;
            this.match(vbParser.END);
            this.state = 2988;
            this.match(vbParser.SELECT);
            this.state = 2989;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    caseStatement() {
        let localctx = new CaseStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 480, vbParser.RULE_caseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2991;
            this.match(vbParser.CASE);
            this.state = 2992;
            this.caseClauses();
            this.state = 2993;
            this.statementTerminator();
            this.state = 2995;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 330, this._ctx);
            if (la_ === 1) {
                this.state = 2994;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    caseClauses() {
        let localctx = new CaseClausesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 482, vbParser.RULE_caseClauses);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 2997;
            this.caseClause();
            this.state = 3002;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 2998;
                this.match(vbParser.COMMA);
                this.state = 2999;
                this.caseClause();
                this.state = 3004;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    caseClause() {
        let localctx = new CaseClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 484, vbParser.RULE_caseClause);
        var _la = 0;
        try {
            this.state = 3022;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 336, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3009;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.IS) {
                        this.state = 3005;
                        this.match(vbParser.IS);
                        this.state = 3007;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.LINE_TERMINATOR) {
                            this.state = 3006;
                            this.match(vbParser.LINE_TERMINATOR);
                        }
                    }
                    this.state = 3011;
                    this.comparisonOperator();
                    this.state = 3013;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 334, this._ctx);
                    if (la_ === 1) {
                        this.state = 3012;
                        this.match(vbParser.LINE_TERMINATOR);
                    }
                    this.state = 3015;
                    this.expression(0);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3017;
                    this.expression(0);
                    this.state = 3020;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.TO) {
                        this.state = 3018;
                        this.match(vbParser.TO);
                        this.state = 3019;
                        this.expression(0);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    comparisonOperator() {
        let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 486, vbParser.RULE_comparisonOperator);
        try {
            this.state = 3033;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 337, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3024;
                    this.match(vbParser.EQUALS);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3025;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 3026;
                    this.match(vbParser.RIGHT_ARROW);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3027;
                    this.match(vbParser.LEFT_ARROW);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3028;
                    this.match(vbParser.RIGHT_ARROW);
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 3029;
                    this.match(vbParser.RIGHT_ARROW);
                    this.state = 3030;
                    this.match(vbParser.EQUALS);
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 3031;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 3032;
                    this.match(vbParser.EQUALS);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    caseElseStatement() {
        let localctx = new CaseElseStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 488, vbParser.RULE_caseElseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3035;
            this.match(vbParser.CASE);
            this.state = 3036;
            this.match(vbParser.ELSE);
            this.state = 3037;
            this.statementTerminator();
            this.state = 3039;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 338, this._ctx);
            if (la_ === 1) {
                this.state = 3038;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    loopStatement() {
        let localctx = new LoopStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 490, vbParser.RULE_loopStatement);
        try {
            this.state = 3045;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 339, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3041;
                    this.whileStatement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3042;
                    this.doLoopStatement();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3043;
                    this.forStatement();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3044;
                    this.forEachStatement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    whileStatement() {
        let localctx = new WhileStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 492, vbParser.RULE_whileStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3047;
            this.match(vbParser.WHILE);
            this.state = 3048;
            this.booleanExpression();
            this.state = 3049;
            this.statementTerminator();
            this.state = 3051;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 340, this._ctx);
            if (la_ === 1) {
                this.state = 3050;
                this.block();
            }
            this.state = 3053;
            this.match(vbParser.END);
            this.state = 3054;
            this.match(vbParser.WHILE);
            this.state = 3055;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    doLoopStatement() {
        let localctx = new DoLoopStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 494, vbParser.RULE_doLoopStatement);
        try {
            this.state = 3059;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 341, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3057;
                    this.doTopLoopStatement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3058;
                    this.doBottomLoopStatement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    doTopLoopStatement() {
        let localctx = new DoTopLoopStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 496, vbParser.RULE_doTopLoopStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3061;
            this.match(vbParser.DO);
            this.state = 3065;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.UNTIL || _la === vbParser.WHILE) {
                this.state = 3062;
                this.whileOrUntil();
                this.state = 3063;
                this.booleanExpression();
            }
            this.state = 3067;
            this.statementTerminator();
            this.state = 3069;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDHANDLER) | (1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CALL) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CONST - 32)) | (1 << (vbParser.CONTINUE - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIM - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DO - 32)) | (1 << (vbParser.DOUBLE - 32)) | (1 << (vbParser.END - 32)) | (1 << (vbParser.ERASE - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbParser.ERROR - 64)) | (1 << (vbParser.EXIT - 64)) | (1 << (vbParser.FOR - 64)) | (1 << (vbParser.FROM - 64)) | (1 << (vbParser.FUNCTION - 64)) | (1 << (vbParser.GETTYPE - 64)) | (1 << (vbParser.GLOBAL - 64)) | (1 << (vbParser.GOTO - 64)) | (1 << (vbParser.IF - 64)) | (1 << (vbParser.INTEGER - 64)) | (1 << (vbParser.ITERATOR - 64)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (vbParser.LONG - 98)) | (1 << (vbParser.ME - 98)) | (1 << (vbParser.MID - 98)) | (1 << (vbParser.MYBASE - 98)) | (1 << (vbParser.MYCLASS - 98)) | (1 << (vbParser.NEW - 98)) | (1 << (vbParser.NOT - 98)) | (1 << (vbParser.NOTHING - 98)) | (1 << (vbParser.OBJECT - 98)) | (1 << (vbParser.ON - 98)))) !== 0) || ((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (vbParser.RAISEEVENT - 137)) | (1 << (vbParser.REDIM - 137)) | (1 << (vbParser.REMOVEHANDLER - 137)) | (1 << (vbParser.RESUME - 137)) | (1 << (vbParser.RETURN - 137)) | (1 << (vbParser.SBYTE - 137)) | (1 << (vbParser.SELECT - 137)) | (1 << (vbParser.SHORT - 137)) | (1 << (vbParser.SINGLE - 137)) | (1 << (vbParser.STATIC - 137)) | (1 << (vbParser.STOP - 137)) | (1 << (vbParser.STRING - 137)) | (1 << (vbParser.SUB - 137)) | (1 << (vbParser.SYNCLOCK - 137)) | (1 << (vbParser.THROW - 137)) | (1 << (vbParser.TRY - 137)) | (1 << (vbParser.TRYCAST - 137)) | (1 << (vbParser.TYPEOF - 137)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (vbParser.UINTEGER - 169)) | (1 << (vbParser.ULONG - 169)) | (1 << (vbParser.USHORT - 169)) | (1 << (vbParser.USING - 169)) | (1 << (vbParser.WHILE - 169)) | (1 << (vbParser.WITH - 169)) | (1 << (vbParser.YIELD - 169)) | (1 << (vbParser.GET_XML_NAMESPACE - 169)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.COLON - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                this.state = 3068;
                this.block();
            }
            this.state = 3071;
            this.match(vbParser.LOOP);
            this.state = 3072;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    doBottomLoopStatement() {
        let localctx = new DoBottomLoopStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 498, vbParser.RULE_doBottomLoopStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3074;
            this.match(vbParser.DO);
            this.state = 3075;
            this.statementTerminator();
            this.state = 3077;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDHANDLER) | (1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CALL) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CONST - 32)) | (1 << (vbParser.CONTINUE - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIM - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DO - 32)) | (1 << (vbParser.DOUBLE - 32)) | (1 << (vbParser.END - 32)) | (1 << (vbParser.ERASE - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (vbParser.ERROR - 64)) | (1 << (vbParser.EXIT - 64)) | (1 << (vbParser.FOR - 64)) | (1 << (vbParser.FROM - 64)) | (1 << (vbParser.FUNCTION - 64)) | (1 << (vbParser.GETTYPE - 64)) | (1 << (vbParser.GLOBAL - 64)) | (1 << (vbParser.GOTO - 64)) | (1 << (vbParser.IF - 64)) | (1 << (vbParser.INTEGER - 64)) | (1 << (vbParser.ITERATOR - 64)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (vbParser.LONG - 98)) | (1 << (vbParser.ME - 98)) | (1 << (vbParser.MID - 98)) | (1 << (vbParser.MYBASE - 98)) | (1 << (vbParser.MYCLASS - 98)) | (1 << (vbParser.NEW - 98)) | (1 << (vbParser.NOT - 98)) | (1 << (vbParser.NOTHING - 98)) | (1 << (vbParser.OBJECT - 98)) | (1 << (vbParser.ON - 98)))) !== 0) || ((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (vbParser.RAISEEVENT - 137)) | (1 << (vbParser.REDIM - 137)) | (1 << (vbParser.REMOVEHANDLER - 137)) | (1 << (vbParser.RESUME - 137)) | (1 << (vbParser.RETURN - 137)) | (1 << (vbParser.SBYTE - 137)) | (1 << (vbParser.SELECT - 137)) | (1 << (vbParser.SHORT - 137)) | (1 << (vbParser.SINGLE - 137)) | (1 << (vbParser.STATIC - 137)) | (1 << (vbParser.STOP - 137)) | (1 << (vbParser.STRING - 137)) | (1 << (vbParser.SUB - 137)) | (1 << (vbParser.SYNCLOCK - 137)) | (1 << (vbParser.THROW - 137)) | (1 << (vbParser.TRY - 137)) | (1 << (vbParser.TRYCAST - 137)) | (1 << (vbParser.TYPEOF - 137)))) !== 0) || ((((_la - 169)) & ~0x1f) == 0 && ((1 << (_la - 169)) & ((1 << (vbParser.UINTEGER - 169)) | (1 << (vbParser.ULONG - 169)) | (1 << (vbParser.USHORT - 169)) | (1 << (vbParser.USING - 169)) | (1 << (vbParser.WHILE - 169)) | (1 << (vbParser.WITH - 169)) | (1 << (vbParser.YIELD - 169)) | (1 << (vbParser.GET_XML_NAMESPACE - 169)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.COLON - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                this.state = 3076;
                this.block();
            }
            this.state = 3079;
            this.match(vbParser.LOOP);
            this.state = 3080;
            this.whileOrUntil();
            this.state = 3081;
            this.booleanExpression();
            this.state = 3082;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    whileOrUntil() {
        let localctx = new WhileOrUntilContext(this, this._ctx, this.state);
        this.enterRule(localctx, 500, vbParser.RULE_whileOrUntil);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3084;
            _la = this._input.LA(1);
            if (!(_la === vbParser.UNTIL || _la === vbParser.WHILE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    forStatement() {
        let localctx = new ForStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 502, vbParser.RULE_forStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3086;
            this.match(vbParser.FOR);
            this.state = 3087;
            this.loopControlVariable();
            this.state = 3088;
            this.match(vbParser.EQUALS);
            this.state = 3089;
            this.expression(0);
            this.state = 3090;
            this.match(vbParser.TO);
            this.state = 3091;
            this.expression(0);
            this.state = 3094;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.STEP) {
                this.state = 3092;
                this.match(vbParser.STEP);
                this.state = 3093;
                this.expression(0);
            }
            this.state = 3096;
            this.statementTerminator();
            this.state = 3098;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 346, this._ctx);
            if (la_ === 1) {
                this.state = 3097;
                this.block();
            }
            this.state = 3105;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 348, this._ctx);
            if (la_ === 1) {
                this.state = 3100;
                this.match(vbParser.NEXT);
                this.state = 3102;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 347, this._ctx);
                if (la_ === 1) {
                    this.state = 3101;
                    this.nextExpressionList();
                }
                this.state = 3104;
                this.statementTerminator();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    loopControlVariable() {
        let localctx = new LoopControlVariableContext(this, this._ctx, this.state);
        this.enterRule(localctx, 504, vbParser.RULE_loopControlVariable);
        var _la = 0;
        try {
            this.state = 3115;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 350, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3107;
                    this.identifier();
                    this.state = 3112;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.AS || _la === vbParser.QUESTION_MARK || _la === vbParser.LEFT_PAREN) {
                        this.state = 3108;
                        this.identifierModifiers();
                        this.state = 3109;
                        this.match(vbParser.AS);
                        this.state = 3110;
                        this.typeName();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3114;
                    this.expression(0);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    nextExpressionList() {
        let localctx = new NextExpressionListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 506, vbParser.RULE_nextExpressionList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3117;
            this.expression(0);
            this.state = 3122;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 3118;
                this.match(vbParser.COMMA);
                this.state = 3119;
                this.expression(0);
                this.state = 3124;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    forEachStatement() {
        let localctx = new ForEachStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 508, vbParser.RULE_forEachStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3125;
            this.match(vbParser.FOR);
            this.state = 3126;
            this.match(vbParser.EACH);
            this.state = 3127;
            this.loopControlVariable();
            this.state = 3128;
            this.match(vbParser.IN);
            this.state = 3130;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 352, this._ctx);
            if (la_ === 1) {
                this.state = 3129;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 3132;
            this.expression(0);
            this.state = 3133;
            this.statementTerminator();
            this.state = 3135;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 353, this._ctx);
            if (la_ === 1) {
                this.state = 3134;
                this.block();
            }
            this.state = 3142;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 355, this._ctx);
            if (la_ === 1) {
                this.state = 3137;
                this.match(vbParser.NEXT);
                this.state = 3139;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 354, this._ctx);
                if (la_ === 1) {
                    this.state = 3138;
                    this.nextExpressionList();
                }
                this.state = 3141;
                this.statementTerminator();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    errorHandlingStatement() {
        let localctx = new ErrorHandlingStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 510, vbParser.RULE_errorHandlingStatement);
        try {
            this.state = 3146;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.THROW:
                case vbParser.TRY:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3144;
                    this.structuredErrorStatement();
                    break;
                case vbParser.ERROR:
                case vbParser.ON:
                case vbParser.RESUME:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3145;
                    this.unstructuredErrorStatement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    structuredErrorStatement() {
        let localctx = new StructuredErrorStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 512, vbParser.RULE_structuredErrorStatement);
        try {
            this.state = 3150;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.THROW:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3148;
                    this.throwStatement();
                    break;
                case vbParser.TRY:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3149;
                    this.tryStatement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tryStatement() {
        let localctx = new TryStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 514, vbParser.RULE_tryStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3152;
            this.match(vbParser.TRY);
            this.state = 3153;
            this.statementTerminator();
            this.state = 3155;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 358, this._ctx);
            if (la_ === 1) {
                this.state = 3154;
                this.block();
            }
            this.state = 3160;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.CATCH) {
                this.state = 3157;
                this.catchStatement();
                this.state = 3162;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3164;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.FINALLY) {
                this.state = 3163;
                this.finallyStatement();
            }
            this.state = 3166;
            this.match(vbParser.END);
            this.state = 3167;
            this.match(vbParser.TRY);
            this.state = 3168;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    finallyStatement() {
        let localctx = new FinallyStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 516, vbParser.RULE_finallyStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3170;
            this.match(vbParser.FINALLY);
            this.state = 3171;
            this.statementTerminator();
            this.state = 3173;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 361, this._ctx);
            if (la_ === 1) {
                this.state = 3172;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    catchStatement() {
        let localctx = new CatchStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 518, vbParser.RULE_catchStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3175;
            this.match(vbParser.CATCH);
            this.state = 3181;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 248)) & ~0x1f) == 0 && ((1 << (_la - 248)) & ((1 << (vbParser.UNDERSCORE - 248)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 248)) | (1 << (vbParser.A - 248)) | (1 << (vbParser.B - 248)) | (1 << (vbParser.C - 248)) | (1 << (vbParser.D - 248)) | (1 << (vbParser.E - 248)) | (1 << (vbParser.F - 248)) | (1 << (vbParser.G - 248)) | (1 << (vbParser.H - 248)) | (1 << (vbParser.I - 248)) | (1 << (vbParser.J - 248)))) !== 0) || ((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (vbParser.K - 280)) | (1 << (vbParser.L - 280)) | (1 << (vbParser.M - 280)) | (1 << (vbParser.N - 280)) | (1 << (vbParser.O - 280)) | (1 << (vbParser.P - 280)) | (1 << (vbParser.Q - 280)) | (1 << (vbParser.R - 280)) | (1 << (vbParser.S - 280)) | (1 << (vbParser.T - 280)) | (1 << (vbParser.U - 280)) | (1 << (vbParser.V - 280)) | (1 << (vbParser.W - 280)) | (1 << (vbParser.X - 280)) | (1 << (vbParser.Y - 280)) | (1 << (vbParser.Z - 280)))) !== 0)) {
                this.state = 3176;
                this.identifier();
                this.state = 3179;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.AS) {
                    this.state = 3177;
                    this.match(vbParser.AS);
                    this.state = 3178;
                    this.nonArrayTypeName(0);
                }
            }
            this.state = 3185;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.WHEN) {
                this.state = 3183;
                this.match(vbParser.WHEN);
                this.state = 3184;
                this.booleanExpression();
            }
            this.state = 3187;
            this.statementTerminator();
            this.state = 3189;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 365, this._ctx);
            if (la_ === 1) {
                this.state = 3188;
                this.block();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    throwStatement() {
        let localctx = new ThrowStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 520, vbParser.RULE_throwStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3191;
            this.match(vbParser.THROW);
            this.state = 3193;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 366, this._ctx);
            if (la_ === 1) {
                this.state = 3192;
                this.expression(0);
            }
            this.state = 3195;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unstructuredErrorStatement() {
        let localctx = new UnstructuredErrorStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 522, vbParser.RULE_unstructuredErrorStatement);
        try {
            this.state = 3200;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.ERROR:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3197;
                    this.errorStatement();
                    break;
                case vbParser.ON:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3198;
                    this.onErrorStatement();
                    break;
                case vbParser.RESUME:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3199;
                    this.resumeStatement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    errorStatement() {
        let localctx = new ErrorStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 524, vbParser.RULE_errorStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3202;
            this.match(vbParser.ERROR);
            this.state = 3203;
            this.expression(0);
            this.state = 3204;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    onErrorStatement() {
        let localctx = new OnErrorStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 526, vbParser.RULE_onErrorStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3206;
            this.match(vbParser.ON);
            this.state = 3207;
            this.match(vbParser.ERROR);
            this.state = 3208;
            this.errorClause();
            this.state = 3209;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    errorClause() {
        let localctx = new ErrorClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 528, vbParser.RULE_errorClause);
        try {
            this.state = 3219;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 368, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3211;
                    this.match(vbParser.GOTO);
                    this.state = 3212;
                    this.match(vbParser.MINUS);
                    this.state = 3213;
                    this.match(vbParser.ONE);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3214;
                    this.match(vbParser.GOTO);
                    this.state = 3215;
                    this.match(vbParser.ZERO);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3216;
                    this.goToStatement();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3217;
                    this.match(vbParser.RESUME);
                    this.state = 3218;
                    this.match(vbParser.NEXT);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    resumeStatement() {
        let localctx = new ResumeStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 530, vbParser.RULE_resumeStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3221;
            this.match(vbParser.RESUME);
            this.state = 3223;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.NEXT || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.UNDERSCORE - 221)))) !== 0) || ((((_la - 259)) & ~0x1f) == 0 && ((1 << (_la - 259)) & ((1 << (vbParser.LEFT_SQUARE_BRACKET - 259)) | (1 << (vbParser.A - 259)) | (1 << (vbParser.B - 259)) | (1 << (vbParser.C - 259)) | (1 << (vbParser.D - 259)) | (1 << (vbParser.E - 259)) | (1 << (vbParser.F - 259)) | (1 << (vbParser.G - 259)) | (1 << (vbParser.H - 259)) | (1 << (vbParser.I - 259)) | (1 << (vbParser.J - 259)) | (1 << (vbParser.K - 259)) | (1 << (vbParser.L - 259)) | (1 << (vbParser.M - 259)) | (1 << (vbParser.N - 259)) | (1 << (vbParser.O - 259)) | (1 << (vbParser.P - 259)) | (1 << (vbParser.Q - 259)) | (1 << (vbParser.R - 259)) | (1 << (vbParser.S - 259)) | (1 << (vbParser.T - 259)) | (1 << (vbParser.U - 259)))) !== 0) || ((((_la - 291)) & ~0x1f) == 0 && ((1 << (_la - 291)) & ((1 << (vbParser.V - 291)) | (1 << (vbParser.W - 291)) | (1 << (vbParser.X - 291)) | (1 << (vbParser.Y - 291)) | (1 << (vbParser.Z - 291)))) !== 0)) {
                this.state = 3222;
                this.resumeClause();
            }
            this.state = 3225;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    resumeClause() {
        let localctx = new ResumeClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 532, vbParser.RULE_resumeClause);
        try {
            this.state = 3229;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.NEXT:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3227;
                    this.match(vbParser.NEXT);
                    break;
                case vbParser.ZERO:
                case vbParser.ONE:
                case vbParser.TWO:
                case vbParser.THREE:
                case vbParser.FOUR:
                case vbParser.FIVE:
                case vbParser.SIX:
                case vbParser.SEVEN:
                case vbParser.EIGHT:
                case vbParser.NINE:
                case vbParser.UNDERSCORE:
                case vbParser.LEFT_SQUARE_BRACKET:
                case vbParser.A:
                case vbParser.B:
                case vbParser.C:
                case vbParser.D:
                case vbParser.E:
                case vbParser.F:
                case vbParser.G:
                case vbParser.H:
                case vbParser.I:
                case vbParser.J:
                case vbParser.K:
                case vbParser.L:
                case vbParser.M:
                case vbParser.N:
                case vbParser.O:
                case vbParser.P:
                case vbParser.Q:
                case vbParser.R:
                case vbParser.S:
                case vbParser.T:
                case vbParser.U:
                case vbParser.V:
                case vbParser.W:
                case vbParser.X:
                case vbParser.Y:
                case vbParser.Z:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3228;
                    this.labelName();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    branchStatement() {
        let localctx = new BranchStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 534, vbParser.RULE_branchStatement);
        try {
            this.state = 3237;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.GOTO:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3231;
                    this.goToStatement();
                    break;
                case vbParser.EXIT:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3232;
                    this.exitStatement();
                    break;
                case vbParser.CONTINUE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3233;
                    this.continueStatement();
                    break;
                case vbParser.STOP:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3234;
                    this.stopStatement();
                    break;
                case vbParser.END:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 3235;
                    this.endStatement();
                    break;
                case vbParser.RETURN:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 3236;
                    this.returnStatement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    goToStatement() {
        let localctx = new GoToStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 536, vbParser.RULE_goToStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3239;
            this.match(vbParser.GOTO);
            this.state = 3240;
            this.labelName();
            this.state = 3241;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    exitStatement() {
        let localctx = new ExitStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 538, vbParser.RULE_exitStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3243;
            this.match(vbParser.EXIT);
            this.state = 3244;
            this.exitKind();
            this.state = 3245;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    exitKind() {
        let localctx = new ExitKindContext(this, this._ctx, this.state);
        this.enterRule(localctx, 540, vbParser.RULE_exitKind);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3247;
            _la = this._input.LA(1);
            if (!(((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (vbParser.DO - 55)) | (1 << (vbParser.FOR - 55)) | (1 << (vbParser.FUNCTION - 55)))) !== 0) || ((((_la - 134)) & ~0x1f) == 0 && ((1 << (_la - 134)) & ((1 << (vbParser.PROPERTY - 134)) | (1 << (vbParser.SELECT - 134)) | (1 << (vbParser.SUB - 134)))) !== 0) || _la === vbParser.TRY || _la === vbParser.WHILE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    continueStatement() {
        let localctx = new ContinueStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 542, vbParser.RULE_continueStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3249;
            this.match(vbParser.CONTINUE);
            this.state = 3250;
            this.continueKind();
            this.state = 3251;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    continueKind() {
        let localctx = new ContinueKindContext(this, this._ctx, this.state);
        this.enterRule(localctx, 544, vbParser.RULE_continueKind);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3253;
            _la = this._input.LA(1);
            if (!(_la === vbParser.DO || _la === vbParser.FOR || _la === vbParser.WHILE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    stopStatement() {
        let localctx = new StopStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 546, vbParser.RULE_stopStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3255;
            this.match(vbParser.STOP);
            this.state = 3256;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    endStatement() {
        let localctx = new EndStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 548, vbParser.RULE_endStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3258;
            this.match(vbParser.END);
            this.state = 3259;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    returnStatement() {
        let localctx = new ReturnStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 550, vbParser.RULE_returnStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3261;
            this.match(vbParser.RETURN);
            this.state = 3263;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 372, this._ctx);
            if (la_ === 1) {
                this.state = 3262;
                this.expression(0);
            }
            this.state = 3265;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayHandlingStatement() {
        let localctx = new ArrayHandlingStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 552, vbParser.RULE_arrayHandlingStatement);
        try {
            this.state = 3269;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.REDIM:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3267;
                    this.redimStatement();
                    break;
                case vbParser.ERASE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3268;
                    this.eraseStatement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    redimStatement() {
        let localctx = new RedimStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 554, vbParser.RULE_redimStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3271;
            this.match(vbParser.REDIM);
            this.state = 3273;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.PRESERVE) {
                this.state = 3272;
                this.match(vbParser.PRESERVE);
            }
            this.state = 3275;
            this.redimClauses();
            this.state = 3276;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    redimClauses() {
        let localctx = new RedimClausesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 556, vbParser.RULE_redimClauses);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3278;
            this.redimClause();
            this.state = 3283;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 3279;
                this.match(vbParser.COMMA);
                this.state = 3280;
                this.redimClause();
                this.state = 3285;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    redimClause() {
        let localctx = new RedimClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 558, vbParser.RULE_redimClause);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3286;
            this.expression(0);
            this.state = 3287;
            this.arraySizeInitializationModifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    eraseStatement() {
        let localctx = new EraseStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 560, vbParser.RULE_eraseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3289;
            this.match(vbParser.ERASE);
            this.state = 3290;
            this.eraseExpressions();
            this.state = 3291;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    eraseExpressions() {
        let localctx = new EraseExpressionsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 562, vbParser.RULE_eraseExpressions);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3293;
            this.expression(0);
            this.state = 3298;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 3294;
                this.match(vbParser.COMMA);
                this.state = 3295;
                this.expression(0);
                this.state = 3300;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    usingStatement() {
        let localctx = new UsingStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 564, vbParser.RULE_usingStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3301;
            this.match(vbParser.USING);
            this.state = 3302;
            this.usingResources();
            this.state = 3303;
            this.statementTerminator();
            this.state = 3305;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 377, this._ctx);
            if (la_ === 1) {
                this.state = 3304;
                this.block();
            }
            this.state = 3307;
            this.match(vbParser.END);
            this.state = 3308;
            this.match(vbParser.USING);
            this.state = 3309;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    usingResources() {
        let localctx = new UsingResourcesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 566, vbParser.RULE_usingResources);
        try {
            this.state = 3313;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 378, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3311;
                    this.variableDeclarators();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3312;
                    this.expression(0);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    awaitStatement() {
        let localctx = new AwaitStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 568, vbParser.RULE_awaitStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3315;
            this.awaitOperatorExpression();
            this.state = 3316;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    yieldStatement() {
        let localctx = new YieldStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 570, vbParser.RULE_yieldStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3318;
            this.match(vbParser.YIELD);
            this.state = 3319;
            this.expression(0);
            this.state = 3320;
            this.statementTerminator();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new ExpressionContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 572;
        this.enterRecursionRule(localctx, 572, vbParser.RULE_expression, _p);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3350;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 381, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 3323;
                    this.simpleExpression();
                    break;
                case 2:
                    this.state = 3324;
                    this.getTypeExpression();
                    break;
                case 3:
                    this.state = 3325;
                    this.typeOfIsExpression();
                    break;
                case 4:
                    this.state = 3326;
                    this.getXmlNamespaceExpression();
                    break;
                case 5:
                    this.state = 3327;
                    this.newExpression();
                    break;
                case 6:
                    this.state = 3328;
                    this.castExpression();
                    break;
                case 7:
                    this.state = 3329;
                    this.unaryPlusExpression();
                    break;
                case 8:
                    this.state = 3330;
                    this.unaryMinusExpression();
                    break;
                case 9:
                    this.state = 3331;
                    this.match(vbParser.NOT);
                    this.state = 3332;
                    this.expression(20);
                    break;
                case 10:
                    this.state = 3333;
                    this.awaitOperatorExpression();
                    break;
                case 11:
                    this.state = 3334;
                    this.conditionalExpression();
                    break;
                case 12:
                    this.state = 3335;
                    this.lambdaExpression();
                    break;
                case 13:
                    this.state = 3336;
                    this.queryExpression();
                    break;
                case 14:
                    this.state = 3337;
                    this.xMLLiteralExpression();
                    break;
                case 15:
                    this.state = 3339;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CHAR))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (vbParser.DATE - 46)) | (1 << (vbParser.DECIMAL - 46)) | (1 << (vbParser.DOUBLE - 46)) | (1 << (vbParser.GLOBAL - 46)))) !== 0) || ((((_la - 85)) & ~0x1f) == 0 && ((1 << (_la - 85)) & ((1 << (vbParser.INTEGER - 85)) | (1 << (vbParser.LONG - 85)) | (1 << (vbParser.MYBASE - 85)) | (1 << (vbParser.MYCLASS - 85)) | (1 << (vbParser.OBJECT - 85)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || ((((_la - 248)) & ~0x1f) == 0 && ((1 << (_la - 248)) & ((1 << (vbParser.UNDERSCORE - 248)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 248)) | (1 << (vbParser.A - 248)) | (1 << (vbParser.B - 248)) | (1 << (vbParser.C - 248)) | (1 << (vbParser.D - 248)) | (1 << (vbParser.E - 248)) | (1 << (vbParser.F - 248)) | (1 << (vbParser.G - 248)) | (1 << (vbParser.H - 248)) | (1 << (vbParser.I - 248)) | (1 << (vbParser.J - 248)))) !== 0) || ((((_la - 280)) & ~0x1f) == 0 && ((1 << (_la - 280)) & ((1 << (vbParser.K - 280)) | (1 << (vbParser.L - 280)) | (1 << (vbParser.M - 280)) | (1 << (vbParser.N - 280)) | (1 << (vbParser.O - 280)) | (1 << (vbParser.P - 280)) | (1 << (vbParser.Q - 280)) | (1 << (vbParser.R - 280)) | (1 << (vbParser.S - 280)) | (1 << (vbParser.T - 280)) | (1 << (vbParser.U - 280)) | (1 << (vbParser.V - 280)) | (1 << (vbParser.W - 280)) | (1 << (vbParser.X - 280)) | (1 << (vbParser.Y - 280)) | (1 << (vbParser.Z - 280)))) !== 0)) {
                        this.state = 3338;
                        this.memberAccessBase();
                    }
                    this.state = 3341;
                    this.match(vbParser.PERIOD);
                    this.state = 3342;
                    this.identifierOrKeyword();
                    this.state = 3348;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 380, this._ctx);
                    if (la_ === 1) {
                        this.state = 3343;
                        this.match(vbParser.LEFT_PAREN);
                        this.state = 3344;
                        this.match(vbParser.OF);
                        this.state = 3345;
                        this.typeArgumentList();
                        this.state = 3346;
                        this.match(vbParser.RIGHT_PAREN);
                    }
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            this.state = 3573;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 417, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    this.state = 3571;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 416, this._ctx);
                    switch (la_) {
                        case 1:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3352;
                            if (!(this.precpred(this._ctx, 44))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 44)");
                            }
                            this.state = 3353;
                            this.match(vbParser.IS);
                            this.state = 3355;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 382, this._ctx);
                            if (la_ === 1) {
                                this.state = 3354;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3357;
                            this.expression(45);
                            break;
                        case 2:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3358;
                            if (!(this.precpred(this._ctx, 43))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 43)");
                            }
                            this.state = 3359;
                            this.match(vbParser.ISNOT);
                            this.state = 3361;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 383, this._ctx);
                            if (la_ === 1) {
                                this.state = 3360;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3363;
                            this.expression(44);
                            break;
                        case 3:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3364;
                            if (!(this.precpred(this._ctx, 37))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 37)");
                            }
                            this.state = 3365;
                            this.match(vbParser.PLUS);
                            this.state = 3367;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 384, this._ctx);
                            if (la_ === 1) {
                                this.state = 3366;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3369;
                            this.expression(38);
                            break;
                        case 4:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3370;
                            if (!(this.precpred(this._ctx, 36))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 36)");
                            }
                            this.state = 3371;
                            this.match(vbParser.MINUS);
                            this.state = 3373;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 385, this._ctx);
                            if (la_ === 1) {
                                this.state = 3372;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3375;
                            this.expression(37);
                            break;
                        case 5:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3376;
                            if (!(this.precpred(this._ctx, 35))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 35)");
                            }
                            this.state = 3377;
                            this.match(vbParser.ASTERISK);
                            this.state = 3379;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 386, this._ctx);
                            if (la_ === 1) {
                                this.state = 3378;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3381;
                            this.expression(36);
                            break;
                        case 6:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3382;
                            if (!(this.precpred(this._ctx, 34))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 34)");
                            }
                            this.state = 3383;
                            this.match(vbParser.SLASH);
                            this.state = 3385;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 387, this._ctx);
                            if (la_ === 1) {
                                this.state = 3384;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3387;
                            this.expression(35);
                            break;
                        case 7:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3388;
                            if (!(this.precpred(this._ctx, 33))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 33)");
                            }
                            this.state = 3389;
                            this.match(vbParser.DOUBLE_BACK_SLASH);
                            this.state = 3391;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 388, this._ctx);
                            if (la_ === 1) {
                                this.state = 3390;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3393;
                            this.expression(34);
                            break;
                        case 8:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3394;
                            if (!(this.precpred(this._ctx, 32))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 32)");
                            }
                            this.state = 3395;
                            this.match(vbParser.MOD);
                            this.state = 3397;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 389, this._ctx);
                            if (la_ === 1) {
                                this.state = 3396;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3399;
                            this.expression(33);
                            break;
                        case 9:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3400;
                            if (!(this.precpred(this._ctx, 31))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 31)");
                            }
                            this.state = 3401;
                            this.match(vbParser.CARET);
                            this.state = 3403;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 390, this._ctx);
                            if (la_ === 1) {
                                this.state = 3402;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3405;
                            this.expression(32);
                            break;
                        case 10:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3406;
                            if (!(this.precpred(this._ctx, 30))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 30)");
                            }
                            this.state = 3407;
                            this.match(vbParser.EQUALS);
                            this.state = 3409;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 391, this._ctx);
                            if (la_ === 1) {
                                this.state = 3408;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3411;
                            this.expression(31);
                            break;
                        case 11:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3412;
                            if (!(this.precpred(this._ctx, 29))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 29)");
                            }
                            this.state = 3413;
                            this.match(vbParser.LEFT_ARROW);
                            this.state = 3414;
                            this.match(vbParser.RIGHT_ARROW);
                            this.state = 3416;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 392, this._ctx);
                            if (la_ === 1) {
                                this.state = 3415;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3418;
                            this.expression(30);
                            break;
                        case 12:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3419;
                            if (!(this.precpred(this._ctx, 28))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 28)");
                            }
                            this.state = 3420;
                            this.match(vbParser.LEFT_ARROW);
                            this.state = 3422;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 393, this._ctx);
                            if (la_ === 1) {
                                this.state = 3421;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3424;
                            this.expression(29);
                            break;
                        case 13:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3425;
                            if (!(this.precpred(this._ctx, 27))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                            }
                            this.state = 3426;
                            this.match(vbParser.RIGHT_ARROW);
                            this.state = 3428;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 394, this._ctx);
                            if (la_ === 1) {
                                this.state = 3427;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3430;
                            this.expression(28);
                            break;
                        case 14:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3431;
                            if (!(this.precpred(this._ctx, 26))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                            }
                            this.state = 3432;
                            this.match(vbParser.LEFT_ARROW);
                            this.state = 3433;
                            this.match(vbParser.EQUALS);
                            this.state = 3435;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 395, this._ctx);
                            if (la_ === 1) {
                                this.state = 3434;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3437;
                            this.expression(27);
                            break;
                        case 15:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3438;
                            if (!(this.precpred(this._ctx, 25))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                            }
                            this.state = 3439;
                            this.match(vbParser.RIGHT_ARROW);
                            this.state = 3440;
                            this.match(vbParser.EQUALS);
                            this.state = 3442;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 396, this._ctx);
                            if (la_ === 1) {
                                this.state = 3441;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3444;
                            this.expression(26);
                            break;
                        case 16:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3445;
                            if (!(this.precpred(this._ctx, 24))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                            }
                            this.state = 3446;
                            this.match(vbParser.LIKE);
                            this.state = 3448;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 397, this._ctx);
                            if (la_ === 1) {
                                this.state = 3447;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3450;
                            this.expression(25);
                            break;
                        case 17:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3451;
                            if (!(this.precpred(this._ctx, 23))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                            }
                            this.state = 3452;
                            this.match(vbParser.AMPERSAND);
                            this.state = 3454;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 398, this._ctx);
                            if (la_ === 1) {
                                this.state = 3453;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3456;
                            this.expression(24);
                            break;
                        case 18:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3457;
                            if (!(this.precpred(this._ctx, 22))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                            }
                            this.state = 3458;
                            this.match(vbParser.ANDALSO);
                            this.state = 3460;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 399, this._ctx);
                            if (la_ === 1) {
                                this.state = 3459;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3462;
                            this.expression(23);
                            break;
                        case 19:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3463;
                            if (!(this.precpred(this._ctx, 21))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                            }
                            this.state = 3464;
                            this.match(vbParser.ORELSE);
                            this.state = 3466;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 400, this._ctx);
                            if (la_ === 1) {
                                this.state = 3465;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3468;
                            this.expression(22);
                            break;
                        case 20:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3469;
                            if (!(this.precpred(this._ctx, 19))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                            }
                            this.state = 3470;
                            this.match(vbParser.AND);
                            this.state = 3472;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 401, this._ctx);
                            if (la_ === 1) {
                                this.state = 3471;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3474;
                            this.expression(20);
                            break;
                        case 21:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3475;
                            if (!(this.precpred(this._ctx, 18))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                            }
                            this.state = 3476;
                            this.match(vbParser.OR);
                            this.state = 3478;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 402, this._ctx);
                            if (la_ === 1) {
                                this.state = 3477;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3480;
                            this.expression(19);
                            break;
                        case 22:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3481;
                            if (!(this.precpred(this._ctx, 17))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                            }
                            this.state = 3482;
                            this.match(vbParser.XOR);
                            this.state = 3484;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 403, this._ctx);
                            if (la_ === 1) {
                                this.state = 3483;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3486;
                            this.expression(18);
                            break;
                        case 23:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3487;
                            if (!(this.precpred(this._ctx, 16))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                            }
                            this.state = 3488;
                            this.match(vbParser.LEFT_ARROW);
                            this.state = 3489;
                            this.match(vbParser.LEFT_ARROW);
                            this.state = 3491;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 404, this._ctx);
                            if (la_ === 1) {
                                this.state = 3490;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3493;
                            this.expression(17);
                            break;
                        case 24:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3494;
                            if (!(this.precpred(this._ctx, 15))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                            }
                            this.state = 3495;
                            this.match(vbParser.RIGHT_ARROW);
                            this.state = 3496;
                            this.match(vbParser.RIGHT_ARROW);
                            this.state = 3498;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 405, this._ctx);
                            if (la_ === 1) {
                                this.state = 3497;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3500;
                            this.expression(16);
                            break;
                        case 25:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3501;
                            if (!(this.precpred(this._ctx, 9))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                            }
                            this.state = 3502;
                            this.match(vbParser.PERIOD);
                            this.state = 3504;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbParser.LINE_TERMINATOR) {
                                this.state = 3503;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3506;
                            this.match(vbParser.LEFT_ARROW);
                            this.state = 3507;
                            this.xMLQualifiedName();
                            this.state = 3508;
                            this.match(vbParser.RIGHT_ARROW);
                            break;
                        case 26:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3510;
                            if (!(this.precpred(this._ctx, 8))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                            }
                            this.state = 3511;
                            this.match(vbParser.PERIOD);
                            this.state = 3513;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbParser.LINE_TERMINATOR) {
                                this.state = 3512;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3515;
                            this.match(vbParser.AT);
                            this.state = 3517;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbParser.LINE_TERMINATOR) {
                                this.state = 3516;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3519;
                            this.match(vbParser.LEFT_ARROW);
                            this.state = 3520;
                            this.xMLQualifiedName();
                            this.state = 3521;
                            this.match(vbParser.RIGHT_ARROW);
                            break;
                        case 27:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3523;
                            if (!(this.precpred(this._ctx, 7))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                            }
                            this.state = 3524;
                            this.match(vbParser.PERIOD);
                            this.state = 3526;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbParser.LINE_TERMINATOR) {
                                this.state = 3525;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3528;
                            this.match(vbParser.AT);
                            this.state = 3530;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbParser.LINE_TERMINATOR) {
                                this.state = 3529;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3532;
                            this.identifierOrKeyword();
                            break;
                        case 28:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3533;
                            if (!(this.precpred(this._ctx, 6))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                            }
                            this.state = 3534;
                            this.match(vbParser.PERIOD);
                            this.state = 3535;
                            this.match(vbParser.PERIOD);
                            this.state = 3536;
                            this.match(vbParser.PERIOD);
                            this.state = 3538;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === vbParser.LINE_TERMINATOR) {
                                this.state = 3537;
                                this.match(vbParser.LINE_TERMINATOR);
                            }
                            this.state = 3540;
                            this.match(vbParser.LEFT_ARROW);
                            this.state = 3541;
                            this.xMLQualifiedName();
                            break;
                        case 29:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3542;
                            if (!(this.precpred(this._ctx, 5))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                            }
                            this.state = 3548;
                            this._errHandler.sync(this);
                            var _alt = 1;
                            do {
                                switch (_alt) {
                                    case 1:
                                        this.state = 3543;
                                        this.match(vbParser.LEFT_PAREN);
                                        this.state = 3545;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                        if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DOUBLE - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (vbParser.FROM - 71)) | (1 << (vbParser.FUNCTION - 71)) | (1 << (vbParser.GETTYPE - 71)) | (1 << (vbParser.GLOBAL - 71)) | (1 << (vbParser.IF - 71)) | (1 << (vbParser.INTEGER - 71)) | (1 << (vbParser.ITERATOR - 71)) | (1 << (vbParser.LONG - 71)) | (1 << (vbParser.ME - 71)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vbParser.MYBASE - 106)) | (1 << (vbParser.MYCLASS - 106)) | (1 << (vbParser.NEW - 106)) | (1 << (vbParser.NOT - 106)) | (1 << (vbParser.NOTHING - 106)) | (1 << (vbParser.OBJECT - 106)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.SUB - 145)) | (1 << (vbParser.TRYCAST - 145)) | (1 << (vbParser.TYPEOF - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || _la === vbParser.GET_XML_NAMESPACE || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                                            this.state = 3544;
                                            this.argumentList();
                                        }
                                        this.state = 3547;
                                        this.match(vbParser.RIGHT_PAREN);
                                        break;
                                    default:
                                        throw new antlr4_1.default.error.NoViableAltException(this);
                                }
                                this.state = 3550;
                                this._errHandler.sync(this);
                                _alt = this._interp.adaptivePredict(this._input, 413, this._ctx);
                            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                            break;
                        case 30:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3552;
                            if (!(this.precpred(this._ctx, 4))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                            }
                            this.state = 3553;
                            this.match(vbParser.LEFT_PAREN);
                            this.state = 3555;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DOUBLE - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (vbParser.FROM - 71)) | (1 << (vbParser.FUNCTION - 71)) | (1 << (vbParser.GETTYPE - 71)) | (1 << (vbParser.GLOBAL - 71)) | (1 << (vbParser.IF - 71)) | (1 << (vbParser.INTEGER - 71)) | (1 << (vbParser.ITERATOR - 71)) | (1 << (vbParser.LONG - 71)) | (1 << (vbParser.ME - 71)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vbParser.MYBASE - 106)) | (1 << (vbParser.MYCLASS - 106)) | (1 << (vbParser.NEW - 106)) | (1 << (vbParser.NOT - 106)) | (1 << (vbParser.NOTHING - 106)) | (1 << (vbParser.OBJECT - 106)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.SUB - 145)) | (1 << (vbParser.TRYCAST - 145)) | (1 << (vbParser.TYPEOF - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || _la === vbParser.GET_XML_NAMESPACE || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                                this.state = 3554;
                                this.argumentList();
                            }
                            this.state = 3557;
                            this.match(vbParser.RIGHT_PAREN);
                            break;
                        case 31:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3558;
                            if (!(this.precpred(this._ctx, 3))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                            }
                            this.state = 3559;
                            this.match(vbParser.PERIOD);
                            this.state = 3560;
                            this.identifierOrKeyword();
                            this.state = 3566;
                            this._errHandler.sync(this);
                            var la_ = this._interp.adaptivePredict(this._input, 415, this._ctx);
                            if (la_ === 1) {
                                this.state = 3561;
                                this.match(vbParser.LEFT_PAREN);
                                this.state = 3562;
                                this.match(vbParser.OF);
                                this.state = 3563;
                                this.typeArgumentList();
                                this.state = 3564;
                                this.match(vbParser.RIGHT_PAREN);
                            }
                            break;
                        case 32:
                            localctx = new ExpressionContext(this, _parentctx, _parentState);
                            this.pushNewRecursionContext(localctx, _startState, vbParser.RULE_expression);
                            this.state = 3568;
                            if (!(this.precpred(this._ctx, 1))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                            }
                            this.state = 3569;
                            this.match(vbParser.EXCLAMATION);
                            this.state = 3570;
                            this.identifierOrKeyword();
                            break;
                    }
                }
                this.state = 3575;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 417, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    memberAccessBase() {
        let localctx = new MemberAccessBaseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 574, vbParser.RULE_memberAccessBase);
        try {
            this.state = 3580;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 418, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3576;
                    this.nonArrayTypeName(0);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3577;
                    this.match(vbParser.GLOBAL);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3578;
                    this.match(vbParser.MYCLASS);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3579;
                    this.match(vbParser.MYBASE);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constantExpression() {
        let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 576, vbParser.RULE_constantExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3582;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simpleExpression() {
        let localctx = new SimpleExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 578, vbParser.RULE_simpleExpression);
        try {
            this.state = 3589;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 419, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3584;
                    this.literalExpression();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3585;
                    this.parenthesizedExpression();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3586;
                    this.instanceExpression();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3587;
                    this.simpleNameExpression();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 3588;
                    this.addressOfExpression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    literalExpression() {
        let localctx = new LiteralExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 580, vbParser.RULE_literalExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3591;
            this.literal();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parenthesizedExpression() {
        let localctx = new ParenthesizedExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 582, vbParser.RULE_parenthesizedExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3593;
            this.match(vbParser.LEFT_PAREN);
            this.state = 3594;
            this.expression(0);
            this.state = 3595;
            this.match(vbParser.RIGHT_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    instanceExpression() {
        let localctx = new InstanceExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 584, vbParser.RULE_instanceExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3597;
            this.match(vbParser.ME);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    simpleNameExpression() {
        let localctx = new SimpleNameExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 586, vbParser.RULE_simpleNameExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3599;
            this.identifier();
            this.state = 3605;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 420, this._ctx);
            if (la_ === 1) {
                this.state = 3600;
                this.match(vbParser.LEFT_PAREN);
                this.state = 3601;
                this.match(vbParser.OF);
                this.state = 3602;
                this.typeArgumentList();
                this.state = 3603;
                this.match(vbParser.RIGHT_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    addressOfExpression() {
        let localctx = new AddressOfExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 588, vbParser.RULE_addressOfExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3607;
            this.match(vbParser.ADDRESSOF);
            this.state = 3608;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    getTypeExpression() {
        let localctx = new GetTypeExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 590, vbParser.RULE_getTypeExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3610;
            this.match(vbParser.GETTYPE);
            this.state = 3611;
            this.match(vbParser.LEFT_PAREN);
            this.state = 3612;
            this.getTypeTypeName();
            this.state = 3613;
            this.match(vbParser.RIGHT_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    getTypeTypeName() {
        let localctx = new GetTypeTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 592, vbParser.RULE_getTypeTypeName);
        try {
            this.state = 3617;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 421, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3615;
                    this.typeName();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3616;
                    this.qualifiedOpenTypeName();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    qualifiedOpenTypeName() {
        let localctx = new QualifiedOpenTypeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 594, vbParser.RULE_qualifiedOpenTypeName);
        var _la = 0;
        try {
            this.state = 3649;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.UNDERSCORE:
                case vbParser.LEFT_SQUARE_BRACKET:
                case vbParser.A:
                case vbParser.B:
                case vbParser.C:
                case vbParser.D:
                case vbParser.E:
                case vbParser.F:
                case vbParser.G:
                case vbParser.H:
                case vbParser.I:
                case vbParser.J:
                case vbParser.K:
                case vbParser.L:
                case vbParser.M:
                case vbParser.N:
                case vbParser.O:
                case vbParser.P:
                case vbParser.Q:
                case vbParser.R:
                case vbParser.S:
                case vbParser.T:
                case vbParser.U:
                case vbParser.V:
                case vbParser.W:
                case vbParser.X:
                case vbParser.Y:
                case vbParser.Z:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3619;
                    this.identifier();
                    this.state = 3621;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LEFT_PAREN) {
                        this.state = 3620;
                        this.typeArityList();
                    }
                    this.state = 3630;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === vbParser.PERIOD) {
                        this.state = 3623;
                        this.match(vbParser.PERIOD);
                        this.state = 3624;
                        this.identifierOrKeyword();
                        this.state = 3626;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.LEFT_PAREN) {
                            this.state = 3625;
                            this.typeArityList();
                        }
                        this.state = 3632;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                case vbParser.GLOBAL:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3633;
                    this.match(vbParser.GLOBAL);
                    this.state = 3634;
                    this.match(vbParser.PERIOD);
                    this.state = 3635;
                    this.identifierOrKeyword();
                    this.state = 3637;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LEFT_PAREN) {
                        this.state = 3636;
                        this.typeArityList();
                    }
                    this.state = 3646;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === vbParser.PERIOD) {
                        this.state = 3639;
                        this.match(vbParser.PERIOD);
                        this.state = 3640;
                        this.identifierOrKeyword();
                        this.state = 3642;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.LEFT_PAREN) {
                            this.state = 3641;
                            this.typeArityList();
                        }
                        this.state = 3648;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeArityList() {
        let localctx = new TypeArityListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 596, vbParser.RULE_typeArityList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3651;
            this.match(vbParser.LEFT_PAREN);
            this.state = 3652;
            this.match(vbParser.OF);
            this.state = 3654;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.COMMA) {
                this.state = 3653;
                this.commaList();
            }
            this.state = 3656;
            this.match(vbParser.RIGHT_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    commaList() {
        let localctx = new CommaListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 598, vbParser.RULE_commaList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3658;
            this.match(vbParser.COMMA);
            this.state = 3662;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 3659;
                this.match(vbParser.COMMA);
                this.state = 3664;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeOfIsExpression() {
        let localctx = new TypeOfIsExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 600, vbParser.RULE_typeOfIsExpression);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3665;
            this.match(vbParser.TYPEOF);
            this.state = 3666;
            this.expression(0);
            this.state = 3667;
            this.match(vbParser.IS);
            this.state = 3669;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 3668;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 3671;
            this.typeName();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    getXmlNamespaceExpression() {
        let localctx = new GetXmlNamespaceExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 602, vbParser.RULE_getXmlNamespaceExpression);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3673;
            this.match(vbParser.GET_XML_NAMESPACE);
            this.state = 3674;
            this.match(vbParser.LEFT_PAREN);
            this.state = 3676;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLNamespaceNameStartCharacter) {
                this.state = 3675;
                this.xMLNamespaceName();
            }
            this.state = 3678;
            this.match(vbParser.RIGHT_PAREN);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    argumentList() {
        let localctx = new ArgumentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 604, vbParser.RULE_argumentList);
        try {
            this.state = 3686;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 433, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3680;
                    this.positionalArgumentList();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3681;
                    this.positionalArgumentList();
                    this.state = 3682;
                    this.match(vbParser.COMMA);
                    this.state = 3683;
                    this.namedArgumentList();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3685;
                    this.namedArgumentList();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    positionalArgumentList() {
        let localctx = new PositionalArgumentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 606, vbParser.RULE_positionalArgumentList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3688;
            this.expression(0);
            this.state = 3695;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 435, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 3689;
                    this.match(vbParser.COMMA);
                    this.state = 3691;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DOUBLE - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (vbParser.FROM - 71)) | (1 << (vbParser.FUNCTION - 71)) | (1 << (vbParser.GETTYPE - 71)) | (1 << (vbParser.GLOBAL - 71)) | (1 << (vbParser.IF - 71)) | (1 << (vbParser.INTEGER - 71)) | (1 << (vbParser.ITERATOR - 71)) | (1 << (vbParser.LONG - 71)) | (1 << (vbParser.ME - 71)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vbParser.MYBASE - 106)) | (1 << (vbParser.MYCLASS - 106)) | (1 << (vbParser.NEW - 106)) | (1 << (vbParser.NOT - 106)) | (1 << (vbParser.NOTHING - 106)) | (1 << (vbParser.OBJECT - 106)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.SUB - 145)) | (1 << (vbParser.TRYCAST - 145)) | (1 << (vbParser.TYPEOF - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || _la === vbParser.GET_XML_NAMESPACE || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                        this.state = 3690;
                        this.expression(0);
                    }
                }
                this.state = 3697;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 435, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namedArgumentList() {
        let localctx = new NamedArgumentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 608, vbParser.RULE_namedArgumentList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3698;
            this.identifierOrKeyword();
            this.state = 3699;
            this.match(vbParser.COLON);
            this.state = 3700;
            this.match(vbParser.EQUALS);
            this.state = 3701;
            this.expression(0);
            this.state = 3710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 3702;
                this.match(vbParser.COMMA);
                this.state = 3703;
                this.identifierOrKeyword();
                this.state = 3704;
                this.match(vbParser.COLON);
                this.state = 3705;
                this.match(vbParser.EQUALS);
                this.state = 3706;
                this.expression(0);
                this.state = 3712;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    newExpression() {
        let localctx = new NewExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 610, vbParser.RULE_newExpression);
        try {
            this.state = 3716;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 437, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3713;
                    this.objectCreationExpression();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3714;
                    this.arrayExpression();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3715;
                    this.anonymousObjectCreationExpression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectCreationExpression() {
        let localctx = new ObjectCreationExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 612, vbParser.RULE_objectCreationExpression);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3718;
            this.match(vbParser.NEW);
            this.state = 3719;
            this.nonArrayTypeName(0);
            this.state = 3725;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 439, this._ctx);
            if (la_ === 1) {
                this.state = 3720;
                this.match(vbParser.LEFT_PAREN);
                this.state = 3722;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DOUBLE - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (vbParser.FROM - 71)) | (1 << (vbParser.FUNCTION - 71)) | (1 << (vbParser.GETTYPE - 71)) | (1 << (vbParser.GLOBAL - 71)) | (1 << (vbParser.IF - 71)) | (1 << (vbParser.INTEGER - 71)) | (1 << (vbParser.ITERATOR - 71)) | (1 << (vbParser.LONG - 71)) | (1 << (vbParser.ME - 71)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vbParser.MYBASE - 106)) | (1 << (vbParser.MYCLASS - 106)) | (1 << (vbParser.NEW - 106)) | (1 << (vbParser.NOT - 106)) | (1 << (vbParser.NOTHING - 106)) | (1 << (vbParser.OBJECT - 106)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.SUB - 145)) | (1 << (vbParser.TRYCAST - 145)) | (1 << (vbParser.TYPEOF - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || _la === vbParser.GET_XML_NAMESPACE || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                    this.state = 3721;
                    this.argumentList();
                }
                this.state = 3724;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 3728;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 440, this._ctx);
            if (la_ === 1) {
                this.state = 3727;
                this.objectCreationExpressionInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectCreationExpressionInitializer() {
        let localctx = new ObjectCreationExpressionInitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 614, vbParser.RULE_objectCreationExpressionInitializer);
        try {
            this.state = 3732;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.WITH:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3730;
                    this.objectMemberInitializer();
                    break;
                case vbParser.FROM:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3731;
                    this.objectCollectionInitializer();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectMemberInitializer() {
        let localctx = new ObjectMemberInitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 616, vbParser.RULE_objectMemberInitializer);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3734;
            this.match(vbParser.WITH);
            this.state = 3735;
            this.match(vbParser.LEFT_BRACE);
            this.state = 3736;
            this.fieldInitializerList();
            this.state = 3737;
            this.match(vbParser.RIGHT_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fieldInitializerList() {
        let localctx = new FieldInitializerListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 618, vbParser.RULE_fieldInitializerList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3739;
            this.fieldInitializer();
            this.state = 3744;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 3740;
                this.match(vbParser.COMMA);
                this.state = 3741;
                this.fieldInitializer();
                this.state = 3746;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fieldInitializer() {
        let localctx = new FieldInitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 620, vbParser.RULE_fieldInitializer);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3748;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.KEY) {
                this.state = 3747;
                this.match(vbParser.KEY);
            }
            this.state = 3754;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 444, this._ctx);
            if (la_ === 1) {
                this.state = 3750;
                this.match(vbParser.PERIOD);
                this.state = 3751;
                this.identifierOrKeyword();
                this.state = 3752;
                this.match(vbParser.EQUALS);
            }
            this.state = 3756;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    objectCollectionInitializer() {
        let localctx = new ObjectCollectionInitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 622, vbParser.RULE_objectCollectionInitializer);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3758;
            this.match(vbParser.FROM);
            this.state = 3759;
            this.collectionInitializer();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    collectionInitializer() {
        let localctx = new CollectionInitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 624, vbParser.RULE_collectionInitializer);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3761;
            this.match(vbParser.LEFT_BRACE);
            this.state = 3763;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if ((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << vbParser.ADDRESSOF) | (1 << vbParser.AGGREGATE) | (1 << vbParser.ASYNC) | (1 << vbParser.AWAIT) | (1 << vbParser.BOOLEAN) | (1 << vbParser.BYTE) | (1 << vbParser.CBOOL) | (1 << vbParser.CBYTE) | (1 << vbParser.CCHAR) | (1 << vbParser.CDATE) | (1 << vbParser.CDBL) | (1 << vbParser.CDEC) | (1 << vbParser.CHAR) | (1 << vbParser.CINT))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (vbParser.CLNG - 32)) | (1 << (vbParser.COBJ - 32)) | (1 << (vbParser.CSBYTE - 32)) | (1 << (vbParser.CSHORT - 32)) | (1 << (vbParser.CSNG - 32)) | (1 << (vbParser.CSTR - 32)) | (1 << (vbParser.CTYPE - 32)) | (1 << (vbParser.CUINT - 32)) | (1 << (vbParser.CULNG - 32)) | (1 << (vbParser.CUSHORT - 32)) | (1 << (vbParser.DATE - 32)) | (1 << (vbParser.DECIMAL - 32)) | (1 << (vbParser.DIRECTCAST - 32)) | (1 << (vbParser.DOUBLE - 32)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (vbParser.FROM - 71)) | (1 << (vbParser.FUNCTION - 71)) | (1 << (vbParser.GETTYPE - 71)) | (1 << (vbParser.GLOBAL - 71)) | (1 << (vbParser.IF - 71)) | (1 << (vbParser.INTEGER - 71)) | (1 << (vbParser.ITERATOR - 71)) | (1 << (vbParser.LONG - 71)) | (1 << (vbParser.ME - 71)))) !== 0) || ((((_la - 106)) & ~0x1f) == 0 && ((1 << (_la - 106)) & ((1 << (vbParser.MYBASE - 106)) | (1 << (vbParser.MYCLASS - 106)) | (1 << (vbParser.NEW - 106)) | (1 << (vbParser.NOT - 106)) | (1 << (vbParser.NOTHING - 106)) | (1 << (vbParser.OBJECT - 106)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (vbParser.SBYTE - 145)) | (1 << (vbParser.SHORT - 145)) | (1 << (vbParser.SINGLE - 145)) | (1 << (vbParser.STRING - 145)) | (1 << (vbParser.SUB - 145)) | (1 << (vbParser.TRYCAST - 145)) | (1 << (vbParser.TYPEOF - 145)) | (1 << (vbParser.UINTEGER - 145)) | (1 << (vbParser.ULONG - 145)) | (1 << (vbParser.USHORT - 145)))) !== 0) || _la === vbParser.GET_XML_NAMESPACE || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (vbParser.ZERO - 221)) | (1 << (vbParser.ONE - 221)) | (1 << (vbParser.TWO - 221)) | (1 << (vbParser.THREE - 221)) | (1 << (vbParser.FOUR - 221)) | (1 << (vbParser.FIVE - 221)) | (1 << (vbParser.SIX - 221)) | (1 << (vbParser.SEVEN - 221)) | (1 << (vbParser.EIGHT - 221)) | (1 << (vbParser.NINE - 221)) | (1 << (vbParser.LINE_TERMINATOR - 221)) | (1 << (vbParser.DOUBLE_QUOTE_CHARACTER - 221)) | (1 << (vbParser.LEFT_ARROW - 221)) | (1 << (vbParser.AMPERSAND - 221)) | (1 << (vbParser.POUND - 221)) | (1 << (vbParser.UNDERSCORE - 221)) | (1 << (vbParser.PERIOD - 221)) | (1 << (vbParser.MINUS - 221)) | (1 << (vbParser.PLUS - 221)))) !== 0) || ((((_la - 255)) & ~0x1f) == 0 && ((1 << (_la - 255)) & ((1 << (vbParser.LEFT_PAREN - 255)) | (1 << (vbParser.LEFT_BRACE - 255)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 255)) | (1 << (vbParser.A - 255)) | (1 << (vbParser.B - 255)) | (1 << (vbParser.C - 255)) | (1 << (vbParser.D - 255)) | (1 << (vbParser.E - 255)) | (1 << (vbParser.F - 255)) | (1 << (vbParser.G - 255)) | (1 << (vbParser.H - 255)) | (1 << (vbParser.I - 255)) | (1 << (vbParser.J - 255)) | (1 << (vbParser.K - 255)) | (1 << (vbParser.L - 255)) | (1 << (vbParser.M - 255)) | (1 << (vbParser.N - 255)) | (1 << (vbParser.O - 255)) | (1 << (vbParser.P - 255)) | (1 << (vbParser.Q - 255)))) !== 0) || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (vbParser.R - 287)) | (1 << (vbParser.S - 287)) | (1 << (vbParser.T - 287)) | (1 << (vbParser.U - 287)) | (1 << (vbParser.V - 287)) | (1 << (vbParser.W - 287)) | (1 << (vbParser.X - 287)) | (1 << (vbParser.Y - 287)) | (1 << (vbParser.Z - 287)))) !== 0)) {
                this.state = 3762;
                this.collectionElementList();
            }
            this.state = 3765;
            this.match(vbParser.RIGHT_BRACE);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    collectionElementList() {
        let localctx = new CollectionElementListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 626, vbParser.RULE_collectionElementList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3767;
            this.collectionElement();
            this.state = 3772;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.COMMA) {
                this.state = 3768;
                this.match(vbParser.COMMA);
                this.state = 3769;
                this.collectionElement();
                this.state = 3774;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    collectionElement() {
        let localctx = new CollectionElementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 628, vbParser.RULE_collectionElement);
        try {
            this.state = 3777;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 447, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3775;
                    this.expression(0);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3776;
                    this.collectionInitializer();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayExpression() {
        let localctx = new ArrayExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 630, vbParser.RULE_arrayExpression);
        try {
            this.state = 3781;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.NEW:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3779;
                    this.arrayCreationExpression();
                    break;
                case vbParser.LEFT_BRACE:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3780;
                    this.arrayLiteralExpression();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayCreationExpression() {
        let localctx = new ArrayCreationExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 632, vbParser.RULE_arrayCreationExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3783;
            this.match(vbParser.NEW);
            this.state = 3784;
            this.nonArrayTypeName(0);
            this.state = 3785;
            this.arrayNameModifier();
            this.state = 3786;
            this.collectionInitializer();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayLiteralExpression() {
        let localctx = new ArrayLiteralExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 634, vbParser.RULE_arrayLiteralExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3788;
            this.collectionInitializer();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    anonymousObjectCreationExpression() {
        let localctx = new AnonymousObjectCreationExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 636, vbParser.RULE_anonymousObjectCreationExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3790;
            this.match(vbParser.NEW);
            this.state = 3791;
            this.objectMemberInitializer();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    castExpression() {
        let localctx = new CastExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 638, vbParser.RULE_castExpression);
        try {
            this.state = 3819;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.DIRECTCAST:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3793;
                    this.match(vbParser.DIRECTCAST);
                    this.state = 3794;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 3795;
                    this.expression(0);
                    this.state = 3796;
                    this.match(vbParser.COMMA);
                    this.state = 3797;
                    this.typeName();
                    this.state = 3798;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
                case vbParser.TRYCAST:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3800;
                    this.match(vbParser.TRYCAST);
                    this.state = 3801;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 3802;
                    this.expression(0);
                    this.state = 3803;
                    this.match(vbParser.COMMA);
                    this.state = 3804;
                    this.typeName();
                    this.state = 3805;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
                case vbParser.CTYPE:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3807;
                    this.match(vbParser.CTYPE);
                    this.state = 3808;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 3809;
                    this.expression(0);
                    this.state = 3810;
                    this.match(vbParser.COMMA);
                    this.state = 3811;
                    this.typeName();
                    this.state = 3812;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
                case vbParser.CBOOL:
                case vbParser.CBYTE:
                case vbParser.CCHAR:
                case vbParser.CDATE:
                case vbParser.CDBL:
                case vbParser.CDEC:
                case vbParser.CINT:
                case vbParser.CLNG:
                case vbParser.COBJ:
                case vbParser.CSBYTE:
                case vbParser.CSHORT:
                case vbParser.CSNG:
                case vbParser.CSTR:
                case vbParser.CUINT:
                case vbParser.CULNG:
                case vbParser.CUSHORT:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3814;
                    this.castTarget();
                    this.state = 3815;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 3816;
                    this.expression(0);
                    this.state = 3817;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    castTarget() {
        let localctx = new CastTargetContext(this, this._ctx, this.state);
        this.enterRule(localctx, 640, vbParser.RULE_castTarget);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3821;
            _la = this._input.LA(1);
            if (!(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (vbParser.CBOOL - 23)) | (1 << (vbParser.CBYTE - 23)) | (1 << (vbParser.CCHAR - 23)) | (1 << (vbParser.CDATE - 23)) | (1 << (vbParser.CDBL - 23)) | (1 << (vbParser.CDEC - 23)) | (1 << (vbParser.CINT - 23)) | (1 << (vbParser.CLNG - 23)) | (1 << (vbParser.COBJ - 23)) | (1 << (vbParser.CSBYTE - 23)) | (1 << (vbParser.CSHORT - 23)) | (1 << (vbParser.CSNG - 23)) | (1 << (vbParser.CSTR - 23)) | (1 << (vbParser.CUINT - 23)) | (1 << (vbParser.CULNG - 23)) | (1 << (vbParser.CUSHORT - 23)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unaryPlusExpression() {
        let localctx = new UnaryPlusExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 642, vbParser.RULE_unaryPlusExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3823;
            this.match(vbParser.PLUS);
            this.state = 3824;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unaryMinusExpression() {
        let localctx = new UnaryMinusExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 644, vbParser.RULE_unaryMinusExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3826;
            this.match(vbParser.MINUS);
            this.state = 3827;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    booleanExpression() {
        let localctx = new BooleanExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 646, vbParser.RULE_booleanExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3829;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lambdaExpression() {
        let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 648, vbParser.RULE_lambdaExpression);
        try {
            this.state = 3833;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 450, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3831;
                    this.singleLineLambda();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3832;
                    this.multiLineLambda();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    singleLineLambda() {
        let localctx = new SingleLineLambdaContext(this, this._ctx, this.state);
        this.enterRule(localctx, 650, vbParser.RULE_singleLineLambda);
        var _la = 0;
        try {
            this.state = 3859;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.ASYNC:
                case vbParser.FUNCTION:
                case vbParser.ITERATOR:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3838;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === vbParser.ASYNC || _la === vbParser.ITERATOR) {
                        this.state = 3835;
                        this.lambdaModifier();
                        this.state = 3840;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 3841;
                    this.match(vbParser.FUNCTION);
                    this.state = 3847;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 453, this._ctx);
                    if (la_ === 1) {
                        this.state = 3842;
                        this.match(vbParser.LEFT_PAREN);
                        this.state = 3844;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                            this.state = 3843;
                            this.parameterList();
                        }
                        this.state = 3846;
                        this.match(vbParser.RIGHT_PAREN);
                    }
                    this.state = 3849;
                    this.expression(0);
                    break;
                case vbParser.SUB:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3850;
                    this.match(vbParser.SUB);
                    this.state = 3856;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 455, this._ctx);
                    if (la_ === 1) {
                        this.state = 3851;
                        this.match(vbParser.LEFT_PAREN);
                        this.state = 3853;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                            this.state = 3852;
                            this.parameterList();
                        }
                        this.state = 3855;
                        this.match(vbParser.RIGHT_PAREN);
                    }
                    this.state = 3858;
                    this.statement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multiLineLambda() {
        let localctx = new MultiLineLambdaContext(this, this._ctx, this.state);
        this.enterRule(localctx, 652, vbParser.RULE_multiLineLambda);
        try {
            this.state = 3863;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 457, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3861;
                    this.multiLineFunctionLambda();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3862;
                    this.multiLineSubLambda();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multiLineFunctionLambda() {
        let localctx = new MultiLineFunctionLambdaContext(this, this._ctx, this.state);
        this.enterRule(localctx, 654, vbParser.RULE_multiLineFunctionLambda);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3868;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.ASYNC || _la === vbParser.ITERATOR) {
                this.state = 3865;
                this.lambdaModifier();
                this.state = 3870;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3871;
            this.match(vbParser.FUNCTION);
            this.state = 3877;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 3872;
                this.match(vbParser.LEFT_PAREN);
                this.state = 3874;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                    this.state = 3873;
                    this.parameterList();
                }
                this.state = 3876;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 3881;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 3879;
                this.match(vbParser.AS);
                this.state = 3880;
                this.typeName();
            }
            this.state = 3883;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 3884;
            this.block();
            this.state = 3885;
            this.match(vbParser.END);
            this.state = 3886;
            this.match(vbParser.FUNCTION);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    multiLineSubLambda() {
        let localctx = new MultiLineSubLambdaContext(this, this._ctx, this.state);
        this.enterRule(localctx, 656, vbParser.RULE_multiLineSubLambda);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3891;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.ASYNC || _la === vbParser.ITERATOR) {
                this.state = 3888;
                this.lambdaModifier();
                this.state = 3893;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3894;
            this.match(vbParser.SUB);
            this.state = 3900;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LEFT_PAREN) {
                this.state = 3895;
                this.match(vbParser.LEFT_PAREN);
                this.state = 3897;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.BYREF || _la === vbParser.BYVAL || _la === vbParser.OPTIONAL || _la === vbParser.PARAM_ARRAY || ((((_la - 231)) & ~0x1f) == 0 && ((1 << (_la - 231)) & ((1 << (vbParser.LINE_TERMINATOR - 231)) | (1 << (vbParser.LEFT_ARROW - 231)) | (1 << (vbParser.UNDERSCORE - 231)) | (1 << (vbParser.LEFT_SQUARE_BRACKET - 231)))) !== 0) || ((((_la - 270)) & ~0x1f) == 0 && ((1 << (_la - 270)) & ((1 << (vbParser.A - 270)) | (1 << (vbParser.B - 270)) | (1 << (vbParser.C - 270)) | (1 << (vbParser.D - 270)) | (1 << (vbParser.E - 270)) | (1 << (vbParser.F - 270)) | (1 << (vbParser.G - 270)) | (1 << (vbParser.H - 270)) | (1 << (vbParser.I - 270)) | (1 << (vbParser.J - 270)) | (1 << (vbParser.K - 270)) | (1 << (vbParser.L - 270)) | (1 << (vbParser.M - 270)) | (1 << (vbParser.N - 270)) | (1 << (vbParser.O - 270)) | (1 << (vbParser.P - 270)) | (1 << (vbParser.Q - 270)) | (1 << (vbParser.R - 270)) | (1 << (vbParser.S - 270)) | (1 << (vbParser.T - 270)) | (1 << (vbParser.U - 270)) | (1 << (vbParser.V - 270)) | (1 << (vbParser.W - 270)) | (1 << (vbParser.X - 270)) | (1 << (vbParser.Y - 270)) | (1 << (vbParser.Z - 270)))) !== 0)) {
                    this.state = 3896;
                    this.parameterList();
                }
                this.state = 3899;
                this.match(vbParser.RIGHT_PAREN);
            }
            this.state = 3902;
            this.match(vbParser.LINE_TERMINATOR);
            this.state = 3903;
            this.block();
            this.state = 3904;
            this.match(vbParser.END);
            this.state = 3905;
            this.match(vbParser.SUB);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lambdaModifier() {
        let localctx = new LambdaModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 658, vbParser.RULE_lambdaModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3907;
            _la = this._input.LA(1);
            if (!(_la === vbParser.ASYNC || _la === vbParser.ITERATOR)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    queryExpression() {
        let localctx = new QueryExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 660, vbParser.RULE_queryExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3909;
            this.fromOrAggregateQueryOperator();
            this.state = 3913;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 465, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 3910;
                    this.queryOperator();
                }
                this.state = 3915;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 465, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fromOrAggregateQueryOperator() {
        let localctx = new FromOrAggregateQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 662, vbParser.RULE_fromOrAggregateQueryOperator);
        try {
            this.state = 3918;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 466, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3916;
                    this.fromQueryOperator();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3917;
                    this.aggregateQueryOperator();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    queryOperator() {
        let localctx = new QueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 664, vbParser.RULE_queryOperator);
        try {
            this.state = 3930;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 467, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3920;
                    this.fromQueryOperator();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3921;
                    this.aggregateQueryOperator();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 3922;
                    this.selectQueryOperator();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 3923;
                    this.distinctQueryOperator();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 3924;
                    this.whereQueryOperator();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 3925;
                    this.orderByQueryOperator();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 3926;
                    this.partitionQueryOperator();
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 3927;
                    this.letQueryOperator();
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 3928;
                    this.groupByQueryOperator();
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 3929;
                    this.joinOrGroupJoinQueryOperator();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    joinOrGroupJoinQueryOperator() {
        let localctx = new JoinOrGroupJoinQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 666, vbParser.RULE_joinOrGroupJoinQueryOperator);
        try {
            this.state = 3934;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 468, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 3932;
                    this.joinQueryOperator();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 3933;
                    this.groupJoinQueryOperator();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    collectionRangeVariableDeclarationList() {
        let localctx = new CollectionRangeVariableDeclarationListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 668, vbParser.RULE_collectionRangeVariableDeclarationList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3936;
            this.collectionRangeVariableDeclaration();
            this.state = 3941;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 469, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 3937;
                    this.match(vbParser.COMMA);
                    this.state = 3938;
                    this.collectionRangeVariableDeclaration();
                }
                this.state = 3943;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 469, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    collectionRangeVariableDeclaration() {
        let localctx = new CollectionRangeVariableDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 670, vbParser.RULE_collectionRangeVariableDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3944;
            this.identifier();
            this.state = 3947;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 3945;
                this.match(vbParser.AS);
                this.state = 3946;
                this.typeName();
            }
            this.state = 3949;
            this.match(vbParser.IN);
            this.state = 3951;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 471, this._ctx);
            if (la_ === 1) {
                this.state = 3950;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 3953;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expressionRangeVariableDeclarationList() {
        let localctx = new ExpressionRangeVariableDeclarationListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 672, vbParser.RULE_expressionRangeVariableDeclarationList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3955;
            this.expressionRangeVariableDeclaration();
            this.state = 3960;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 472, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 3956;
                    this.match(vbParser.COMMA);
                    this.state = 3957;
                    this.expressionRangeVariableDeclaration();
                }
                this.state = 3962;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 472, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expressionRangeVariableDeclaration() {
        let localctx = new ExpressionRangeVariableDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 674, vbParser.RULE_expressionRangeVariableDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3963;
            this.identifier();
            this.state = 3966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.AS) {
                this.state = 3964;
                this.match(vbParser.AS);
                this.state = 3965;
                this.typeName();
            }
            this.state = 3968;
            this.match(vbParser.EQUALS);
            this.state = 3969;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    fromQueryOperator() {
        let localctx = new FromQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 676, vbParser.RULE_fromQueryOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3972;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 3971;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 3974;
            this.match(vbParser.FROM);
            this.state = 3976;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 3975;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 3978;
            this.collectionRangeVariableDeclarationList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    joinQueryOperator() {
        let localctx = new JoinQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 678, vbParser.RULE_joinQueryOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 3981;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 3980;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 3983;
            this.match(vbParser.JOIN);
            this.state = 3985;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 3984;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 3987;
            this.collectionRangeVariableDeclaration();
            this.state = 3989;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 478, this._ctx);
            if (la_ === 1) {
                this.state = 3988;
                this.joinOrGroupJoinQueryOperator();
            }
            this.state = 3992;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 3991;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 3994;
            this.match(vbParser.ON);
            this.state = 3996;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 480, this._ctx);
            if (la_ === 1) {
                this.state = 3995;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 3998;
            this.joinConditionList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    joinConditionList() {
        let localctx = new JoinConditionListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 680, vbParser.RULE_joinConditionList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4000;
            this.joinCondition();
            this.state = 4008;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 482, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 4001;
                    this.match(vbParser.AND);
                    this.state = 4003;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 481, this._ctx);
                    if (la_ === 1) {
                        this.state = 4002;
                        this.match(vbParser.LINE_TERMINATOR);
                    }
                    this.state = 4005;
                    this.joinCondition();
                }
                this.state = 4010;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 482, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    joinCondition() {
        let localctx = new JoinConditionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 682, vbParser.RULE_joinCondition);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4011;
            this.expression(0);
            this.state = 4012;
            this.match(vbParser.EQUALSKEYWORD);
            this.state = 4014;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 483, this._ctx);
            if (la_ === 1) {
                this.state = 4013;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4016;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    letQueryOperator() {
        let localctx = new LetQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 684, vbParser.RULE_letQueryOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4019;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4018;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4021;
            this.match(vbParser.LET);
            this.state = 4023;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4022;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4025;
            this.expressionRangeVariableDeclarationList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    selectQueryOperator() {
        let localctx = new SelectQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 686, vbParser.RULE_selectQueryOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4028;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4027;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4030;
            this.match(vbParser.SELECT);
            this.state = 4032;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4031;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4034;
            this.expressionRangeVariableDeclarationList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    distinctQueryOperator() {
        let localctx = new DistinctQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 688, vbParser.RULE_distinctQueryOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4037;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4036;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4039;
            this.match(vbParser.DISTINCT);
            this.state = 4041;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 489, this._ctx);
            if (la_ === 1) {
                this.state = 4040;
                this.match(vbParser.LINE_TERMINATOR);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    whereQueryOperator() {
        let localctx = new WhereQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 690, vbParser.RULE_whereQueryOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4044;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4043;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4046;
            this.match(vbParser.WHERE);
            this.state = 4048;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 491, this._ctx);
            if (la_ === 1) {
                this.state = 4047;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4050;
            this.booleanExpression();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    partitionQueryOperator() {
        let localctx = new PartitionQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 692, vbParser.RULE_partitionQueryOperator);
        var _la = 0;
        try {
            this.state = 4086;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 500, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4053;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LINE_TERMINATOR) {
                        this.state = 4052;
                        this.match(vbParser.LINE_TERMINATOR);
                    }
                    this.state = 4055;
                    this.match(vbParser.TAKE);
                    this.state = 4057;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 493, this._ctx);
                    if (la_ === 1) {
                        this.state = 4056;
                        this.match(vbParser.LINE_TERMINATOR);
                    }
                    this.state = 4059;
                    this.expression(0);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4061;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LINE_TERMINATOR) {
                        this.state = 4060;
                        this.match(vbParser.LINE_TERMINATOR);
                    }
                    this.state = 4063;
                    this.match(vbParser.TAKE);
                    this.state = 4064;
                    this.match(vbParser.WHILE);
                    this.state = 4066;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 495, this._ctx);
                    if (la_ === 1) {
                        this.state = 4065;
                        this.match(vbParser.LINE_TERMINATOR);
                    }
                    this.state = 4068;
                    this.booleanExpression();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 4070;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LINE_TERMINATOR) {
                        this.state = 4069;
                        this.match(vbParser.LINE_TERMINATOR);
                    }
                    this.state = 4072;
                    this.match(vbParser.SKIP_KEYWORD);
                    this.state = 4074;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 497, this._ctx);
                    if (la_ === 1) {
                        this.state = 4073;
                        this.match(vbParser.LINE_TERMINATOR);
                    }
                    this.state = 4076;
                    this.expression(0);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 4078;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.LINE_TERMINATOR) {
                        this.state = 4077;
                        this.match(vbParser.LINE_TERMINATOR);
                    }
                    this.state = 4080;
                    this.match(vbParser.SKIP_KEYWORD);
                    this.state = 4081;
                    this.match(vbParser.WHILE);
                    this.state = 4083;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 499, this._ctx);
                    if (la_ === 1) {
                        this.state = 4082;
                        this.match(vbParser.LINE_TERMINATOR);
                    }
                    this.state = 4085;
                    this.booleanExpression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    orderByQueryOperator() {
        let localctx = new OrderByQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 694, vbParser.RULE_orderByQueryOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4089;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4088;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4091;
            this.match(vbParser.ORDER);
            this.state = 4092;
            this.match(vbParser.BY);
            this.state = 4094;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 502, this._ctx);
            if (la_ === 1) {
                this.state = 4093;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4096;
            this.orderExpressionList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    orderExpressionList() {
        let localctx = new OrderExpressionListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 696, vbParser.RULE_orderExpressionList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4098;
            this.orderExpression();
            this.state = 4103;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 503, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 4099;
                    this.match(vbParser.COMMA);
                    this.state = 4100;
                    this.orderExpression();
                }
                this.state = 4105;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 503, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    orderExpression() {
        let localctx = new OrderExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 698, vbParser.RULE_orderExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4106;
            this.expression(0);
            this.state = 4108;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 504, this._ctx);
            if (la_ === 1) {
                this.state = 4107;
                this.ordering();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    ordering() {
        let localctx = new OrderingContext(this, this._ctx, this.state);
        this.enterRule(localctx, 700, vbParser.RULE_ordering);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4110;
            _la = this._input.LA(1);
            if (!(_la === vbParser.ASCENDING || _la === vbParser.DESCENDING)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    groupByQueryOperator() {
        let localctx = new GroupByQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 702, vbParser.RULE_groupByQueryOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4113;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4112;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4115;
            this.match(vbParser.GROUP);
            this.state = 4120;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 507, this._ctx);
            if (la_ === 1) {
                this.state = 4117;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.LINE_TERMINATOR) {
                    this.state = 4116;
                    this.match(vbParser.LINE_TERMINATOR);
                }
                this.state = 4119;
                this.expressionRangeVariableDeclarationList();
            }
            this.state = 4123;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4122;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4125;
            this.match(vbParser.BY);
            this.state = 4127;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4126;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4129;
            this.expressionRangeVariableDeclarationList();
            this.state = 4131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4130;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4133;
            this.match(vbParser.INTO);
            this.state = 4135;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4134;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4137;
            this.expressionRangeVariableDeclarationList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    aggregateQueryOperator() {
        let localctx = new AggregateQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 704, vbParser.RULE_aggregateQueryOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4140;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4139;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4142;
            this.match(vbParser.AGGREGATE);
            this.state = 4144;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4143;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4146;
            this.collectionRangeVariableDeclaration();
            this.state = 4150;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 514, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 4147;
                    this.queryOperator();
                }
                this.state = 4152;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 514, this._ctx);
            }
            this.state = 4154;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4153;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4156;
            this.match(vbParser.INTO);
            this.state = 4158;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4157;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4160;
            this.expressionRangeVariableDeclarationList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    groupJoinQueryOperator() {
        let localctx = new GroupJoinQueryOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 706, vbParser.RULE_groupJoinQueryOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4162;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4165;
            this.match(vbParser.GROUP);
            this.state = 4166;
            this.match(vbParser.JOIN);
            this.state = 4168;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4167;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4170;
            this.collectionRangeVariableDeclaration();
            this.state = 4172;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 519, this._ctx);
            if (la_ === 1) {
                this.state = 4171;
                this.joinOrGroupJoinQueryOperator();
            }
            this.state = 4175;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4174;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4177;
            this.match(vbParser.ON);
            this.state = 4179;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 521, this._ctx);
            if (la_ === 1) {
                this.state = 4178;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4181;
            this.joinConditionList();
            this.state = 4183;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4182;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4185;
            this.match(vbParser.INTO);
            this.state = 4187;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4186;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4189;
            this.expressionRangeVariableDeclarationList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    conditionalExpression() {
        let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 708, vbParser.RULE_conditionalExpression);
        try {
            this.state = 4207;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 524, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4191;
                    this.match(vbParser.IF);
                    this.state = 4192;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 4193;
                    this.booleanExpression();
                    this.state = 4194;
                    this.match(vbParser.COMMA);
                    this.state = 4195;
                    this.expression(0);
                    this.state = 4196;
                    this.match(vbParser.COMMA);
                    this.state = 4197;
                    this.expression(0);
                    this.state = 4198;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4200;
                    this.match(vbParser.IF);
                    this.state = 4201;
                    this.match(vbParser.LEFT_PAREN);
                    this.state = 4202;
                    this.expression(0);
                    this.state = 4203;
                    this.match(vbParser.COMMA);
                    this.state = 4204;
                    this.expression(0);
                    this.state = 4205;
                    this.match(vbParser.RIGHT_PAREN);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLLiteralExpression() {
        let localctx = new XMLLiteralExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 710, vbParser.RULE_xMLLiteralExpression);
        try {
            this.state = 4214;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 525, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4209;
                    this.xMLDocument();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4210;
                    this.xMLElement();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 4211;
                    this.xMLProcessingInstruction();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 4212;
                    this.xMLComment();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 4213;
                    this.xMLCDATASection();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLEmbeddedExpression() {
        let localctx = new XMLEmbeddedExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 712, vbParser.RULE_xMLEmbeddedExpression);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4216;
            this.match(vbParser.LEFT_ARROW);
            this.state = 4217;
            this.match(vbParser.PERCENT);
            this.state = 4218;
            this.match(vbParser.EQUALS);
            this.state = 4220;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 526, this._ctx);
            if (la_ === 1) {
                this.state = 4219;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4222;
            this.expression(0);
            this.state = 4224;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.LINE_TERMINATOR) {
                this.state = 4223;
                this.match(vbParser.LINE_TERMINATOR);
            }
            this.state = 4226;
            this.match(vbParser.PERCENT);
            this.state = 4227;
            this.match(vbParser.RIGHT_ARROW);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLDocument() {
        let localctx = new XMLDocumentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 714, vbParser.RULE_xMLDocument);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4229;
            this.xMLDocumentPrologue();
            this.state = 4233;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 528, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 4230;
                    this.xMLMisc();
                }
                this.state = 4235;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 528, this._ctx);
            }
            this.state = 4236;
            this.xMLDocumentBody();
            this.state = 4240;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 529, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 4237;
                    this.xMLMisc();
                }
                this.state = 4242;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 529, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLDocumentPrologue() {
        let localctx = new XMLDocumentPrologueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 716, vbParser.RULE_xMLDocumentPrologue);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4243;
            this.match(vbParser.LEFT_ARROW);
            this.state = 4244;
            this.match(vbParser.QUESTION_MARK);
            this.state = 4245;
            this.match(vbParser.XML);
            this.state = 4246;
            this.xMLVersion();
            this.state = 4248;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 530, this._ctx);
            if (la_ === 1) {
                this.state = 4247;
                this.xMLEncoding();
            }
            this.state = 4251;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 531, this._ctx);
            if (la_ === 1) {
                this.state = 4250;
                this.xMLStandalone();
            }
            this.state = 4254;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 4253;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 4256;
            this.match(vbParser.QUESTION_MARK);
            this.state = 4257;
            this.match(vbParser.RIGHT_ARROW);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLVersion() {
        let localctx = new XMLVersionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 718, vbParser.RULE_xMLVersion);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4259;
            this.match(vbParser.XMLWhitespace);
            this.state = 4260;
            this.match(vbParser.VERSION);
            this.state = 4262;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 4261;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 4264;
            this.match(vbParser.EQUALS);
            this.state = 4266;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 4265;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 4268;
            this.xMLVersionNumberValue();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLVersionNumberValue() {
        let localctx = new XMLVersionNumberValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 720, vbParser.RULE_xMLVersionNumberValue);
        try {
            this.state = 4280;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.SINGLE_QUOTE_CHAR:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4270;
                    this.match(vbParser.SINGLE_QUOTE_CHAR);
                    this.state = 4271;
                    this.match(vbParser.ONE);
                    this.state = 4272;
                    this.match(vbParser.PERIOD);
                    this.state = 4273;
                    this.match(vbParser.ZERO);
                    this.state = 4274;
                    this.match(vbParser.SINGLE_QUOTE_CHAR);
                    break;
                case vbParser.DOUBLE_QUOTE_CHARACTER:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4275;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    this.state = 4276;
                    this.match(vbParser.ONE);
                    this.state = 4277;
                    this.match(vbParser.PERIOD);
                    this.state = 4278;
                    this.match(vbParser.ZERO);
                    this.state = 4279;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLEncoding() {
        let localctx = new XMLEncodingContext(this, this._ctx, this.state);
        this.enterRule(localctx, 722, vbParser.RULE_xMLEncoding);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4282;
            this.match(vbParser.XMLWhitespace);
            this.state = 4283;
            this.match(vbParser.ENCODING);
            this.state = 4285;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 4284;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 4287;
            this.match(vbParser.EQUALS);
            this.state = 4289;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 4288;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 4291;
            this.xMLEncodingNameValue();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLEncodingNameValue() {
        let localctx = new XMLEncodingNameValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 724, vbParser.RULE_xMLEncodingNameValue);
        try {
            this.state = 4301;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.SINGLE_QUOTE_CHAR:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4293;
                    this.match(vbParser.SINGLE_QUOTE_CHAR);
                    this.state = 4294;
                    this.xMLEncodingName();
                    this.state = 4295;
                    this.match(vbParser.SINGLE_QUOTE_CHAR);
                    break;
                case vbParser.DOUBLE_QUOTE_CHARACTER:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4297;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    this.state = 4298;
                    this.xMLEncodingName();
                    this.state = 4299;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLEncodingName() {
        let localctx = new XMLEncodingNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 726, vbParser.RULE_xMLEncodingName);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4303;
            this.match(vbParser.XMLLatinAlphaCharacter);
            this.state = 4307;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vbParser.XMLLatinAlphaCharacter - 199)) | (1 << (vbParser.XMLNumericCharacter - 199)) | (1 << (vbParser.XMLPeriodCharacter - 199)) | (1 << (vbParser.XMLUnderscoreCharacter - 199)) | (1 << (vbParser.XMLDashCharacter - 199)))) !== 0)) {
                this.state = 4304;
                this.xMLEncodingNameCharacter();
                this.state = 4309;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLEncodingNameCharacter() {
        let localctx = new XMLEncodingNameCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 728, vbParser.RULE_xMLEncodingNameCharacter);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4310;
            _la = this._input.LA(1);
            if (!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (vbParser.XMLLatinAlphaCharacter - 199)) | (1 << (vbParser.XMLNumericCharacter - 199)) | (1 << (vbParser.XMLPeriodCharacter - 199)) | (1 << (vbParser.XMLUnderscoreCharacter - 199)) | (1 << (vbParser.XMLDashCharacter - 199)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLStandalone() {
        let localctx = new XMLStandaloneContext(this, this._ctx, this.state);
        this.enterRule(localctx, 730, vbParser.RULE_xMLStandalone);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4312;
            this.match(vbParser.XMLWhitespace);
            this.state = 4313;
            this.match(vbParser.STANDALONE);
            this.state = 4315;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 4314;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 4317;
            this.match(vbParser.EQUALS);
            this.state = 4319;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 4318;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 4321;
            this.xMLYesNoValue();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLYesNoValue() {
        let localctx = new XMLYesNoValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 732, vbParser.RULE_xMLYesNoValue);
        try {
            this.state = 4331;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.SINGLE_QUOTE_CHAR:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4323;
                    this.match(vbParser.SINGLE_QUOTE_CHAR);
                    this.state = 4324;
                    this.xMLYesNo();
                    this.state = 4325;
                    this.match(vbParser.SINGLE_QUOTE_CHAR);
                    break;
                case vbParser.DOUBLE_QUOTE_CHARACTER:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4327;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    this.state = 4328;
                    this.xMLYesNo();
                    this.state = 4329;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLYesNo() {
        let localctx = new XMLYesNoContext(this, this._ctx, this.state);
        this.enterRule(localctx, 734, vbParser.RULE_xMLYesNo);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4333;
            _la = this._input.LA(1);
            if (!(_la === vbParser.YES || _la === vbParser.NO)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLMisc() {
        let localctx = new XMLMiscContext(this, this._ctx, this.state);
        this.enterRule(localctx, 736, vbParser.RULE_xMLMisc);
        try {
            this.state = 4338;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 543, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4335;
                    this.xMLComment();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4336;
                    this.xMLProcessingInstruction();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 4337;
                    this.match(vbParser.XMLWhitespace);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLDocumentBody() {
        let localctx = new XMLDocumentBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 738, vbParser.RULE_xMLDocumentBody);
        try {
            this.state = 4342;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 544, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4340;
                    this.xMLElement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4341;
                    this.xMLEmbeddedExpression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLElement() {
        let localctx = new XMLElementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 740, vbParser.RULE_xMLElement);
        try {
            this.state = 4349;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 545, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4344;
                    this.xMLEmptyElement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4345;
                    this.xMLElementStart();
                    this.state = 4346;
                    this.xMLContent();
                    this.state = 4347;
                    this.xMLElementEnd();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLEmptyElement() {
        let localctx = new XMLEmptyElementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 742, vbParser.RULE_xMLEmptyElement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4351;
            this.match(vbParser.LEFT_ARROW);
            this.state = 4352;
            this.xMLQualifiedNameOrExpression();
            this.state = 4356;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 546, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 4353;
                    this.xMLAttribute();
                }
                this.state = 4358;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 546, this._ctx);
            }
            this.state = 4360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 4359;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 4362;
            this.match(vbParser.SLASH);
            this.state = 4363;
            this.match(vbParser.RIGHT_ARROW);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLElementStart() {
        let localctx = new XMLElementStartContext(this, this._ctx, this.state);
        this.enterRule(localctx, 744, vbParser.RULE_xMLElementStart);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4365;
            this.match(vbParser.LEFT_ARROW);
            this.state = 4366;
            this.xMLQualifiedNameOrExpression();
            this.state = 4370;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 548, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 4367;
                    this.xMLAttribute();
                }
                this.state = 4372;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 548, this._ctx);
            }
            this.state = 4374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 4373;
                this.match(vbParser.XMLWhitespace);
            }
            this.state = 4376;
            this.match(vbParser.RIGHT_ARROW);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLElementEnd() {
        let localctx = new XMLElementEndContext(this, this._ctx, this.state);
        this.enterRule(localctx, 746, vbParser.RULE_xMLElementEnd);
        var _la = 0;
        try {
            this.state = 4389;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 551, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4378;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 4379;
                    this.match(vbParser.SLASH);
                    this.state = 4380;
                    this.match(vbParser.RIGHT_ARROW);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4381;
                    this.match(vbParser.LEFT_ARROW);
                    this.state = 4382;
                    this.match(vbParser.SLASH);
                    this.state = 4383;
                    this.xMLQualifiedName();
                    this.state = 4385;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.XMLWhitespace) {
                        this.state = 4384;
                        this.match(vbParser.XMLWhitespace);
                    }
                    this.state = 4387;
                    this.match(vbParser.RIGHT_ARROW);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLContent() {
        let localctx = new XMLContentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 748, vbParser.RULE_xMLContent);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4392;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLCharacterData) {
                this.state = 4391;
                this.match(vbParser.XMLCharacterData);
            }
            this.state = 4398;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 4394;
                        this.xMLNestedContent();
                        this.state = 4396;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === vbParser.XMLCharacterData) {
                            this.state = 4395;
                            this.match(vbParser.XMLCharacterData);
                        }
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 4400;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 554, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLNestedContent() {
        let localctx = new XMLNestedContentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 750, vbParser.RULE_xMLNestedContent);
        try {
            this.state = 4408;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 555, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4402;
                    this.xMLElement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4403;
                    this.xMLReference();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 4404;
                    this.xMLCDATASection();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 4405;
                    this.xMLProcessingInstruction();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 4406;
                    this.xMLComment();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 4407;
                    this.xMLEmbeddedExpression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLAttribute() {
        let localctx = new XMLAttributeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 752, vbParser.RULE_xMLAttribute);
        var _la = 0;
        try {
            this.state = 4423;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 558, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4410;
                    this.match(vbParser.XMLWhitespace);
                    this.state = 4411;
                    this.xMLAttributeName();
                    this.state = 4413;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.XMLWhitespace) {
                        this.state = 4412;
                        this.match(vbParser.XMLWhitespace);
                    }
                    this.state = 4415;
                    this.match(vbParser.EQUALS);
                    this.state = 4417;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === vbParser.XMLWhitespace) {
                        this.state = 4416;
                        this.match(vbParser.XMLWhitespace);
                    }
                    this.state = 4419;
                    this.xMLAttributeValue();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4421;
                    this.match(vbParser.XMLWhitespace);
                    this.state = 4422;
                    this.xMLEmbeddedExpression();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLAttributeName() {
        let localctx = new XMLAttributeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 754, vbParser.RULE_xMLAttributeName);
        try {
            this.state = 4427;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.XMLNamespaceNameStartCharacter:
                case vbParser.LEFT_ARROW:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4425;
                    this.xMLQualifiedNameOrExpression();
                    break;
                case vbParser.XMLNS:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4426;
                    this.xMLNamespaceAttributeName();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLAttributeValue() {
        let localctx = new XMLAttributeValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 756, vbParser.RULE_xMLAttributeValue);
        var _la = 0;
        try {
            this.state = 4446;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.DOUBLE_QUOTE_CHARACTER:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4429;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    this.state = 4433;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === vbParser.XMLNotDoubleQuote || _la === vbParser.AMPERSAND) {
                        this.state = 4430;
                        this.xMLAttributeDoubleQuoteValueCharacter();
                        this.state = 4435;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 4436;
                    this.match(vbParser.DOUBLE_QUOTE_CHARACTER);
                    break;
                case vbParser.SINGLE_QUOTE_CHAR:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4437;
                    this.match(vbParser.SINGLE_QUOTE_CHAR);
                    this.state = 4441;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === vbParser.XMLNotSingleQuote || _la === vbParser.AMPERSAND) {
                        this.state = 4438;
                        this.xMLAttributeSingleQuoteValueCharacter();
                        this.state = 4443;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 4444;
                    this.match(vbParser.SINGLE_QUOTE_CHAR);
                    break;
                case vbParser.LEFT_ARROW:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 4445;
                    this.xMLEmbeddedExpression();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLAttributeDoubleQuoteValueCharacter() {
        let localctx = new XMLAttributeDoubleQuoteValueCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 758, vbParser.RULE_xMLAttributeDoubleQuoteValueCharacter);
        try {
            this.state = 4450;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.XMLNotDoubleQuote:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4448;
                    this.match(vbParser.XMLNotDoubleQuote);
                    break;
                case vbParser.AMPERSAND:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4449;
                    this.xMLReference();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLAttributeSingleQuoteValueCharacter() {
        let localctx = new XMLAttributeSingleQuoteValueCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 760, vbParser.RULE_xMLAttributeSingleQuoteValueCharacter);
        try {
            this.state = 4454;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.XMLNotSingleQuote:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4452;
                    this.match(vbParser.XMLNotSingleQuote);
                    break;
                case vbParser.AMPERSAND:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4453;
                    this.xMLReference();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLReference() {
        let localctx = new XMLReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 762, vbParser.RULE_xMLReference);
        try {
            this.state = 4458;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 565, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4456;
                    this.xMLEntityReference();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4457;
                    this.xMLCharacterReference();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLEntityReference() {
        let localctx = new XMLEntityReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 764, vbParser.RULE_xMLEntityReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4460;
            this.match(vbParser.AMPERSAND);
            this.state = 4461;
            this.match(vbParser.XMLEntityName);
            this.state = 4462;
            this.match(vbParser.SEMICOLON);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLCharacterReference() {
        let localctx = new XMLCharacterReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 766, vbParser.RULE_xMLCharacterReference);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4464;
            this.match(vbParser.AMPERSAND);
            this.state = 4465;
            this.match(vbParser.POUND);
            this.state = 4467;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 4466;
                this.match(vbParser.XMLNumericCharacter);
                this.state = 4469;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === vbParser.XMLNumericCharacter);
            this.state = 4471;
            this.match(vbParser.SEMICOLON);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLNamespaceAttributeName() {
        let localctx = new XMLNamespaceAttributeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 768, vbParser.RULE_xMLNamespaceAttributeName);
        try {
            this.state = 4475;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 567, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4473;
                    this.xMLPrefixedNamespaceAttributeName();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4474;
                    this.xMLDefaultNamespaceAttributeName();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLPrefixedNamespaceAttributeName() {
        let localctx = new XMLPrefixedNamespaceAttributeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 770, vbParser.RULE_xMLPrefixedNamespaceAttributeName);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4477;
            this.match(vbParser.XMLNS);
            this.state = 4478;
            this.match(vbParser.COLON);
            this.state = 4479;
            this.xMLNamespaceName();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLDefaultNamespaceAttributeName() {
        let localctx = new XMLDefaultNamespaceAttributeNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 772, vbParser.RULE_xMLDefaultNamespaceAttributeName);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4481;
            this.match(vbParser.XMLNS);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLNamespaceName() {
        let localctx = new XMLNamespaceNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 774, vbParser.RULE_xMLNamespaceName);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4483;
            this.match(vbParser.XMLNamespaceNameStartCharacter);
            this.state = 4487;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 568, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 4484;
                    this.xMLNamespaceNameCharacter();
                }
                this.state = 4489;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 568, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLNamespaceNameCharacter() {
        let localctx = new XMLNamespaceNameCharacterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 776, vbParser.RULE_xMLNamespaceNameCharacter);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4490;
            _la = this._input.LA(1);
            if (!(_la === vbParser.XMLLetter || _la === vbParser.UNDERSCORE)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLQualifiedNameOrExpression() {
        let localctx = new XMLQualifiedNameOrExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 778, vbParser.RULE_xMLQualifiedNameOrExpression);
        try {
            this.state = 4494;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case vbParser.XMLNamespaceNameStartCharacter:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4492;
                    this.xMLQualifiedName();
                    break;
                case vbParser.LEFT_ARROW:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4493;
                    this.xMLEmbeddedExpression();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLQualifiedName() {
        let localctx = new XMLQualifiedNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 780, vbParser.RULE_xMLQualifiedName);
        try {
            this.state = 4498;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 570, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 4496;
                    this.xMLPrefixedName();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 4497;
                    this.xMLUnprefixedName();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLPrefixedName() {
        let localctx = new XMLPrefixedNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 782, vbParser.RULE_xMLPrefixedName);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4500;
            this.xMLNamespaceName();
            this.state = 4501;
            this.match(vbParser.COLON);
            this.state = 4502;
            this.xMLNamespaceName();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLUnprefixedName() {
        let localctx = new XMLUnprefixedNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 784, vbParser.RULE_xMLUnprefixedName);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4504;
            this.xMLNamespaceName();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLProcessingInstruction() {
        let localctx = new XMLProcessingInstructionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 786, vbParser.RULE_xMLProcessingInstruction);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4506;
            this.match(vbParser.LEFT_ARROW);
            this.state = 4507;
            this.match(vbParser.QUESTION_MARK);
            this.state = 4508;
            this.match(vbParser.XMLProcessingTarget);
            this.state = 4513;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.XMLWhitespace) {
                this.state = 4509;
                this.match(vbParser.XMLWhitespace);
                this.state = 4511;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.XMLProcessingValue) {
                    this.state = 4510;
                    this.match(vbParser.XMLProcessingValue);
                }
            }
            this.state = 4515;
            this.match(vbParser.QUESTION_MARK);
            this.state = 4516;
            this.match(vbParser.RIGHT_ARROW);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLComment() {
        let localctx = new XMLCommentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 788, vbParser.RULE_xMLComment);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4518;
            this.match(vbParser.LEFT_ARROW);
            this.state = 4519;
            this.match(vbParser.EXCLAMATION);
            this.state = 4520;
            this.match(vbParser.MINUS);
            this.state = 4521;
            this.match(vbParser.MINUS);
            this.state = 4525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === vbParser.XMLCommentCharacter) {
                this.state = 4522;
                this.match(vbParser.XMLCommentCharacter);
                this.state = 4527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 4528;
            this.match(vbParser.MINUS);
            this.state = 4529;
            this.match(vbParser.MINUS);
            this.state = 4530;
            this.match(vbParser.RIGHT_ARROW);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    xMLCDATASection() {
        let localctx = new XMLCDATASectionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 790, vbParser.RULE_xMLCDATASection);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4532;
            this.match(vbParser.LEFT_ARROW);
            this.state = 4533;
            this.match(vbParser.EXCLAMATION);
            this.state = 4540;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === vbParser.CDATA) {
                this.state = 4534;
                this.match(vbParser.CDATA);
                this.state = 4535;
                this.match(vbParser.LEFT_SQUARE_BRACKET);
                this.state = 4537;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === vbParser.XMLCDATASectionString) {
                    this.state = 4536;
                    this.match(vbParser.XMLCDATASectionString);
                }
                this.state = 4539;
                this.match(vbParser.RIGHT_SQUARE_BRACKET);
            }
            this.state = 4542;
            this.match(vbParser.RIGHT_ARROW);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    awaitOperatorExpression() {
        let localctx = new AwaitOperatorExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 792, vbParser.RULE_awaitOperatorExpression);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 4544;
            this.match(vbParser.AWAIT);
            this.state = 4545;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
}
exports.default = vbParser;
vbParser.grammarFileName = "vbParser.g4";
vbParser.literalNames = [null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, "'GetXmlNamespace'", "'<Unicode tab character (0x0009)>'",
    "'<Unicode linefeed character (0x000A)>'", "'<Unicode carriage return character (0x000D)>'",
    "'<Unicode character as defined in the Letter production of the XML 1.0 specification>'",
    "'<Unicode character as defined in the Digit production of the XML 1.0 specification>'",
    "'<Unicode character as defined in the CombiningChar production of the XML 1.0 specification>'",
    "'<Unicode character as defined in the Extender production of the XML 1.0 specification>'",
    null, null, null, "'<Any xMLName except a casing permutation of the string \"xml\">'",
    "'<Any XMLString that does not contain a question-mark followed by \">\">'",
    null, "'<Unicode Latin alphabetic character (0x0041-0x005a, 0x0061-0x007a)>'",
    "'<Unicode digit character (0x0030-0x0039)>'",
    null, "'<Unicode period character (0x002e)>'",
    "'<Unicode underscore character (0x005f)>'",
    "'<Unicode dash character (0x002d)>'", null,
    "'<Any XMLString that does not contain the string \"]]>\">'",
    "'<Any XMLCharacterDataString that does not contain the string \"]]>\">'",
    null, "'version'", "'xml'", "'CDATA'", "'xmlns'",
    "'encoding'", "'standalone'", null, null, null,
    "'<Any xMLNameCharacter except :>'", "'<Any XMLCharacter except <, &, or DoubleQuoteCharacter>'",
    "'<Any XMLCharacter except <, &, or SingleQuoteCharacter>'",
    "'0'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'",
    "'7'", "'8'", "'9'", null, "'''", "'\"'", "'?'",
    "','", "'*'", "'='", "'<'", "'>'", "'/'", "'\\'",
    "'^'", "':'", "';'", "'&'", "'!'", "'#'", "'_'",
    "'.'", "'-'", "'+'", "'%'", "'$'", "'@'", "'('",
    "')'", "'{'", "'}'", "'['", "']'", "'S'", "'US'",
    "'I'", "'UI'", "'L'", "'UL'", "'F'", "'R'",
    "'D'"];
vbParser.symbolicNames = [null, "ADDHANDLER", "ADDRESSOF", "AGGREGATE",
    "ALIAS", "AND", "ANDALSO", "ANSI", "AS", "ASCENDING",
    "ASSEMBLY", "ASYNC", "AUTO", "AWAIT", "BINARY",
    "BOOLEAN", "BY", "BYREF", "BYTE", "BYVAL",
    "CALL", "CASE", "CATCH", "CBOOL", "CBYTE",
    "CCHAR", "CDATE", "CDBL", "CDEC", "CHAR", "CINT",
    "CLASS", "CLNG", "COBJ", "COMPARE", "CONST",
    "CONTINUE", "CSBYTE", "CSHORT", "CSNG", "CSTR",
    "CTYPE", "CUINT", "CULNG", "CUSHORT", "CUSTOM",
    "DATE", "DECIMAL", "DECLARE", "DEFAULT", "DELEGATE",
    "DESCENDING", "DIM", "DIRECTCAST", "DISTINCT",
    "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", "END",
    "ENUM", "EQUALSKEYWORD", "ERASE", "ERROR",
    "EVENT", "EXIT", "EXPLICIT", "FINALLY", "FOR",
    "FRIEND", "FROM", "FUNCTION", "GET", "GETTYPE",
    "GLOBAL", "GOTO", "GROUP", "HANDLES", "IF",
    "IMPLEMENTS", "IMPORTS", "IN", "INFER", "INHERITS",
    "INTEGER", "INTERFACE", "INTO", "IS", "IS_FALSE",
    "IS_TRUE", "ISNOT", "ITERATOR", "JOIN", "KEY",
    "LET", "LIB", "LIKE", "LONG", "LOOP", "ME",
    "MID", "MOD", "MODULE", "MUST_INHERIT", "MUSTOVERRIDE",
    "MYBASE", "MYCLASS", "NAMESPACE", "NARROWING",
    "NEW", "NEXT", "NOT", "NOT_INHERITABLE", "NOTHING",
    "NOTOVERRIDABLE", "OBJECT", "OF", "OFF", "ON",
    "OPERATORKEYWORD", "OPTION", "OPTIONAL", "OR",
    "ORDER", "ORELSE", "OUT", "OVERLOADS", "OVERRIDABLE",
    "OVERRIDES", "PARAM_ARRAY", "PARTIAL", "PRESERVE",
    "PRIVATE", "PROPERTY", "PROTECTED", "PUBLIC",
    "RAISEEVENT", "READONLY", "REDIM", "REGION",
    "REM", "REMOVEHANDLER", "RESUME", "RETURN",
    "SBYTE", "SELECT", "SET", "SHADOWS", "SHARED",
    "SHORT", "SINGLE", "SKIP_KEYWORD", "STATIC",
    "STEP", "STOP", "STRICT", "STRING", "STRUCTURE",
    "SUB", "SYNCLOCK", "TAKE", "TEXT", "THEN",
    "THROW", "TO", "TRY", "TRYCAST", "TYPEOF",
    "UINTEGER", "ULONG", "UNICODE", "UNTIL", "USHORT",
    "USING", "When", "WHEN", "WHERE", "WHILE",
    "WIDENING", "WITH", "WITH_EVENTS", "WRITEONLY",
    "XOR", "YIELD", "GET_XML_NAMESPACE", "XML9",
    "XMLA", "XMLD", "XMLLetter", "XMLDigit", "XMLCombiningCharacter",
    "XMLExtender", "XMLString", "XMLWhitespace",
    "XMLWhitespaceCharacter", "XMLProcessingTarget",
    "XMLProcessingValue", "XMLCharacter", "XMLLatinAlphaCharacter",
    "XMLNumericCharacter", "XMLHexNumericCharacter",
    "XMLPeriodCharacter", "XMLUnderscoreCharacter",
    "XMLDashCharacter", "XMLCommentCharacter",
    "XMLCDATASectionString", "XMLCharacterData",
    "XMLCharacterDataString", "VERSION", "XML",
    "CDATA", "XMLNS", "ENCODING", "STANDALONE",
    "YES", "NO", "XMLEntityName", "XMLNamespaceNameStartCharacter",
    "XMLNotDoubleQuote", "XMLNotSingleQuote", "ZERO",
    "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX",
    "SEVEN", "EIGHT", "NINE", "LINE_TERMINATOR",
    "SINGLE_QUOTE_CHAR", "DOUBLE_QUOTE_CHARACTER",
    "QUESTION_MARK", "COMMA", "ASTERISK", "EQUALS",
    "LEFT_ARROW", "RIGHT_ARROW", "SLASH", "DOUBLE_BACK_SLASH",
    "CARET", "COLON", "SEMICOLON", "AMPERSAND",
    "EXCLAMATION", "POUND", "UNDERSCORE", "PERIOD",
    "MINUS", "PLUS", "PERCENT", "DOLLAR", "AT",
    "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACE",
    "RIGHT_BRACE", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET",
    "SHORT_CHARACTER", "UNSIGNED_SHORT_CHARACTER",
    "INTEGER_CHARACTER", "UNSIGNED_INTEGER_CHARACTER",
    "LONG_CHARACTER", "UNSIGNED_LONG_CHARACTER",
    "SINGLE_CHARACTER", "DOUBLE_CHARACTER", "DECIMAL_CHARACTER",
    "A", "B", "C", "D", "E", "F", "G", "H", "I",
    "J", "K", "L", "M", "N", "O", "P", "Q", "R",
    "S", "T", "U", "V", "W", "X", "Y", "Z", "WS"];
vbParser.ruleNames = ["start", "hexDigit", "decimalDigit", "octalDigit",
    "alphaCharacter", "booleanLiteral", "intLiteral",
    "hexLiteral", "octalLiteral", "integerLiteral",
    "integerLiteralValue", "floatingPointLiteral",
    "floatingPointLiteralValue", "exponent", "sign",
    "singleTypeCharacter", "doubleTypeCharacter", "longTypeCharacter",
    "stringTypeCharacter", "integerTypeCharacter",
    "decimalTypeCharacter", "integralTypeCharacter",
    "floatingPointTypeCharacter", "monthValue", "dayValue",
    "yearValue", "hourValue", "minuteValue", "secondValue",
    "ampm", "dateValue", "timeValue", "dateOrTime",
    "dateLiteral", "stringCharacter", "stringLiteral",
    "characterLiteral", "identifierStart", "identifierName",
    "identifierCharacter", "identifier", "identifierOrKeyword",
    "typeCharacter", "literal", "elseIf", "cCStart",
    "cCStatement", "cCExpression", "cCParenthesizedExpression",
    "cCSimpleNameExpression", "cCCastExpression", "cCPlusMinus",
    "cCUnaryOperator", "cCBinaryOperator", "cCConditionalExpression",
    "cCConstantDeclaration", "cCIfGroup", "cCElseIfGroup",
    "cCElseGroup", "regionStart", "regionStatement",
    "regionGroup", "accessModifier", "typeParameterList",
    "typeParameter", "varianceModifier", "typeParameterConstraints",
    "constraintList", "constraint", "attributes", "attributeBlock",
    "attributeList", "attribute", "attributeModifier",
    "attributeArguments", "attributePositionalArgumentList",
    "variablePropertyInitializerList", "variablePropertyInitializer",
    "attributeArgumentExpression", "statementTerminator",
    "attributesStatement", "optionStatement", "optionExplicitStatement",
    "onOff", "optionStrictStatement", "optionCompareStatement",
    "compareOption", "optionInferStatement", "importsStatement",
    "importsClauses", "importsClause", "aliasImportsClause",
    "membersImportsClause", "xMLNamespaceImportsClause",
    "xMLNamespaceValue", "namespaceDeclaration", "namespaceName",
    "relativeNamespaceName", "namespaceMemberDeclaration",
    "typeDeclaration", "nonModuleDeclaration", "typeName",
    "nonArrayTypeName", "simpleTypeName", "qualifiedTypeName",
    "typeArguments", "typeArgumentList", "builtInTypeName",
    "typeModifier", "identifierModifiers", "nullableNameModifier",
    "typeImplementsClause", "typeImplements", "primitiveTypeName",
    "numericTypeName", "integralTypeName", "floatingPointTypeName",
    "enumDeclaration", "enumMemberDeclaration", "classDeclaration",
    "classModifier", "classBase", "classMemberDeclaration",
    "structureDeclaration", "structureModifier", "structMemberDeclaration",
    "moduleDeclaration", "moduleMemberDeclaration",
    "interfaceDeclaration", "interfaceBase", "interfaceBases",
    "interfaceMemberDeclaration", "arrayTypeName",
    "arrayTypeModifiers", "arrayTypeModifier", "rankList",
    "arrayNameModifier", "delegateDeclaration", "methodSignature",
    "implementsClause", "implementsList", "interfaceMemberSpecifier",
    "methodMemberDeclaration", "interfaceMethodMemberDeclaration",
    "methodDeclaration", "interfaceMethodDeclaration",
    "subSignature", "functionSignature", "subDeclaration",
    "mustOverrideSubDeclaration", "interfaceSubDeclaration",
    "functionDeclaration", "mustOverrideFunctionDeclaration",
    "interfaceFunctionDeclaration", "procedureModifier",
    "mustOverrideProcedureModifier", "interfaceProcedureModifier",
    "handlesOrImplements", "externalMethodDeclaration",
    "externalSubDeclaration", "externalFunctionDeclaration",
    "externalMethodModifier", "charsetModifier", "libraryClause",
    "aliasClause", "parameterList", "parameter", "parameterModifier",
    "parameterIdentifier", "handlesClause", "eventHandlesList",
    "eventMemberSpecifier", "constructorMemberDeclaration",
    "constructorModifier", "eventMemberDeclaration",
    "regularEventMemberDeclaration", "interfaceEventMemberDeclaration",
    "parametersOrType", "eventModifiers", "interfaceEventModifiers",
    "customEventMemberDeclaration", "eventAccessorDeclaration",
    "addHandlerDeclaration", "removeHandlerDeclaration",
    "raiseEventDeclaration", "constantMemberDeclaration",
    "constantModifier", "constantDeclarators", "constantDeclarator",
    "variableMemberDeclaration", "variableModifier",
    "variableDeclarators", "variableDeclarator", "variableIdentifiers",
    "variableIdentifier", "arraySizeInitializationModifier",
    "boundList", "bound", "propertyMemberDeclaration",
    "propertySignature", "regularPropertyMemberDeclaration",
    "mustOverridePropertyMemberDeclaration", "autoPropertyMemberDeclaration",
    "interfacePropertyMemberDeclaration", "autoPropertyModifier",
    "propertyModifier", "mustOverridePropertyModifier",
    "interfacePropertyModifier", "propertyAccessorDeclaration",
    "propertyGetDeclaration", "propertySetDeclaration",
    "operatorDeclaration", "operatorModifier", "overloadableOperator",
    "statement", "block", "labelDeclarationStatement",
    "labelName", "statements", "localDeclarationStatement",
    "localModifier", "withStatement", "syncLockStatement",
    "eventStatement", "raiseEventStatement", "addHandlerStatement",
    "removeHandlerStatement", "assignmentStatement",
    "regularAssignmentStatement", "compoundAssignmentStatement",
    "compoundBinaryOperator", "midAssignmentStatement",
    "invocationStatement", "conditionalStatement",
    "ifStatement", "blockIfStatement", "elseIfStatement",
    "elseStatement", "lineIfThenStatement", "selectStatement",
    "caseStatement", "caseClauses", "caseClause", "comparisonOperator",
    "caseElseStatement", "loopStatement", "whileStatement",
    "doLoopStatement", "doTopLoopStatement", "doBottomLoopStatement",
    "whileOrUntil", "forStatement", "loopControlVariable",
    "nextExpressionList", "forEachStatement", "errorHandlingStatement",
    "structuredErrorStatement", "tryStatement", "finallyStatement",
    "catchStatement", "throwStatement", "unstructuredErrorStatement",
    "errorStatement", "onErrorStatement", "errorClause",
    "resumeStatement", "resumeClause", "branchStatement",
    "goToStatement", "exitStatement", "exitKind", "continueStatement",
    "continueKind", "stopStatement", "endStatement",
    "returnStatement", "arrayHandlingStatement", "redimStatement",
    "redimClauses", "redimClause", "eraseStatement",
    "eraseExpressions", "usingStatement", "usingResources",
    "awaitStatement", "yieldStatement", "expression",
    "memberAccessBase", "constantExpression", "simpleExpression",
    "literalExpression", "parenthesizedExpression",
    "instanceExpression", "simpleNameExpression", "addressOfExpression",
    "getTypeExpression", "getTypeTypeName", "qualifiedOpenTypeName",
    "typeArityList", "commaList", "typeOfIsExpression",
    "getXmlNamespaceExpression", "argumentList", "positionalArgumentList",
    "namedArgumentList", "newExpression", "objectCreationExpression",
    "objectCreationExpressionInitializer", "objectMemberInitializer",
    "fieldInitializerList", "fieldInitializer", "objectCollectionInitializer",
    "collectionInitializer", "collectionElementList",
    "collectionElement", "arrayExpression", "arrayCreationExpression",
    "arrayLiteralExpression", "anonymousObjectCreationExpression",
    "castExpression", "castTarget", "unaryPlusExpression",
    "unaryMinusExpression", "booleanExpression", "lambdaExpression",
    "singleLineLambda", "multiLineLambda", "multiLineFunctionLambda",
    "multiLineSubLambda", "lambdaModifier", "queryExpression",
    "fromOrAggregateQueryOperator", "queryOperator",
    "joinOrGroupJoinQueryOperator", "collectionRangeVariableDeclarationList",
    "collectionRangeVariableDeclaration", "expressionRangeVariableDeclarationList",
    "expressionRangeVariableDeclaration", "fromQueryOperator",
    "joinQueryOperator", "joinConditionList", "joinCondition",
    "letQueryOperator", "selectQueryOperator", "distinctQueryOperator",
    "whereQueryOperator", "partitionQueryOperator",
    "orderByQueryOperator", "orderExpressionList",
    "orderExpression", "ordering", "groupByQueryOperator",
    "aggregateQueryOperator", "groupJoinQueryOperator",
    "conditionalExpression", "xMLLiteralExpression",
    "xMLEmbeddedExpression", "xMLDocument", "xMLDocumentPrologue",
    "xMLVersion", "xMLVersionNumberValue", "xMLEncoding",
    "xMLEncodingNameValue", "xMLEncodingName", "xMLEncodingNameCharacter",
    "xMLStandalone", "xMLYesNoValue", "xMLYesNo", "xMLMisc",
    "xMLDocumentBody", "xMLElement", "xMLEmptyElement",
    "xMLElementStart", "xMLElementEnd", "xMLContent",
    "xMLNestedContent", "xMLAttribute", "xMLAttributeName",
    "xMLAttributeValue", "xMLAttributeDoubleQuoteValueCharacter",
    "xMLAttributeSingleQuoteValueCharacter", "xMLReference",
    "xMLEntityReference", "xMLCharacterReference",
    "xMLNamespaceAttributeName", "xMLPrefixedNamespaceAttributeName",
    "xMLDefaultNamespaceAttributeName", "xMLNamespaceName",
    "xMLNamespaceNameCharacter", "xMLQualifiedNameOrExpression",
    "xMLQualifiedName", "xMLPrefixedName", "xMLUnprefixedName",
    "xMLProcessingInstruction", "xMLComment", "xMLCDATASection",
    "awaitOperatorExpression"];
vbParser.EOF = antlr4_1.default.Token.EOF;
vbParser.ADDHANDLER = 1;
vbParser.ADDRESSOF = 2;
vbParser.AGGREGATE = 3;
vbParser.ALIAS = 4;
vbParser.AND = 5;
vbParser.ANDALSO = 6;
vbParser.ANSI = 7;
vbParser.AS = 8;
vbParser.ASCENDING = 9;
vbParser.ASSEMBLY = 10;
vbParser.ASYNC = 11;
vbParser.AUTO = 12;
vbParser.AWAIT = 13;
vbParser.BINARY = 14;
vbParser.BOOLEAN = 15;
vbParser.BY = 16;
vbParser.BYREF = 17;
vbParser.BYTE = 18;
vbParser.BYVAL = 19;
vbParser.CALL = 20;
vbParser.CASE = 21;
vbParser.CATCH = 22;
vbParser.CBOOL = 23;
vbParser.CBYTE = 24;
vbParser.CCHAR = 25;
vbParser.CDATE = 26;
vbParser.CDBL = 27;
vbParser.CDEC = 28;
vbParser.CHAR = 29;
vbParser.CINT = 30;
vbParser.CLASS = 31;
vbParser.CLNG = 32;
vbParser.COBJ = 33;
vbParser.COMPARE = 34;
vbParser.CONST = 35;
vbParser.CONTINUE = 36;
vbParser.CSBYTE = 37;
vbParser.CSHORT = 38;
vbParser.CSNG = 39;
vbParser.CSTR = 40;
vbParser.CTYPE = 41;
vbParser.CUINT = 42;
vbParser.CULNG = 43;
vbParser.CUSHORT = 44;
vbParser.CUSTOM = 45;
vbParser.DATE = 46;
vbParser.DECIMAL = 47;
vbParser.DECLARE = 48;
vbParser.DEFAULT = 49;
vbParser.DELEGATE = 50;
vbParser.DESCENDING = 51;
vbParser.DIM = 52;
vbParser.DIRECTCAST = 53;
vbParser.DISTINCT = 54;
vbParser.DO = 55;
vbParser.DOUBLE = 56;
vbParser.EACH = 57;
vbParser.ELSE = 58;
vbParser.ELSEIF = 59;
vbParser.END = 60;
vbParser.ENUM = 61;
vbParser.EQUALSKEYWORD = 62;
vbParser.ERASE = 63;
vbParser.ERROR = 64;
vbParser.EVENT = 65;
vbParser.EXIT = 66;
vbParser.EXPLICIT = 67;
vbParser.FINALLY = 68;
vbParser.FOR = 69;
vbParser.FRIEND = 70;
vbParser.FROM = 71;
vbParser.FUNCTION = 72;
vbParser.GET = 73;
vbParser.GETTYPE = 74;
vbParser.GLOBAL = 75;
vbParser.GOTO = 76;
vbParser.GROUP = 77;
vbParser.HANDLES = 78;
vbParser.IF = 79;
vbParser.IMPLEMENTS = 80;
vbParser.IMPORTS = 81;
vbParser.IN = 82;
vbParser.INFER = 83;
vbParser.INHERITS = 84;
vbParser.INTEGER = 85;
vbParser.INTERFACE = 86;
vbParser.INTO = 87;
vbParser.IS = 88;
vbParser.IS_FALSE = 89;
vbParser.IS_TRUE = 90;
vbParser.ISNOT = 91;
vbParser.ITERATOR = 92;
vbParser.JOIN = 93;
vbParser.KEY = 94;
vbParser.LET = 95;
vbParser.LIB = 96;
vbParser.LIKE = 97;
vbParser.LONG = 98;
vbParser.LOOP = 99;
vbParser.ME = 100;
vbParser.MID = 101;
vbParser.MOD = 102;
vbParser.MODULE = 103;
vbParser.MUST_INHERIT = 104;
vbParser.MUSTOVERRIDE = 105;
vbParser.MYBASE = 106;
vbParser.MYCLASS = 107;
vbParser.NAMESPACE = 108;
vbParser.NARROWING = 109;
vbParser.NEW = 110;
vbParser.NEXT = 111;
vbParser.NOT = 112;
vbParser.NOT_INHERITABLE = 113;
vbParser.NOTHING = 114;
vbParser.NOTOVERRIDABLE = 115;
vbParser.OBJECT = 116;
vbParser.OF = 117;
vbParser.OFF = 118;
vbParser.ON = 119;
vbParser.OPERATORKEYWORD = 120;
vbParser.OPTION = 121;
vbParser.OPTIONAL = 122;
vbParser.OR = 123;
vbParser.ORDER = 124;
vbParser.ORELSE = 125;
vbParser.OUT = 126;
vbParser.OVERLOADS = 127;
vbParser.OVERRIDABLE = 128;
vbParser.OVERRIDES = 129;
vbParser.PARAM_ARRAY = 130;
vbParser.PARTIAL = 131;
vbParser.PRESERVE = 132;
vbParser.PRIVATE = 133;
vbParser.PROPERTY = 134;
vbParser.PROTECTED = 135;
vbParser.PUBLIC = 136;
vbParser.RAISEEVENT = 137;
vbParser.READONLY = 138;
vbParser.REDIM = 139;
vbParser.REGION = 140;
vbParser.REM = 141;
vbParser.REMOVEHANDLER = 142;
vbParser.RESUME = 143;
vbParser.RETURN = 144;
vbParser.SBYTE = 145;
vbParser.SELECT = 146;
vbParser.SET = 147;
vbParser.SHADOWS = 148;
vbParser.SHARED = 149;
vbParser.SHORT = 150;
vbParser.SINGLE = 151;
vbParser.SKIP_KEYWORD = 152;
vbParser.STATIC = 153;
vbParser.STEP = 154;
vbParser.STOP = 155;
vbParser.STRICT = 156;
vbParser.STRING = 157;
vbParser.STRUCTURE = 158;
vbParser.SUB = 159;
vbParser.SYNCLOCK = 160;
vbParser.TAKE = 161;
vbParser.TEXT = 162;
vbParser.THEN = 163;
vbParser.THROW = 164;
vbParser.TO = 165;
vbParser.TRY = 166;
vbParser.TRYCAST = 167;
vbParser.TYPEOF = 168;
vbParser.UINTEGER = 169;
vbParser.ULONG = 170;
vbParser.UNICODE = 171;
vbParser.UNTIL = 172;
vbParser.USHORT = 173;
vbParser.USING = 174;
vbParser.When = 175;
vbParser.WHEN = 176;
vbParser.WHERE = 177;
vbParser.WHILE = 178;
vbParser.WIDENING = 179;
vbParser.WITH = 180;
vbParser.WITH_EVENTS = 181;
vbParser.WRITEONLY = 182;
vbParser.XOR = 183;
vbParser.YIELD = 184;
vbParser.GET_XML_NAMESPACE = 185;
vbParser.XML9 = 186;
vbParser.XMLA = 187;
vbParser.XMLD = 188;
vbParser.XMLLetter = 189;
vbParser.XMLDigit = 190;
vbParser.XMLCombiningCharacter = 191;
vbParser.XMLExtender = 192;
vbParser.XMLString = 193;
vbParser.XMLWhitespace = 194;
vbParser.XMLWhitespaceCharacter = 195;
vbParser.XMLProcessingTarget = 196;
vbParser.XMLProcessingValue = 197;
vbParser.XMLCharacter = 198;
vbParser.XMLLatinAlphaCharacter = 199;
vbParser.XMLNumericCharacter = 200;
vbParser.XMLHexNumericCharacter = 201;
vbParser.XMLPeriodCharacter = 202;
vbParser.XMLUnderscoreCharacter = 203;
vbParser.XMLDashCharacter = 204;
vbParser.XMLCommentCharacter = 205;
vbParser.XMLCDATASectionString = 206;
vbParser.XMLCharacterData = 207;
vbParser.XMLCharacterDataString = 208;
vbParser.VERSION = 209;
vbParser.XML = 210;
vbParser.CDATA = 211;
vbParser.XMLNS = 212;
vbParser.ENCODING = 213;
vbParser.STANDALONE = 214;
vbParser.YES = 215;
vbParser.NO = 216;
vbParser.XMLEntityName = 217;
vbParser.XMLNamespaceNameStartCharacter = 218;
vbParser.XMLNotDoubleQuote = 219;
vbParser.XMLNotSingleQuote = 220;
vbParser.ZERO = 221;
vbParser.ONE = 222;
vbParser.TWO = 223;
vbParser.THREE = 224;
vbParser.FOUR = 225;
vbParser.FIVE = 226;
vbParser.SIX = 227;
vbParser.SEVEN = 228;
vbParser.EIGHT = 229;
vbParser.NINE = 230;
vbParser.LINE_TERMINATOR = 231;
vbParser.SINGLE_QUOTE_CHAR = 232;
vbParser.DOUBLE_QUOTE_CHARACTER = 233;
vbParser.QUESTION_MARK = 234;
vbParser.COMMA = 235;
vbParser.ASTERISK = 236;
vbParser.EQUALS = 237;
vbParser.LEFT_ARROW = 238;
vbParser.RIGHT_ARROW = 239;
vbParser.SLASH = 240;
vbParser.DOUBLE_BACK_SLASH = 241;
vbParser.CARET = 242;
vbParser.COLON = 243;
vbParser.SEMICOLON = 244;
vbParser.AMPERSAND = 245;
vbParser.EXCLAMATION = 246;
vbParser.POUND = 247;
vbParser.UNDERSCORE = 248;
vbParser.PERIOD = 249;
vbParser.MINUS = 250;
vbParser.PLUS = 251;
vbParser.PERCENT = 252;
vbParser.DOLLAR = 253;
vbParser.AT = 254;
vbParser.LEFT_PAREN = 255;
vbParser.RIGHT_PAREN = 256;
vbParser.LEFT_BRACE = 257;
vbParser.RIGHT_BRACE = 258;
vbParser.LEFT_SQUARE_BRACKET = 259;
vbParser.RIGHT_SQUARE_BRACKET = 260;
vbParser.SHORT_CHARACTER = 261;
vbParser.UNSIGNED_SHORT_CHARACTER = 262;
vbParser.INTEGER_CHARACTER = 263;
vbParser.UNSIGNED_INTEGER_CHARACTER = 264;
vbParser.LONG_CHARACTER = 265;
vbParser.UNSIGNED_LONG_CHARACTER = 266;
vbParser.SINGLE_CHARACTER = 267;
vbParser.DOUBLE_CHARACTER = 268;
vbParser.DECIMAL_CHARACTER = 269;
vbParser.A = 270;
vbParser.B = 271;
vbParser.C = 272;
vbParser.D = 273;
vbParser.E = 274;
vbParser.F = 275;
vbParser.G = 276;
vbParser.H = 277;
vbParser.I = 278;
vbParser.J = 279;
vbParser.K = 280;
vbParser.L = 281;
vbParser.M = 282;
vbParser.N = 283;
vbParser.O = 284;
vbParser.P = 285;
vbParser.Q = 286;
vbParser.R = 287;
vbParser.S = 288;
vbParser.T = 289;
vbParser.U = 290;
vbParser.V = 291;
vbParser.W = 292;
vbParser.X = 293;
vbParser.Y = 294;
vbParser.Z = 295;
vbParser.WS = 296;
vbParser.RULE_start = 0;
vbParser.RULE_hexDigit = 1;
vbParser.RULE_decimalDigit = 2;
vbParser.RULE_octalDigit = 3;
vbParser.RULE_alphaCharacter = 4;
vbParser.RULE_booleanLiteral = 5;
vbParser.RULE_intLiteral = 6;
vbParser.RULE_hexLiteral = 7;
vbParser.RULE_octalLiteral = 8;
vbParser.RULE_integerLiteral = 9;
vbParser.RULE_integerLiteralValue = 10;
vbParser.RULE_floatingPointLiteral = 11;
vbParser.RULE_floatingPointLiteralValue = 12;
vbParser.RULE_exponent = 13;
vbParser.RULE_sign = 14;
vbParser.RULE_singleTypeCharacter = 15;
vbParser.RULE_doubleTypeCharacter = 16;
vbParser.RULE_longTypeCharacter = 17;
vbParser.RULE_stringTypeCharacter = 18;
vbParser.RULE_integerTypeCharacter = 19;
vbParser.RULE_decimalTypeCharacter = 20;
vbParser.RULE_integralTypeCharacter = 21;
vbParser.RULE_floatingPointTypeCharacter = 22;
vbParser.RULE_monthValue = 23;
vbParser.RULE_dayValue = 24;
vbParser.RULE_yearValue = 25;
vbParser.RULE_hourValue = 26;
vbParser.RULE_minuteValue = 27;
vbParser.RULE_secondValue = 28;
vbParser.RULE_ampm = 29;
vbParser.RULE_dateValue = 30;
vbParser.RULE_timeValue = 31;
vbParser.RULE_dateOrTime = 32;
vbParser.RULE_dateLiteral = 33;
vbParser.RULE_stringCharacter = 34;
vbParser.RULE_stringLiteral = 35;
vbParser.RULE_characterLiteral = 36;
vbParser.RULE_identifierStart = 37;
vbParser.RULE_identifierName = 38;
vbParser.RULE_identifierCharacter = 39;
vbParser.RULE_identifier = 40;
vbParser.RULE_identifierOrKeyword = 41;
vbParser.RULE_typeCharacter = 42;
vbParser.RULE_literal = 43;
vbParser.RULE_elseIf = 44;
vbParser.RULE_cCStart = 45;
vbParser.RULE_cCStatement = 46;
vbParser.RULE_cCExpression = 47;
vbParser.RULE_cCParenthesizedExpression = 48;
vbParser.RULE_cCSimpleNameExpression = 49;
vbParser.RULE_cCCastExpression = 50;
vbParser.RULE_cCPlusMinus = 51;
vbParser.RULE_cCUnaryOperator = 52;
vbParser.RULE_cCBinaryOperator = 53;
vbParser.RULE_cCConditionalExpression = 54;
vbParser.RULE_cCConstantDeclaration = 55;
vbParser.RULE_cCIfGroup = 56;
vbParser.RULE_cCElseIfGroup = 57;
vbParser.RULE_cCElseGroup = 58;
vbParser.RULE_regionStart = 59;
vbParser.RULE_regionStatement = 60;
vbParser.RULE_regionGroup = 61;
vbParser.RULE_accessModifier = 62;
vbParser.RULE_typeParameterList = 63;
vbParser.RULE_typeParameter = 64;
vbParser.RULE_varianceModifier = 65;
vbParser.RULE_typeParameterConstraints = 66;
vbParser.RULE_constraintList = 67;
vbParser.RULE_constraint = 68;
vbParser.RULE_attributes = 69;
vbParser.RULE_attributeBlock = 70;
vbParser.RULE_attributeList = 71;
vbParser.RULE_attribute = 72;
vbParser.RULE_attributeModifier = 73;
vbParser.RULE_attributeArguments = 74;
vbParser.RULE_attributePositionalArgumentList = 75;
vbParser.RULE_variablePropertyInitializerList = 76;
vbParser.RULE_variablePropertyInitializer = 77;
vbParser.RULE_attributeArgumentExpression = 78;
vbParser.RULE_statementTerminator = 79;
vbParser.RULE_attributesStatement = 80;
vbParser.RULE_optionStatement = 81;
vbParser.RULE_optionExplicitStatement = 82;
vbParser.RULE_onOff = 83;
vbParser.RULE_optionStrictStatement = 84;
vbParser.RULE_optionCompareStatement = 85;
vbParser.RULE_compareOption = 86;
vbParser.RULE_optionInferStatement = 87;
vbParser.RULE_importsStatement = 88;
vbParser.RULE_importsClauses = 89;
vbParser.RULE_importsClause = 90;
vbParser.RULE_aliasImportsClause = 91;
vbParser.RULE_membersImportsClause = 92;
vbParser.RULE_xMLNamespaceImportsClause = 93;
vbParser.RULE_xMLNamespaceValue = 94;
vbParser.RULE_namespaceDeclaration = 95;
vbParser.RULE_namespaceName = 96;
vbParser.RULE_relativeNamespaceName = 97;
vbParser.RULE_namespaceMemberDeclaration = 98;
vbParser.RULE_typeDeclaration = 99;
vbParser.RULE_nonModuleDeclaration = 100;
vbParser.RULE_typeName = 101;
vbParser.RULE_nonArrayTypeName = 102;
vbParser.RULE_simpleTypeName = 103;
vbParser.RULE_qualifiedTypeName = 104;
vbParser.RULE_typeArguments = 105;
vbParser.RULE_typeArgumentList = 106;
vbParser.RULE_builtInTypeName = 107;
vbParser.RULE_typeModifier = 108;
vbParser.RULE_identifierModifiers = 109;
vbParser.RULE_nullableNameModifier = 110;
vbParser.RULE_typeImplementsClause = 111;
vbParser.RULE_typeImplements = 112;
vbParser.RULE_primitiveTypeName = 113;
vbParser.RULE_numericTypeName = 114;
vbParser.RULE_integralTypeName = 115;
vbParser.RULE_floatingPointTypeName = 116;
vbParser.RULE_enumDeclaration = 117;
vbParser.RULE_enumMemberDeclaration = 118;
vbParser.RULE_classDeclaration = 119;
vbParser.RULE_classModifier = 120;
vbParser.RULE_classBase = 121;
vbParser.RULE_classMemberDeclaration = 122;
vbParser.RULE_structureDeclaration = 123;
vbParser.RULE_structureModifier = 124;
vbParser.RULE_structMemberDeclaration = 125;
vbParser.RULE_moduleDeclaration = 126;
vbParser.RULE_moduleMemberDeclaration = 127;
vbParser.RULE_interfaceDeclaration = 128;
vbParser.RULE_interfaceBase = 129;
vbParser.RULE_interfaceBases = 130;
vbParser.RULE_interfaceMemberDeclaration = 131;
vbParser.RULE_arrayTypeName = 132;
vbParser.RULE_arrayTypeModifiers = 133;
vbParser.RULE_arrayTypeModifier = 134;
vbParser.RULE_rankList = 135;
vbParser.RULE_arrayNameModifier = 136;
vbParser.RULE_delegateDeclaration = 137;
vbParser.RULE_methodSignature = 138;
vbParser.RULE_implementsClause = 139;
vbParser.RULE_implementsList = 140;
vbParser.RULE_interfaceMemberSpecifier = 141;
vbParser.RULE_methodMemberDeclaration = 142;
vbParser.RULE_interfaceMethodMemberDeclaration = 143;
vbParser.RULE_methodDeclaration = 144;
vbParser.RULE_interfaceMethodDeclaration = 145;
vbParser.RULE_subSignature = 146;
vbParser.RULE_functionSignature = 147;
vbParser.RULE_subDeclaration = 148;
vbParser.RULE_mustOverrideSubDeclaration = 149;
vbParser.RULE_interfaceSubDeclaration = 150;
vbParser.RULE_functionDeclaration = 151;
vbParser.RULE_mustOverrideFunctionDeclaration = 152;
vbParser.RULE_interfaceFunctionDeclaration = 153;
vbParser.RULE_procedureModifier = 154;
vbParser.RULE_mustOverrideProcedureModifier = 155;
vbParser.RULE_interfaceProcedureModifier = 156;
vbParser.RULE_handlesOrImplements = 157;
vbParser.RULE_externalMethodDeclaration = 158;
vbParser.RULE_externalSubDeclaration = 159;
vbParser.RULE_externalFunctionDeclaration = 160;
vbParser.RULE_externalMethodModifier = 161;
vbParser.RULE_charsetModifier = 162;
vbParser.RULE_libraryClause = 163;
vbParser.RULE_aliasClause = 164;
vbParser.RULE_parameterList = 165;
vbParser.RULE_parameter = 166;
vbParser.RULE_parameterModifier = 167;
vbParser.RULE_parameterIdentifier = 168;
vbParser.RULE_handlesClause = 169;
vbParser.RULE_eventHandlesList = 170;
vbParser.RULE_eventMemberSpecifier = 171;
vbParser.RULE_constructorMemberDeclaration = 172;
vbParser.RULE_constructorModifier = 173;
vbParser.RULE_eventMemberDeclaration = 174;
vbParser.RULE_regularEventMemberDeclaration = 175;
vbParser.RULE_interfaceEventMemberDeclaration = 176;
vbParser.RULE_parametersOrType = 177;
vbParser.RULE_eventModifiers = 178;
vbParser.RULE_interfaceEventModifiers = 179;
vbParser.RULE_customEventMemberDeclaration = 180;
vbParser.RULE_eventAccessorDeclaration = 181;
vbParser.RULE_addHandlerDeclaration = 182;
vbParser.RULE_removeHandlerDeclaration = 183;
vbParser.RULE_raiseEventDeclaration = 184;
vbParser.RULE_constantMemberDeclaration = 185;
vbParser.RULE_constantModifier = 186;
vbParser.RULE_constantDeclarators = 187;
vbParser.RULE_constantDeclarator = 188;
vbParser.RULE_variableMemberDeclaration = 189;
vbParser.RULE_variableModifier = 190;
vbParser.RULE_variableDeclarators = 191;
vbParser.RULE_variableDeclarator = 192;
vbParser.RULE_variableIdentifiers = 193;
vbParser.RULE_variableIdentifier = 194;
vbParser.RULE_arraySizeInitializationModifier = 195;
vbParser.RULE_boundList = 196;
vbParser.RULE_bound = 197;
vbParser.RULE_propertyMemberDeclaration = 198;
vbParser.RULE_propertySignature = 199;
vbParser.RULE_regularPropertyMemberDeclaration = 200;
vbParser.RULE_mustOverridePropertyMemberDeclaration = 201;
vbParser.RULE_autoPropertyMemberDeclaration = 202;
vbParser.RULE_interfacePropertyMemberDeclaration = 203;
vbParser.RULE_autoPropertyModifier = 204;
vbParser.RULE_propertyModifier = 205;
vbParser.RULE_mustOverridePropertyModifier = 206;
vbParser.RULE_interfacePropertyModifier = 207;
vbParser.RULE_propertyAccessorDeclaration = 208;
vbParser.RULE_propertyGetDeclaration = 209;
vbParser.RULE_propertySetDeclaration = 210;
vbParser.RULE_operatorDeclaration = 211;
vbParser.RULE_operatorModifier = 212;
vbParser.RULE_overloadableOperator = 213;
vbParser.RULE_statement = 214;
vbParser.RULE_block = 215;
vbParser.RULE_labelDeclarationStatement = 216;
vbParser.RULE_labelName = 217;
vbParser.RULE_statements = 218;
vbParser.RULE_localDeclarationStatement = 219;
vbParser.RULE_localModifier = 220;
vbParser.RULE_withStatement = 221;
vbParser.RULE_syncLockStatement = 222;
vbParser.RULE_eventStatement = 223;
vbParser.RULE_raiseEventStatement = 224;
vbParser.RULE_addHandlerStatement = 225;
vbParser.RULE_removeHandlerStatement = 226;
vbParser.RULE_assignmentStatement = 227;
vbParser.RULE_regularAssignmentStatement = 228;
vbParser.RULE_compoundAssignmentStatement = 229;
vbParser.RULE_compoundBinaryOperator = 230;
vbParser.RULE_midAssignmentStatement = 231;
vbParser.RULE_invocationStatement = 232;
vbParser.RULE_conditionalStatement = 233;
vbParser.RULE_ifStatement = 234;
vbParser.RULE_blockIfStatement = 235;
vbParser.RULE_elseIfStatement = 236;
vbParser.RULE_elseStatement = 237;
vbParser.RULE_lineIfThenStatement = 238;
vbParser.RULE_selectStatement = 239;
vbParser.RULE_caseStatement = 240;
vbParser.RULE_caseClauses = 241;
vbParser.RULE_caseClause = 242;
vbParser.RULE_comparisonOperator = 243;
vbParser.RULE_caseElseStatement = 244;
vbParser.RULE_loopStatement = 245;
vbParser.RULE_whileStatement = 246;
vbParser.RULE_doLoopStatement = 247;
vbParser.RULE_doTopLoopStatement = 248;
vbParser.RULE_doBottomLoopStatement = 249;
vbParser.RULE_whileOrUntil = 250;
vbParser.RULE_forStatement = 251;
vbParser.RULE_loopControlVariable = 252;
vbParser.RULE_nextExpressionList = 253;
vbParser.RULE_forEachStatement = 254;
vbParser.RULE_errorHandlingStatement = 255;
vbParser.RULE_structuredErrorStatement = 256;
vbParser.RULE_tryStatement = 257;
vbParser.RULE_finallyStatement = 258;
vbParser.RULE_catchStatement = 259;
vbParser.RULE_throwStatement = 260;
vbParser.RULE_unstructuredErrorStatement = 261;
vbParser.RULE_errorStatement = 262;
vbParser.RULE_onErrorStatement = 263;
vbParser.RULE_errorClause = 264;
vbParser.RULE_resumeStatement = 265;
vbParser.RULE_resumeClause = 266;
vbParser.RULE_branchStatement = 267;
vbParser.RULE_goToStatement = 268;
vbParser.RULE_exitStatement = 269;
vbParser.RULE_exitKind = 270;
vbParser.RULE_continueStatement = 271;
vbParser.RULE_continueKind = 272;
vbParser.RULE_stopStatement = 273;
vbParser.RULE_endStatement = 274;
vbParser.RULE_returnStatement = 275;
vbParser.RULE_arrayHandlingStatement = 276;
vbParser.RULE_redimStatement = 277;
vbParser.RULE_redimClauses = 278;
vbParser.RULE_redimClause = 279;
vbParser.RULE_eraseStatement = 280;
vbParser.RULE_eraseExpressions = 281;
vbParser.RULE_usingStatement = 282;
vbParser.RULE_usingResources = 283;
vbParser.RULE_awaitStatement = 284;
vbParser.RULE_yieldStatement = 285;
vbParser.RULE_expression = 286;
vbParser.RULE_memberAccessBase = 287;
vbParser.RULE_constantExpression = 288;
vbParser.RULE_simpleExpression = 289;
vbParser.RULE_literalExpression = 290;
vbParser.RULE_parenthesizedExpression = 291;
vbParser.RULE_instanceExpression = 292;
vbParser.RULE_simpleNameExpression = 293;
vbParser.RULE_addressOfExpression = 294;
vbParser.RULE_getTypeExpression = 295;
vbParser.RULE_getTypeTypeName = 296;
vbParser.RULE_qualifiedOpenTypeName = 297;
vbParser.RULE_typeArityList = 298;
vbParser.RULE_commaList = 299;
vbParser.RULE_typeOfIsExpression = 300;
vbParser.RULE_getXmlNamespaceExpression = 301;
vbParser.RULE_argumentList = 302;
vbParser.RULE_positionalArgumentList = 303;
vbParser.RULE_namedArgumentList = 304;
vbParser.RULE_newExpression = 305;
vbParser.RULE_objectCreationExpression = 306;
vbParser.RULE_objectCreationExpressionInitializer = 307;
vbParser.RULE_objectMemberInitializer = 308;
vbParser.RULE_fieldInitializerList = 309;
vbParser.RULE_fieldInitializer = 310;
vbParser.RULE_objectCollectionInitializer = 311;
vbParser.RULE_collectionInitializer = 312;
vbParser.RULE_collectionElementList = 313;
vbParser.RULE_collectionElement = 314;
vbParser.RULE_arrayExpression = 315;
vbParser.RULE_arrayCreationExpression = 316;
vbParser.RULE_arrayLiteralExpression = 317;
vbParser.RULE_anonymousObjectCreationExpression = 318;
vbParser.RULE_castExpression = 319;
vbParser.RULE_castTarget = 320;
vbParser.RULE_unaryPlusExpression = 321;
vbParser.RULE_unaryMinusExpression = 322;
vbParser.RULE_booleanExpression = 323;
vbParser.RULE_lambdaExpression = 324;
vbParser.RULE_singleLineLambda = 325;
vbParser.RULE_multiLineLambda = 326;
vbParser.RULE_multiLineFunctionLambda = 327;
vbParser.RULE_multiLineSubLambda = 328;
vbParser.RULE_lambdaModifier = 329;
vbParser.RULE_queryExpression = 330;
vbParser.RULE_fromOrAggregateQueryOperator = 331;
vbParser.RULE_queryOperator = 332;
vbParser.RULE_joinOrGroupJoinQueryOperator = 333;
vbParser.RULE_collectionRangeVariableDeclarationList = 334;
vbParser.RULE_collectionRangeVariableDeclaration = 335;
vbParser.RULE_expressionRangeVariableDeclarationList = 336;
vbParser.RULE_expressionRangeVariableDeclaration = 337;
vbParser.RULE_fromQueryOperator = 338;
vbParser.RULE_joinQueryOperator = 339;
vbParser.RULE_joinConditionList = 340;
vbParser.RULE_joinCondition = 341;
vbParser.RULE_letQueryOperator = 342;
vbParser.RULE_selectQueryOperator = 343;
vbParser.RULE_distinctQueryOperator = 344;
vbParser.RULE_whereQueryOperator = 345;
vbParser.RULE_partitionQueryOperator = 346;
vbParser.RULE_orderByQueryOperator = 347;
vbParser.RULE_orderExpressionList = 348;
vbParser.RULE_orderExpression = 349;
vbParser.RULE_ordering = 350;
vbParser.RULE_groupByQueryOperator = 351;
vbParser.RULE_aggregateQueryOperator = 352;
vbParser.RULE_groupJoinQueryOperator = 353;
vbParser.RULE_conditionalExpression = 354;
vbParser.RULE_xMLLiteralExpression = 355;
vbParser.RULE_xMLEmbeddedExpression = 356;
vbParser.RULE_xMLDocument = 357;
vbParser.RULE_xMLDocumentPrologue = 358;
vbParser.RULE_xMLVersion = 359;
vbParser.RULE_xMLVersionNumberValue = 360;
vbParser.RULE_xMLEncoding = 361;
vbParser.RULE_xMLEncodingNameValue = 362;
vbParser.RULE_xMLEncodingName = 363;
vbParser.RULE_xMLEncodingNameCharacter = 364;
vbParser.RULE_xMLStandalone = 365;
vbParser.RULE_xMLYesNoValue = 366;
vbParser.RULE_xMLYesNo = 367;
vbParser.RULE_xMLMisc = 368;
vbParser.RULE_xMLDocumentBody = 369;
vbParser.RULE_xMLElement = 370;
vbParser.RULE_xMLEmptyElement = 371;
vbParser.RULE_xMLElementStart = 372;
vbParser.RULE_xMLElementEnd = 373;
vbParser.RULE_xMLContent = 374;
vbParser.RULE_xMLNestedContent = 375;
vbParser.RULE_xMLAttribute = 376;
vbParser.RULE_xMLAttributeName = 377;
vbParser.RULE_xMLAttributeValue = 378;
vbParser.RULE_xMLAttributeDoubleQuoteValueCharacter = 379;
vbParser.RULE_xMLAttributeSingleQuoteValueCharacter = 380;
vbParser.RULE_xMLReference = 381;
vbParser.RULE_xMLEntityReference = 382;
vbParser.RULE_xMLCharacterReference = 383;
vbParser.RULE_xMLNamespaceAttributeName = 384;
vbParser.RULE_xMLPrefixedNamespaceAttributeName = 385;
vbParser.RULE_xMLDefaultNamespaceAttributeName = 386;
vbParser.RULE_xMLNamespaceName = 387;
vbParser.RULE_xMLNamespaceNameCharacter = 388;
vbParser.RULE_xMLQualifiedNameOrExpression = 389;
vbParser.RULE_xMLQualifiedName = 390;
vbParser.RULE_xMLPrefixedName = 391;
vbParser.RULE_xMLUnprefixedName = 392;
vbParser.RULE_xMLProcessingInstruction = 393;
vbParser.RULE_xMLComment = 394;
vbParser.RULE_xMLCDATASection = 395;
vbParser.RULE_awaitOperatorExpression = 396;
class StartContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_start;
    }
    classMemberDeclaration() {
        return this.getTypedRuleContext(ClassMemberDeclarationContext, 0);
    }
    ;
    EOF() {
        return this.getToken(vbParser.EOF, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStart(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStart(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStart(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class HexDigitContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_hexDigit;
    }
    decimalDigit() {
        return this.getTypedRuleContext(DecimalDigitContext, 0);
    }
    ;
    A() {
        return this.getToken(vbParser.A, 0);
    }
    ;
    B() {
        return this.getToken(vbParser.B, 0);
    }
    ;
    C() {
        return this.getToken(vbParser.C, 0);
    }
    ;
    D() {
        return this.getToken(vbParser.D, 0);
    }
    ;
    E() {
        return this.getToken(vbParser.E, 0);
    }
    ;
    F() {
        return this.getToken(vbParser.F, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterHexDigit(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitHexDigit(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitHexDigit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DecimalDigitContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_decimalDigit;
    }
    octalDigit() {
        return this.getTypedRuleContext(OctalDigitContext, 0);
    }
    ;
    EIGHT() {
        return this.getToken(vbParser.EIGHT, 0);
    }
    ;
    NINE() {
        return this.getToken(vbParser.NINE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDecimalDigit(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDecimalDigit(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDecimalDigit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OctalDigitContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_octalDigit;
    }
    ZERO() {
        return this.getToken(vbParser.ZERO, 0);
    }
    ;
    ONE() {
        return this.getToken(vbParser.ONE, 0);
    }
    ;
    TWO() {
        return this.getToken(vbParser.TWO, 0);
    }
    ;
    THREE() {
        return this.getToken(vbParser.THREE, 0);
    }
    ;
    FOUR() {
        return this.getToken(vbParser.FOUR, 0);
    }
    ;
    FIVE() {
        return this.getToken(vbParser.FIVE, 0);
    }
    ;
    SIX() {
        return this.getToken(vbParser.SIX, 0);
    }
    ;
    SEVEN() {
        return this.getToken(vbParser.SEVEN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOctalDigit(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOctalDigit(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOctalDigit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AlphaCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_alphaCharacter;
    }
    A() {
        return this.getToken(vbParser.A, 0);
    }
    ;
    B() {
        return this.getToken(vbParser.B, 0);
    }
    ;
    C() {
        return this.getToken(vbParser.C, 0);
    }
    ;
    D() {
        return this.getToken(vbParser.D, 0);
    }
    ;
    E() {
        return this.getToken(vbParser.E, 0);
    }
    ;
    F() {
        return this.getToken(vbParser.F, 0);
    }
    ;
    G() {
        return this.getToken(vbParser.G, 0);
    }
    ;
    H() {
        return this.getToken(vbParser.H, 0);
    }
    ;
    I() {
        return this.getToken(vbParser.I, 0);
    }
    ;
    J() {
        return this.getToken(vbParser.J, 0);
    }
    ;
    K() {
        return this.getToken(vbParser.K, 0);
    }
    ;
    L() {
        return this.getToken(vbParser.L, 0);
    }
    ;
    M() {
        return this.getToken(vbParser.M, 0);
    }
    ;
    N() {
        return this.getToken(vbParser.N, 0);
    }
    ;
    O() {
        return this.getToken(vbParser.O, 0);
    }
    ;
    P() {
        return this.getToken(vbParser.P, 0);
    }
    ;
    Q() {
        return this.getToken(vbParser.Q, 0);
    }
    ;
    R() {
        return this.getToken(vbParser.R, 0);
    }
    ;
    S() {
        return this.getToken(vbParser.S, 0);
    }
    ;
    T() {
        return this.getToken(vbParser.T, 0);
    }
    ;
    U() {
        return this.getToken(vbParser.U, 0);
    }
    ;
    V() {
        return this.getToken(vbParser.V, 0);
    }
    ;
    W() {
        return this.getToken(vbParser.W, 0);
    }
    ;
    X() {
        return this.getToken(vbParser.X, 0);
    }
    ;
    Y() {
        return this.getToken(vbParser.Y, 0);
    }
    ;
    Z() {
        return this.getToken(vbParser.Z, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAlphaCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAlphaCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAlphaCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BooleanLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_booleanLiteral;
    }
    T() {
        return this.getToken(vbParser.T, 0);
    }
    ;
    R() {
        return this.getToken(vbParser.R, 0);
    }
    ;
    U() {
        return this.getToken(vbParser.U, 0);
    }
    ;
    E() {
        return this.getToken(vbParser.E, 0);
    }
    ;
    F() {
        return this.getToken(vbParser.F, 0);
    }
    ;
    A() {
        return this.getToken(vbParser.A, 0);
    }
    ;
    L() {
        return this.getToken(vbParser.L, 0);
    }
    ;
    S() {
        return this.getToken(vbParser.S, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterBooleanLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitBooleanLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitBooleanLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IntLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.decimalDigit = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(DecimalDigitContext);
            }
            else {
                return this.getTypedRuleContext(DecimalDigitContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_intLiteral;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIntLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIntLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIntLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class HexLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.hexDigit = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(HexDigitContext);
            }
            else {
                return this.getTypedRuleContext(HexDigitContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_hexLiteral;
    }
    AMPERSAND() {
        return this.getToken(vbParser.AMPERSAND, 0);
    }
    ;
    H() {
        return this.getToken(vbParser.H, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterHexLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitHexLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitHexLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OctalLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.octalDigit = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(OctalDigitContext);
            }
            else {
                return this.getTypedRuleContext(OctalDigitContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_octalLiteral;
    }
    AMPERSAND() {
        return this.getToken(vbParser.AMPERSAND, 0);
    }
    ;
    O() {
        return this.getToken(vbParser.O, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOctalLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOctalLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOctalLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IntegerLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_integerLiteral;
    }
    integerLiteralValue() {
        return this.getTypedRuleContext(IntegerLiteralValueContext, 0);
    }
    ;
    integralTypeCharacter() {
        return this.getTypedRuleContext(IntegralTypeCharacterContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIntegerLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIntegerLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIntegerLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IntegerLiteralValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_integerLiteralValue;
    }
    intLiteral() {
        return this.getTypedRuleContext(IntLiteralContext, 0);
    }
    ;
    hexLiteral() {
        return this.getTypedRuleContext(HexLiteralContext, 0);
    }
    ;
    octalLiteral() {
        return this.getTypedRuleContext(OctalLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIntegerLiteralValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIntegerLiteralValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIntegerLiteralValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FloatingPointLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_floatingPointLiteral;
    }
    floatingPointLiteralValue() {
        return this.getTypedRuleContext(FloatingPointLiteralValueContext, 0);
    }
    ;
    floatingPointTypeCharacter() {
        return this.getTypedRuleContext(FloatingPointTypeCharacterContext, 0);
    }
    ;
    intLiteral() {
        return this.getTypedRuleContext(IntLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFloatingPointLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFloatingPointLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFloatingPointLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FloatingPointLiteralValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.intLiteral = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IntLiteralContext);
            }
            else {
                return this.getTypedRuleContext(IntLiteralContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_floatingPointLiteralValue;
    }
    PERIOD() {
        return this.getToken(vbParser.PERIOD, 0);
    }
    ;
    exponent() {
        return this.getTypedRuleContext(ExponentContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFloatingPointLiteralValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFloatingPointLiteralValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFloatingPointLiteralValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExponentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_exponent;
    }
    E() {
        return this.getToken(vbParser.E, 0);
    }
    ;
    intLiteral() {
        return this.getTypedRuleContext(IntLiteralContext, 0);
    }
    ;
    sign() {
        return this.getTypedRuleContext(SignContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterExponent(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitExponent(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitExponent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SignContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_sign;
    }
    PLUS() {
        return this.getToken(vbParser.PLUS, 0);
    }
    ;
    MINUS() {
        return this.getToken(vbParser.MINUS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSign(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSign(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSign(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SingleTypeCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_singleTypeCharacter;
    }
    EXCLAMATION() {
        return this.getToken(vbParser.EXCLAMATION, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSingleTypeCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSingleTypeCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSingleTypeCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DoubleTypeCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_doubleTypeCharacter;
    }
    POUND() {
        return this.getToken(vbParser.POUND, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDoubleTypeCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDoubleTypeCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDoubleTypeCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LongTypeCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_longTypeCharacter;
    }
    AMPERSAND() {
        return this.getToken(vbParser.AMPERSAND, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLongTypeCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLongTypeCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLongTypeCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StringTypeCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_stringTypeCharacter;
    }
    DOLLAR() {
        return this.getToken(vbParser.DOLLAR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStringTypeCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStringTypeCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStringTypeCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IntegerTypeCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_integerTypeCharacter;
    }
    PERCENT() {
        return this.getToken(vbParser.PERCENT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIntegerTypeCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIntegerTypeCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIntegerTypeCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DecimalTypeCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_decimalTypeCharacter;
    }
    AT() {
        return this.getToken(vbParser.AT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDecimalTypeCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDecimalTypeCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDecimalTypeCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IntegralTypeCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_integralTypeCharacter;
    }
    SHORT_CHARACTER() {
        return this.getToken(vbParser.SHORT_CHARACTER, 0);
    }
    ;
    UNSIGNED_SHORT_CHARACTER() {
        return this.getToken(vbParser.UNSIGNED_SHORT_CHARACTER, 0);
    }
    ;
    INTEGER_CHARACTER() {
        return this.getToken(vbParser.INTEGER_CHARACTER, 0);
    }
    ;
    UNSIGNED_INTEGER_CHARACTER() {
        return this.getToken(vbParser.UNSIGNED_INTEGER_CHARACTER, 0);
    }
    ;
    LONG_CHARACTER() {
        return this.getToken(vbParser.LONG_CHARACTER, 0);
    }
    ;
    UNSIGNED_LONG_CHARACTER() {
        return this.getToken(vbParser.UNSIGNED_LONG_CHARACTER, 0);
    }
    ;
    integerTypeCharacter() {
        return this.getTypedRuleContext(IntegerTypeCharacterContext, 0);
    }
    ;
    longTypeCharacter() {
        return this.getTypedRuleContext(LongTypeCharacterContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIntegralTypeCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIntegralTypeCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIntegralTypeCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FloatingPointTypeCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_floatingPointTypeCharacter;
    }
    SINGLE_CHARACTER() {
        return this.getToken(vbParser.SINGLE_CHARACTER, 0);
    }
    ;
    DOUBLE_CHARACTER() {
        return this.getToken(vbParser.DOUBLE_CHARACTER, 0);
    }
    ;
    DECIMAL_CHARACTER() {
        return this.getToken(vbParser.DECIMAL_CHARACTER, 0);
    }
    ;
    singleTypeCharacter() {
        return this.getTypedRuleContext(SingleTypeCharacterContext, 0);
    }
    ;
    doubleTypeCharacter() {
        return this.getTypedRuleContext(DoubleTypeCharacterContext, 0);
    }
    ;
    decimalTypeCharacter() {
        return this.getTypedRuleContext(DecimalTypeCharacterContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFloatingPointTypeCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFloatingPointTypeCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFloatingPointTypeCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MonthValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_monthValue;
    }
    intLiteral() {
        return this.getTypedRuleContext(IntLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMonthValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMonthValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMonthValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DayValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_dayValue;
    }
    intLiteral() {
        return this.getTypedRuleContext(IntLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDayValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDayValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDayValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class YearValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_yearValue;
    }
    intLiteral() {
        return this.getTypedRuleContext(IntLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterYearValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitYearValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitYearValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class HourValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_hourValue;
    }
    intLiteral() {
        return this.getTypedRuleContext(IntLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterHourValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitHourValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitHourValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MinuteValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_minuteValue;
    }
    intLiteral() {
        return this.getTypedRuleContext(IntLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMinuteValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMinuteValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMinuteValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SecondValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_secondValue;
    }
    intLiteral() {
        return this.getTypedRuleContext(IntLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSecondValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSecondValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSecondValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AmpmContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_ampm;
    }
    A() {
        return this.getToken(vbParser.A, 0);
    }
    ;
    M() {
        return this.getToken(vbParser.M, 0);
    }
    ;
    P() {
        return this.getToken(vbParser.P, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAmpm(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAmpm(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAmpm(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DateValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SLASH = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SLASH);
            }
            else {
                return this.getToken(vbParser.SLASH, i);
            }
        };
        this.MINUS = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.MINUS);
            }
            else {
                return this.getToken(vbParser.MINUS, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_dateValue;
    }
    monthValue() {
        return this.getTypedRuleContext(MonthValueContext, 0);
    }
    ;
    dayValue() {
        return this.getTypedRuleContext(DayValueContext, 0);
    }
    ;
    yearValue() {
        return this.getTypedRuleContext(YearValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDateValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDateValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDateValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TimeValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.COLON = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COLON);
            }
            else {
                return this.getToken(vbParser.COLON, i);
            }
        };
        this.WS = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.WS);
            }
            else {
                return this.getToken(vbParser.WS, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_timeValue;
    }
    hourValue() {
        return this.getTypedRuleContext(HourValueContext, 0);
    }
    ;
    minuteValue() {
        return this.getTypedRuleContext(MinuteValueContext, 0);
    }
    ;
    secondValue() {
        return this.getTypedRuleContext(SecondValueContext, 0);
    }
    ;
    ampm() {
        return this.getTypedRuleContext(AmpmContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTimeValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTimeValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTimeValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DateOrTimeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.WS = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.WS);
            }
            else {
                return this.getToken(vbParser.WS, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_dateOrTime;
    }
    dateValue() {
        return this.getTypedRuleContext(DateValueContext, 0);
    }
    ;
    timeValue() {
        return this.getTypedRuleContext(TimeValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDateOrTime(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDateOrTime(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDateOrTime(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DateLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.POUND = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.POUND);
            }
            else {
                return this.getToken(vbParser.POUND, i);
            }
        };
        this.WS = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.WS);
            }
            else {
                return this.getToken(vbParser.WS, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_dateLiteral;
    }
    dateOrTime() {
        return this.getTypedRuleContext(DateOrTimeContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDateLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDateLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDateLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StringCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.DOUBLE_QUOTE_CHARACTER = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.DOUBLE_QUOTE_CHARACTER);
            }
            else {
                return this.getToken(vbParser.DOUBLE_QUOTE_CHARACTER, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_stringCharacter;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStringCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStringCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStringCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StringLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.DOUBLE_QUOTE_CHARACTER = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.DOUBLE_QUOTE_CHARACTER);
            }
            else {
                return this.getToken(vbParser.DOUBLE_QUOTE_CHARACTER, i);
            }
        };
        this.stringCharacter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StringCharacterContext);
            }
            else {
                return this.getTypedRuleContext(StringCharacterContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_stringLiteral;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStringLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStringLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStringLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CharacterLiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.DOUBLE_QUOTE_CHARACTER = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.DOUBLE_QUOTE_CHARACTER);
            }
            else {
                return this.getToken(vbParser.DOUBLE_QUOTE_CHARACTER, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_characterLiteral;
    }
    stringCharacter() {
        return this.getTypedRuleContext(StringCharacterContext, 0);
    }
    ;
    C() {
        return this.getToken(vbParser.C, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCharacterLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCharacterLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCharacterLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierStartContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_identifierStart;
    }
    alphaCharacter() {
        return this.getTypedRuleContext(AlphaCharacterContext, 0);
    }
    ;
    UNDERSCORE() {
        return this.getToken(vbParser.UNDERSCORE, 0);
    }
    ;
    identifierCharacter() {
        return this.getTypedRuleContext(IdentifierCharacterContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIdentifierStart(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIdentifierStart(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIdentifierStart(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.identifierCharacter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierCharacterContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierCharacterContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_identifierName;
    }
    identifierStart() {
        return this.getTypedRuleContext(IdentifierStartContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIdentifierName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIdentifierName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIdentifierName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_identifierCharacter;
    }
    UNDERSCORE() {
        return this.getToken(vbParser.UNDERSCORE, 0);
    }
    ;
    alphaCharacter() {
        return this.getTypedRuleContext(AlphaCharacterContext, 0);
    }
    ;
    decimalDigit() {
        return this.getTypedRuleContext(DecimalDigitContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIdentifierCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIdentifierCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIdentifierCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_identifier;
    }
    identifierName() {
        return this.getTypedRuleContext(IdentifierNameContext, 0);
    }
    ;
    typeCharacter() {
        return this.getTypedRuleContext(TypeCharacterContext, 0);
    }
    ;
    LEFT_SQUARE_BRACKET() {
        return this.getToken(vbParser.LEFT_SQUARE_BRACKET, 0);
    }
    ;
    RIGHT_SQUARE_BRACKET() {
        return this.getToken(vbParser.RIGHT_SQUARE_BRACKET, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIdentifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierOrKeywordContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_identifierOrKeyword;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIdentifierOrKeyword(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIdentifierOrKeyword(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIdentifierOrKeyword(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeCharacter;
    }
    integerTypeCharacter() {
        return this.getTypedRuleContext(IntegerTypeCharacterContext, 0);
    }
    ;
    longTypeCharacter() {
        return this.getTypedRuleContext(LongTypeCharacterContext, 0);
    }
    ;
    decimalTypeCharacter() {
        return this.getTypedRuleContext(DecimalTypeCharacterContext, 0);
    }
    ;
    singleTypeCharacter() {
        return this.getTypedRuleContext(SingleTypeCharacterContext, 0);
    }
    ;
    doubleTypeCharacter() {
        return this.getTypedRuleContext(DoubleTypeCharacterContext, 0);
    }
    ;
    stringTypeCharacter() {
        return this.getTypedRuleContext(StringTypeCharacterContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LiteralContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_literal;
    }
    booleanLiteral() {
        return this.getTypedRuleContext(BooleanLiteralContext, 0);
    }
    ;
    integerLiteral() {
        return this.getTypedRuleContext(IntegerLiteralContext, 0);
    }
    ;
    floatingPointLiteral() {
        return this.getTypedRuleContext(FloatingPointLiteralContext, 0);
    }
    ;
    stringLiteral() {
        return this.getTypedRuleContext(StringLiteralContext, 0);
    }
    ;
    characterLiteral() {
        return this.getTypedRuleContext(CharacterLiteralContext, 0);
    }
    ;
    dateLiteral() {
        return this.getTypedRuleContext(DateLiteralContext, 0);
    }
    ;
    NOTHING() {
        return this.getToken(vbParser.NOTHING, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLiteral(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLiteral(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLiteral(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ElseIfContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_elseIf;
    }
    ELSEIF() {
        return this.getToken(vbParser.ELSEIF, 0);
    }
    ;
    ELSE() {
        return this.getToken(vbParser.ELSE, 0);
    }
    ;
    IF() {
        return this.getToken(vbParser.IF, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterElseIf(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitElseIf(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitElseIf(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCStartContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.cCStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CCStatementContext);
            }
            else {
                return this.getTypedRuleContext(CCStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCStart;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCStart(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCStart(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCStart(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCStatement;
    }
    cCConstantDeclaration() {
        return this.getTypedRuleContext(CCConstantDeclarationContext, 0);
    }
    ;
    cCIfGroup() {
        return this.getTypedRuleContext(CCIfGroupContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.cCExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CCExpressionContext);
            }
            else {
                return this.getTypedRuleContext(CCExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCExpression;
    }
    literalExpression() {
        return this.getTypedRuleContext(LiteralExpressionContext, 0);
    }
    ;
    cCParenthesizedExpression() {
        return this.getTypedRuleContext(CCParenthesizedExpressionContext, 0);
    }
    ;
    cCSimpleNameExpression() {
        return this.getTypedRuleContext(CCSimpleNameExpressionContext, 0);
    }
    ;
    cCCastExpression() {
        return this.getTypedRuleContext(CCCastExpressionContext, 0);
    }
    ;
    cCUnaryOperator() {
        return this.getTypedRuleContext(CCUnaryOperatorContext, 0);
    }
    ;
    cCConditionalExpression() {
        return this.getTypedRuleContext(CCConditionalExpressionContext, 0);
    }
    ;
    cCBinaryOperator() {
        return this.getTypedRuleContext(CCBinaryOperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCParenthesizedExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCParenthesizedExpression;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    cCExpression() {
        return this.getTypedRuleContext(CCExpressionContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCParenthesizedExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCParenthesizedExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCParenthesizedExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCSimpleNameExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCSimpleNameExpression;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCSimpleNameExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCSimpleNameExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCSimpleNameExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCCastExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCCastExpression;
    }
    DIRECTCAST() {
        return this.getToken(vbParser.DIRECTCAST, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    cCExpression() {
        return this.getTypedRuleContext(CCExpressionContext, 0);
    }
    ;
    COMMA() {
        return this.getToken(vbParser.COMMA, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    TRYCAST() {
        return this.getToken(vbParser.TRYCAST, 0);
    }
    ;
    CTYPE() {
        return this.getToken(vbParser.CTYPE, 0);
    }
    ;
    castTarget() {
        return this.getTypedRuleContext(CastTargetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCCastExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCCastExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCCastExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCPlusMinusContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCPlusMinus;
    }
    PLUS() {
        return this.getToken(vbParser.PLUS, 0);
    }
    ;
    MINUS() {
        return this.getToken(vbParser.MINUS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCPlusMinus(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCPlusMinus(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCPlusMinus(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCUnaryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCUnaryOperator;
    }
    cCPlusMinus() {
        return this.getTypedRuleContext(CCPlusMinusContext, 0);
    }
    ;
    NOT() {
        return this.getToken(vbParser.NOT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCUnaryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCUnaryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCUnaryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCBinaryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LEFT_ARROW = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LEFT_ARROW);
            }
            else {
                return this.getToken(vbParser.LEFT_ARROW, i);
            }
        };
        this.RIGHT_ARROW = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.RIGHT_ARROW);
            }
            else {
                return this.getToken(vbParser.RIGHT_ARROW, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCBinaryOperator;
    }
    cCPlusMinus() {
        return this.getTypedRuleContext(CCPlusMinusContext, 0);
    }
    ;
    ASTERISK() {
        return this.getToken(vbParser.ASTERISK, 0);
    }
    ;
    SLASH() {
        return this.getToken(vbParser.SLASH, 0);
    }
    ;
    DOUBLE_BACK_SLASH() {
        return this.getToken(vbParser.DOUBLE_BACK_SLASH, 0);
    }
    ;
    MOD() {
        return this.getToken(vbParser.MOD, 0);
    }
    ;
    CARET() {
        return this.getToken(vbParser.CARET, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    AMPERSAND() {
        return this.getToken(vbParser.AMPERSAND, 0);
    }
    ;
    AND() {
        return this.getToken(vbParser.AND, 0);
    }
    ;
    OR() {
        return this.getToken(vbParser.OR, 0);
    }
    ;
    XOR() {
        return this.getToken(vbParser.XOR, 0);
    }
    ;
    ANDALSO() {
        return this.getToken(vbParser.ANDALSO, 0);
    }
    ;
    ORELSE() {
        return this.getToken(vbParser.ORELSE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCBinaryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCBinaryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCBinaryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCConditionalExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.cCExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CCExpressionContext);
            }
            else {
                return this.getTypedRuleContext(CCExpressionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCConditionalExpression;
    }
    IF() {
        return this.getToken(vbParser.IF, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCConditionalExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCConditionalExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCConditionalExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCConstantDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCConstantDeclaration;
    }
    POUND() {
        return this.getToken(vbParser.POUND, 0);
    }
    ;
    CONST() {
        return this.getToken(vbParser.CONST, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    cCExpression() {
        return this.getTypedRuleContext(CCExpressionContext, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCConstantDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCConstantDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCConstantDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCIfGroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.POUND = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.POUND);
            }
            else {
                return this.getToken(vbParser.POUND, i);
            }
        };
        this.IF = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.IF);
            }
            else {
                return this.getToken(vbParser.IF, i);
            }
        };
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.cCStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CCStatementContext);
            }
            else {
                return this.getTypedRuleContext(CCStatementContext, i);
            }
        };
        this.cCElseIfGroup = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CCElseIfGroupContext);
            }
            else {
                return this.getTypedRuleContext(CCElseIfGroupContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCIfGroup;
    }
    cCExpression() {
        return this.getTypedRuleContext(CCExpressionContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    THEN() {
        return this.getToken(vbParser.THEN, 0);
    }
    ;
    cCElseGroup() {
        return this.getTypedRuleContext(CCElseGroupContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCIfGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCIfGroup(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCIfGroup(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCElseIfGroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.cCStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CCStatementContext);
            }
            else {
                return this.getTypedRuleContext(CCStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCElseIfGroup;
    }
    POUND() {
        return this.getToken(vbParser.POUND, 0);
    }
    ;
    elseIf() {
        return this.getTypedRuleContext(ElseIfContext, 0);
    }
    ;
    cCExpression() {
        return this.getTypedRuleContext(CCExpressionContext, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    THEN() {
        return this.getToken(vbParser.THEN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCElseIfGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCElseIfGroup(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCElseIfGroup(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CCElseGroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.cCStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CCStatementContext);
            }
            else {
                return this.getTypedRuleContext(CCStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_cCElseGroup;
    }
    POUND() {
        return this.getToken(vbParser.POUND, 0);
    }
    ;
    ELSE() {
        return this.getToken(vbParser.ELSE, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCCElseGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCCElseGroup(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCCElseGroup(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RegionStartContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.regionStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(RegionStatementContext);
            }
            else {
                return this.getTypedRuleContext(RegionStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_regionStart;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRegionStart(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRegionStart(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRegionStart(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RegionStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_regionStatement;
    }
    regionGroup() {
        return this.getTypedRuleContext(RegionGroupContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRegionStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRegionStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRegionStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RegionGroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.POUND = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.POUND);
            }
            else {
                return this.getToken(vbParser.POUND, i);
            }
        };
        this.REGION = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.REGION);
            }
            else {
                return this.getToken(vbParser.REGION, i);
            }
        };
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.regionStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(RegionStatementContext);
            }
            else {
                return this.getTypedRuleContext(RegionStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_regionGroup;
    }
    stringLiteral() {
        return this.getTypedRuleContext(StringLiteralContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRegionGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRegionGroup(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRegionGroup(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AccessModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_accessModifier;
    }
    PUBLIC() {
        return this.getToken(vbParser.PUBLIC, 0);
    }
    ;
    PROTECTED() {
        return this.getToken(vbParser.PROTECTED, 0);
    }
    ;
    FRIEND() {
        return this.getToken(vbParser.FRIEND, 0);
    }
    ;
    PRIVATE() {
        return this.getToken(vbParser.PRIVATE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAccessModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAccessModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAccessModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeParameter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeParameterContext);
            }
            else {
                return this.getTypedRuleContext(TypeParameterContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeParameterList;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    OF() {
        return this.getToken(vbParser.OF, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeParameterList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeParameterList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeParameterList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeParameter;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    varianceModifier() {
        return this.getTypedRuleContext(VarianceModifierContext, 0);
    }
    ;
    typeParameterConstraints() {
        return this.getTypedRuleContext(TypeParameterConstraintsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeParameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VarianceModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_varianceModifier;
    }
    IN() {
        return this.getToken(vbParser.IN, 0);
    }
    ;
    OUT() {
        return this.getToken(vbParser.OUT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterVarianceModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitVarianceModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitVarianceModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterConstraintsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeParameterConstraints;
    }
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    constraint() {
        return this.getTypedRuleContext(ConstraintContext, 0);
    }
    ;
    LEFT_BRACE() {
        return this.getToken(vbParser.LEFT_BRACE, 0);
    }
    ;
    constraintList() {
        return this.getTypedRuleContext(ConstraintListContext, 0);
    }
    ;
    RIGHT_BRACE() {
        return this.getToken(vbParser.RIGHT_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeParameterConstraints(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeParameterConstraints(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeParameterConstraints(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstraintListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.constraint = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConstraintContext);
            }
            else {
                return this.getTypedRuleContext(ConstraintContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_constraintList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConstraintList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConstraintList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConstraintList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstraintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_constraint;
    }
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    NEW() {
        return this.getToken(vbParser.NEW, 0);
    }
    ;
    STRUCTURE() {
        return this.getToken(vbParser.STRUCTURE, 0);
    }
    ;
    CLASS() {
        return this.getToken(vbParser.CLASS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConstraint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConstraint(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConstraint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.attributeBlock = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AttributeBlockContext);
            }
            else {
                return this.getTypedRuleContext(AttributeBlockContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_attributes;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAttributes(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAttributes(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAttributes(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributeBlockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_attributeBlock;
    }
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    attributeList() {
        return this.getTypedRuleContext(AttributeListContext, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAttributeBlock(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAttributeBlock(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAttributeBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributeListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.attribute = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AttributeContext);
            }
            else {
                return this.getTypedRuleContext(AttributeContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_attributeList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAttributeList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAttributeList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAttributeList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_attribute;
    }
    simpleTypeName() {
        return this.getTypedRuleContext(SimpleTypeNameContext, 0);
    }
    ;
    attributeModifier() {
        return this.getTypedRuleContext(AttributeModifierContext, 0);
    }
    ;
    COLON() {
        return this.getToken(vbParser.COLON, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    attributeArguments() {
        return this.getTypedRuleContext(AttributeArgumentsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAttribute(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAttribute(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAttribute(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributeModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_attributeModifier;
    }
    ASSEMBLY() {
        return this.getToken(vbParser.ASSEMBLY, 0);
    }
    ;
    MODULE() {
        return this.getToken(vbParser.MODULE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAttributeModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAttributeModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAttributeModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributeArgumentsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_attributeArguments;
    }
    attributePositionalArgumentList() {
        return this.getTypedRuleContext(AttributePositionalArgumentListContext, 0);
    }
    ;
    COMMA() {
        return this.getToken(vbParser.COMMA, 0);
    }
    ;
    variablePropertyInitializerList() {
        return this.getTypedRuleContext(VariablePropertyInitializerListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAttributeArguments(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAttributeArguments(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAttributeArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributePositionalArgumentListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.attributeArgumentExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AttributeArgumentExpressionContext);
            }
            else {
                return this.getTypedRuleContext(AttributeArgumentExpressionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_attributePositionalArgumentList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAttributePositionalArgumentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAttributePositionalArgumentList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAttributePositionalArgumentList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VariablePropertyInitializerListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.variablePropertyInitializer = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariablePropertyInitializerContext);
            }
            else {
                return this.getTypedRuleContext(VariablePropertyInitializerContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_variablePropertyInitializerList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterVariablePropertyInitializerList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitVariablePropertyInitializerList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitVariablePropertyInitializerList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VariablePropertyInitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_variablePropertyInitializer;
    }
    identifierOrKeyword() {
        return this.getTypedRuleContext(IdentifierOrKeywordContext, 0);
    }
    ;
    COLON() {
        return this.getToken(vbParser.COLON, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    attributeArgumentExpression() {
        return this.getTypedRuleContext(AttributeArgumentExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterVariablePropertyInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitVariablePropertyInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitVariablePropertyInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributeArgumentExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_attributeArgumentExpression;
    }
    constantExpression() {
        return this.getTypedRuleContext(ConstantExpressionContext, 0);
    }
    ;
    getTypeExpression() {
        return this.getTypedRuleContext(GetTypeExpressionContext, 0);
    }
    ;
    arrayExpression() {
        return this.getTypedRuleContext(ArrayExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAttributeArgumentExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAttributeArgumentExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAttributeArgumentExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StatementTerminatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_statementTerminator;
    }
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    COLON() {
        return this.getToken(vbParser.COLON, 0);
    }
    ;
    EOF() {
        return this.getToken(vbParser.EOF, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStatementTerminator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStatementTerminator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStatementTerminator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributesStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_attributesStatement;
    }
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAttributesStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAttributesStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAttributesStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OptionStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_optionStatement;
    }
    optionExplicitStatement() {
        return this.getTypedRuleContext(OptionExplicitStatementContext, 0);
    }
    ;
    optionStrictStatement() {
        return this.getTypedRuleContext(OptionStrictStatementContext, 0);
    }
    ;
    optionCompareStatement() {
        return this.getTypedRuleContext(OptionCompareStatementContext, 0);
    }
    ;
    optionInferStatement() {
        return this.getTypedRuleContext(OptionInferStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOptionStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOptionStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOptionStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OptionExplicitStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_optionExplicitStatement;
    }
    OPTION() {
        return this.getToken(vbParser.OPTION, 0);
    }
    ;
    EXPLICIT() {
        return this.getToken(vbParser.EXPLICIT, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    onOff() {
        return this.getTypedRuleContext(OnOffContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOptionExplicitStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOptionExplicitStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOptionExplicitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OnOffContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_onOff;
    }
    ON() {
        return this.getToken(vbParser.ON, 0);
    }
    ;
    OFF() {
        return this.getToken(vbParser.OFF, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOnOff(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOnOff(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOnOff(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OptionStrictStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_optionStrictStatement;
    }
    OPTION() {
        return this.getToken(vbParser.OPTION, 0);
    }
    ;
    STRICT() {
        return this.getToken(vbParser.STRICT, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    onOff() {
        return this.getTypedRuleContext(OnOffContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOptionStrictStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOptionStrictStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOptionStrictStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OptionCompareStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_optionCompareStatement;
    }
    OPTION() {
        return this.getToken(vbParser.OPTION, 0);
    }
    ;
    COMPARE() {
        return this.getToken(vbParser.COMPARE, 0);
    }
    ;
    compareOption() {
        return this.getTypedRuleContext(CompareOptionContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOptionCompareStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOptionCompareStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOptionCompareStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CompareOptionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_compareOption;
    }
    BINARY() {
        return this.getToken(vbParser.BINARY, 0);
    }
    ;
    TEXT() {
        return this.getToken(vbParser.TEXT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCompareOption(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCompareOption(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCompareOption(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OptionInferStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_optionInferStatement;
    }
    OPTION() {
        return this.getToken(vbParser.OPTION, 0);
    }
    ;
    INFER() {
        return this.getToken(vbParser.INFER, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    onOff() {
        return this.getTypedRuleContext(OnOffContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOptionInferStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOptionInferStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOptionInferStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ImportsStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_importsStatement;
    }
    IMPORTS() {
        return this.getToken(vbParser.IMPORTS, 0);
    }
    ;
    importsClauses() {
        return this.getTypedRuleContext(ImportsClausesContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterImportsStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitImportsStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitImportsStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ImportsClausesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.importsClause = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ImportsClauseContext);
            }
            else {
                return this.getTypedRuleContext(ImportsClauseContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_importsClauses;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterImportsClauses(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitImportsClauses(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitImportsClauses(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ImportsClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_importsClause;
    }
    aliasImportsClause() {
        return this.getTypedRuleContext(AliasImportsClauseContext, 0);
    }
    ;
    membersImportsClause() {
        return this.getTypedRuleContext(MembersImportsClauseContext, 0);
    }
    ;
    xMLNamespaceImportsClause() {
        return this.getTypedRuleContext(XMLNamespaceImportsClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterImportsClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitImportsClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitImportsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AliasImportsClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_aliasImportsClause;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAliasImportsClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAliasImportsClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAliasImportsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MembersImportsClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_membersImportsClause;
    }
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMembersImportsClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMembersImportsClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMembersImportsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLNamespaceImportsClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.XMLWhitespace = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.XMLWhitespace);
            }
            else {
                return this.getToken(vbParser.XMLWhitespace, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLNamespaceImportsClause;
    }
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    xMLNamespaceAttributeName() {
        return this.getTypedRuleContext(XMLNamespaceAttributeNameContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    xMLNamespaceValue() {
        return this.getTypedRuleContext(XMLNamespaceValueContext, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLNamespaceImportsClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLNamespaceImportsClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLNamespaceImportsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLNamespaceValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.DOUBLE_QUOTE_CHARACTER = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.DOUBLE_QUOTE_CHARACTER);
            }
            else {
                return this.getToken(vbParser.DOUBLE_QUOTE_CHARACTER, i);
            }
        };
        this.xMLAttributeDoubleQuoteValueCharacter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLAttributeDoubleQuoteValueCharacterContext);
            }
            else {
                return this.getTypedRuleContext(XMLAttributeDoubleQuoteValueCharacterContext, i);
            }
        };
        this.SINGLE_QUOTE_CHAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SINGLE_QUOTE_CHAR);
            }
            else {
                return this.getToken(vbParser.SINGLE_QUOTE_CHAR, i);
            }
        };
        this.xMLAttributeSingleQuoteValueCharacter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLAttributeSingleQuoteValueCharacterContext);
            }
            else {
                return this.getTypedRuleContext(XMLAttributeSingleQuoteValueCharacterContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLNamespaceValue;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLNamespaceValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLNamespaceValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLNamespaceValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NamespaceDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.NAMESPACE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.NAMESPACE);
            }
            else {
                return this.getToken(vbParser.NAMESPACE, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.namespaceMemberDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamespaceMemberDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(NamespaceMemberDeclarationContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_namespaceDeclaration;
    }
    namespaceName() {
        return this.getTypedRuleContext(NamespaceNameContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterNamespaceDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitNamespaceDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitNamespaceDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NamespaceNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_namespaceName;
    }
    relativeNamespaceName() {
        return this.getTypedRuleContext(RelativeNamespaceNameContext, 0);
    }
    ;
    GLOBAL() {
        return this.getToken(vbParser.GLOBAL, 0);
    }
    ;
    PERIOD() {
        return this.getToken(vbParser.PERIOD, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterNamespaceName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitNamespaceName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitNamespaceName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RelativeNamespaceNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PERIOD = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.PERIOD);
            }
            else {
                return this.getToken(vbParser.PERIOD, i);
            }
        };
        this.identifierOrKeyword = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierOrKeywordContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierOrKeywordContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_relativeNamespaceName;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRelativeNamespaceName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRelativeNamespaceName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRelativeNamespaceName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NamespaceMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_namespaceMemberDeclaration;
    }
    namespaceDeclaration() {
        return this.getTypedRuleContext(NamespaceDeclarationContext, 0);
    }
    ;
    typeDeclaration() {
        return this.getTypedRuleContext(TypeDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterNamespaceMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitNamespaceMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitNamespaceMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeDeclaration;
    }
    moduleDeclaration() {
        return this.getTypedRuleContext(ModuleDeclarationContext, 0);
    }
    ;
    nonModuleDeclaration() {
        return this.getTypedRuleContext(NonModuleDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NonModuleDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_nonModuleDeclaration;
    }
    enumDeclaration() {
        return this.getTypedRuleContext(EnumDeclarationContext, 0);
    }
    ;
    structureDeclaration() {
        return this.getTypedRuleContext(StructureDeclarationContext, 0);
    }
    ;
    interfaceDeclaration() {
        return this.getTypedRuleContext(InterfaceDeclarationContext, 0);
    }
    ;
    classDeclaration() {
        return this.getTypedRuleContext(ClassDeclarationContext, 0);
    }
    ;
    delegateDeclaration() {
        return this.getTypedRuleContext(DelegateDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterNonModuleDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitNonModuleDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitNonModuleDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeName;
    }
    arrayTypeName() {
        return this.getTypedRuleContext(ArrayTypeNameContext, 0);
    }
    ;
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NonArrayTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_nonArrayTypeName;
    }
    simpleTypeName() {
        return this.getTypedRuleContext(SimpleTypeNameContext, 0);
    }
    ;
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    QUESTION_MARK() {
        return this.getToken(vbParser.QUESTION_MARK, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterNonArrayTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitNonArrayTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitNonArrayTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SimpleTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_simpleTypeName;
    }
    qualifiedTypeName() {
        return this.getTypedRuleContext(QualifiedTypeNameContext, 0);
    }
    ;
    builtInTypeName() {
        return this.getTypedRuleContext(BuiltInTypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSimpleTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSimpleTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSimpleTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QualifiedTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeArguments = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeArgumentsContext);
            }
            else {
                return this.getTypedRuleContext(TypeArgumentsContext, i);
            }
        };
        this.PERIOD = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.PERIOD);
            }
            else {
                return this.getToken(vbParser.PERIOD, i);
            }
        };
        this.identifierOrKeyword = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierOrKeywordContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierOrKeywordContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_qualifiedTypeName;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    GLOBAL() {
        return this.getToken(vbParser.GLOBAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterQualifiedTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitQualifiedTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitQualifiedTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeArgumentsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeArguments;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    OF() {
        return this.getToken(vbParser.OF, 0);
    }
    ;
    typeArgumentList() {
        return this.getTypedRuleContext(TypeArgumentListContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeArguments(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeArguments(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeArgumentListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeName = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeNameContext);
            }
            else {
                return this.getTypedRuleContext(TypeNameContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeArgumentList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeArgumentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeArgumentList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeArgumentList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BuiltInTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_builtInTypeName;
    }
    OBJECT() {
        return this.getToken(vbParser.OBJECT, 0);
    }
    ;
    primitiveTypeName() {
        return this.getTypedRuleContext(PrimitiveTypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterBuiltInTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitBuiltInTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitBuiltInTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeModifier;
    }
    accessModifier() {
        return this.getTypedRuleContext(AccessModifierContext, 0);
    }
    ;
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierModifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_identifierModifiers;
    }
    nullableNameModifier() {
        return this.getTypedRuleContext(NullableNameModifierContext, 0);
    }
    ;
    arrayNameModifier() {
        return this.getTypedRuleContext(ArrayNameModifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIdentifierModifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIdentifierModifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIdentifierModifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NullableNameModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_nullableNameModifier;
    }
    QUESTION_MARK() {
        return this.getToken(vbParser.QUESTION_MARK, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterNullableNameModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitNullableNameModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitNullableNameModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeImplementsClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeImplementsClause;
    }
    IMPLEMENTS() {
        return this.getToken(vbParser.IMPLEMENTS, 0);
    }
    ;
    typeImplements() {
        return this.getTypedRuleContext(TypeImplementsContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeImplementsClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeImplementsClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeImplementsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeImplementsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.nonArrayTypeName = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NonArrayTypeNameContext);
            }
            else {
                return this.getTypedRuleContext(NonArrayTypeNameContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeImplements;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeImplements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeImplements(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeImplements(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PrimitiveTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_primitiveTypeName;
    }
    numericTypeName() {
        return this.getTypedRuleContext(NumericTypeNameContext, 0);
    }
    ;
    BOOLEAN() {
        return this.getToken(vbParser.BOOLEAN, 0);
    }
    ;
    DATE() {
        return this.getToken(vbParser.DATE, 0);
    }
    ;
    CHAR() {
        return this.getToken(vbParser.CHAR, 0);
    }
    ;
    STRING() {
        return this.getToken(vbParser.STRING, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterPrimitiveTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitPrimitiveTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitPrimitiveTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NumericTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_numericTypeName;
    }
    integralTypeName() {
        return this.getTypedRuleContext(IntegralTypeNameContext, 0);
    }
    ;
    floatingPointTypeName() {
        return this.getTypedRuleContext(FloatingPointTypeNameContext, 0);
    }
    ;
    DECIMAL() {
        return this.getToken(vbParser.DECIMAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterNumericTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitNumericTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitNumericTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IntegralTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_integralTypeName;
    }
    BYTE() {
        return this.getToken(vbParser.BYTE, 0);
    }
    ;
    SBYTE() {
        return this.getToken(vbParser.SBYTE, 0);
    }
    ;
    USHORT() {
        return this.getToken(vbParser.USHORT, 0);
    }
    ;
    SHORT() {
        return this.getToken(vbParser.SHORT, 0);
    }
    ;
    UINTEGER() {
        return this.getToken(vbParser.UINTEGER, 0);
    }
    ;
    INTEGER() {
        return this.getToken(vbParser.INTEGER, 0);
    }
    ;
    ULONG() {
        return this.getToken(vbParser.ULONG, 0);
    }
    ;
    LONG() {
        return this.getToken(vbParser.LONG, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIntegralTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIntegralTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIntegralTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FloatingPointTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_floatingPointTypeName;
    }
    SINGLE() {
        return this.getToken(vbParser.SINGLE, 0);
    }
    ;
    DOUBLE() {
        return this.getToken(vbParser.DOUBLE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFloatingPointTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFloatingPointTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFloatingPointTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EnumDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ENUM = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.ENUM);
            }
            else {
                return this.getToken(vbParser.ENUM, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.typeModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeModifierContext);
            }
            else {
                return this.getTypedRuleContext(TypeModifierContext, i);
            }
        };
        this.enumMemberDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EnumMemberDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(EnumMemberDeclarationContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_enumDeclaration;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEnumDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEnumDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEnumDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EnumMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_enumMemberDeclaration;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    constantExpression() {
        return this.getTypedRuleContext(ConstantExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEnumMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEnumMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEnumMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.CLASS = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.CLASS);
            }
            else {
                return this.getToken(vbParser.CLASS, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.classModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ClassModifierContext);
            }
            else {
                return this.getTypedRuleContext(ClassModifierContext, i);
            }
        };
        this.typeImplementsClause = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeImplementsClauseContext);
            }
            else {
                return this.getTypedRuleContext(TypeImplementsClauseContext, i);
            }
        };
        this.classMemberDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ClassMemberDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(ClassMemberDeclarationContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_classDeclaration;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    typeParameterList() {
        return this.getTypedRuleContext(TypeParameterListContext, 0);
    }
    ;
    classBase() {
        return this.getTypedRuleContext(ClassBaseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterClassDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitClassDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitClassDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_classModifier;
    }
    typeModifier() {
        return this.getTypedRuleContext(TypeModifierContext, 0);
    }
    ;
    MUST_INHERIT() {
        return this.getToken(vbParser.MUST_INHERIT, 0);
    }
    ;
    NOT_INHERITABLE() {
        return this.getToken(vbParser.NOT_INHERITABLE, 0);
    }
    ;
    PARTIAL() {
        return this.getToken(vbParser.PARTIAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterClassModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitClassModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitClassModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassBaseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_classBase;
    }
    INHERITS() {
        return this.getToken(vbParser.INHERITS, 0);
    }
    ;
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterClassBase(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitClassBase(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitClassBase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_classMemberDeclaration;
    }
    nonModuleDeclaration() {
        return this.getTypedRuleContext(NonModuleDeclarationContext, 0);
    }
    ;
    eventMemberDeclaration() {
        return this.getTypedRuleContext(EventMemberDeclarationContext, 0);
    }
    ;
    variableMemberDeclaration() {
        return this.getTypedRuleContext(VariableMemberDeclarationContext, 0);
    }
    ;
    constantMemberDeclaration() {
        return this.getTypedRuleContext(ConstantMemberDeclarationContext, 0);
    }
    ;
    methodMemberDeclaration() {
        return this.getTypedRuleContext(MethodMemberDeclarationContext, 0);
    }
    ;
    propertyMemberDeclaration() {
        return this.getTypedRuleContext(PropertyMemberDeclarationContext, 0);
    }
    ;
    constructorMemberDeclaration() {
        return this.getTypedRuleContext(ConstructorMemberDeclarationContext, 0);
    }
    ;
    operatorDeclaration() {
        return this.getTypedRuleContext(OperatorDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterClassMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitClassMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitClassMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StructureDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.STRUCTURE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.STRUCTURE);
            }
            else {
                return this.getToken(vbParser.STRUCTURE, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.structureModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StructureModifierContext);
            }
            else {
                return this.getTypedRuleContext(StructureModifierContext, i);
            }
        };
        this.typeImplementsClause = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeImplementsClauseContext);
            }
            else {
                return this.getTypedRuleContext(TypeImplementsClauseContext, i);
            }
        };
        this.structMemberDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StructMemberDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(StructMemberDeclarationContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_structureDeclaration;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    typeParameterList() {
        return this.getTypedRuleContext(TypeParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStructureDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStructureDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStructureDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StructureModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_structureModifier;
    }
    typeModifier() {
        return this.getTypedRuleContext(TypeModifierContext, 0);
    }
    ;
    PARTIAL() {
        return this.getToken(vbParser.PARTIAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStructureModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStructureModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStructureModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StructMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_structMemberDeclaration;
    }
    nonModuleDeclaration() {
        return this.getTypedRuleContext(NonModuleDeclarationContext, 0);
    }
    ;
    variableMemberDeclaration() {
        return this.getTypedRuleContext(VariableMemberDeclarationContext, 0);
    }
    ;
    constantMemberDeclaration() {
        return this.getTypedRuleContext(ConstantMemberDeclarationContext, 0);
    }
    ;
    eventMemberDeclaration() {
        return this.getTypedRuleContext(EventMemberDeclarationContext, 0);
    }
    ;
    methodMemberDeclaration() {
        return this.getTypedRuleContext(MethodMemberDeclarationContext, 0);
    }
    ;
    propertyMemberDeclaration() {
        return this.getTypedRuleContext(PropertyMemberDeclarationContext, 0);
    }
    ;
    constructorMemberDeclaration() {
        return this.getTypedRuleContext(ConstructorMemberDeclarationContext, 0);
    }
    ;
    operatorDeclaration() {
        return this.getTypedRuleContext(OperatorDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStructMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStructMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStructMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ModuleDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.MODULE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.MODULE);
            }
            else {
                return this.getToken(vbParser.MODULE, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.typeModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeModifierContext);
            }
            else {
                return this.getTypedRuleContext(TypeModifierContext, i);
            }
        };
        this.moduleMemberDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ModuleMemberDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(ModuleMemberDeclarationContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_moduleDeclaration;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterModuleDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitModuleDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitModuleDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ModuleMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_moduleMemberDeclaration;
    }
    nonModuleDeclaration() {
        return this.getTypedRuleContext(NonModuleDeclarationContext, 0);
    }
    ;
    variableMemberDeclaration() {
        return this.getTypedRuleContext(VariableMemberDeclarationContext, 0);
    }
    ;
    constantMemberDeclaration() {
        return this.getTypedRuleContext(ConstantMemberDeclarationContext, 0);
    }
    ;
    eventMemberDeclaration() {
        return this.getTypedRuleContext(EventMemberDeclarationContext, 0);
    }
    ;
    methodMemberDeclaration() {
        return this.getTypedRuleContext(MethodMemberDeclarationContext, 0);
    }
    ;
    propertyMemberDeclaration() {
        return this.getTypedRuleContext(PropertyMemberDeclarationContext, 0);
    }
    ;
    constructorMemberDeclaration() {
        return this.getTypedRuleContext(ConstructorMemberDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterModuleMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitModuleMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitModuleMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.INTERFACE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.INTERFACE);
            }
            else {
                return this.getToken(vbParser.INTERFACE, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.typeModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeModifierContext);
            }
            else {
                return this.getTypedRuleContext(TypeModifierContext, i);
            }
        };
        this.interfaceBase = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InterfaceBaseContext);
            }
            else {
                return this.getTypedRuleContext(InterfaceBaseContext, i);
            }
        };
        this.interfaceMemberDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InterfaceMemberDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(InterfaceMemberDeclarationContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceDeclaration;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    typeParameterList() {
        return this.getTypedRuleContext(TypeParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceBaseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceBase;
    }
    INHERITS() {
        return this.getToken(vbParser.INHERITS, 0);
    }
    ;
    interfaceBases() {
        return this.getTypedRuleContext(InterfaceBasesContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceBase(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceBase(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceBase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceBasesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.nonArrayTypeName = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NonArrayTypeNameContext);
            }
            else {
                return this.getTypedRuleContext(NonArrayTypeNameContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceBases;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceBases(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceBases(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceBases(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceMemberDeclaration;
    }
    nonModuleDeclaration() {
        return this.getTypedRuleContext(NonModuleDeclarationContext, 0);
    }
    ;
    interfaceEventMemberDeclaration() {
        return this.getTypedRuleContext(InterfaceEventMemberDeclarationContext, 0);
    }
    ;
    interfaceMethodMemberDeclaration() {
        return this.getTypedRuleContext(InterfaceMethodMemberDeclarationContext, 0);
    }
    ;
    interfacePropertyMemberDeclaration() {
        return this.getTypedRuleContext(InterfacePropertyMemberDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_arrayTypeName;
    }
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    arrayTypeModifiers() {
        return this.getTypedRuleContext(ArrayTypeModifiersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterArrayTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitArrayTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitArrayTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayTypeModifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.arrayTypeModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArrayTypeModifierContext);
            }
            else {
                return this.getTypedRuleContext(ArrayTypeModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_arrayTypeModifiers;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterArrayTypeModifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitArrayTypeModifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitArrayTypeModifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayTypeModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_arrayTypeModifier;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    rankList() {
        return this.getTypedRuleContext(RankListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterArrayTypeModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitArrayTypeModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitArrayTypeModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RankListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_rankList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRankList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRankList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRankList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayNameModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_arrayNameModifier;
    }
    arrayTypeModifiers() {
        return this.getTypedRuleContext(ArrayTypeModifiersContext, 0);
    }
    ;
    arraySizeInitializationModifier() {
        return this.getTypedRuleContext(ArraySizeInitializationModifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterArrayNameModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitArrayNameModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitArrayNameModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DelegateDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeModifierContext);
            }
            else {
                return this.getTypedRuleContext(TypeModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_delegateDeclaration;
    }
    DELEGATE() {
        return this.getToken(vbParser.DELEGATE, 0);
    }
    ;
    methodSignature() {
        return this.getTypedRuleContext(MethodSignatureContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDelegateDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDelegateDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDelegateDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MethodSignatureContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_methodSignature;
    }
    subSignature() {
        return this.getTypedRuleContext(SubSignatureContext, 0);
    }
    ;
    functionSignature() {
        return this.getTypedRuleContext(FunctionSignatureContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMethodSignature(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMethodSignature(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMethodSignature(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ImplementsClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_implementsClause;
    }
    IMPLEMENTS() {
        return this.getToken(vbParser.IMPLEMENTS, 0);
    }
    ;
    implementsList() {
        return this.getTypedRuleContext(ImplementsListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterImplementsClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitImplementsClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitImplementsClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ImplementsListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.interfaceMemberSpecifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InterfaceMemberSpecifierContext);
            }
            else {
                return this.getTypedRuleContext(InterfaceMemberSpecifierContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_implementsList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterImplementsList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitImplementsList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitImplementsList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceMemberSpecifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceMemberSpecifier;
    }
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    PERIOD() {
        return this.getToken(vbParser.PERIOD, 0);
    }
    ;
    identifierOrKeyword() {
        return this.getTypedRuleContext(IdentifierOrKeywordContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceMemberSpecifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceMemberSpecifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceMemberSpecifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MethodMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_methodMemberDeclaration;
    }
    methodDeclaration() {
        return this.getTypedRuleContext(MethodDeclarationContext, 0);
    }
    ;
    externalMethodDeclaration() {
        return this.getTypedRuleContext(ExternalMethodDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMethodMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMethodMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMethodMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceMethodMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceMethodMemberDeclaration;
    }
    interfaceMethodDeclaration() {
        return this.getTypedRuleContext(InterfaceMethodDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceMethodMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceMethodMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceMethodMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MethodDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_methodDeclaration;
    }
    subDeclaration() {
        return this.getTypedRuleContext(SubDeclarationContext, 0);
    }
    ;
    mustOverrideSubDeclaration() {
        return this.getTypedRuleContext(MustOverrideSubDeclarationContext, 0);
    }
    ;
    functionDeclaration() {
        return this.getTypedRuleContext(FunctionDeclarationContext, 0);
    }
    ;
    mustOverrideFunctionDeclaration() {
        return this.getTypedRuleContext(MustOverrideFunctionDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMethodDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMethodDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMethodDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceMethodDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceMethodDeclaration;
    }
    interfaceSubDeclaration() {
        return this.getTypedRuleContext(InterfaceSubDeclarationContext, 0);
    }
    ;
    interfaceFunctionDeclaration() {
        return this.getTypedRuleContext(InterfaceFunctionDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceMethodDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceMethodDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceMethodDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SubSignatureContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_subSignature;
    }
    SUB() {
        return this.getToken(vbParser.SUB, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    typeParameterList() {
        return this.getTypedRuleContext(TypeParameterListContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSubSignature(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSubSignature(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSubSignature(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionSignatureContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_functionSignature;
    }
    FUNCTION() {
        return this.getToken(vbParser.FUNCTION, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    typeParameterList() {
        return this.getTypedRuleContext(TypeParameterListContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFunctionSignature(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFunctionSignature(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFunctionSignature(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SubDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.procedureModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ProcedureModifierContext);
            }
            else {
                return this.getTypedRuleContext(ProcedureModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_subDeclaration;
    }
    subSignature() {
        return this.getTypedRuleContext(SubSignatureContext, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    SUB() {
        return this.getToken(vbParser.SUB, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    handlesOrImplements() {
        return this.getTypedRuleContext(HandlesOrImplementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSubDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSubDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSubDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MustOverrideSubDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.mustOverrideProcedureModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(MustOverrideProcedureModifierContext);
            }
            else {
                return this.getTypedRuleContext(MustOverrideProcedureModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_mustOverrideSubDeclaration;
    }
    subSignature() {
        return this.getTypedRuleContext(SubSignatureContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    handlesOrImplements() {
        return this.getTypedRuleContext(HandlesOrImplementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMustOverrideSubDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMustOverrideSubDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMustOverrideSubDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceSubDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.interfaceProcedureModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InterfaceProcedureModifierContext);
            }
            else {
                return this.getTypedRuleContext(InterfaceProcedureModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceSubDeclaration;
    }
    subSignature() {
        return this.getTypedRuleContext(SubSignatureContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceSubDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceSubDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceSubDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.procedureModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ProcedureModifierContext);
            }
            else {
                return this.getTypedRuleContext(ProcedureModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_functionDeclaration;
    }
    functionSignature() {
        return this.getTypedRuleContext(FunctionSignatureContext, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    FUNCTION() {
        return this.getToken(vbParser.FUNCTION, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    handlesOrImplements() {
        return this.getTypedRuleContext(HandlesOrImplementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFunctionDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFunctionDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFunctionDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MustOverrideFunctionDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.mustOverrideProcedureModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(MustOverrideProcedureModifierContext);
            }
            else {
                return this.getTypedRuleContext(MustOverrideProcedureModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_mustOverrideFunctionDeclaration;
    }
    functionSignature() {
        return this.getTypedRuleContext(FunctionSignatureContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    handlesOrImplements() {
        return this.getTypedRuleContext(HandlesOrImplementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMustOverrideFunctionDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMustOverrideFunctionDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMustOverrideFunctionDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceFunctionDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.interfaceProcedureModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InterfaceProcedureModifierContext);
            }
            else {
                return this.getTypedRuleContext(InterfaceProcedureModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceFunctionDeclaration;
    }
    functionSignature() {
        return this.getTypedRuleContext(FunctionSignatureContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceFunctionDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceFunctionDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceFunctionDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ProcedureModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_procedureModifier;
    }
    accessModifier() {
        return this.getTypedRuleContext(AccessModifierContext, 0);
    }
    ;
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    SHARED() {
        return this.getToken(vbParser.SHARED, 0);
    }
    ;
    OVERRIDABLE() {
        return this.getToken(vbParser.OVERRIDABLE, 0);
    }
    ;
    NOTOVERRIDABLE() {
        return this.getToken(vbParser.NOTOVERRIDABLE, 0);
    }
    ;
    OVERRIDES() {
        return this.getToken(vbParser.OVERRIDES, 0);
    }
    ;
    OVERLOADS() {
        return this.getToken(vbParser.OVERLOADS, 0);
    }
    ;
    PARTIAL() {
        return this.getToken(vbParser.PARTIAL, 0);
    }
    ;
    ITERATOR() {
        return this.getToken(vbParser.ITERATOR, 0);
    }
    ;
    ASYNC() {
        return this.getToken(vbParser.ASYNC, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterProcedureModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitProcedureModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitProcedureModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MustOverrideProcedureModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_mustOverrideProcedureModifier;
    }
    procedureModifier() {
        return this.getTypedRuleContext(ProcedureModifierContext, 0);
    }
    ;
    MUSTOVERRIDE() {
        return this.getToken(vbParser.MUSTOVERRIDE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMustOverrideProcedureModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMustOverrideProcedureModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMustOverrideProcedureModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceProcedureModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceProcedureModifier;
    }
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    OVERLOADS() {
        return this.getToken(vbParser.OVERLOADS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceProcedureModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceProcedureModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceProcedureModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class HandlesOrImplementsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_handlesOrImplements;
    }
    handlesClause() {
        return this.getTypedRuleContext(HandlesClauseContext, 0);
    }
    ;
    implementsClause() {
        return this.getTypedRuleContext(ImplementsClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterHandlesOrImplements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitHandlesOrImplements(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitHandlesOrImplements(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExternalMethodDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_externalMethodDeclaration;
    }
    externalSubDeclaration() {
        return this.getTypedRuleContext(ExternalSubDeclarationContext, 0);
    }
    ;
    externalFunctionDeclaration() {
        return this.getTypedRuleContext(ExternalFunctionDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterExternalMethodDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitExternalMethodDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitExternalMethodDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExternalSubDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.externalMethodModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExternalMethodModifierContext);
            }
            else {
                return this.getTypedRuleContext(ExternalMethodModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_externalSubDeclaration;
    }
    DECLARE() {
        return this.getToken(vbParser.DECLARE, 0);
    }
    ;
    SUB() {
        return this.getToken(vbParser.SUB, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    libraryClause() {
        return this.getTypedRuleContext(LibraryClauseContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    charsetModifier() {
        return this.getTypedRuleContext(CharsetModifierContext, 0);
    }
    ;
    aliasClause() {
        return this.getTypedRuleContext(AliasClauseContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterExternalSubDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitExternalSubDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitExternalSubDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExternalFunctionDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.attributes = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AttributesContext);
            }
            else {
                return this.getTypedRuleContext(AttributesContext, i);
            }
        };
        this.externalMethodModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExternalMethodModifierContext);
            }
            else {
                return this.getTypedRuleContext(ExternalMethodModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_externalFunctionDeclaration;
    }
    DECLARE() {
        return this.getToken(vbParser.DECLARE, 0);
    }
    ;
    FUNCTION() {
        return this.getToken(vbParser.FUNCTION, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    libraryClause() {
        return this.getTypedRuleContext(LibraryClauseContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    charsetModifier() {
        return this.getTypedRuleContext(CharsetModifierContext, 0);
    }
    ;
    aliasClause() {
        return this.getTypedRuleContext(AliasClauseContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterExternalFunctionDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitExternalFunctionDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitExternalFunctionDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExternalMethodModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_externalMethodModifier;
    }
    accessModifier() {
        return this.getTypedRuleContext(AccessModifierContext, 0);
    }
    ;
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    OVERLOADS() {
        return this.getToken(vbParser.OVERLOADS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterExternalMethodModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitExternalMethodModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitExternalMethodModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CharsetModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_charsetModifier;
    }
    ANSI() {
        return this.getToken(vbParser.ANSI, 0);
    }
    ;
    UNICODE() {
        return this.getToken(vbParser.UNICODE, 0);
    }
    ;
    AUTO() {
        return this.getToken(vbParser.AUTO, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCharsetModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCharsetModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCharsetModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LibraryClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_libraryClause;
    }
    LIB() {
        return this.getToken(vbParser.LIB, 0);
    }
    ;
    stringLiteral() {
        return this.getTypedRuleContext(StringLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLibraryClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLibraryClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLibraryClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AliasClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_aliasClause;
    }
    ALIAS() {
        return this.getToken(vbParser.ALIAS, 0);
    }
    ;
    stringLiteral() {
        return this.getTypedRuleContext(StringLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAliasClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAliasClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAliasClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParameterListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parameter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ParameterContext);
            }
            else {
                return this.getTypedRuleContext(ParameterContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_parameterList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterParameterList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitParameterList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitParameterList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parameterModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ParameterModifierContext);
            }
            else {
                return this.getTypedRuleContext(ParameterModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_parameter;
    }
    parameterIdentifier() {
        return this.getTypedRuleContext(ParameterIdentifierContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    constantExpression() {
        return this.getTypedRuleContext(ConstantExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitParameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParameterModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_parameterModifier;
    }
    BYVAL() {
        return this.getToken(vbParser.BYVAL, 0);
    }
    ;
    BYREF() {
        return this.getToken(vbParser.BYREF, 0);
    }
    ;
    OPTIONAL() {
        return this.getToken(vbParser.OPTIONAL, 0);
    }
    ;
    PARAM_ARRAY() {
        return this.getToken(vbParser.PARAM_ARRAY, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterParameterModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitParameterModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitParameterModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParameterIdentifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_parameterIdentifier;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    identifierModifiers() {
        return this.getTypedRuleContext(IdentifierModifiersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterParameterIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitParameterIdentifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitParameterIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class HandlesClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_handlesClause;
    }
    HANDLES() {
        return this.getToken(vbParser.HANDLES, 0);
    }
    ;
    eventHandlesList() {
        return this.getTypedRuleContext(EventHandlesListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterHandlesClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitHandlesClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitHandlesClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EventHandlesListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.eventMemberSpecifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EventMemberSpecifierContext);
            }
            else {
                return this.getTypedRuleContext(EventMemberSpecifierContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_eventHandlesList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEventHandlesList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEventHandlesList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEventHandlesList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EventMemberSpecifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_eventMemberSpecifier;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    PERIOD() {
        return this.getToken(vbParser.PERIOD, 0);
    }
    ;
    identifierOrKeyword() {
        return this.getTypedRuleContext(IdentifierOrKeywordContext, 0);
    }
    ;
    MYBASE() {
        return this.getToken(vbParser.MYBASE, 0);
    }
    ;
    MYCLASS() {
        return this.getToken(vbParser.MYCLASS, 0);
    }
    ;
    ME() {
        return this.getToken(vbParser.ME, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEventMemberSpecifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEventMemberSpecifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEventMemberSpecifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstructorMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SUB = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SUB);
            }
            else {
                return this.getToken(vbParser.SUB, i);
            }
        };
        this.constructorModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConstructorModifierContext);
            }
            else {
                return this.getTypedRuleContext(ConstructorModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_constructorMemberDeclaration;
    }
    NEW() {
        return this.getToken(vbParser.NEW, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConstructorMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConstructorMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConstructorMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstructorModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_constructorModifier;
    }
    accessModifier() {
        return this.getTypedRuleContext(AccessModifierContext, 0);
    }
    ;
    SHARED() {
        return this.getToken(vbParser.SHARED, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConstructorModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConstructorModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConstructorModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EventMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_eventMemberDeclaration;
    }
    regularEventMemberDeclaration() {
        return this.getTypedRuleContext(RegularEventMemberDeclarationContext, 0);
    }
    ;
    customEventMemberDeclaration() {
        return this.getTypedRuleContext(CustomEventMemberDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEventMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEventMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEventMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RegularEventMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.eventModifiers = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EventModifiersContext);
            }
            else {
                return this.getTypedRuleContext(EventModifiersContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_regularEventMemberDeclaration;
    }
    EVENT() {
        return this.getToken(vbParser.EVENT, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    parametersOrType() {
        return this.getTypedRuleContext(ParametersOrTypeContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    implementsClause() {
        return this.getTypedRuleContext(ImplementsClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRegularEventMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRegularEventMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRegularEventMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceEventMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.interfaceEventModifiers = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InterfaceEventModifiersContext);
            }
            else {
                return this.getTypedRuleContext(InterfaceEventModifiersContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceEventMemberDeclaration;
    }
    EVENT() {
        return this.getToken(vbParser.EVENT, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    parametersOrType() {
        return this.getTypedRuleContext(ParametersOrTypeContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceEventMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceEventMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceEventMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParametersOrTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_parametersOrType;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterParametersOrType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitParametersOrType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitParametersOrType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EventModifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_eventModifiers;
    }
    accessModifier() {
        return this.getTypedRuleContext(AccessModifierContext, 0);
    }
    ;
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    SHARED() {
        return this.getToken(vbParser.SHARED, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEventModifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEventModifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEventModifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceEventModifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfaceEventModifiers;
    }
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfaceEventModifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfaceEventModifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfaceEventModifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CustomEventMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.EVENT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.EVENT);
            }
            else {
                return this.getToken(vbParser.EVENT, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.eventModifiers = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EventModifiersContext);
            }
            else {
                return this.getTypedRuleContext(EventModifiersContext, i);
            }
        };
        this.eventAccessorDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(EventAccessorDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(EventAccessorDeclarationContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_customEventMemberDeclaration;
    }
    CUSTOM() {
        return this.getToken(vbParser.CUSTOM, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    implementsClause() {
        return this.getTypedRuleContext(ImplementsClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCustomEventMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCustomEventMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCustomEventMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EventAccessorDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_eventAccessorDeclaration;
    }
    addHandlerDeclaration() {
        return this.getTypedRuleContext(AddHandlerDeclarationContext, 0);
    }
    ;
    removeHandlerDeclaration() {
        return this.getTypedRuleContext(RemoveHandlerDeclarationContext, 0);
    }
    ;
    raiseEventDeclaration() {
        return this.getTypedRuleContext(RaiseEventDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEventAccessorDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEventAccessorDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEventAccessorDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AddHandlerDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ADDHANDLER = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.ADDHANDLER);
            }
            else {
                return this.getToken(vbParser.ADDHANDLER, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_addHandlerDeclaration;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAddHandlerDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAddHandlerDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAddHandlerDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RemoveHandlerDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.REMOVEHANDLER = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.REMOVEHANDLER);
            }
            else {
                return this.getToken(vbParser.REMOVEHANDLER, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_removeHandlerDeclaration;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRemoveHandlerDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRemoveHandlerDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRemoveHandlerDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RaiseEventDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.RAISEEVENT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.RAISEEVENT);
            }
            else {
                return this.getToken(vbParser.RAISEEVENT, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_raiseEventDeclaration;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRaiseEventDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRaiseEventDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRaiseEventDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstantMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.constantModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConstantModifierContext);
            }
            else {
                return this.getTypedRuleContext(ConstantModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_constantMemberDeclaration;
    }
    CONST() {
        return this.getToken(vbParser.CONST, 0);
    }
    ;
    constantDeclarators() {
        return this.getTypedRuleContext(ConstantDeclaratorsContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConstantMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConstantMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConstantMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstantModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_constantModifier;
    }
    accessModifier() {
        return this.getTypedRuleContext(AccessModifierContext, 0);
    }
    ;
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConstantModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConstantModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConstantModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstantDeclaratorsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.constantDeclarator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ConstantDeclaratorContext);
            }
            else {
                return this.getTypedRuleContext(ConstantDeclaratorContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_constantDeclarators;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConstantDeclarators(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConstantDeclarators(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConstantDeclarators(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstantDeclaratorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_constantDeclarator;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    constantExpression() {
        return this.getTypedRuleContext(ConstantExpressionContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConstantDeclarator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConstantDeclarator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConstantDeclarator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VariableMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.variableModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariableModifierContext);
            }
            else {
                return this.getTypedRuleContext(VariableModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_variableMemberDeclaration;
    }
    variableDeclarators() {
        return this.getTypedRuleContext(VariableDeclaratorsContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterVariableMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitVariableMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitVariableMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VariableModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_variableModifier;
    }
    accessModifier() {
        return this.getTypedRuleContext(AccessModifierContext, 0);
    }
    ;
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    SHARED() {
        return this.getToken(vbParser.SHARED, 0);
    }
    ;
    READONLY() {
        return this.getToken(vbParser.READONLY, 0);
    }
    ;
    WITH_EVENTS() {
        return this.getToken(vbParser.WITH_EVENTS, 0);
    }
    ;
    DIM() {
        return this.getToken(vbParser.DIM, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterVariableModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitVariableModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitVariableModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VariableDeclaratorsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.variableDeclarator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariableDeclaratorContext);
            }
            else {
                return this.getTypedRuleContext(VariableDeclaratorContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_variableDeclarators;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterVariableDeclarators(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitVariableDeclarators(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitVariableDeclarators(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VariableDeclaratorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_variableDeclarator;
    }
    variableIdentifiers() {
        return this.getTypedRuleContext(VariableIdentifiersContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    objectCreationExpression() {
        return this.getTypedRuleContext(ObjectCreationExpressionContext, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterVariableDeclarator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitVariableDeclarator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitVariableDeclarator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VariableIdentifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.variableIdentifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariableIdentifierContext);
            }
            else {
                return this.getTypedRuleContext(VariableIdentifierContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_variableIdentifiers;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterVariableIdentifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitVariableIdentifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitVariableIdentifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VariableIdentifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_variableIdentifier;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    identifierModifiers() {
        return this.getTypedRuleContext(IdentifierModifiersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterVariableIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitVariableIdentifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitVariableIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArraySizeInitializationModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_arraySizeInitializationModifier;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    boundList() {
        return this.getTypedRuleContext(BoundListContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    arrayTypeModifiers() {
        return this.getTypedRuleContext(ArrayTypeModifiersContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterArraySizeInitializationModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitArraySizeInitializationModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitArraySizeInitializationModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BoundListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.bound = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(BoundContext);
            }
            else {
                return this.getTypedRuleContext(BoundContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_boundList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterBoundList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitBoundList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitBoundList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BoundContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_bound;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    ZERO() {
        return this.getToken(vbParser.ZERO, 0);
    }
    ;
    TO() {
        return this.getToken(vbParser.TO, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterBound(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitBound(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitBound(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PropertyMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_propertyMemberDeclaration;
    }
    regularPropertyMemberDeclaration() {
        return this.getTypedRuleContext(RegularPropertyMemberDeclarationContext, 0);
    }
    ;
    mustOverridePropertyMemberDeclaration() {
        return this.getTypedRuleContext(MustOverridePropertyMemberDeclarationContext, 0);
    }
    ;
    autoPropertyMemberDeclaration() {
        return this.getTypedRuleContext(AutoPropertyMemberDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterPropertyMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitPropertyMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitPropertyMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PropertySignatureContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_propertySignature;
    }
    PROPERTY() {
        return this.getToken(vbParser.PROPERTY, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterPropertySignature(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitPropertySignature(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitPropertySignature(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RegularPropertyMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.propertyModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(PropertyModifierContext);
            }
            else {
                return this.getTypedRuleContext(PropertyModifierContext, i);
            }
        };
        this.propertyAccessorDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(PropertyAccessorDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(PropertyAccessorDeclarationContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_regularPropertyMemberDeclaration;
    }
    propertySignature() {
        return this.getTypedRuleContext(PropertySignatureContext, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    PROPERTY() {
        return this.getToken(vbParser.PROPERTY, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    implementsClause() {
        return this.getTypedRuleContext(ImplementsClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRegularPropertyMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRegularPropertyMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRegularPropertyMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MustOverridePropertyMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.mustOverridePropertyModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(MustOverridePropertyModifierContext);
            }
            else {
                return this.getTypedRuleContext(MustOverridePropertyModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_mustOverridePropertyMemberDeclaration;
    }
    propertySignature() {
        return this.getTypedRuleContext(PropertySignatureContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    implementsClause() {
        return this.getTypedRuleContext(ImplementsClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMustOverridePropertyMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMustOverridePropertyMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMustOverridePropertyMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AutoPropertyMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.attributes = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AttributesContext);
            }
            else {
                return this.getTypedRuleContext(AttributesContext, i);
            }
        };
        this.autoPropertyModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AutoPropertyModifierContext);
            }
            else {
                return this.getTypedRuleContext(AutoPropertyModifierContext, i);
            }
        };
        this.LEFT_PAREN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LEFT_PAREN);
            }
            else {
                return this.getToken(vbParser.LEFT_PAREN, i);
            }
        };
        this.RIGHT_PAREN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.RIGHT_PAREN);
            }
            else {
                return this.getToken(vbParser.RIGHT_PAREN, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_autoPropertyMemberDeclaration;
    }
    PROPERTY() {
        return this.getToken(vbParser.PROPERTY, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    implementsClause() {
        return this.getTypedRuleContext(ImplementsClauseContext, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    NEW() {
        return this.getToken(vbParser.NEW, 0);
    }
    ;
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    objectCreationExpressionInitializer() {
        return this.getTypedRuleContext(ObjectCreationExpressionInitializerContext, 0);
    }
    ;
    argumentList() {
        return this.getTypedRuleContext(ArgumentListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAutoPropertyMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAutoPropertyMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAutoPropertyMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfacePropertyMemberDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.interfacePropertyModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InterfacePropertyModifierContext);
            }
            else {
                return this.getTypedRuleContext(InterfacePropertyModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfacePropertyMemberDeclaration;
    }
    propertySignature() {
        return this.getTypedRuleContext(PropertySignatureContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfacePropertyMemberDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfacePropertyMemberDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfacePropertyMemberDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AutoPropertyModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_autoPropertyModifier;
    }
    accessModifier() {
        return this.getTypedRuleContext(AccessModifierContext, 0);
    }
    ;
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    SHARED() {
        return this.getToken(vbParser.SHARED, 0);
    }
    ;
    OVERRIDABLE() {
        return this.getToken(vbParser.OVERRIDABLE, 0);
    }
    ;
    NOTOVERRIDABLE() {
        return this.getToken(vbParser.NOTOVERRIDABLE, 0);
    }
    ;
    OVERRIDES() {
        return this.getToken(vbParser.OVERRIDES, 0);
    }
    ;
    OVERLOADS() {
        return this.getToken(vbParser.OVERLOADS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAutoPropertyModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAutoPropertyModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAutoPropertyModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PropertyModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_propertyModifier;
    }
    autoPropertyModifier() {
        return this.getTypedRuleContext(AutoPropertyModifierContext, 0);
    }
    ;
    DEFAULT() {
        return this.getToken(vbParser.DEFAULT, 0);
    }
    ;
    READONLY() {
        return this.getToken(vbParser.READONLY, 0);
    }
    ;
    WRITEONLY() {
        return this.getToken(vbParser.WRITEONLY, 0);
    }
    ;
    ITERATOR() {
        return this.getToken(vbParser.ITERATOR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterPropertyModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitPropertyModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitPropertyModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MustOverridePropertyModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_mustOverridePropertyModifier;
    }
    propertyModifier() {
        return this.getTypedRuleContext(PropertyModifierContext, 0);
    }
    ;
    MUSTOVERRIDE() {
        return this.getToken(vbParser.MUSTOVERRIDE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMustOverridePropertyModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMustOverridePropertyModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMustOverridePropertyModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfacePropertyModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_interfacePropertyModifier;
    }
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    OVERLOADS() {
        return this.getToken(vbParser.OVERLOADS, 0);
    }
    ;
    DEFAULT() {
        return this.getToken(vbParser.DEFAULT, 0);
    }
    ;
    READONLY() {
        return this.getToken(vbParser.READONLY, 0);
    }
    ;
    WRITEONLY() {
        return this.getToken(vbParser.WRITEONLY, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInterfacePropertyModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInterfacePropertyModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInterfacePropertyModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PropertyAccessorDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_propertyAccessorDeclaration;
    }
    propertyGetDeclaration() {
        return this.getTypedRuleContext(PropertyGetDeclarationContext, 0);
    }
    ;
    propertySetDeclaration() {
        return this.getTypedRuleContext(PropertySetDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterPropertyAccessorDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitPropertyAccessorDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitPropertyAccessorDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PropertyGetDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.GET = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.GET);
            }
            else {
                return this.getToken(vbParser.GET, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_propertyGetDeclaration;
    }
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    accessModifier() {
        return this.getTypedRuleContext(AccessModifierContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterPropertyGetDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitPropertyGetDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitPropertyGetDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PropertySetDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SET = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SET);
            }
            else {
                return this.getToken(vbParser.SET, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_propertySetDeclaration;
    }
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    accessModifier() {
        return this.getTypedRuleContext(AccessModifierContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterPropertySetDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitPropertySetDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitPropertySetDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OperatorDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.OPERATORKEYWORD = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.OPERATORKEYWORD);
            }
            else {
                return this.getToken(vbParser.OPERATORKEYWORD, i);
            }
        };
        this.attributes = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AttributesContext);
            }
            else {
                return this.getTypedRuleContext(AttributesContext, i);
            }
        };
        this.operatorModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(OperatorModifierContext);
            }
            else {
                return this.getTypedRuleContext(OperatorModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_operatorDeclaration;
    }
    overloadableOperator() {
        return this.getTypedRuleContext(OverloadableOperatorContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOperatorDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOperatorDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOperatorDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OperatorModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_operatorModifier;
    }
    PUBLIC() {
        return this.getToken(vbParser.PUBLIC, 0);
    }
    ;
    SHARED() {
        return this.getToken(vbParser.SHARED, 0);
    }
    ;
    OVERLOADS() {
        return this.getToken(vbParser.OVERLOADS, 0);
    }
    ;
    SHADOWS() {
        return this.getToken(vbParser.SHADOWS, 0);
    }
    ;
    WIDENING() {
        return this.getToken(vbParser.WIDENING, 0);
    }
    ;
    NARROWING() {
        return this.getToken(vbParser.NARROWING, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOperatorModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOperatorModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOperatorModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OverloadableOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LEFT_ARROW = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LEFT_ARROW);
            }
            else {
                return this.getToken(vbParser.LEFT_ARROW, i);
            }
        };
        this.RIGHT_ARROW = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.RIGHT_ARROW);
            }
            else {
                return this.getToken(vbParser.RIGHT_ARROW, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_overloadableOperator;
    }
    cCPlusMinus() {
        return this.getTypedRuleContext(CCPlusMinusContext, 0);
    }
    ;
    ASTERISK() {
        return this.getToken(vbParser.ASTERISK, 0);
    }
    ;
    SLASH() {
        return this.getToken(vbParser.SLASH, 0);
    }
    ;
    DOUBLE_BACK_SLASH() {
        return this.getToken(vbParser.DOUBLE_BACK_SLASH, 0);
    }
    ;
    AMPERSAND() {
        return this.getToken(vbParser.AMPERSAND, 0);
    }
    ;
    LIKE() {
        return this.getToken(vbParser.LIKE, 0);
    }
    ;
    MOD() {
        return this.getToken(vbParser.MOD, 0);
    }
    ;
    AND() {
        return this.getToken(vbParser.AND, 0);
    }
    ;
    OR() {
        return this.getToken(vbParser.OR, 0);
    }
    ;
    XOR() {
        return this.getToken(vbParser.XOR, 0);
    }
    ;
    CARET() {
        return this.getToken(vbParser.CARET, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    NOT() {
        return this.getToken(vbParser.NOT, 0);
    }
    ;
    IS_TRUE() {
        return this.getToken(vbParser.IS_TRUE, 0);
    }
    ;
    IS_FALSE() {
        return this.getToken(vbParser.IS_FALSE, 0);
    }
    ;
    CTYPE() {
        return this.getToken(vbParser.CTYPE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOverloadableOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOverloadableOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOverloadableOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_statement;
    }
    labelDeclarationStatement() {
        return this.getTypedRuleContext(LabelDeclarationStatementContext, 0);
    }
    ;
    localDeclarationStatement() {
        return this.getTypedRuleContext(LocalDeclarationStatementContext, 0);
    }
    ;
    withStatement() {
        return this.getTypedRuleContext(WithStatementContext, 0);
    }
    ;
    syncLockStatement() {
        return this.getTypedRuleContext(SyncLockStatementContext, 0);
    }
    ;
    eventStatement() {
        return this.getTypedRuleContext(EventStatementContext, 0);
    }
    ;
    assignmentStatement() {
        return this.getTypedRuleContext(AssignmentStatementContext, 0);
    }
    ;
    invocationStatement() {
        return this.getTypedRuleContext(InvocationStatementContext, 0);
    }
    ;
    conditionalStatement() {
        return this.getTypedRuleContext(ConditionalStatementContext, 0);
    }
    ;
    loopStatement() {
        return this.getTypedRuleContext(LoopStatementContext, 0);
    }
    ;
    errorHandlingStatement() {
        return this.getTypedRuleContext(ErrorHandlingStatementContext, 0);
    }
    ;
    branchStatement() {
        return this.getTypedRuleContext(BranchStatementContext, 0);
    }
    ;
    arrayHandlingStatement() {
        return this.getTypedRuleContext(ArrayHandlingStatementContext, 0);
    }
    ;
    usingStatement() {
        return this.getTypedRuleContext(UsingStatementContext, 0);
    }
    ;
    awaitStatement() {
        return this.getTypedRuleContext(AwaitStatementContext, 0);
    }
    ;
    yieldStatement() {
        return this.getTypedRuleContext(YieldStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BlockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_block;
    }
    statements() {
        return this.getTypedRuleContext(StatementsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterBlock(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitBlock(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LabelDeclarationStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_labelDeclarationStatement;
    }
    labelName() {
        return this.getTypedRuleContext(LabelNameContext, 0);
    }
    ;
    COLON() {
        return this.getToken(vbParser.COLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLabelDeclarationStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLabelDeclarationStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLabelDeclarationStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LabelNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_labelName;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    intLiteral() {
        return this.getTypedRuleContext(IntLiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLabelName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLabelName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLabelName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StatementsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.statement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementContext);
            }
            else {
                return this.getTypedRuleContext(StatementContext, i);
            }
        };
        this.COLON = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COLON);
            }
            else {
                return this.getToken(vbParser.COLON, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_statements;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStatements(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStatements(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStatements(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LocalDeclarationStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_localDeclarationStatement;
    }
    localModifier() {
        return this.getTypedRuleContext(LocalModifierContext, 0);
    }
    ;
    variableDeclarators() {
        return this.getTypedRuleContext(VariableDeclaratorsContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLocalDeclarationStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLocalDeclarationStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLocalDeclarationStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LocalModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_localModifier;
    }
    STATIC() {
        return this.getToken(vbParser.STATIC, 0);
    }
    ;
    DIM() {
        return this.getToken(vbParser.DIM, 0);
    }
    ;
    CONST() {
        return this.getToken(vbParser.CONST, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLocalModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLocalModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLocalModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WithStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.WITH = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.WITH);
            }
            else {
                return this.getToken(vbParser.WITH, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_withStatement;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterWithStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitWithStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitWithStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SyncLockStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SYNCLOCK = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SYNCLOCK);
            }
            else {
                return this.getToken(vbParser.SYNCLOCK, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_syncLockStatement;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSyncLockStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSyncLockStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSyncLockStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EventStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_eventStatement;
    }
    raiseEventStatement() {
        return this.getTypedRuleContext(RaiseEventStatementContext, 0);
    }
    ;
    addHandlerStatement() {
        return this.getTypedRuleContext(AddHandlerStatementContext, 0);
    }
    ;
    removeHandlerStatement() {
        return this.getTypedRuleContext(RemoveHandlerStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEventStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEventStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEventStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RaiseEventStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_raiseEventStatement;
    }
    RAISEEVENT() {
        return this.getToken(vbParser.RAISEEVENT, 0);
    }
    ;
    identifierOrKeyword() {
        return this.getTypedRuleContext(IdentifierOrKeywordContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    argumentList() {
        return this.getTypedRuleContext(ArgumentListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRaiseEventStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRaiseEventStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRaiseEventStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AddHandlerStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_addHandlerStatement;
    }
    ADDHANDLER() {
        return this.getToken(vbParser.ADDHANDLER, 0);
    }
    ;
    COMMA() {
        return this.getToken(vbParser.COMMA, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAddHandlerStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAddHandlerStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAddHandlerStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RemoveHandlerStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_removeHandlerStatement;
    }
    REMOVEHANDLER() {
        return this.getToken(vbParser.REMOVEHANDLER, 0);
    }
    ;
    COMMA() {
        return this.getToken(vbParser.COMMA, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRemoveHandlerStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRemoveHandlerStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRemoveHandlerStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AssignmentStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_assignmentStatement;
    }
    regularAssignmentStatement() {
        return this.getTypedRuleContext(RegularAssignmentStatementContext, 0);
    }
    ;
    compoundAssignmentStatement() {
        return this.getTypedRuleContext(CompoundAssignmentStatementContext, 0);
    }
    ;
    midAssignmentStatement() {
        return this.getTypedRuleContext(MidAssignmentStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAssignmentStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAssignmentStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAssignmentStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RegularAssignmentStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_regularAssignmentStatement;
    }
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRegularAssignmentStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRegularAssignmentStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRegularAssignmentStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CompoundAssignmentStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_compoundAssignmentStatement;
    }
    compoundBinaryOperator() {
        return this.getTypedRuleContext(CompoundBinaryOperatorContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCompoundAssignmentStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCompoundAssignmentStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCompoundAssignmentStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CompoundBinaryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LEFT_ARROW = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LEFT_ARROW);
            }
            else {
                return this.getToken(vbParser.LEFT_ARROW, i);
            }
        };
        this.RIGHT_ARROW = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.RIGHT_ARROW);
            }
            else {
                return this.getToken(vbParser.RIGHT_ARROW, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_compoundBinaryOperator;
    }
    CARET() {
        return this.getToken(vbParser.CARET, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    ASTERISK() {
        return this.getToken(vbParser.ASTERISK, 0);
    }
    ;
    SLASH() {
        return this.getToken(vbParser.SLASH, 0);
    }
    ;
    DOUBLE_BACK_SLASH() {
        return this.getToken(vbParser.DOUBLE_BACK_SLASH, 0);
    }
    ;
    PLUS() {
        return this.getToken(vbParser.PLUS, 0);
    }
    ;
    MINUS() {
        return this.getToken(vbParser.MINUS, 0);
    }
    ;
    AMPERSAND() {
        return this.getToken(vbParser.AMPERSAND, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCompoundBinaryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCompoundBinaryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCompoundBinaryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MidAssignmentStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_midAssignmentStatement;
    }
    MID() {
        return this.getToken(vbParser.MID, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    DOLLAR() {
        return this.getToken(vbParser.DOLLAR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMidAssignmentStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMidAssignmentStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMidAssignmentStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InvocationStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_invocationStatement;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    CALL() {
        return this.getToken(vbParser.CALL, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    argumentList() {
        return this.getTypedRuleContext(ArgumentListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInvocationStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInvocationStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInvocationStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConditionalStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_conditionalStatement;
    }
    ifStatement() {
        return this.getTypedRuleContext(IfStatementContext, 0);
    }
    ;
    selectStatement() {
        return this.getTypedRuleContext(SelectStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConditionalStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConditionalStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConditionalStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IfStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_ifStatement;
    }
    blockIfStatement() {
        return this.getTypedRuleContext(BlockIfStatementContext, 0);
    }
    ;
    lineIfThenStatement() {
        return this.getTypedRuleContext(LineIfThenStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterIfStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitIfStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitIfStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BlockIfStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.IF = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.IF);
            }
            else {
                return this.getToken(vbParser.IF, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.elseIfStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElseIfStatementContext);
            }
            else {
                return this.getTypedRuleContext(ElseIfStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_blockIfStatement;
    }
    booleanExpression() {
        return this.getTypedRuleContext(BooleanExpressionContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    THEN() {
        return this.getToken(vbParser.THEN, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    elseStatement() {
        return this.getTypedRuleContext(ElseStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterBlockIfStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitBlockIfStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitBlockIfStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ElseIfStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_elseIfStatement;
    }
    elseIf() {
        return this.getTypedRuleContext(ElseIfContext, 0);
    }
    ;
    booleanExpression() {
        return this.getTypedRuleContext(BooleanExpressionContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    THEN() {
        return this.getToken(vbParser.THEN, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterElseIfStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitElseIfStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitElseIfStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ElseStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_elseStatement;
    }
    ELSE() {
        return this.getToken(vbParser.ELSE, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterElseStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitElseStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitElseStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LineIfThenStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.statements = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementsContext);
            }
            else {
                return this.getTypedRuleContext(StatementsContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_lineIfThenStatement;
    }
    IF() {
        return this.getToken(vbParser.IF, 0);
    }
    ;
    booleanExpression() {
        return this.getTypedRuleContext(BooleanExpressionContext, 0);
    }
    ;
    THEN() {
        return this.getToken(vbParser.THEN, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    ELSE() {
        return this.getToken(vbParser.ELSE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLineIfThenStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLineIfThenStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLineIfThenStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SelectStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SELECT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SELECT);
            }
            else {
                return this.getToken(vbParser.SELECT, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.caseStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CaseStatementContext);
            }
            else {
                return this.getTypedRuleContext(CaseStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_selectStatement;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    CASE() {
        return this.getToken(vbParser.CASE, 0);
    }
    ;
    caseElseStatement() {
        return this.getTypedRuleContext(CaseElseStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSelectStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSelectStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSelectStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CaseStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_caseStatement;
    }
    CASE() {
        return this.getToken(vbParser.CASE, 0);
    }
    ;
    caseClauses() {
        return this.getTypedRuleContext(CaseClausesContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCaseStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCaseStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCaseStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CaseClausesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.caseClause = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CaseClauseContext);
            }
            else {
                return this.getTypedRuleContext(CaseClauseContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_caseClauses;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCaseClauses(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCaseClauses(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCaseClauses(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CaseClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_caseClause;
    }
    comparisonOperator() {
        return this.getTypedRuleContext(ComparisonOperatorContext, 0);
    }
    ;
    IS() {
        return this.getToken(vbParser.IS, 0);
    }
    ;
    TO() {
        return this.getToken(vbParser.TO, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCaseClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCaseClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCaseClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ComparisonOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_comparisonOperator;
    }
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterComparisonOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitComparisonOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitComparisonOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CaseElseStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_caseElseStatement;
    }
    CASE() {
        return this.getToken(vbParser.CASE, 0);
    }
    ;
    ELSE() {
        return this.getToken(vbParser.ELSE, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCaseElseStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCaseElseStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCaseElseStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LoopStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_loopStatement;
    }
    whileStatement() {
        return this.getTypedRuleContext(WhileStatementContext, 0);
    }
    ;
    doLoopStatement() {
        return this.getTypedRuleContext(DoLoopStatementContext, 0);
    }
    ;
    forStatement() {
        return this.getTypedRuleContext(ForStatementContext, 0);
    }
    ;
    forEachStatement() {
        return this.getTypedRuleContext(ForEachStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLoopStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLoopStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLoopStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WhileStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.WHILE = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.WHILE);
            }
            else {
                return this.getToken(vbParser.WHILE, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_whileStatement;
    }
    booleanExpression() {
        return this.getTypedRuleContext(BooleanExpressionContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterWhileStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitWhileStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitWhileStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DoLoopStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_doLoopStatement;
    }
    doTopLoopStatement() {
        return this.getTypedRuleContext(DoTopLoopStatementContext, 0);
    }
    ;
    doBottomLoopStatement() {
        return this.getTypedRuleContext(DoBottomLoopStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDoLoopStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDoLoopStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDoLoopStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DoTopLoopStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_doTopLoopStatement;
    }
    DO() {
        return this.getToken(vbParser.DO, 0);
    }
    ;
    LOOP() {
        return this.getToken(vbParser.LOOP, 0);
    }
    ;
    whileOrUntil() {
        return this.getTypedRuleContext(WhileOrUntilContext, 0);
    }
    ;
    booleanExpression() {
        return this.getTypedRuleContext(BooleanExpressionContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDoTopLoopStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDoTopLoopStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDoTopLoopStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DoBottomLoopStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_doBottomLoopStatement;
    }
    DO() {
        return this.getToken(vbParser.DO, 0);
    }
    ;
    LOOP() {
        return this.getToken(vbParser.LOOP, 0);
    }
    ;
    whileOrUntil() {
        return this.getTypedRuleContext(WhileOrUntilContext, 0);
    }
    ;
    booleanExpression() {
        return this.getTypedRuleContext(BooleanExpressionContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDoBottomLoopStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDoBottomLoopStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDoBottomLoopStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WhileOrUntilContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_whileOrUntil;
    }
    WHILE() {
        return this.getToken(vbParser.WHILE, 0);
    }
    ;
    UNTIL() {
        return this.getToken(vbParser.UNTIL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterWhileOrUntil(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitWhileOrUntil(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitWhileOrUntil(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ForStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_forStatement;
    }
    FOR() {
        return this.getToken(vbParser.FOR, 0);
    }
    ;
    loopControlVariable() {
        return this.getTypedRuleContext(LoopControlVariableContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    TO() {
        return this.getToken(vbParser.TO, 0);
    }
    ;
    STEP() {
        return this.getToken(vbParser.STEP, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    NEXT() {
        return this.getToken(vbParser.NEXT, 0);
    }
    ;
    nextExpressionList() {
        return this.getTypedRuleContext(NextExpressionListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterForStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitForStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitForStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LoopControlVariableContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_loopControlVariable;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    identifierModifiers() {
        return this.getTypedRuleContext(IdentifierModifiersContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLoopControlVariable(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLoopControlVariable(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLoopControlVariable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NextExpressionListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_nextExpressionList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterNextExpressionList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitNextExpressionList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitNextExpressionList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ForEachStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_forEachStatement;
    }
    FOR() {
        return this.getToken(vbParser.FOR, 0);
    }
    ;
    EACH() {
        return this.getToken(vbParser.EACH, 0);
    }
    ;
    loopControlVariable() {
        return this.getTypedRuleContext(LoopControlVariableContext, 0);
    }
    ;
    IN() {
        return this.getToken(vbParser.IN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    NEXT() {
        return this.getToken(vbParser.NEXT, 0);
    }
    ;
    nextExpressionList() {
        return this.getTypedRuleContext(NextExpressionListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterForEachStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitForEachStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitForEachStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ErrorHandlingStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_errorHandlingStatement;
    }
    structuredErrorStatement() {
        return this.getTypedRuleContext(StructuredErrorStatementContext, 0);
    }
    ;
    unstructuredErrorStatement() {
        return this.getTypedRuleContext(UnstructuredErrorStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterErrorHandlingStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitErrorHandlingStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitErrorHandlingStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StructuredErrorStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_structuredErrorStatement;
    }
    throwStatement() {
        return this.getTypedRuleContext(ThrowStatementContext, 0);
    }
    ;
    tryStatement() {
        return this.getTypedRuleContext(TryStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStructuredErrorStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStructuredErrorStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStructuredErrorStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TryStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.TRY = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.TRY);
            }
            else {
                return this.getToken(vbParser.TRY, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.catchStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CatchStatementContext);
            }
            else {
                return this.getTypedRuleContext(CatchStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_tryStatement;
    }
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    finallyStatement() {
        return this.getTypedRuleContext(FinallyStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTryStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTryStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTryStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FinallyStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_finallyStatement;
    }
    FINALLY() {
        return this.getToken(vbParser.FINALLY, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFinallyStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFinallyStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFinallyStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CatchStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_catchStatement;
    }
    CATCH() {
        return this.getToken(vbParser.CATCH, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    WHEN() {
        return this.getToken(vbParser.WHEN, 0);
    }
    ;
    booleanExpression() {
        return this.getTypedRuleContext(BooleanExpressionContext, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCatchStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCatchStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCatchStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ThrowStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_throwStatement;
    }
    THROW() {
        return this.getToken(vbParser.THROW, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterThrowStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitThrowStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitThrowStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UnstructuredErrorStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_unstructuredErrorStatement;
    }
    errorStatement() {
        return this.getTypedRuleContext(ErrorStatementContext, 0);
    }
    ;
    onErrorStatement() {
        return this.getTypedRuleContext(OnErrorStatementContext, 0);
    }
    ;
    resumeStatement() {
        return this.getTypedRuleContext(ResumeStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterUnstructuredErrorStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitUnstructuredErrorStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitUnstructuredErrorStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ErrorStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_errorStatement;
    }
    ERROR() {
        return this.getToken(vbParser.ERROR, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterErrorStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitErrorStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitErrorStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OnErrorStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_onErrorStatement;
    }
    ON() {
        return this.getToken(vbParser.ON, 0);
    }
    ;
    ERROR() {
        return this.getToken(vbParser.ERROR, 0);
    }
    ;
    errorClause() {
        return this.getTypedRuleContext(ErrorClauseContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOnErrorStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOnErrorStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOnErrorStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ErrorClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_errorClause;
    }
    GOTO() {
        return this.getToken(vbParser.GOTO, 0);
    }
    ;
    MINUS() {
        return this.getToken(vbParser.MINUS, 0);
    }
    ;
    ONE() {
        return this.getToken(vbParser.ONE, 0);
    }
    ;
    ZERO() {
        return this.getToken(vbParser.ZERO, 0);
    }
    ;
    goToStatement() {
        return this.getTypedRuleContext(GoToStatementContext, 0);
    }
    ;
    RESUME() {
        return this.getToken(vbParser.RESUME, 0);
    }
    ;
    NEXT() {
        return this.getToken(vbParser.NEXT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterErrorClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitErrorClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitErrorClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ResumeStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_resumeStatement;
    }
    RESUME() {
        return this.getToken(vbParser.RESUME, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    resumeClause() {
        return this.getTypedRuleContext(ResumeClauseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterResumeStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitResumeStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitResumeStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ResumeClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_resumeClause;
    }
    NEXT() {
        return this.getToken(vbParser.NEXT, 0);
    }
    ;
    labelName() {
        return this.getTypedRuleContext(LabelNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterResumeClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitResumeClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitResumeClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BranchStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_branchStatement;
    }
    goToStatement() {
        return this.getTypedRuleContext(GoToStatementContext, 0);
    }
    ;
    exitStatement() {
        return this.getTypedRuleContext(ExitStatementContext, 0);
    }
    ;
    continueStatement() {
        return this.getTypedRuleContext(ContinueStatementContext, 0);
    }
    ;
    stopStatement() {
        return this.getTypedRuleContext(StopStatementContext, 0);
    }
    ;
    endStatement() {
        return this.getTypedRuleContext(EndStatementContext, 0);
    }
    ;
    returnStatement() {
        return this.getTypedRuleContext(ReturnStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterBranchStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitBranchStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitBranchStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GoToStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_goToStatement;
    }
    GOTO() {
        return this.getToken(vbParser.GOTO, 0);
    }
    ;
    labelName() {
        return this.getTypedRuleContext(LabelNameContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterGoToStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitGoToStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitGoToStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExitStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_exitStatement;
    }
    EXIT() {
        return this.getToken(vbParser.EXIT, 0);
    }
    ;
    exitKind() {
        return this.getTypedRuleContext(ExitKindContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterExitStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitExitStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitExitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExitKindContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_exitKind;
    }
    DO() {
        return this.getToken(vbParser.DO, 0);
    }
    ;
    FOR() {
        return this.getToken(vbParser.FOR, 0);
    }
    ;
    WHILE() {
        return this.getToken(vbParser.WHILE, 0);
    }
    ;
    SELECT() {
        return this.getToken(vbParser.SELECT, 0);
    }
    ;
    SUB() {
        return this.getToken(vbParser.SUB, 0);
    }
    ;
    FUNCTION() {
        return this.getToken(vbParser.FUNCTION, 0);
    }
    ;
    PROPERTY() {
        return this.getToken(vbParser.PROPERTY, 0);
    }
    ;
    TRY() {
        return this.getToken(vbParser.TRY, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterExitKind(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitExitKind(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitExitKind(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ContinueStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_continueStatement;
    }
    CONTINUE() {
        return this.getToken(vbParser.CONTINUE, 0);
    }
    ;
    continueKind() {
        return this.getTypedRuleContext(ContinueKindContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterContinueStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitContinueStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitContinueStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ContinueKindContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_continueKind;
    }
    DO() {
        return this.getToken(vbParser.DO, 0);
    }
    ;
    FOR() {
        return this.getToken(vbParser.FOR, 0);
    }
    ;
    WHILE() {
        return this.getToken(vbParser.WHILE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterContinueKind(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitContinueKind(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitContinueKind(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StopStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_stopStatement;
    }
    STOP() {
        return this.getToken(vbParser.STOP, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterStopStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitStopStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitStopStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EndStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_endStatement;
    }
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEndStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEndStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEndStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ReturnStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_returnStatement;
    }
    RETURN() {
        return this.getToken(vbParser.RETURN, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterReturnStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitReturnStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitReturnStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayHandlingStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_arrayHandlingStatement;
    }
    redimStatement() {
        return this.getTypedRuleContext(RedimStatementContext, 0);
    }
    ;
    eraseStatement() {
        return this.getTypedRuleContext(EraseStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterArrayHandlingStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitArrayHandlingStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitArrayHandlingStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RedimStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_redimStatement;
    }
    REDIM() {
        return this.getToken(vbParser.REDIM, 0);
    }
    ;
    redimClauses() {
        return this.getTypedRuleContext(RedimClausesContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    PRESERVE() {
        return this.getToken(vbParser.PRESERVE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRedimStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRedimStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRedimStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RedimClausesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.redimClause = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(RedimClauseContext);
            }
            else {
                return this.getTypedRuleContext(RedimClauseContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_redimClauses;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRedimClauses(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRedimClauses(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRedimClauses(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class RedimClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_redimClause;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    arraySizeInitializationModifier() {
        return this.getTypedRuleContext(ArraySizeInitializationModifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterRedimClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitRedimClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitRedimClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EraseStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_eraseStatement;
    }
    ERASE() {
        return this.getToken(vbParser.ERASE, 0);
    }
    ;
    eraseExpressions() {
        return this.getTypedRuleContext(EraseExpressionsContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEraseStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEraseStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEraseStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EraseExpressionsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_eraseExpressions;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterEraseExpressions(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitEraseExpressions(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitEraseExpressions(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UsingStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.USING = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.USING);
            }
            else {
                return this.getToken(vbParser.USING, i);
            }
        };
        this.statementTerminator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(StatementTerminatorContext);
            }
            else {
                return this.getTypedRuleContext(StatementTerminatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_usingStatement;
    }
    usingResources() {
        return this.getTypedRuleContext(UsingResourcesContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterUsingStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitUsingStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitUsingStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UsingResourcesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_usingResources;
    }
    variableDeclarators() {
        return this.getTypedRuleContext(VariableDeclaratorsContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterUsingResources(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitUsingResources(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitUsingResources(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AwaitStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_awaitStatement;
    }
    awaitOperatorExpression() {
        return this.getTypedRuleContext(AwaitOperatorExpressionContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAwaitStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAwaitStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAwaitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class YieldStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_yieldStatement;
    }
    YIELD() {
        return this.getToken(vbParser.YIELD, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    statementTerminator() {
        return this.getTypedRuleContext(StatementTerminatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterYieldStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitYieldStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitYieldStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.PERIOD = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.PERIOD);
            }
            else {
                return this.getToken(vbParser.PERIOD, i);
            }
        };
        this.LEFT_PAREN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LEFT_PAREN);
            }
            else {
                return this.getToken(vbParser.LEFT_PAREN, i);
            }
        };
        this.RIGHT_PAREN = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.RIGHT_PAREN);
            }
            else {
                return this.getToken(vbParser.RIGHT_PAREN, i);
            }
        };
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.LEFT_ARROW = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LEFT_ARROW);
            }
            else {
                return this.getToken(vbParser.LEFT_ARROW, i);
            }
        };
        this.RIGHT_ARROW = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.RIGHT_ARROW);
            }
            else {
                return this.getToken(vbParser.RIGHT_ARROW, i);
            }
        };
        this.argumentList = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArgumentListContext);
            }
            else {
                return this.getTypedRuleContext(ArgumentListContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_expression;
    }
    simpleExpression() {
        return this.getTypedRuleContext(SimpleExpressionContext, 0);
    }
    ;
    getTypeExpression() {
        return this.getTypedRuleContext(GetTypeExpressionContext, 0);
    }
    ;
    typeOfIsExpression() {
        return this.getTypedRuleContext(TypeOfIsExpressionContext, 0);
    }
    ;
    getXmlNamespaceExpression() {
        return this.getTypedRuleContext(GetXmlNamespaceExpressionContext, 0);
    }
    ;
    newExpression() {
        return this.getTypedRuleContext(NewExpressionContext, 0);
    }
    ;
    castExpression() {
        return this.getTypedRuleContext(CastExpressionContext, 0);
    }
    ;
    unaryPlusExpression() {
        return this.getTypedRuleContext(UnaryPlusExpressionContext, 0);
    }
    ;
    unaryMinusExpression() {
        return this.getTypedRuleContext(UnaryMinusExpressionContext, 0);
    }
    ;
    NOT() {
        return this.getToken(vbParser.NOT, 0);
    }
    ;
    awaitOperatorExpression() {
        return this.getTypedRuleContext(AwaitOperatorExpressionContext, 0);
    }
    ;
    conditionalExpression() {
        return this.getTypedRuleContext(ConditionalExpressionContext, 0);
    }
    ;
    lambdaExpression() {
        return this.getTypedRuleContext(LambdaExpressionContext, 0);
    }
    ;
    queryExpression() {
        return this.getTypedRuleContext(QueryExpressionContext, 0);
    }
    ;
    xMLLiteralExpression() {
        return this.getTypedRuleContext(XMLLiteralExpressionContext, 0);
    }
    ;
    identifierOrKeyword() {
        return this.getTypedRuleContext(IdentifierOrKeywordContext, 0);
    }
    ;
    memberAccessBase() {
        return this.getTypedRuleContext(MemberAccessBaseContext, 0);
    }
    ;
    OF() {
        return this.getToken(vbParser.OF, 0);
    }
    ;
    typeArgumentList() {
        return this.getTypedRuleContext(TypeArgumentListContext, 0);
    }
    ;
    IS() {
        return this.getToken(vbParser.IS, 0);
    }
    ;
    ISNOT() {
        return this.getToken(vbParser.ISNOT, 0);
    }
    ;
    PLUS() {
        return this.getToken(vbParser.PLUS, 0);
    }
    ;
    MINUS() {
        return this.getToken(vbParser.MINUS, 0);
    }
    ;
    ASTERISK() {
        return this.getToken(vbParser.ASTERISK, 0);
    }
    ;
    SLASH() {
        return this.getToken(vbParser.SLASH, 0);
    }
    ;
    DOUBLE_BACK_SLASH() {
        return this.getToken(vbParser.DOUBLE_BACK_SLASH, 0);
    }
    ;
    MOD() {
        return this.getToken(vbParser.MOD, 0);
    }
    ;
    CARET() {
        return this.getToken(vbParser.CARET, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    LIKE() {
        return this.getToken(vbParser.LIKE, 0);
    }
    ;
    AMPERSAND() {
        return this.getToken(vbParser.AMPERSAND, 0);
    }
    ;
    ANDALSO() {
        return this.getToken(vbParser.ANDALSO, 0);
    }
    ;
    ORELSE() {
        return this.getToken(vbParser.ORELSE, 0);
    }
    ;
    AND() {
        return this.getToken(vbParser.AND, 0);
    }
    ;
    OR() {
        return this.getToken(vbParser.OR, 0);
    }
    ;
    XOR() {
        return this.getToken(vbParser.XOR, 0);
    }
    ;
    xMLQualifiedName() {
        return this.getTypedRuleContext(XMLQualifiedNameContext, 0);
    }
    ;
    AT() {
        return this.getToken(vbParser.AT, 0);
    }
    ;
    EXCLAMATION() {
        return this.getToken(vbParser.EXCLAMATION, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MemberAccessBaseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_memberAccessBase;
    }
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    GLOBAL() {
        return this.getToken(vbParser.GLOBAL, 0);
    }
    ;
    MYCLASS() {
        return this.getToken(vbParser.MYCLASS, 0);
    }
    ;
    MYBASE() {
        return this.getToken(vbParser.MYBASE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMemberAccessBase(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMemberAccessBase(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMemberAccessBase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstantExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_constantExpression;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConstantExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConstantExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConstantExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SimpleExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_simpleExpression;
    }
    literalExpression() {
        return this.getTypedRuleContext(LiteralExpressionContext, 0);
    }
    ;
    parenthesizedExpression() {
        return this.getTypedRuleContext(ParenthesizedExpressionContext, 0);
    }
    ;
    instanceExpression() {
        return this.getTypedRuleContext(InstanceExpressionContext, 0);
    }
    ;
    simpleNameExpression() {
        return this.getTypedRuleContext(SimpleNameExpressionContext, 0);
    }
    ;
    addressOfExpression() {
        return this.getTypedRuleContext(AddressOfExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSimpleExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSimpleExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSimpleExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LiteralExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_literalExpression;
    }
    literal() {
        return this.getTypedRuleContext(LiteralContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLiteralExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLiteralExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLiteralExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParenthesizedExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_parenthesizedExpression;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterParenthesizedExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitParenthesizedExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitParenthesizedExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InstanceExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_instanceExpression;
    }
    ME() {
        return this.getToken(vbParser.ME, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterInstanceExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitInstanceExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitInstanceExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SimpleNameExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_simpleNameExpression;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    OF() {
        return this.getToken(vbParser.OF, 0);
    }
    ;
    typeArgumentList() {
        return this.getTypedRuleContext(TypeArgumentListContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSimpleNameExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSimpleNameExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSimpleNameExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AddressOfExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_addressOfExpression;
    }
    ADDRESSOF() {
        return this.getToken(vbParser.ADDRESSOF, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAddressOfExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAddressOfExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAddressOfExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GetTypeExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_getTypeExpression;
    }
    GETTYPE() {
        return this.getToken(vbParser.GETTYPE, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    getTypeTypeName() {
        return this.getTypedRuleContext(GetTypeTypeNameContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterGetTypeExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitGetTypeExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitGetTypeExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GetTypeTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_getTypeTypeName;
    }
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    qualifiedOpenTypeName() {
        return this.getTypedRuleContext(QualifiedOpenTypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterGetTypeTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitGetTypeTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitGetTypeTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QualifiedOpenTypeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeArityList = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeArityListContext);
            }
            else {
                return this.getTypedRuleContext(TypeArityListContext, i);
            }
        };
        this.PERIOD = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.PERIOD);
            }
            else {
                return this.getToken(vbParser.PERIOD, i);
            }
        };
        this.identifierOrKeyword = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierOrKeywordContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierOrKeywordContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_qualifiedOpenTypeName;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    GLOBAL() {
        return this.getToken(vbParser.GLOBAL, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterQualifiedOpenTypeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitQualifiedOpenTypeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitQualifiedOpenTypeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeArityListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeArityList;
    }
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    OF() {
        return this.getToken(vbParser.OF, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    commaList() {
        return this.getTypedRuleContext(CommaListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeArityList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeArityList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeArityList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CommaListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_commaList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCommaList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCommaList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCommaList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeOfIsExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_typeOfIsExpression;
    }
    TYPEOF() {
        return this.getToken(vbParser.TYPEOF, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    IS() {
        return this.getToken(vbParser.IS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterTypeOfIsExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitTypeOfIsExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitTypeOfIsExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GetXmlNamespaceExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_getXmlNamespaceExpression;
    }
    GET_XML_NAMESPACE() {
        return this.getToken(vbParser.GET_XML_NAMESPACE, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    xMLNamespaceName() {
        return this.getTypedRuleContext(XMLNamespaceNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterGetXmlNamespaceExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitGetXmlNamespaceExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitGetXmlNamespaceExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArgumentListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_argumentList;
    }
    positionalArgumentList() {
        return this.getTypedRuleContext(PositionalArgumentListContext, 0);
    }
    ;
    COMMA() {
        return this.getToken(vbParser.COMMA, 0);
    }
    ;
    namedArgumentList() {
        return this.getTypedRuleContext(NamedArgumentListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterArgumentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitArgumentList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitArgumentList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PositionalArgumentListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_positionalArgumentList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterPositionalArgumentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitPositionalArgumentList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitPositionalArgumentList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NamedArgumentListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.identifierOrKeyword = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierOrKeywordContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierOrKeywordContext, i);
            }
        };
        this.COLON = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COLON);
            }
            else {
                return this.getToken(vbParser.COLON, i);
            }
        };
        this.EQUALS = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.EQUALS);
            }
            else {
                return this.getToken(vbParser.EQUALS, i);
            }
        };
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_namedArgumentList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterNamedArgumentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitNamedArgumentList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitNamedArgumentList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NewExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_newExpression;
    }
    objectCreationExpression() {
        return this.getTypedRuleContext(ObjectCreationExpressionContext, 0);
    }
    ;
    arrayExpression() {
        return this.getTypedRuleContext(ArrayExpressionContext, 0);
    }
    ;
    anonymousObjectCreationExpression() {
        return this.getTypedRuleContext(AnonymousObjectCreationExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterNewExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitNewExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitNewExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ObjectCreationExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_objectCreationExpression;
    }
    NEW() {
        return this.getToken(vbParser.NEW, 0);
    }
    ;
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    objectCreationExpressionInitializer() {
        return this.getTypedRuleContext(ObjectCreationExpressionInitializerContext, 0);
    }
    ;
    argumentList() {
        return this.getTypedRuleContext(ArgumentListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterObjectCreationExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitObjectCreationExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitObjectCreationExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ObjectCreationExpressionInitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_objectCreationExpressionInitializer;
    }
    objectMemberInitializer() {
        return this.getTypedRuleContext(ObjectMemberInitializerContext, 0);
    }
    ;
    objectCollectionInitializer() {
        return this.getTypedRuleContext(ObjectCollectionInitializerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterObjectCreationExpressionInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitObjectCreationExpressionInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitObjectCreationExpressionInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ObjectMemberInitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_objectMemberInitializer;
    }
    WITH() {
        return this.getToken(vbParser.WITH, 0);
    }
    ;
    LEFT_BRACE() {
        return this.getToken(vbParser.LEFT_BRACE, 0);
    }
    ;
    fieldInitializerList() {
        return this.getTypedRuleContext(FieldInitializerListContext, 0);
    }
    ;
    RIGHT_BRACE() {
        return this.getToken(vbParser.RIGHT_BRACE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterObjectMemberInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitObjectMemberInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitObjectMemberInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FieldInitializerListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.fieldInitializer = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(FieldInitializerContext);
            }
            else {
                return this.getTypedRuleContext(FieldInitializerContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_fieldInitializerList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFieldInitializerList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFieldInitializerList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFieldInitializerList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FieldInitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_fieldInitializer;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    KEY() {
        return this.getToken(vbParser.KEY, 0);
    }
    ;
    PERIOD() {
        return this.getToken(vbParser.PERIOD, 0);
    }
    ;
    identifierOrKeyword() {
        return this.getTypedRuleContext(IdentifierOrKeywordContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFieldInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFieldInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFieldInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ObjectCollectionInitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_objectCollectionInitializer;
    }
    FROM() {
        return this.getToken(vbParser.FROM, 0);
    }
    ;
    collectionInitializer() {
        return this.getTypedRuleContext(CollectionInitializerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterObjectCollectionInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitObjectCollectionInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitObjectCollectionInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CollectionInitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_collectionInitializer;
    }
    LEFT_BRACE() {
        return this.getToken(vbParser.LEFT_BRACE, 0);
    }
    ;
    RIGHT_BRACE() {
        return this.getToken(vbParser.RIGHT_BRACE, 0);
    }
    ;
    collectionElementList() {
        return this.getTypedRuleContext(CollectionElementListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCollectionInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCollectionInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCollectionInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CollectionElementListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.collectionElement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CollectionElementContext);
            }
            else {
                return this.getTypedRuleContext(CollectionElementContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_collectionElementList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCollectionElementList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCollectionElementList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCollectionElementList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CollectionElementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_collectionElement;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    collectionInitializer() {
        return this.getTypedRuleContext(CollectionInitializerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCollectionElement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCollectionElement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCollectionElement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_arrayExpression;
    }
    arrayCreationExpression() {
        return this.getTypedRuleContext(ArrayCreationExpressionContext, 0);
    }
    ;
    arrayLiteralExpression() {
        return this.getTypedRuleContext(ArrayLiteralExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterArrayExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitArrayExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitArrayExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayCreationExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_arrayCreationExpression;
    }
    NEW() {
        return this.getToken(vbParser.NEW, 0);
    }
    ;
    nonArrayTypeName() {
        return this.getTypedRuleContext(NonArrayTypeNameContext, 0);
    }
    ;
    arrayNameModifier() {
        return this.getTypedRuleContext(ArrayNameModifierContext, 0);
    }
    ;
    collectionInitializer() {
        return this.getTypedRuleContext(CollectionInitializerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterArrayCreationExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitArrayCreationExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitArrayCreationExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayLiteralExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_arrayLiteralExpression;
    }
    collectionInitializer() {
        return this.getTypedRuleContext(CollectionInitializerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterArrayLiteralExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitArrayLiteralExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitArrayLiteralExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AnonymousObjectCreationExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_anonymousObjectCreationExpression;
    }
    NEW() {
        return this.getToken(vbParser.NEW, 0);
    }
    ;
    objectMemberInitializer() {
        return this.getTypedRuleContext(ObjectMemberInitializerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAnonymousObjectCreationExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAnonymousObjectCreationExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAnonymousObjectCreationExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CastExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_castExpression;
    }
    DIRECTCAST() {
        return this.getToken(vbParser.DIRECTCAST, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    COMMA() {
        return this.getToken(vbParser.COMMA, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    TRYCAST() {
        return this.getToken(vbParser.TRYCAST, 0);
    }
    ;
    CTYPE() {
        return this.getToken(vbParser.CTYPE, 0);
    }
    ;
    castTarget() {
        return this.getTypedRuleContext(CastTargetContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCastExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCastExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCastExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CastTargetContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_castTarget;
    }
    CBOOL() {
        return this.getToken(vbParser.CBOOL, 0);
    }
    ;
    CBYTE() {
        return this.getToken(vbParser.CBYTE, 0);
    }
    ;
    CCHAR() {
        return this.getToken(vbParser.CCHAR, 0);
    }
    ;
    CDATE() {
        return this.getToken(vbParser.CDATE, 0);
    }
    ;
    CDEC() {
        return this.getToken(vbParser.CDEC, 0);
    }
    ;
    CDBL() {
        return this.getToken(vbParser.CDBL, 0);
    }
    ;
    CINT() {
        return this.getToken(vbParser.CINT, 0);
    }
    ;
    CLNG() {
        return this.getToken(vbParser.CLNG, 0);
    }
    ;
    COBJ() {
        return this.getToken(vbParser.COBJ, 0);
    }
    ;
    CSBYTE() {
        return this.getToken(vbParser.CSBYTE, 0);
    }
    ;
    CSHORT() {
        return this.getToken(vbParser.CSHORT, 0);
    }
    ;
    CSNG() {
        return this.getToken(vbParser.CSNG, 0);
    }
    ;
    CSTR() {
        return this.getToken(vbParser.CSTR, 0);
    }
    ;
    CUINT() {
        return this.getToken(vbParser.CUINT, 0);
    }
    ;
    CULNG() {
        return this.getToken(vbParser.CULNG, 0);
    }
    ;
    CUSHORT() {
        return this.getToken(vbParser.CUSHORT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCastTarget(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCastTarget(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCastTarget(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UnaryPlusExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_unaryPlusExpression;
    }
    PLUS() {
        return this.getToken(vbParser.PLUS, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterUnaryPlusExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitUnaryPlusExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitUnaryPlusExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UnaryMinusExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_unaryMinusExpression;
    }
    MINUS() {
        return this.getToken(vbParser.MINUS, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterUnaryMinusExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitUnaryMinusExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitUnaryMinusExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BooleanExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_booleanExpression;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterBooleanExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitBooleanExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitBooleanExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LambdaExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_lambdaExpression;
    }
    singleLineLambda() {
        return this.getTypedRuleContext(SingleLineLambdaContext, 0);
    }
    ;
    multiLineLambda() {
        return this.getTypedRuleContext(MultiLineLambdaContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLambdaExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLambdaExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLambdaExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SingleLineLambdaContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.lambdaModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(LambdaModifierContext);
            }
            else {
                return this.getTypedRuleContext(LambdaModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_singleLineLambda;
    }
    FUNCTION() {
        return this.getToken(vbParser.FUNCTION, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    SUB() {
        return this.getToken(vbParser.SUB, 0);
    }
    ;
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSingleLineLambda(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSingleLineLambda(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSingleLineLambda(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiLineLambdaContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_multiLineLambda;
    }
    multiLineFunctionLambda() {
        return this.getTypedRuleContext(MultiLineFunctionLambdaContext, 0);
    }
    ;
    multiLineSubLambda() {
        return this.getTypedRuleContext(MultiLineSubLambdaContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMultiLineLambda(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMultiLineLambda(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMultiLineLambda(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiLineFunctionLambdaContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.FUNCTION = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.FUNCTION);
            }
            else {
                return this.getToken(vbParser.FUNCTION, i);
            }
        };
        this.lambdaModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(LambdaModifierContext);
            }
            else {
                return this.getTypedRuleContext(LambdaModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_multiLineFunctionLambda;
    }
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMultiLineFunctionLambda(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMultiLineFunctionLambda(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMultiLineFunctionLambda(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MultiLineSubLambdaContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SUB = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SUB);
            }
            else {
                return this.getToken(vbParser.SUB, i);
            }
        };
        this.lambdaModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(LambdaModifierContext);
            }
            else {
                return this.getTypedRuleContext(LambdaModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_multiLineSubLambda;
    }
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    block() {
        return this.getTypedRuleContext(BlockContext, 0);
    }
    ;
    END() {
        return this.getToken(vbParser.END, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    parameterList() {
        return this.getTypedRuleContext(ParameterListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterMultiLineSubLambda(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitMultiLineSubLambda(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitMultiLineSubLambda(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LambdaModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_lambdaModifier;
    }
    ASYNC() {
        return this.getToken(vbParser.ASYNC, 0);
    }
    ;
    ITERATOR() {
        return this.getToken(vbParser.ITERATOR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLambdaModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLambdaModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLambdaModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QueryExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.queryOperator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(QueryOperatorContext);
            }
            else {
                return this.getTypedRuleContext(QueryOperatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_queryExpression;
    }
    fromOrAggregateQueryOperator() {
        return this.getTypedRuleContext(FromOrAggregateQueryOperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterQueryExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitQueryExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitQueryExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FromOrAggregateQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_fromOrAggregateQueryOperator;
    }
    fromQueryOperator() {
        return this.getTypedRuleContext(FromQueryOperatorContext, 0);
    }
    ;
    aggregateQueryOperator() {
        return this.getTypedRuleContext(AggregateQueryOperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFromOrAggregateQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFromOrAggregateQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFromOrAggregateQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_queryOperator;
    }
    fromQueryOperator() {
        return this.getTypedRuleContext(FromQueryOperatorContext, 0);
    }
    ;
    aggregateQueryOperator() {
        return this.getTypedRuleContext(AggregateQueryOperatorContext, 0);
    }
    ;
    selectQueryOperator() {
        return this.getTypedRuleContext(SelectQueryOperatorContext, 0);
    }
    ;
    distinctQueryOperator() {
        return this.getTypedRuleContext(DistinctQueryOperatorContext, 0);
    }
    ;
    whereQueryOperator() {
        return this.getTypedRuleContext(WhereQueryOperatorContext, 0);
    }
    ;
    orderByQueryOperator() {
        return this.getTypedRuleContext(OrderByQueryOperatorContext, 0);
    }
    ;
    partitionQueryOperator() {
        return this.getTypedRuleContext(PartitionQueryOperatorContext, 0);
    }
    ;
    letQueryOperator() {
        return this.getTypedRuleContext(LetQueryOperatorContext, 0);
    }
    ;
    groupByQueryOperator() {
        return this.getTypedRuleContext(GroupByQueryOperatorContext, 0);
    }
    ;
    joinOrGroupJoinQueryOperator() {
        return this.getTypedRuleContext(JoinOrGroupJoinQueryOperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class JoinOrGroupJoinQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_joinOrGroupJoinQueryOperator;
    }
    joinQueryOperator() {
        return this.getTypedRuleContext(JoinQueryOperatorContext, 0);
    }
    ;
    groupJoinQueryOperator() {
        return this.getTypedRuleContext(GroupJoinQueryOperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterJoinOrGroupJoinQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitJoinOrGroupJoinQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitJoinOrGroupJoinQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CollectionRangeVariableDeclarationListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.collectionRangeVariableDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CollectionRangeVariableDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(CollectionRangeVariableDeclarationContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_collectionRangeVariableDeclarationList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCollectionRangeVariableDeclarationList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCollectionRangeVariableDeclarationList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCollectionRangeVariableDeclarationList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CollectionRangeVariableDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_collectionRangeVariableDeclaration;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    IN() {
        return this.getToken(vbParser.IN, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterCollectionRangeVariableDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitCollectionRangeVariableDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitCollectionRangeVariableDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExpressionRangeVariableDeclarationListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expressionRangeVariableDeclaration = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionRangeVariableDeclarationContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionRangeVariableDeclarationContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_expressionRangeVariableDeclarationList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterExpressionRangeVariableDeclarationList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitExpressionRangeVariableDeclarationList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitExpressionRangeVariableDeclarationList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExpressionRangeVariableDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_expressionRangeVariableDeclaration;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    AS() {
        return this.getToken(vbParser.AS, 0);
    }
    ;
    typeName() {
        return this.getTypedRuleContext(TypeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterExpressionRangeVariableDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitExpressionRangeVariableDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitExpressionRangeVariableDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FromQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_fromQueryOperator;
    }
    FROM() {
        return this.getToken(vbParser.FROM, 0);
    }
    ;
    collectionRangeVariableDeclarationList() {
        return this.getTypedRuleContext(CollectionRangeVariableDeclarationListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterFromQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitFromQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitFromQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class JoinQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_joinQueryOperator;
    }
    JOIN() {
        return this.getToken(vbParser.JOIN, 0);
    }
    ;
    collectionRangeVariableDeclaration() {
        return this.getTypedRuleContext(CollectionRangeVariableDeclarationContext, 0);
    }
    ;
    ON() {
        return this.getToken(vbParser.ON, 0);
    }
    ;
    joinConditionList() {
        return this.getTypedRuleContext(JoinConditionListContext, 0);
    }
    ;
    joinOrGroupJoinQueryOperator() {
        return this.getTypedRuleContext(JoinOrGroupJoinQueryOperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterJoinQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitJoinQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitJoinQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class JoinConditionListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.joinCondition = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(JoinConditionContext);
            }
            else {
                return this.getTypedRuleContext(JoinConditionContext, i);
            }
        };
        this.AND = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.AND);
            }
            else {
                return this.getToken(vbParser.AND, i);
            }
        };
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_joinConditionList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterJoinConditionList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitJoinConditionList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitJoinConditionList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class JoinConditionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_joinCondition;
    }
    EQUALSKEYWORD() {
        return this.getToken(vbParser.EQUALSKEYWORD, 0);
    }
    ;
    LINE_TERMINATOR() {
        return this.getToken(vbParser.LINE_TERMINATOR, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterJoinCondition(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitJoinCondition(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitJoinCondition(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LetQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_letQueryOperator;
    }
    LET() {
        return this.getToken(vbParser.LET, 0);
    }
    ;
    expressionRangeVariableDeclarationList() {
        return this.getTypedRuleContext(ExpressionRangeVariableDeclarationListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterLetQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitLetQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitLetQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SelectQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_selectQueryOperator;
    }
    SELECT() {
        return this.getToken(vbParser.SELECT, 0);
    }
    ;
    expressionRangeVariableDeclarationList() {
        return this.getTypedRuleContext(ExpressionRangeVariableDeclarationListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterSelectQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitSelectQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitSelectQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DistinctQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_distinctQueryOperator;
    }
    DISTINCT() {
        return this.getToken(vbParser.DISTINCT, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterDistinctQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitDistinctQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitDistinctQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WhereQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_whereQueryOperator;
    }
    WHERE() {
        return this.getToken(vbParser.WHERE, 0);
    }
    ;
    booleanExpression() {
        return this.getTypedRuleContext(BooleanExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterWhereQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitWhereQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitWhereQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PartitionQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_partitionQueryOperator;
    }
    TAKE() {
        return this.getToken(vbParser.TAKE, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    WHILE() {
        return this.getToken(vbParser.WHILE, 0);
    }
    ;
    booleanExpression() {
        return this.getTypedRuleContext(BooleanExpressionContext, 0);
    }
    ;
    SKIP_KEYWORD() {
        return this.getToken(vbParser.SKIP_KEYWORD, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterPartitionQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitPartitionQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitPartitionQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OrderByQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_orderByQueryOperator;
    }
    ORDER() {
        return this.getToken(vbParser.ORDER, 0);
    }
    ;
    BY() {
        return this.getToken(vbParser.BY, 0);
    }
    ;
    orderExpressionList() {
        return this.getTypedRuleContext(OrderExpressionListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOrderByQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOrderByQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOrderByQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OrderExpressionListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.orderExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(OrderExpressionContext);
            }
            else {
                return this.getTypedRuleContext(OrderExpressionContext, i);
            }
        };
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_orderExpressionList;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOrderExpressionList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOrderExpressionList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOrderExpressionList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OrderExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_orderExpression;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    ordering() {
        return this.getTypedRuleContext(OrderingContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOrderExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOrderExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOrderExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class OrderingContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_ordering;
    }
    ASCENDING() {
        return this.getToken(vbParser.ASCENDING, 0);
    }
    ;
    DESCENDING() {
        return this.getToken(vbParser.DESCENDING, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterOrdering(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitOrdering(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitOrdering(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GroupByQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expressionRangeVariableDeclarationList = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionRangeVariableDeclarationListContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionRangeVariableDeclarationListContext, i);
            }
        };
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_groupByQueryOperator;
    }
    GROUP() {
        return this.getToken(vbParser.GROUP, 0);
    }
    ;
    BY() {
        return this.getToken(vbParser.BY, 0);
    }
    ;
    INTO() {
        return this.getToken(vbParser.INTO, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterGroupByQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitGroupByQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitGroupByQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AggregateQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.queryOperator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(QueryOperatorContext);
            }
            else {
                return this.getTypedRuleContext(QueryOperatorContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_aggregateQueryOperator;
    }
    AGGREGATE() {
        return this.getToken(vbParser.AGGREGATE, 0);
    }
    ;
    collectionRangeVariableDeclaration() {
        return this.getTypedRuleContext(CollectionRangeVariableDeclarationContext, 0);
    }
    ;
    INTO() {
        return this.getToken(vbParser.INTO, 0);
    }
    ;
    expressionRangeVariableDeclarationList() {
        return this.getTypedRuleContext(ExpressionRangeVariableDeclarationListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAggregateQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAggregateQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAggregateQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GroupJoinQueryOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_groupJoinQueryOperator;
    }
    GROUP() {
        return this.getToken(vbParser.GROUP, 0);
    }
    ;
    JOIN() {
        return this.getToken(vbParser.JOIN, 0);
    }
    ;
    collectionRangeVariableDeclaration() {
        return this.getTypedRuleContext(CollectionRangeVariableDeclarationContext, 0);
    }
    ;
    ON() {
        return this.getToken(vbParser.ON, 0);
    }
    ;
    joinConditionList() {
        return this.getTypedRuleContext(JoinConditionListContext, 0);
    }
    ;
    INTO() {
        return this.getToken(vbParser.INTO, 0);
    }
    ;
    expressionRangeVariableDeclarationList() {
        return this.getTypedRuleContext(ExpressionRangeVariableDeclarationListContext, 0);
    }
    ;
    joinOrGroupJoinQueryOperator() {
        return this.getTypedRuleContext(JoinOrGroupJoinQueryOperatorContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterGroupJoinQueryOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitGroupJoinQueryOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitGroupJoinQueryOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConditionalExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.COMMA = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.COMMA);
            }
            else {
                return this.getToken(vbParser.COMMA, i);
            }
        };
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_conditionalExpression;
    }
    IF() {
        return this.getToken(vbParser.IF, 0);
    }
    ;
    LEFT_PAREN() {
        return this.getToken(vbParser.LEFT_PAREN, 0);
    }
    ;
    booleanExpression() {
        return this.getTypedRuleContext(BooleanExpressionContext, 0);
    }
    ;
    RIGHT_PAREN() {
        return this.getToken(vbParser.RIGHT_PAREN, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterConditionalExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitConditionalExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitConditionalExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLLiteralExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLLiteralExpression;
    }
    xMLDocument() {
        return this.getTypedRuleContext(XMLDocumentContext, 0);
    }
    ;
    xMLElement() {
        return this.getTypedRuleContext(XMLElementContext, 0);
    }
    ;
    xMLProcessingInstruction() {
        return this.getTypedRuleContext(XMLProcessingInstructionContext, 0);
    }
    ;
    xMLComment() {
        return this.getTypedRuleContext(XMLCommentContext, 0);
    }
    ;
    xMLCDATASection() {
        return this.getTypedRuleContext(XMLCDATASectionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLLiteralExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLLiteralExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLLiteralExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLEmbeddedExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.PERCENT = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.PERCENT);
            }
            else {
                return this.getToken(vbParser.PERCENT, i);
            }
        };
        this.LINE_TERMINATOR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.LINE_TERMINATOR);
            }
            else {
                return this.getToken(vbParser.LINE_TERMINATOR, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLEmbeddedExpression;
    }
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLEmbeddedExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLEmbeddedExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLEmbeddedExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLDocumentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.xMLMisc = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLMiscContext);
            }
            else {
                return this.getTypedRuleContext(XMLMiscContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLDocument;
    }
    xMLDocumentPrologue() {
        return this.getTypedRuleContext(XMLDocumentPrologueContext, 0);
    }
    ;
    xMLDocumentBody() {
        return this.getTypedRuleContext(XMLDocumentBodyContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLDocument(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLDocument(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLDocument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLDocumentPrologueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.QUESTION_MARK = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.QUESTION_MARK);
            }
            else {
                return this.getToken(vbParser.QUESTION_MARK, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLDocumentPrologue;
    }
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    XML() {
        return this.getToken(vbParser.XML, 0);
    }
    ;
    xMLVersion() {
        return this.getTypedRuleContext(XMLVersionContext, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    xMLEncoding() {
        return this.getTypedRuleContext(XMLEncodingContext, 0);
    }
    ;
    xMLStandalone() {
        return this.getTypedRuleContext(XMLStandaloneContext, 0);
    }
    ;
    XMLWhitespace() {
        return this.getToken(vbParser.XMLWhitespace, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLDocumentPrologue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLDocumentPrologue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLDocumentPrologue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLVersionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.XMLWhitespace = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.XMLWhitespace);
            }
            else {
                return this.getToken(vbParser.XMLWhitespace, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLVersion;
    }
    VERSION() {
        return this.getToken(vbParser.VERSION, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    xMLVersionNumberValue() {
        return this.getTypedRuleContext(XMLVersionNumberValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLVersion(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLVersion(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLVersion(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLVersionNumberValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SINGLE_QUOTE_CHAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SINGLE_QUOTE_CHAR);
            }
            else {
                return this.getToken(vbParser.SINGLE_QUOTE_CHAR, i);
            }
        };
        this.DOUBLE_QUOTE_CHARACTER = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.DOUBLE_QUOTE_CHARACTER);
            }
            else {
                return this.getToken(vbParser.DOUBLE_QUOTE_CHARACTER, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLVersionNumberValue;
    }
    ONE() {
        return this.getToken(vbParser.ONE, 0);
    }
    ;
    PERIOD() {
        return this.getToken(vbParser.PERIOD, 0);
    }
    ;
    ZERO() {
        return this.getToken(vbParser.ZERO, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLVersionNumberValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLVersionNumberValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLVersionNumberValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLEncodingContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.XMLWhitespace = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.XMLWhitespace);
            }
            else {
                return this.getToken(vbParser.XMLWhitespace, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLEncoding;
    }
    ENCODING() {
        return this.getToken(vbParser.ENCODING, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    xMLEncodingNameValue() {
        return this.getTypedRuleContext(XMLEncodingNameValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLEncoding(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLEncoding(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLEncoding(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLEncodingNameValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SINGLE_QUOTE_CHAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SINGLE_QUOTE_CHAR);
            }
            else {
                return this.getToken(vbParser.SINGLE_QUOTE_CHAR, i);
            }
        };
        this.DOUBLE_QUOTE_CHARACTER = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.DOUBLE_QUOTE_CHARACTER);
            }
            else {
                return this.getToken(vbParser.DOUBLE_QUOTE_CHARACTER, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLEncodingNameValue;
    }
    xMLEncodingName() {
        return this.getTypedRuleContext(XMLEncodingNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLEncodingNameValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLEncodingNameValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLEncodingNameValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLEncodingNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.xMLEncodingNameCharacter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLEncodingNameCharacterContext);
            }
            else {
                return this.getTypedRuleContext(XMLEncodingNameCharacterContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLEncodingName;
    }
    XMLLatinAlphaCharacter() {
        return this.getToken(vbParser.XMLLatinAlphaCharacter, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLEncodingName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLEncodingName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLEncodingName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLEncodingNameCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLEncodingNameCharacter;
    }
    XMLUnderscoreCharacter() {
        return this.getToken(vbParser.XMLUnderscoreCharacter, 0);
    }
    ;
    XMLLatinAlphaCharacter() {
        return this.getToken(vbParser.XMLLatinAlphaCharacter, 0);
    }
    ;
    XMLNumericCharacter() {
        return this.getToken(vbParser.XMLNumericCharacter, 0);
    }
    ;
    XMLPeriodCharacter() {
        return this.getToken(vbParser.XMLPeriodCharacter, 0);
    }
    ;
    XMLDashCharacter() {
        return this.getToken(vbParser.XMLDashCharacter, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLEncodingNameCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLEncodingNameCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLEncodingNameCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLStandaloneContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.XMLWhitespace = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.XMLWhitespace);
            }
            else {
                return this.getToken(vbParser.XMLWhitespace, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLStandalone;
    }
    STANDALONE() {
        return this.getToken(vbParser.STANDALONE, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    xMLYesNoValue() {
        return this.getTypedRuleContext(XMLYesNoValueContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLStandalone(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLStandalone(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLStandalone(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLYesNoValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SINGLE_QUOTE_CHAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SINGLE_QUOTE_CHAR);
            }
            else {
                return this.getToken(vbParser.SINGLE_QUOTE_CHAR, i);
            }
        };
        this.DOUBLE_QUOTE_CHARACTER = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.DOUBLE_QUOTE_CHARACTER);
            }
            else {
                return this.getToken(vbParser.DOUBLE_QUOTE_CHARACTER, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLYesNoValue;
    }
    xMLYesNo() {
        return this.getTypedRuleContext(XMLYesNoContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLYesNoValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLYesNoValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLYesNoValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLYesNoContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLYesNo;
    }
    YES() {
        return this.getToken(vbParser.YES, 0);
    }
    ;
    NO() {
        return this.getToken(vbParser.NO, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLYesNo(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLYesNo(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLYesNo(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLMiscContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLMisc;
    }
    xMLComment() {
        return this.getTypedRuleContext(XMLCommentContext, 0);
    }
    ;
    xMLProcessingInstruction() {
        return this.getTypedRuleContext(XMLProcessingInstructionContext, 0);
    }
    ;
    XMLWhitespace() {
        return this.getToken(vbParser.XMLWhitespace, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLMisc(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLMisc(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLMisc(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLDocumentBodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLDocumentBody;
    }
    xMLElement() {
        return this.getTypedRuleContext(XMLElementContext, 0);
    }
    ;
    xMLEmbeddedExpression() {
        return this.getTypedRuleContext(XMLEmbeddedExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLDocumentBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLDocumentBody(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLDocumentBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLElementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLElement;
    }
    xMLEmptyElement() {
        return this.getTypedRuleContext(XMLEmptyElementContext, 0);
    }
    ;
    xMLElementStart() {
        return this.getTypedRuleContext(XMLElementStartContext, 0);
    }
    ;
    xMLContent() {
        return this.getTypedRuleContext(XMLContentContext, 0);
    }
    ;
    xMLElementEnd() {
        return this.getTypedRuleContext(XMLElementEndContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLElement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLElement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLElement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLEmptyElementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.xMLAttribute = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLAttributeContext);
            }
            else {
                return this.getTypedRuleContext(XMLAttributeContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLEmptyElement;
    }
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    xMLQualifiedNameOrExpression() {
        return this.getTypedRuleContext(XMLQualifiedNameOrExpressionContext, 0);
    }
    ;
    SLASH() {
        return this.getToken(vbParser.SLASH, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    XMLWhitespace() {
        return this.getToken(vbParser.XMLWhitespace, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLEmptyElement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLEmptyElement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLEmptyElement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLElementStartContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.xMLAttribute = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLAttributeContext);
            }
            else {
                return this.getTypedRuleContext(XMLAttributeContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLElementStart;
    }
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    xMLQualifiedNameOrExpression() {
        return this.getTypedRuleContext(XMLQualifiedNameOrExpressionContext, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    XMLWhitespace() {
        return this.getToken(vbParser.XMLWhitespace, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLElementStart(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLElementStart(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLElementStart(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLElementEndContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLElementEnd;
    }
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    SLASH() {
        return this.getToken(vbParser.SLASH, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    xMLQualifiedName() {
        return this.getTypedRuleContext(XMLQualifiedNameContext, 0);
    }
    ;
    XMLWhitespace() {
        return this.getToken(vbParser.XMLWhitespace, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLElementEnd(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLElementEnd(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLElementEnd(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLContentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.XMLCharacterData = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.XMLCharacterData);
            }
            else {
                return this.getToken(vbParser.XMLCharacterData, i);
            }
        };
        this.xMLNestedContent = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLNestedContentContext);
            }
            else {
                return this.getTypedRuleContext(XMLNestedContentContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLContent;
    }
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLContent(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLContent(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLContent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLNestedContentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLNestedContent;
    }
    xMLElement() {
        return this.getTypedRuleContext(XMLElementContext, 0);
    }
    ;
    xMLReference() {
        return this.getTypedRuleContext(XMLReferenceContext, 0);
    }
    ;
    xMLCDATASection() {
        return this.getTypedRuleContext(XMLCDATASectionContext, 0);
    }
    ;
    xMLProcessingInstruction() {
        return this.getTypedRuleContext(XMLProcessingInstructionContext, 0);
    }
    ;
    xMLComment() {
        return this.getTypedRuleContext(XMLCommentContext, 0);
    }
    ;
    xMLEmbeddedExpression() {
        return this.getTypedRuleContext(XMLEmbeddedExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLNestedContent(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLNestedContent(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLNestedContent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLAttributeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.XMLWhitespace = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.XMLWhitespace);
            }
            else {
                return this.getToken(vbParser.XMLWhitespace, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLAttribute;
    }
    xMLAttributeName() {
        return this.getTypedRuleContext(XMLAttributeNameContext, 0);
    }
    ;
    EQUALS() {
        return this.getToken(vbParser.EQUALS, 0);
    }
    ;
    xMLAttributeValue() {
        return this.getTypedRuleContext(XMLAttributeValueContext, 0);
    }
    ;
    xMLEmbeddedExpression() {
        return this.getTypedRuleContext(XMLEmbeddedExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLAttribute(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLAttribute(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLAttribute(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLAttributeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLAttributeName;
    }
    xMLQualifiedNameOrExpression() {
        return this.getTypedRuleContext(XMLQualifiedNameOrExpressionContext, 0);
    }
    ;
    xMLNamespaceAttributeName() {
        return this.getTypedRuleContext(XMLNamespaceAttributeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLAttributeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLAttributeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLAttributeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLAttributeValueContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.DOUBLE_QUOTE_CHARACTER = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.DOUBLE_QUOTE_CHARACTER);
            }
            else {
                return this.getToken(vbParser.DOUBLE_QUOTE_CHARACTER, i);
            }
        };
        this.xMLAttributeDoubleQuoteValueCharacter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLAttributeDoubleQuoteValueCharacterContext);
            }
            else {
                return this.getTypedRuleContext(XMLAttributeDoubleQuoteValueCharacterContext, i);
            }
        };
        this.SINGLE_QUOTE_CHAR = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.SINGLE_QUOTE_CHAR);
            }
            else {
                return this.getToken(vbParser.SINGLE_QUOTE_CHAR, i);
            }
        };
        this.xMLAttributeSingleQuoteValueCharacter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLAttributeSingleQuoteValueCharacterContext);
            }
            else {
                return this.getTypedRuleContext(XMLAttributeSingleQuoteValueCharacterContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLAttributeValue;
    }
    xMLEmbeddedExpression() {
        return this.getTypedRuleContext(XMLEmbeddedExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLAttributeValue(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLAttributeValue(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLAttributeValue(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLAttributeDoubleQuoteValueCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLAttributeDoubleQuoteValueCharacter;
    }
    XMLNotDoubleQuote() {
        return this.getToken(vbParser.XMLNotDoubleQuote, 0);
    }
    ;
    xMLReference() {
        return this.getTypedRuleContext(XMLReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLAttributeDoubleQuoteValueCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLAttributeDoubleQuoteValueCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLAttributeDoubleQuoteValueCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLAttributeSingleQuoteValueCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLAttributeSingleQuoteValueCharacter;
    }
    XMLNotSingleQuote() {
        return this.getToken(vbParser.XMLNotSingleQuote, 0);
    }
    ;
    xMLReference() {
        return this.getTypedRuleContext(XMLReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLAttributeSingleQuoteValueCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLAttributeSingleQuoteValueCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLAttributeSingleQuoteValueCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLReference;
    }
    xMLEntityReference() {
        return this.getTypedRuleContext(XMLEntityReferenceContext, 0);
    }
    ;
    xMLCharacterReference() {
        return this.getTypedRuleContext(XMLCharacterReferenceContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLReference(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLEntityReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLEntityReference;
    }
    AMPERSAND() {
        return this.getToken(vbParser.AMPERSAND, 0);
    }
    ;
    XMLEntityName() {
        return this.getToken(vbParser.XMLEntityName, 0);
    }
    ;
    SEMICOLON() {
        return this.getToken(vbParser.SEMICOLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLEntityReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLEntityReference(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLEntityReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLCharacterReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.XMLNumericCharacter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.XMLNumericCharacter);
            }
            else {
                return this.getToken(vbParser.XMLNumericCharacter, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLCharacterReference;
    }
    AMPERSAND() {
        return this.getToken(vbParser.AMPERSAND, 0);
    }
    ;
    POUND() {
        return this.getToken(vbParser.POUND, 0);
    }
    ;
    SEMICOLON() {
        return this.getToken(vbParser.SEMICOLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLCharacterReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLCharacterReference(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLCharacterReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLNamespaceAttributeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLNamespaceAttributeName;
    }
    xMLPrefixedNamespaceAttributeName() {
        return this.getTypedRuleContext(XMLPrefixedNamespaceAttributeNameContext, 0);
    }
    ;
    xMLDefaultNamespaceAttributeName() {
        return this.getTypedRuleContext(XMLDefaultNamespaceAttributeNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLNamespaceAttributeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLNamespaceAttributeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLNamespaceAttributeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLPrefixedNamespaceAttributeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLPrefixedNamespaceAttributeName;
    }
    XMLNS() {
        return this.getToken(vbParser.XMLNS, 0);
    }
    ;
    COLON() {
        return this.getToken(vbParser.COLON, 0);
    }
    ;
    xMLNamespaceName() {
        return this.getTypedRuleContext(XMLNamespaceNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLPrefixedNamespaceAttributeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLPrefixedNamespaceAttributeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLPrefixedNamespaceAttributeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLDefaultNamespaceAttributeNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLDefaultNamespaceAttributeName;
    }
    XMLNS() {
        return this.getToken(vbParser.XMLNS, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLDefaultNamespaceAttributeName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLDefaultNamespaceAttributeName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLDefaultNamespaceAttributeName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLNamespaceNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.xMLNamespaceNameCharacter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLNamespaceNameCharacterContext);
            }
            else {
                return this.getTypedRuleContext(XMLNamespaceNameCharacterContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLNamespaceName;
    }
    XMLNamespaceNameStartCharacter() {
        return this.getToken(vbParser.XMLNamespaceNameStartCharacter, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLNamespaceName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLNamespaceName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLNamespaceName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLNamespaceNameCharacterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLNamespaceNameCharacter;
    }
    XMLLetter() {
        return this.getToken(vbParser.XMLLetter, 0);
    }
    ;
    UNDERSCORE() {
        return this.getToken(vbParser.UNDERSCORE, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLNamespaceNameCharacter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLNamespaceNameCharacter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLNamespaceNameCharacter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLQualifiedNameOrExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLQualifiedNameOrExpression;
    }
    xMLQualifiedName() {
        return this.getTypedRuleContext(XMLQualifiedNameContext, 0);
    }
    ;
    xMLEmbeddedExpression() {
        return this.getTypedRuleContext(XMLEmbeddedExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLQualifiedNameOrExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLQualifiedNameOrExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLQualifiedNameOrExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLQualifiedNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLQualifiedName;
    }
    xMLPrefixedName() {
        return this.getTypedRuleContext(XMLPrefixedNameContext, 0);
    }
    ;
    xMLUnprefixedName() {
        return this.getTypedRuleContext(XMLUnprefixedNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLQualifiedName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLQualifiedName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLQualifiedName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLPrefixedNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.xMLNamespaceName = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(XMLNamespaceNameContext);
            }
            else {
                return this.getTypedRuleContext(XMLNamespaceNameContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLPrefixedName;
    }
    COLON() {
        return this.getToken(vbParser.COLON, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLPrefixedName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLPrefixedName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLPrefixedName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLUnprefixedNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLUnprefixedName;
    }
    xMLNamespaceName() {
        return this.getTypedRuleContext(XMLNamespaceNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLUnprefixedName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLUnprefixedName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLUnprefixedName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLProcessingInstructionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.QUESTION_MARK = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.QUESTION_MARK);
            }
            else {
                return this.getToken(vbParser.QUESTION_MARK, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLProcessingInstruction;
    }
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    XMLProcessingTarget() {
        return this.getToken(vbParser.XMLProcessingTarget, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    XMLWhitespace() {
        return this.getToken(vbParser.XMLWhitespace, 0);
    }
    ;
    XMLProcessingValue() {
        return this.getToken(vbParser.XMLProcessingValue, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLProcessingInstruction(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLProcessingInstruction(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLProcessingInstruction(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLCommentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.MINUS = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.MINUS);
            }
            else {
                return this.getToken(vbParser.MINUS, i);
            }
        };
        this.XMLCommentCharacter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(vbParser.XMLCommentCharacter);
            }
            else {
                return this.getToken(vbParser.XMLCommentCharacter, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLComment;
    }
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    EXCLAMATION() {
        return this.getToken(vbParser.EXCLAMATION, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLComment(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLComment(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLComment(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class XMLCDATASectionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_xMLCDATASection;
    }
    LEFT_ARROW() {
        return this.getToken(vbParser.LEFT_ARROW, 0);
    }
    ;
    EXCLAMATION() {
        return this.getToken(vbParser.EXCLAMATION, 0);
    }
    ;
    RIGHT_ARROW() {
        return this.getToken(vbParser.RIGHT_ARROW, 0);
    }
    ;
    CDATA() {
        return this.getToken(vbParser.CDATA, 0);
    }
    ;
    LEFT_SQUARE_BRACKET() {
        return this.getToken(vbParser.LEFT_SQUARE_BRACKET, 0);
    }
    ;
    RIGHT_SQUARE_BRACKET() {
        return this.getToken(vbParser.RIGHT_SQUARE_BRACKET, 0);
    }
    ;
    XMLCDATASectionString() {
        return this.getToken(vbParser.XMLCDATASectionString, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterXMLCDATASection(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitXMLCDATASection(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitXMLCDATASection(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AwaitOperatorExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = vbParser.RULE_awaitOperatorExpression;
    }
    AWAIT() {
        return this.getToken(vbParser.AWAIT, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.enterAwaitOperatorExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof vbParserListener_js_1.default) {
            listener.exitAwaitOperatorExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof vbParserVisitor_js_1.default) {
            return visitor.visitAwaitOperatorExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
vbParser.StartContext = StartContext;
vbParser.HexDigitContext = HexDigitContext;
vbParser.DecimalDigitContext = DecimalDigitContext;
vbParser.OctalDigitContext = OctalDigitContext;
vbParser.AlphaCharacterContext = AlphaCharacterContext;
vbParser.BooleanLiteralContext = BooleanLiteralContext;
vbParser.IntLiteralContext = IntLiteralContext;
vbParser.HexLiteralContext = HexLiteralContext;
vbParser.OctalLiteralContext = OctalLiteralContext;
vbParser.IntegerLiteralContext = IntegerLiteralContext;
vbParser.IntegerLiteralValueContext = IntegerLiteralValueContext;
vbParser.FloatingPointLiteralContext = FloatingPointLiteralContext;
vbParser.FloatingPointLiteralValueContext = FloatingPointLiteralValueContext;
vbParser.ExponentContext = ExponentContext;
vbParser.SignContext = SignContext;
vbParser.SingleTypeCharacterContext = SingleTypeCharacterContext;
vbParser.DoubleTypeCharacterContext = DoubleTypeCharacterContext;
vbParser.LongTypeCharacterContext = LongTypeCharacterContext;
vbParser.StringTypeCharacterContext = StringTypeCharacterContext;
vbParser.IntegerTypeCharacterContext = IntegerTypeCharacterContext;
vbParser.DecimalTypeCharacterContext = DecimalTypeCharacterContext;
vbParser.IntegralTypeCharacterContext = IntegralTypeCharacterContext;
vbParser.FloatingPointTypeCharacterContext = FloatingPointTypeCharacterContext;
vbParser.MonthValueContext = MonthValueContext;
vbParser.DayValueContext = DayValueContext;
vbParser.YearValueContext = YearValueContext;
vbParser.HourValueContext = HourValueContext;
vbParser.MinuteValueContext = MinuteValueContext;
vbParser.SecondValueContext = SecondValueContext;
vbParser.AmpmContext = AmpmContext;
vbParser.DateValueContext = DateValueContext;
vbParser.TimeValueContext = TimeValueContext;
vbParser.DateOrTimeContext = DateOrTimeContext;
vbParser.DateLiteralContext = DateLiteralContext;
vbParser.StringCharacterContext = StringCharacterContext;
vbParser.StringLiteralContext = StringLiteralContext;
vbParser.CharacterLiteralContext = CharacterLiteralContext;
vbParser.IdentifierStartContext = IdentifierStartContext;
vbParser.IdentifierNameContext = IdentifierNameContext;
vbParser.IdentifierCharacterContext = IdentifierCharacterContext;
vbParser.IdentifierContext = IdentifierContext;
vbParser.IdentifierOrKeywordContext = IdentifierOrKeywordContext;
vbParser.TypeCharacterContext = TypeCharacterContext;
vbParser.LiteralContext = LiteralContext;
vbParser.ElseIfContext = ElseIfContext;
vbParser.CCStartContext = CCStartContext;
vbParser.CCStatementContext = CCStatementContext;
vbParser.CCExpressionContext = CCExpressionContext;
vbParser.CCParenthesizedExpressionContext = CCParenthesizedExpressionContext;
vbParser.CCSimpleNameExpressionContext = CCSimpleNameExpressionContext;
vbParser.CCCastExpressionContext = CCCastExpressionContext;
vbParser.CCPlusMinusContext = CCPlusMinusContext;
vbParser.CCUnaryOperatorContext = CCUnaryOperatorContext;
vbParser.CCBinaryOperatorContext = CCBinaryOperatorContext;
vbParser.CCConditionalExpressionContext = CCConditionalExpressionContext;
vbParser.CCConstantDeclarationContext = CCConstantDeclarationContext;
vbParser.CCIfGroupContext = CCIfGroupContext;
vbParser.CCElseIfGroupContext = CCElseIfGroupContext;
vbParser.CCElseGroupContext = CCElseGroupContext;
vbParser.RegionStartContext = RegionStartContext;
vbParser.RegionStatementContext = RegionStatementContext;
vbParser.RegionGroupContext = RegionGroupContext;
vbParser.AccessModifierContext = AccessModifierContext;
vbParser.TypeParameterListContext = TypeParameterListContext;
vbParser.TypeParameterContext = TypeParameterContext;
vbParser.VarianceModifierContext = VarianceModifierContext;
vbParser.TypeParameterConstraintsContext = TypeParameterConstraintsContext;
vbParser.ConstraintListContext = ConstraintListContext;
vbParser.ConstraintContext = ConstraintContext;
vbParser.AttributesContext = AttributesContext;
vbParser.AttributeBlockContext = AttributeBlockContext;
vbParser.AttributeListContext = AttributeListContext;
vbParser.AttributeContext = AttributeContext;
vbParser.AttributeModifierContext = AttributeModifierContext;
vbParser.AttributeArgumentsContext = AttributeArgumentsContext;
vbParser.AttributePositionalArgumentListContext = AttributePositionalArgumentListContext;
vbParser.VariablePropertyInitializerListContext = VariablePropertyInitializerListContext;
vbParser.VariablePropertyInitializerContext = VariablePropertyInitializerContext;
vbParser.AttributeArgumentExpressionContext = AttributeArgumentExpressionContext;
vbParser.StatementTerminatorContext = StatementTerminatorContext;
vbParser.AttributesStatementContext = AttributesStatementContext;
vbParser.OptionStatementContext = OptionStatementContext;
vbParser.OptionExplicitStatementContext = OptionExplicitStatementContext;
vbParser.OnOffContext = OnOffContext;
vbParser.OptionStrictStatementContext = OptionStrictStatementContext;
vbParser.OptionCompareStatementContext = OptionCompareStatementContext;
vbParser.CompareOptionContext = CompareOptionContext;
vbParser.OptionInferStatementContext = OptionInferStatementContext;
vbParser.ImportsStatementContext = ImportsStatementContext;
vbParser.ImportsClausesContext = ImportsClausesContext;
vbParser.ImportsClauseContext = ImportsClauseContext;
vbParser.AliasImportsClauseContext = AliasImportsClauseContext;
vbParser.MembersImportsClauseContext = MembersImportsClauseContext;
vbParser.XMLNamespaceImportsClauseContext = XMLNamespaceImportsClauseContext;
vbParser.XMLNamespaceValueContext = XMLNamespaceValueContext;
vbParser.NamespaceDeclarationContext = NamespaceDeclarationContext;
vbParser.NamespaceNameContext = NamespaceNameContext;
vbParser.RelativeNamespaceNameContext = RelativeNamespaceNameContext;
vbParser.NamespaceMemberDeclarationContext = NamespaceMemberDeclarationContext;
vbParser.TypeDeclarationContext = TypeDeclarationContext;
vbParser.NonModuleDeclarationContext = NonModuleDeclarationContext;
vbParser.TypeNameContext = TypeNameContext;
vbParser.NonArrayTypeNameContext = NonArrayTypeNameContext;
vbParser.SimpleTypeNameContext = SimpleTypeNameContext;
vbParser.QualifiedTypeNameContext = QualifiedTypeNameContext;
vbParser.TypeArgumentsContext = TypeArgumentsContext;
vbParser.TypeArgumentListContext = TypeArgumentListContext;
vbParser.BuiltInTypeNameContext = BuiltInTypeNameContext;
vbParser.TypeModifierContext = TypeModifierContext;
vbParser.IdentifierModifiersContext = IdentifierModifiersContext;
vbParser.NullableNameModifierContext = NullableNameModifierContext;
vbParser.TypeImplementsClauseContext = TypeImplementsClauseContext;
vbParser.TypeImplementsContext = TypeImplementsContext;
vbParser.PrimitiveTypeNameContext = PrimitiveTypeNameContext;
vbParser.NumericTypeNameContext = NumericTypeNameContext;
vbParser.IntegralTypeNameContext = IntegralTypeNameContext;
vbParser.FloatingPointTypeNameContext = FloatingPointTypeNameContext;
vbParser.EnumDeclarationContext = EnumDeclarationContext;
vbParser.EnumMemberDeclarationContext = EnumMemberDeclarationContext;
vbParser.ClassDeclarationContext = ClassDeclarationContext;
vbParser.ClassModifierContext = ClassModifierContext;
vbParser.ClassBaseContext = ClassBaseContext;
vbParser.ClassMemberDeclarationContext = ClassMemberDeclarationContext;
vbParser.StructureDeclarationContext = StructureDeclarationContext;
vbParser.StructureModifierContext = StructureModifierContext;
vbParser.StructMemberDeclarationContext = StructMemberDeclarationContext;
vbParser.ModuleDeclarationContext = ModuleDeclarationContext;
vbParser.ModuleMemberDeclarationContext = ModuleMemberDeclarationContext;
vbParser.InterfaceDeclarationContext = InterfaceDeclarationContext;
vbParser.InterfaceBaseContext = InterfaceBaseContext;
vbParser.InterfaceBasesContext = InterfaceBasesContext;
vbParser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext;
vbParser.ArrayTypeNameContext = ArrayTypeNameContext;
vbParser.ArrayTypeModifiersContext = ArrayTypeModifiersContext;
vbParser.ArrayTypeModifierContext = ArrayTypeModifierContext;
vbParser.RankListContext = RankListContext;
vbParser.ArrayNameModifierContext = ArrayNameModifierContext;
vbParser.DelegateDeclarationContext = DelegateDeclarationContext;
vbParser.MethodSignatureContext = MethodSignatureContext;
vbParser.ImplementsClauseContext = ImplementsClauseContext;
vbParser.ImplementsListContext = ImplementsListContext;
vbParser.InterfaceMemberSpecifierContext = InterfaceMemberSpecifierContext;
vbParser.MethodMemberDeclarationContext = MethodMemberDeclarationContext;
vbParser.InterfaceMethodMemberDeclarationContext = InterfaceMethodMemberDeclarationContext;
vbParser.MethodDeclarationContext = MethodDeclarationContext;
vbParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;
vbParser.SubSignatureContext = SubSignatureContext;
vbParser.FunctionSignatureContext = FunctionSignatureContext;
vbParser.SubDeclarationContext = SubDeclarationContext;
vbParser.MustOverrideSubDeclarationContext = MustOverrideSubDeclarationContext;
vbParser.InterfaceSubDeclarationContext = InterfaceSubDeclarationContext;
vbParser.FunctionDeclarationContext = FunctionDeclarationContext;
vbParser.MustOverrideFunctionDeclarationContext = MustOverrideFunctionDeclarationContext;
vbParser.InterfaceFunctionDeclarationContext = InterfaceFunctionDeclarationContext;
vbParser.ProcedureModifierContext = ProcedureModifierContext;
vbParser.MustOverrideProcedureModifierContext = MustOverrideProcedureModifierContext;
vbParser.InterfaceProcedureModifierContext = InterfaceProcedureModifierContext;
vbParser.HandlesOrImplementsContext = HandlesOrImplementsContext;
vbParser.ExternalMethodDeclarationContext = ExternalMethodDeclarationContext;
vbParser.ExternalSubDeclarationContext = ExternalSubDeclarationContext;
vbParser.ExternalFunctionDeclarationContext = ExternalFunctionDeclarationContext;
vbParser.ExternalMethodModifierContext = ExternalMethodModifierContext;
vbParser.CharsetModifierContext = CharsetModifierContext;
vbParser.LibraryClauseContext = LibraryClauseContext;
vbParser.AliasClauseContext = AliasClauseContext;
vbParser.ParameterListContext = ParameterListContext;
vbParser.ParameterContext = ParameterContext;
vbParser.ParameterModifierContext = ParameterModifierContext;
vbParser.ParameterIdentifierContext = ParameterIdentifierContext;
vbParser.HandlesClauseContext = HandlesClauseContext;
vbParser.EventHandlesListContext = EventHandlesListContext;
vbParser.EventMemberSpecifierContext = EventMemberSpecifierContext;
vbParser.ConstructorMemberDeclarationContext = ConstructorMemberDeclarationContext;
vbParser.ConstructorModifierContext = ConstructorModifierContext;
vbParser.EventMemberDeclarationContext = EventMemberDeclarationContext;
vbParser.RegularEventMemberDeclarationContext = RegularEventMemberDeclarationContext;
vbParser.InterfaceEventMemberDeclarationContext = InterfaceEventMemberDeclarationContext;
vbParser.ParametersOrTypeContext = ParametersOrTypeContext;
vbParser.EventModifiersContext = EventModifiersContext;
vbParser.InterfaceEventModifiersContext = InterfaceEventModifiersContext;
vbParser.CustomEventMemberDeclarationContext = CustomEventMemberDeclarationContext;
vbParser.EventAccessorDeclarationContext = EventAccessorDeclarationContext;
vbParser.AddHandlerDeclarationContext = AddHandlerDeclarationContext;
vbParser.RemoveHandlerDeclarationContext = RemoveHandlerDeclarationContext;
vbParser.RaiseEventDeclarationContext = RaiseEventDeclarationContext;
vbParser.ConstantMemberDeclarationContext = ConstantMemberDeclarationContext;
vbParser.ConstantModifierContext = ConstantModifierContext;
vbParser.ConstantDeclaratorsContext = ConstantDeclaratorsContext;
vbParser.ConstantDeclaratorContext = ConstantDeclaratorContext;
vbParser.VariableMemberDeclarationContext = VariableMemberDeclarationContext;
vbParser.VariableModifierContext = VariableModifierContext;
vbParser.VariableDeclaratorsContext = VariableDeclaratorsContext;
vbParser.VariableDeclaratorContext = VariableDeclaratorContext;
vbParser.VariableIdentifiersContext = VariableIdentifiersContext;
vbParser.VariableIdentifierContext = VariableIdentifierContext;
vbParser.ArraySizeInitializationModifierContext = ArraySizeInitializationModifierContext;
vbParser.BoundListContext = BoundListContext;
vbParser.BoundContext = BoundContext;
vbParser.PropertyMemberDeclarationContext = PropertyMemberDeclarationContext;
vbParser.PropertySignatureContext = PropertySignatureContext;
vbParser.RegularPropertyMemberDeclarationContext = RegularPropertyMemberDeclarationContext;
vbParser.MustOverridePropertyMemberDeclarationContext = MustOverridePropertyMemberDeclarationContext;
vbParser.AutoPropertyMemberDeclarationContext = AutoPropertyMemberDeclarationContext;
vbParser.InterfacePropertyMemberDeclarationContext = InterfacePropertyMemberDeclarationContext;
vbParser.AutoPropertyModifierContext = AutoPropertyModifierContext;
vbParser.PropertyModifierContext = PropertyModifierContext;
vbParser.MustOverridePropertyModifierContext = MustOverridePropertyModifierContext;
vbParser.InterfacePropertyModifierContext = InterfacePropertyModifierContext;
vbParser.PropertyAccessorDeclarationContext = PropertyAccessorDeclarationContext;
vbParser.PropertyGetDeclarationContext = PropertyGetDeclarationContext;
vbParser.PropertySetDeclarationContext = PropertySetDeclarationContext;
vbParser.OperatorDeclarationContext = OperatorDeclarationContext;
vbParser.OperatorModifierContext = OperatorModifierContext;
vbParser.OverloadableOperatorContext = OverloadableOperatorContext;
vbParser.StatementContext = StatementContext;
vbParser.BlockContext = BlockContext;
vbParser.LabelDeclarationStatementContext = LabelDeclarationStatementContext;
vbParser.LabelNameContext = LabelNameContext;
vbParser.StatementsContext = StatementsContext;
vbParser.LocalDeclarationStatementContext = LocalDeclarationStatementContext;
vbParser.LocalModifierContext = LocalModifierContext;
vbParser.WithStatementContext = WithStatementContext;
vbParser.SyncLockStatementContext = SyncLockStatementContext;
vbParser.EventStatementContext = EventStatementContext;
vbParser.RaiseEventStatementContext = RaiseEventStatementContext;
vbParser.AddHandlerStatementContext = AddHandlerStatementContext;
vbParser.RemoveHandlerStatementContext = RemoveHandlerStatementContext;
vbParser.AssignmentStatementContext = AssignmentStatementContext;
vbParser.RegularAssignmentStatementContext = RegularAssignmentStatementContext;
vbParser.CompoundAssignmentStatementContext = CompoundAssignmentStatementContext;
vbParser.CompoundBinaryOperatorContext = CompoundBinaryOperatorContext;
vbParser.MidAssignmentStatementContext = MidAssignmentStatementContext;
vbParser.InvocationStatementContext = InvocationStatementContext;
vbParser.ConditionalStatementContext = ConditionalStatementContext;
vbParser.IfStatementContext = IfStatementContext;
vbParser.BlockIfStatementContext = BlockIfStatementContext;
vbParser.ElseIfStatementContext = ElseIfStatementContext;
vbParser.ElseStatementContext = ElseStatementContext;
vbParser.LineIfThenStatementContext = LineIfThenStatementContext;
vbParser.SelectStatementContext = SelectStatementContext;
vbParser.CaseStatementContext = CaseStatementContext;
vbParser.CaseClausesContext = CaseClausesContext;
vbParser.CaseClauseContext = CaseClauseContext;
vbParser.ComparisonOperatorContext = ComparisonOperatorContext;
vbParser.CaseElseStatementContext = CaseElseStatementContext;
vbParser.LoopStatementContext = LoopStatementContext;
vbParser.WhileStatementContext = WhileStatementContext;
vbParser.DoLoopStatementContext = DoLoopStatementContext;
vbParser.DoTopLoopStatementContext = DoTopLoopStatementContext;
vbParser.DoBottomLoopStatementContext = DoBottomLoopStatementContext;
vbParser.WhileOrUntilContext = WhileOrUntilContext;
vbParser.ForStatementContext = ForStatementContext;
vbParser.LoopControlVariableContext = LoopControlVariableContext;
vbParser.NextExpressionListContext = NextExpressionListContext;
vbParser.ForEachStatementContext = ForEachStatementContext;
vbParser.ErrorHandlingStatementContext = ErrorHandlingStatementContext;
vbParser.StructuredErrorStatementContext = StructuredErrorStatementContext;
vbParser.TryStatementContext = TryStatementContext;
vbParser.FinallyStatementContext = FinallyStatementContext;
vbParser.CatchStatementContext = CatchStatementContext;
vbParser.ThrowStatementContext = ThrowStatementContext;
vbParser.UnstructuredErrorStatementContext = UnstructuredErrorStatementContext;
vbParser.ErrorStatementContext = ErrorStatementContext;
vbParser.OnErrorStatementContext = OnErrorStatementContext;
vbParser.ErrorClauseContext = ErrorClauseContext;
vbParser.ResumeStatementContext = ResumeStatementContext;
vbParser.ResumeClauseContext = ResumeClauseContext;
vbParser.BranchStatementContext = BranchStatementContext;
vbParser.GoToStatementContext = GoToStatementContext;
vbParser.ExitStatementContext = ExitStatementContext;
vbParser.ExitKindContext = ExitKindContext;
vbParser.ContinueStatementContext = ContinueStatementContext;
vbParser.ContinueKindContext = ContinueKindContext;
vbParser.StopStatementContext = StopStatementContext;
vbParser.EndStatementContext = EndStatementContext;
vbParser.ReturnStatementContext = ReturnStatementContext;
vbParser.ArrayHandlingStatementContext = ArrayHandlingStatementContext;
vbParser.RedimStatementContext = RedimStatementContext;
vbParser.RedimClausesContext = RedimClausesContext;
vbParser.RedimClauseContext = RedimClauseContext;
vbParser.EraseStatementContext = EraseStatementContext;
vbParser.EraseExpressionsContext = EraseExpressionsContext;
vbParser.UsingStatementContext = UsingStatementContext;
vbParser.UsingResourcesContext = UsingResourcesContext;
vbParser.AwaitStatementContext = AwaitStatementContext;
vbParser.YieldStatementContext = YieldStatementContext;
vbParser.ExpressionContext = ExpressionContext;
vbParser.MemberAccessBaseContext = MemberAccessBaseContext;
vbParser.ConstantExpressionContext = ConstantExpressionContext;
vbParser.SimpleExpressionContext = SimpleExpressionContext;
vbParser.LiteralExpressionContext = LiteralExpressionContext;
vbParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;
vbParser.InstanceExpressionContext = InstanceExpressionContext;
vbParser.SimpleNameExpressionContext = SimpleNameExpressionContext;
vbParser.AddressOfExpressionContext = AddressOfExpressionContext;
vbParser.GetTypeExpressionContext = GetTypeExpressionContext;
vbParser.GetTypeTypeNameContext = GetTypeTypeNameContext;
vbParser.QualifiedOpenTypeNameContext = QualifiedOpenTypeNameContext;
vbParser.TypeArityListContext = TypeArityListContext;
vbParser.CommaListContext = CommaListContext;
vbParser.TypeOfIsExpressionContext = TypeOfIsExpressionContext;
vbParser.GetXmlNamespaceExpressionContext = GetXmlNamespaceExpressionContext;
vbParser.ArgumentListContext = ArgumentListContext;
vbParser.PositionalArgumentListContext = PositionalArgumentListContext;
vbParser.NamedArgumentListContext = NamedArgumentListContext;
vbParser.NewExpressionContext = NewExpressionContext;
vbParser.ObjectCreationExpressionContext = ObjectCreationExpressionContext;
vbParser.ObjectCreationExpressionInitializerContext = ObjectCreationExpressionInitializerContext;
vbParser.ObjectMemberInitializerContext = ObjectMemberInitializerContext;
vbParser.FieldInitializerListContext = FieldInitializerListContext;
vbParser.FieldInitializerContext = FieldInitializerContext;
vbParser.ObjectCollectionInitializerContext = ObjectCollectionInitializerContext;
vbParser.CollectionInitializerContext = CollectionInitializerContext;
vbParser.CollectionElementListContext = CollectionElementListContext;
vbParser.CollectionElementContext = CollectionElementContext;
vbParser.ArrayExpressionContext = ArrayExpressionContext;
vbParser.ArrayCreationExpressionContext = ArrayCreationExpressionContext;
vbParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;
vbParser.AnonymousObjectCreationExpressionContext = AnonymousObjectCreationExpressionContext;
vbParser.CastExpressionContext = CastExpressionContext;
vbParser.CastTargetContext = CastTargetContext;
vbParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;
vbParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;
vbParser.BooleanExpressionContext = BooleanExpressionContext;
vbParser.LambdaExpressionContext = LambdaExpressionContext;
vbParser.SingleLineLambdaContext = SingleLineLambdaContext;
vbParser.MultiLineLambdaContext = MultiLineLambdaContext;
vbParser.MultiLineFunctionLambdaContext = MultiLineFunctionLambdaContext;
vbParser.MultiLineSubLambdaContext = MultiLineSubLambdaContext;
vbParser.LambdaModifierContext = LambdaModifierContext;
vbParser.QueryExpressionContext = QueryExpressionContext;
vbParser.FromOrAggregateQueryOperatorContext = FromOrAggregateQueryOperatorContext;
vbParser.QueryOperatorContext = QueryOperatorContext;
vbParser.JoinOrGroupJoinQueryOperatorContext = JoinOrGroupJoinQueryOperatorContext;
vbParser.CollectionRangeVariableDeclarationListContext = CollectionRangeVariableDeclarationListContext;
vbParser.CollectionRangeVariableDeclarationContext = CollectionRangeVariableDeclarationContext;
vbParser.ExpressionRangeVariableDeclarationListContext = ExpressionRangeVariableDeclarationListContext;
vbParser.ExpressionRangeVariableDeclarationContext = ExpressionRangeVariableDeclarationContext;
vbParser.FromQueryOperatorContext = FromQueryOperatorContext;
vbParser.JoinQueryOperatorContext = JoinQueryOperatorContext;
vbParser.JoinConditionListContext = JoinConditionListContext;
vbParser.JoinConditionContext = JoinConditionContext;
vbParser.LetQueryOperatorContext = LetQueryOperatorContext;
vbParser.SelectQueryOperatorContext = SelectQueryOperatorContext;
vbParser.DistinctQueryOperatorContext = DistinctQueryOperatorContext;
vbParser.WhereQueryOperatorContext = WhereQueryOperatorContext;
vbParser.PartitionQueryOperatorContext = PartitionQueryOperatorContext;
vbParser.OrderByQueryOperatorContext = OrderByQueryOperatorContext;
vbParser.OrderExpressionListContext = OrderExpressionListContext;
vbParser.OrderExpressionContext = OrderExpressionContext;
vbParser.OrderingContext = OrderingContext;
vbParser.GroupByQueryOperatorContext = GroupByQueryOperatorContext;
vbParser.AggregateQueryOperatorContext = AggregateQueryOperatorContext;
vbParser.GroupJoinQueryOperatorContext = GroupJoinQueryOperatorContext;
vbParser.ConditionalExpressionContext = ConditionalExpressionContext;
vbParser.XMLLiteralExpressionContext = XMLLiteralExpressionContext;
vbParser.XMLEmbeddedExpressionContext = XMLEmbeddedExpressionContext;
vbParser.XMLDocumentContext = XMLDocumentContext;
vbParser.XMLDocumentPrologueContext = XMLDocumentPrologueContext;
vbParser.XMLVersionContext = XMLVersionContext;
vbParser.XMLVersionNumberValueContext = XMLVersionNumberValueContext;
vbParser.XMLEncodingContext = XMLEncodingContext;
vbParser.XMLEncodingNameValueContext = XMLEncodingNameValueContext;
vbParser.XMLEncodingNameContext = XMLEncodingNameContext;
vbParser.XMLEncodingNameCharacterContext = XMLEncodingNameCharacterContext;
vbParser.XMLStandaloneContext = XMLStandaloneContext;
vbParser.XMLYesNoValueContext = XMLYesNoValueContext;
vbParser.XMLYesNoContext = XMLYesNoContext;
vbParser.XMLMiscContext = XMLMiscContext;
vbParser.XMLDocumentBodyContext = XMLDocumentBodyContext;
vbParser.XMLElementContext = XMLElementContext;
vbParser.XMLEmptyElementContext = XMLEmptyElementContext;
vbParser.XMLElementStartContext = XMLElementStartContext;
vbParser.XMLElementEndContext = XMLElementEndContext;
vbParser.XMLContentContext = XMLContentContext;
vbParser.XMLNestedContentContext = XMLNestedContentContext;
vbParser.XMLAttributeContext = XMLAttributeContext;
vbParser.XMLAttributeNameContext = XMLAttributeNameContext;
vbParser.XMLAttributeValueContext = XMLAttributeValueContext;
vbParser.XMLAttributeDoubleQuoteValueCharacterContext = XMLAttributeDoubleQuoteValueCharacterContext;
vbParser.XMLAttributeSingleQuoteValueCharacterContext = XMLAttributeSingleQuoteValueCharacterContext;
vbParser.XMLReferenceContext = XMLReferenceContext;
vbParser.XMLEntityReferenceContext = XMLEntityReferenceContext;
vbParser.XMLCharacterReferenceContext = XMLCharacterReferenceContext;
vbParser.XMLNamespaceAttributeNameContext = XMLNamespaceAttributeNameContext;
vbParser.XMLPrefixedNamespaceAttributeNameContext = XMLPrefixedNamespaceAttributeNameContext;
vbParser.XMLDefaultNamespaceAttributeNameContext = XMLDefaultNamespaceAttributeNameContext;
vbParser.XMLNamespaceNameContext = XMLNamespaceNameContext;
vbParser.XMLNamespaceNameCharacterContext = XMLNamespaceNameCharacterContext;
vbParser.XMLQualifiedNameOrExpressionContext = XMLQualifiedNameOrExpressionContext;
vbParser.XMLQualifiedNameContext = XMLQualifiedNameContext;
vbParser.XMLPrefixedNameContext = XMLPrefixedNameContext;
vbParser.XMLUnprefixedNameContext = XMLUnprefixedNameContext;
vbParser.XMLProcessingInstructionContext = XMLProcessingInstructionContext;
vbParser.XMLCommentContext = XMLCommentContext;
vbParser.XMLCDATASectionContext = XMLCDATASectionContext;
vbParser.AwaitOperatorExpressionContext = AwaitOperatorExpressionContext;
