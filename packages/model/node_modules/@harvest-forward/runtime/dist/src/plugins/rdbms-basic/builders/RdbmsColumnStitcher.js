"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdbmsColumnStitcher = void 0;
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const SystemComponent_1 = require("../../../system/SystemComponent");
const ValueType_1 = require("../../../system/ValueType");
class RdbmsColumnStitcher extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'Column',
        });
        super('RdbmsColumnStitcher', 'An transformer that take rdbms columns and ensures that they are attached as children to their containing table', {
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(system, component) {
        const column = component;
        const schema = column.parent;
        const fullTableName = SystemComponent_1.SystemComponent.fullConstantCase(schema.constantCaseFullName, column.tableName);
        const storage = system.descendants[fullTableName];
        if (storage != null) {
            storage.addChild(column);
            column.storage = storage;
        }
        else
            this.logger.warn(`Column  ${column.constantCaseFullName} has no matching storage named ${fullTableName}`);
        return [];
    }
}
exports.RdbmsColumnStitcher = RdbmsColumnStitcher;
