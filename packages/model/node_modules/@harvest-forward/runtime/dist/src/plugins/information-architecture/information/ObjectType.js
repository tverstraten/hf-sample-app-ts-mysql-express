"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectType = void 0;
const pluralize_1 = __importDefault(require("pluralize"));
const SystemComponentComparator_1 = require("../../../system/SystemComponentComparator");
const ValueType_1 = require("../../../system/ValueType");
const validation_1 = require("../../validation");
const ObjectTypeDataMember_1 = require("./ObjectTypeDataMember");
const ObjectTypeMember_1 = require("./ObjectTypeMember");
class ObjectType extends ValueType_1.ValueType {
    constructor(objectType, nameSpace, name, description, role) {
        super(objectType, nameSpace, name, description);
        this.componentType = role;
        this.inheritsFrom = [];
        this.derivations = [];
        this.implements = [];
        this._members = {};
        this._dataMembers = {};
        this._rules = [];
        this.updateable = true;
        if (pluralize_1.default.isPlural(name))
            this.pluralName = name;
        else
            this.pluralName = pluralize_1.default.plural(name);
        if (pluralize_1.default.isSingular(name))
            this.singularName = name;
        else
            this.singularName = pluralize_1.default.singular(name);
        this.specifiedDependencies = [];
    }
    get isObject() {
        return !this.isExternal;
    }
    get membersMap() {
        return this._members;
    }
    get members() {
        return Object.values(this._members).sort(SystemComponentComparator_1.SystemComponentComparator);
    }
    get dataMembersMap() {
        return this._dataMembers;
    }
    get dataMembers() {
        return Object.values(this._dataMembers).sort(SystemComponentComparator_1.SystemComponentComparator);
    }
    addChild(child) {
        super.addChild(child);
        if (child instanceof ObjectTypeDataMember_1.ObjectTypeDataMember) {
            this._members[child.name] = child;
            this._dataMembers[child.name] = child;
        }
        else if (child instanceof ObjectTypeMember_1.ObjectTypeMember) {
            this._members[child.name] = child;
        }
        else if (child instanceof validation_1.AbstractRule) {
            this._rules.push(child);
        }
    }
    removeChild(child) {
        if (child instanceof ObjectTypeDataMember_1.ObjectTypeDataMember) {
            delete this._members[child.name];
            delete this._dataMembers[child.name];
        }
        else if (child instanceof ObjectTypeMember_1.ObjectTypeMember) {
            delete this._members[child.name];
        }
        else if (child instanceof validation_1.AbstractRule) {
            const index = this._rules.indexOf(child);
            this._rules.splice(index, 1);
        }
        return super.removeChild(child);
    }
    get allReferences() {
        const result = [];
        const _thisThis = this;
        Object.keys(this._members).forEach((memberName) => {
            const member = this._members[memberName];
            const referents = member.allReferences;
            referents.forEach((referent) => {
                let eventualReferent = referent;
                while (eventualReferent.isCollection && eventualReferent.collectedType != null) {
                    eventualReferent = eventualReferent.collectedType;
                }
                if (!result.includes(eventualReferent) && eventualReferent != _thisThis)
                    result.push(eventualReferent);
            });
        });
        return result.sort(SystemComponentComparator_1.SystemComponentComparator);
    }
    get nonPrimitiveReferences() {
        return this.allReferences.filter((item) => !item.primitive);
    }
    get primitiveReferences() {
        return this.allReferences.filter((item) => item.primitive);
    }
    get allDependencies() {
        const result = this.allReferences;
        this.specifiedDependencies.forEach((reference) => {
            if (!result.includes(reference))
                result.push(reference);
        });
        return result;
    }
    get packageName() {
        const parent = this.parent;
        const parentName = parent.fullConstantCaseName;
        const packageName = this.fullConstantCaseName.replace(`${parentName}/`, '');
        return packageName;
    }
    get rules() {
        return this._rules;
    }
}
exports.ObjectType = ObjectType;
