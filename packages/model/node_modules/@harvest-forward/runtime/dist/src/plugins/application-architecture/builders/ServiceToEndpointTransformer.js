"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceToEndpointTransformer = void 0;
const pluralize_1 = __importDefault(require("pluralize"));
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const ComponentOrigin_1 = require("../../../system/ComponentOrigin");
const Permanence_1 = require("../../../system/Permanence");
const SystemComponentArtifact_1 = require("../../../system/SystemComponentArtifact");
const SystemComponentType_1 = require("../../../system/SystemComponentType");
const ValueType_1 = require("../../../system/ValueType");
const information_architecture_1 = require("../../information-architecture");
class ServiceToEndpointTransformer extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'Class',
            componentType: 'service',
        });
        super('ServiceToEndpointTransformer', 'A transformer that creates a service layer based on the information model and data access layer', {
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(system, component) {
        const serviceClass = component;
        const controllerName = `${serviceClass.name.replace(/Service$/, '')}Api`;
        const controllerDescription = `A class to performs actions against the model class ${serviceClass.name}. Many actions expose access to the data itself`;
        const controllerClass = new information_architecture_1.Class('service', controllerName, controllerDescription, SystemComponentType_1.SystemComponentType.serviceEndpoint);
        controllerClass.singularName = controllerName;
        controllerClass.pluralName = pluralize_1.default.plural(serviceClass.name);
        controllerClass.operatesOnBehalfOf = serviceClass.operatesOnBehalfOf;
        controllerClass.permanence = Permanence_1.Permanence.constant;
        controllerClass.informational = false;
        controllerClass.functional = true;
        controllerClass.origin = ComponentOrigin_1.ComponentOrigin.manufactured;
        system.addChild(controllerClass);
        return [new SystemComponentArtifact_1.SystemComponentArtifact(controllerClass)];
    }
}
exports.ServiceToEndpointTransformer = ServiceToEndpointTransformer;
