"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptEnumValueHarvester = void 0;
const typescript_1 = __importStar(require("typescript"));
const ComponentOrigin_1 = require("../../system/ComponentOrigin");
const Permanence_1 = require("../../system/Permanence");
const SystemComponentArtifact_1 = require("../../system/SystemComponentArtifact");
const information_architecture_1 = require("../information-architecture");
const AbstractTypeScriptAstHarvester_1 = require("./AbstractTypeScriptAstHarvester");
class TypeScriptEnumValueHarvester extends AbstractTypeScriptAstHarvester_1.AbstractTypeScriptAstHarvester {
    constructor(configurationValues) {
        super('TypeScriptEnumValueHarvester', 'A harvester that reads enumeration values from typescript files', {}, configurationValues);
    }
    async harvestFromAst(system, ast) {
        const results = [];
        let representedEnum;
        const model = information_architecture_1.InformationModel.fromSystem(system);
        try {
            typescript_1.default.forEachChild(ast, function visit(node) {
                switch (node.kind) {
                    case typescript_1.SyntaxKind.EnumDeclaration:
                        const declaration = node;
                        const name = declaration.name;
                        const enumName = name.getText(ast);
                        const jsDoc = node.jsDoc;
                        let documentationText = '';
                        if (jsDoc != null) {
                            jsDoc.forEach((jsDocItem) => {
                                documentationText += jsDocItem.comment;
                            });
                        }
                        representedEnum = new information_architecture_1.Enumeration(model.fullConstantCaseName, enumName, documentationText, []);
                        representedEnum.permanence = Permanence_1.Permanence.constant;
                        representedEnum.informational = true;
                        representedEnum.functional = false;
                        representedEnum.origin = ComponentOrigin_1.ComponentOrigin.harvested;
                        model.addChild(representedEnum);
                        results.push(new SystemComponentArtifact_1.SystemComponentArtifact(representedEnum));
                        typescript_1.default.forEachChild(node, visit);
                        break;
                    case typescript_1.SyntaxKind.EnumMember:
                        const member = node.name;
                        const memberName = member.getText(ast);
                        const memberJsDoc = node.jsDoc;
                        let memberDocumentationText = '';
                        if (memberJsDoc != null) {
                            memberJsDoc.forEach((jsDocItem) => {
                                memberDocumentationText += jsDocItem.comment;
                            });
                        }
                        const initializer = node.initializer;
                        let initializerText;
                        if (initializer != null)
                            initializerText = initializer.getText(ast);
                        const enumValue = new information_architecture_1.EnumeratedValue(representedEnum.constantCaseFullName, memberName, memberDocumentationText, initializerText);
                        enumValue.permanence = Permanence_1.Permanence.constant;
                        enumValue.informational = true;
                        enumValue.functional = false;
                        enumValue.origin = ComponentOrigin_1.ComponentOrigin.harvested;
                        representedEnum.addChild(enumValue);
                        break;
                    default:
                        break;
                }
            });
        }
        catch (problem) {
            this.logger.error(`harvestFromAst(failed) ${problem}`);
        }
        return results;
    }
}
exports.TypeScriptEnumValueHarvester = TypeScriptEnumValueHarvester;
