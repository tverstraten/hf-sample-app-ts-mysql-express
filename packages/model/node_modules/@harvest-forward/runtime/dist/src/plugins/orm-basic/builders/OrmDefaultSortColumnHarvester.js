"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrmDefaultSortColumnHarvester = void 0;
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const ValueType_1 = require("../../../system/ValueType");
const information_architecture_1 = require("../../information-architecture");
class OrmDefaultSortColumnHarvester extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'ObjectTypeTableMapping',
        });
        super('OrmDefaultSortColumnHarvester', 'A harvester that takes columns from tables in sql schema and creates properties in classes in an information model', {
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(__system, component) {
        const storageMapping = component;
        if (storageMapping != null && storageMapping.typeName != null) {
            const informationalClass = storageMapping.type;
            if (informationalClass != null && storageMapping.defaultSortByColumn == null) {
                let sortColumnName = 'createTime';
                if (informationalClass.dataMembersMap[sortColumnName] == null) {
                    if (informationalClass instanceof information_architecture_1.Class) {
                        const dataMember = informationalClass.identifyingProperty;
                        sortColumnName = dataMember?.orMapping?.columnName;
                    }
                }
                if (sortColumnName == null) {
                    sortColumnName = Object.keys(informationalClass.dataMembersMap).pop();
                }
                storageMapping.defaultSortByColumn = sortColumnName == null || sortColumnName == '' ? 'id' : sortColumnName;
            }
            else
                this.logger.warn(`buildInternal skipping ${storageMapping} for type named ${storageMapping.typeName}`);
        }
        else
            this.logger.warn(`buildInternal skipping ${storageMapping} for type named ${storageMapping.typeName}`);
        return [];
    }
}
exports.OrmDefaultSortColumnHarvester = OrmDefaultSortColumnHarvester;
