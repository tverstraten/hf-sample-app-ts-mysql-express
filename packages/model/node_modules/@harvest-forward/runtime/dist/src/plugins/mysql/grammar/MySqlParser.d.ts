export function MySqlParser(input: any): this;
export class MySqlParser {
    constructor(input: any);
    _interp: any;
    ruleNames: string[];
    literalNames: (string | null)[];
    symbolicNames: (string | null)[];
    constructor: typeof MySqlParser;
    get atn(): any;
    root(): RootContext;
    state: number | undefined;
    sqlStatements(): SqlStatementsContext;
    sqlStatement(): SqlStatementContext;
    emptyStatement(): EmptyStatementContext;
    ddlStatement(): DdlStatementContext;
    dmlStatement(): DmlStatementContext;
    transactionStatement(): TransactionStatementContext;
    replicationStatement(): ReplicationStatementContext;
    preparedStatement(): PreparedStatementContext;
    compoundStatement(): CompoundStatementContext;
    administrationStatement(): AdministrationStatementContext;
    utilityStatement(): UtilityStatementContext;
    createDatabase(): CreateDatabaseContext;
    createEvent(): CreateEventContext;
    createIndex(): CreateIndexContext;
    createLogfileGroup(): CreateLogfileGroupContext;
    createProcedure(): CreateProcedureContext;
    createFunction(): CreateFunctionContext;
    createServer(): CreateServerContext;
    createTable(): CreateTableContext;
    createTablespaceInnodb(): CreateTablespaceInnodbContext;
    createTablespaceNdb(): CreateTablespaceNdbContext;
    createTrigger(): CreateTriggerContext;
    createView(): CreateViewContext;
    createDatabaseOption(): CreateDatabaseOptionContext;
    ownerStatement(): OwnerStatementContext;
    scheduleExpression(): ScheduleExpressionContext;
    timestampValue(): TimestampValueContext;
    intervalExpr(): IntervalExprContext;
    intervalType(): IntervalTypeContext;
    enableType(): EnableTypeContext;
    indexType(): IndexTypeContext;
    indexOption(): IndexOptionContext;
    procedureParameter(): ProcedureParameterContext;
    functionParameter(): FunctionParameterContext;
    routineOption(): RoutineOptionContext;
    serverOption(): ServerOptionContext;
    createDefinitions(): CreateDefinitionsContext;
    createDefinition(): CreateDefinitionContext;
    columnDefinition(): ColumnDefinitionContext;
    columnConstraint(): ColumnConstraintContext;
    tableConstraint(): TableConstraintContext;
    referenceDefinition(): ReferenceDefinitionContext;
    referenceAction(): ReferenceActionContext;
    referenceControlType(): ReferenceControlTypeContext;
    indexColumnDefinition(): IndexColumnDefinitionContext;
    tableOption(): TableOptionContext;
    tablespaceStorage(): TablespaceStorageContext;
    partitionDefinitions(): PartitionDefinitionsContext;
    partitionFunctionDefinition(): PartitionFunctionDefinitionContext;
    subpartitionFunctionDefinition(): SubpartitionFunctionDefinitionContext;
    partitionDefinition(): PartitionDefinitionContext;
    partitionDefinerAtom(): PartitionDefinerAtomContext;
    partitionDefinerVector(): PartitionDefinerVectorContext;
    subpartitionDefinition(): SubpartitionDefinitionContext;
    partitionOption(): PartitionOptionContext;
    alterDatabase(): AlterDatabaseContext;
    alterEvent(): AlterEventContext;
    alterFunction(): AlterFunctionContext;
    alterInstance(): AlterInstanceContext;
    alterLogfileGroup(): AlterLogfileGroupContext;
    alterProcedure(): AlterProcedureContext;
    alterServer(): AlterServerContext;
    alterTable(): AlterTableContext;
    alterTablespace(): AlterTablespaceContext;
    alterView(): AlterViewContext;
    alterSpecification(): AlterSpecificationContext;
    dropDatabase(): DropDatabaseContext;
    dropEvent(): DropEventContext;
    dropIndex(): DropIndexContext;
    dropLogfileGroup(): DropLogfileGroupContext;
    dropProcedure(): DropProcedureContext;
    dropFunction(): DropFunctionContext;
    dropServer(): DropServerContext;
    dropTable(): DropTableContext;
    dropTablespace(): DropTablespaceContext;
    dropTrigger(): DropTriggerContext;
    dropView(): DropViewContext;
    renameTable(): RenameTableContext;
    renameTableClause(): RenameTableClauseContext;
    truncateTable(): TruncateTableContext;
    callStatement(): CallStatementContext;
    deleteStatement(): DeleteStatementContext;
    doStatement(): DoStatementContext;
    handlerStatement(): HandlerStatementContext;
    insertStatement(): InsertStatementContext;
    loadDataStatement(): LoadDataStatementContext;
    loadXmlStatement(): LoadXmlStatementContext;
    replaceStatement(): ReplaceStatementContext;
    selectStatement(): SelectStatementContext;
    updateStatement(): UpdateStatementContext;
    insertStatementValue(): InsertStatementValueContext;
    updatedElement(): UpdatedElementContext;
    assignmentField(): AssignmentFieldContext;
    lockClause(): LockClauseContext;
    singleDeleteStatement(): SingleDeleteStatementContext;
    multipleDeleteStatement(): MultipleDeleteStatementContext;
    handlerOpenStatement(): HandlerOpenStatementContext;
    handlerReadIndexStatement(): HandlerReadIndexStatementContext;
    handlerReadStatement(): HandlerReadStatementContext;
    handlerCloseStatement(): HandlerCloseStatementContext;
    singleUpdateStatement(): SingleUpdateStatementContext;
    multipleUpdateStatement(): MultipleUpdateStatementContext;
    orderByClause(): OrderByClauseContext;
    orderByExpression(): OrderByExpressionContext;
    tableSources(): TableSourcesContext;
    tableSource(): TableSourceContext;
    tableSourceItem(): TableSourceItemContext;
    indexHint(): IndexHintContext;
    indexHintType(): IndexHintTypeContext;
    joinPart(): JoinPartContext;
    queryExpression(): QueryExpressionContext;
    queryExpressionNointo(): QueryExpressionNointoContext;
    querySpecification(): QuerySpecificationContext;
    querySpecificationNointo(): QuerySpecificationNointoContext;
    unionParenthesis(): UnionParenthesisContext;
    unionStatement(): UnionStatementContext;
    selectSpec(): SelectSpecContext;
    selectElements(): SelectElementsContext;
    selectElement(): SelectElementContext;
    selectIntoExpression(): SelectIntoExpressionContext;
    selectFieldsInto(): SelectFieldsIntoContext;
    selectLinesInto(): SelectLinesIntoContext;
    fromClause(): FromClauseContext;
    groupByItem(): GroupByItemContext;
    limitClause(): LimitClauseContext;
    limitClauseAtom(): LimitClauseAtomContext;
    startTransaction(): StartTransactionContext;
    beginWork(): BeginWorkContext;
    commitWork(): CommitWorkContext;
    rollbackWork(): RollbackWorkContext;
    savepointStatement(): SavepointStatementContext;
    rollbackStatement(): RollbackStatementContext;
    releaseStatement(): ReleaseStatementContext;
    lockTables(): LockTablesContext;
    unlockTables(): UnlockTablesContext;
    setAutocommitStatement(): SetAutocommitStatementContext;
    setTransactionStatement(): SetTransactionStatementContext;
    transactionMode(): TransactionModeContext;
    lockTableElement(): LockTableElementContext;
    lockAction(): LockActionContext;
    transactionOption(): TransactionOptionContext;
    transactionLevel(): TransactionLevelContext;
    changeMaster(): ChangeMasterContext;
    changeReplicationFilter(): ChangeReplicationFilterContext;
    purgeBinaryLogs(): PurgeBinaryLogsContext;
    resetMaster(): ResetMasterContext;
    resetSlave(): ResetSlaveContext;
    startSlave(): StartSlaveContext;
    stopSlave(): StopSlaveContext;
    startGroupReplication(): StartGroupReplicationContext;
    stopGroupReplication(): StopGroupReplicationContext;
    masterOption(): MasterOptionContext;
    stringMasterOption(): StringMasterOptionContext;
    decimalMasterOption(): DecimalMasterOptionContext;
    boolMasterOption(): BoolMasterOptionContext;
    channelOption(): ChannelOptionContext;
    replicationFilter(): ReplicationFilterContext;
    tablePair(): TablePairContext;
    threadType(): ThreadTypeContext;
    untilOption(): UntilOptionContext;
    connectionOption(): ConnectionOptionContext;
    gtuidSet(): GtuidSetContext;
    xaStartTransaction(): XaStartTransactionContext;
    xaEndTransaction(): XaEndTransactionContext;
    xaPrepareStatement(): XaPrepareStatementContext;
    xaCommitWork(): XaCommitWorkContext;
    xaRollbackWork(): XaRollbackWorkContext;
    xaRecoverWork(): XaRecoverWorkContext;
    prepareStatement(): PrepareStatementContext;
    executeStatement(): ExecuteStatementContext;
    deallocatePrepare(): DeallocatePrepareContext;
    routineBody(): RoutineBodyContext;
    blockStatement(): BlockStatementContext;
    caseStatement(): CaseStatementContext;
    ifStatement(): IfStatementContext;
    iterateStatement(): IterateStatementContext;
    leaveStatement(): LeaveStatementContext;
    loopStatement(): LoopStatementContext;
    repeatStatement(): RepeatStatementContext;
    returnStatement(): ReturnStatementContext;
    whileStatement(): WhileStatementContext;
    cursorStatement(): CursorStatementContext;
    declareVariable(): DeclareVariableContext;
    declareCondition(): DeclareConditionContext;
    declareCursor(): DeclareCursorContext;
    declareHandler(): DeclareHandlerContext;
    handlerConditionValue(): HandlerConditionValueContext;
    procedureSqlStatement(): ProcedureSqlStatementContext;
    caseAlternative(): CaseAlternativeContext;
    elifAlternative(): ElifAlternativeContext;
    alterUser(): AlterUserContext;
    createUser(): CreateUserContext;
    dropUser(): DropUserContext;
    grantStatement(): GrantStatementContext;
    grantProxy(): GrantProxyContext;
    renameUser(): RenameUserContext;
    revokeStatement(): RevokeStatementContext;
    revokeProxy(): RevokeProxyContext;
    setPasswordStatement(): SetPasswordStatementContext;
    userSpecification(): UserSpecificationContext;
    userAuthOption(): UserAuthOptionContext;
    tlsOption(): TlsOptionContext;
    userResourceOption(): UserResourceOptionContext;
    userPasswordOption(): UserPasswordOptionContext;
    userLockOption(): UserLockOptionContext;
    privelegeClause(): PrivelegeClauseContext;
    privilege(): PrivilegeContext;
    privilegeLevel(): PrivilegeLevelContext;
    renameUserClause(): RenameUserClauseContext;
    analyzeTable(): AnalyzeTableContext;
    checkTable(): CheckTableContext;
    checksumTable(): ChecksumTableContext;
    optimizeTable(): OptimizeTableContext;
    repairTable(): RepairTableContext;
    checkTableOption(): CheckTableOptionContext;
    createUdfunction(): CreateUdfunctionContext;
    installPlugin(): InstallPluginContext;
    uninstallPlugin(): UninstallPluginContext;
    setStatement(): SetStatementContext;
    showStatement(): ShowStatementContext;
    variableClause(): VariableClauseContext;
    showCommonEntity(): ShowCommonEntityContext;
    showFilter(): ShowFilterContext;
    showGlobalInfoClause(): ShowGlobalInfoClauseContext;
    showSchemaEntity(): ShowSchemaEntityContext;
    showProfileType(): ShowProfileTypeContext;
    binlogStatement(): BinlogStatementContext;
    cacheIndexStatement(): CacheIndexStatementContext;
    flushStatement(): FlushStatementContext;
    killStatement(): KillStatementContext;
    loadIndexIntoCache(): LoadIndexIntoCacheContext;
    resetStatement(): ResetStatementContext;
    shutdownStatement(): ShutdownStatementContext;
    tableIndexes(): TableIndexesContext;
    flushOption(): FlushOptionContext;
    flushTableOption(): FlushTableOptionContext;
    loadedTableIndexes(): LoadedTableIndexesContext;
    simpleDescribeStatement(): SimpleDescribeStatementContext;
    fullDescribeStatement(): FullDescribeStatementContext;
    helpStatement(): HelpStatementContext;
    useStatement(): UseStatementContext;
    signalStatement(): SignalStatementContext;
    resignalStatement(): ResignalStatementContext;
    signalConditionInformation(): SignalConditionInformationContext;
    diagnosticsStatement(): DiagnosticsStatementContext;
    diagnosticsConditionInformationName(): DiagnosticsConditionInformationNameContext;
    describeObjectClause(): DescribeObjectClauseContext;
    fullId(): FullIdContext;
    tableName(): TableNameContext;
    fullColumnName(): FullColumnNameContext;
    indexColumnName(): IndexColumnNameContext;
    userName(): UserNameContext;
    mysqlVariable(): MysqlVariableContext;
    charsetName(): CharsetNameContext;
    collationName(): CollationNameContext;
    engineName(): EngineNameContext;
    uuidSet(): UuidSetContext;
    xid(): XidContext;
    xuidStringId(): XuidStringIdContext;
    authPlugin(): AuthPluginContext;
    uid(): UidContext;
    simpleId(): SimpleIdContext;
    dottedId(): DottedIdContext;
    decimalLiteral(): DecimalLiteralContext;
    fileSizeLiteral(): FileSizeLiteralContext;
    stringLiteral(): StringLiteralContext;
    booleanLiteral(): BooleanLiteralContext;
    hexadecimalLiteral(): HexadecimalLiteralContext;
    nullNotnull(): NullNotnullContext;
    constant(): ConstantContext;
    dataType(): DataTypeContext;
    collectionOptions(): CollectionOptionsContext;
    convertedDataType(): ConvertedDataTypeContext;
    lengthOneDimension(): LengthOneDimensionContext;
    lengthTwoDimension(): LengthTwoDimensionContext;
    lengthTwoOptionalDimension(): LengthTwoOptionalDimensionContext;
    uidList(): UidListContext;
    tables(): TablesContext;
    indexColumnNames(): IndexColumnNamesContext;
    expressions(): ExpressionsContext;
    expressionsWithDefaults(): ExpressionsWithDefaultsContext;
    constants(): ConstantsContext;
    simpleStrings(): SimpleStringsContext;
    userVariables(): UserVariablesContext;
    defaultValue(): DefaultValueContext;
    currentTimestamp(): CurrentTimestampContext;
    expressionOrDefault(): ExpressionOrDefaultContext;
    ifExists(): IfExistsContext;
    ifNotExists(): IfNotExistsContext;
    functionCall(): FunctionCallContext;
    specificFunction(): SpecificFunctionContext;
    caseFuncAlternative(): CaseFuncAlternativeContext;
    levelsInWeightString(): LevelsInWeightStringContext;
    levelInWeightListElement(): LevelInWeightListElementContext;
    aggregateWindowedFunction(): AggregateWindowedFunctionContext;
    scalarFunctionName(): ScalarFunctionNameContext;
    passwordFunctionClause(): PasswordFunctionClauseContext;
    functionArgs(): FunctionArgsContext;
    functionArg(): FunctionArgContext;
    expression(_p: any): any;
    _ctx: any;
    predicate(_p: any): PredicateContext;
    expressionAtom(_p: any): ExpressionAtomContext;
    unaryOperator(): UnaryOperatorContext;
    comparisonOperator(): ComparisonOperatorContext;
    logicalOperator(): LogicalOperatorContext;
    bitOperator(): BitOperatorContext;
    mathOperator(): MathOperatorContext;
    jsonOperator(): JsonOperatorContext;
    charsetNameBase(): CharsetNameBaseContext;
    transactionLevelBase(): TransactionLevelBaseContext;
    privilegesBase(): PrivilegesBaseContext;
    intervalTypeBase(): IntervalTypeBaseContext;
    dataTypeBase(): DataTypeBaseContext;
    keywordsCanBeId(): KeywordsCanBeIdContext;
    functionNameBase(): FunctionNameBaseContext;
    sempred(localctx: any, ruleIndex: any, predIndex: any): any;
    expression_sempred(localctx: any, predIndex: any): any;
    predicate_sempred(localctx: any, predIndex: any): any;
    expressionAtom_sempred(localctx: any, predIndex: any): any;
}
export namespace MySqlParser {
    export const EOF: any;
    export const SPACE: number;
    export const SPEC_MYSQL_COMMENT: number;
    export const COMMENT_INPUT: number;
    export const LINE_COMMENT: number;
    export const ADD: number;
    export const ALL: number;
    export const ALTER: number;
    export const ALWAYS: number;
    export const ANALYZE: number;
    export const AND: number;
    export const AS: number;
    export const ASC: number;
    export const BEFORE: number;
    export const BETWEEN: number;
    export const BOTH: number;
    export const BY: number;
    export const CALL: number;
    export const CASCADE: number;
    export const CASE: number;
    export const CAST: number;
    export const CHANGE: number;
    export const CHARACTER: number;
    export const CHECK: number;
    export const COLLATE: number;
    export const COLUMN: number;
    export const CONDITION: number;
    export const CONSTRAINT: number;
    export const CONTINUE: number;
    export const CONVERT: number;
    export const CREATE: number;
    export const CROSS: number;
    export const CURRENT: number;
    export const CURRENT_USER: number;
    export const CURSOR: number;
    export const DATABASE: number;
    export const DATABASES: number;
    export const DECLARE: number;
    export const DEFAULT: number;
    export const DELAYED: number;
    export const DELETE: number;
    export const DESC: number;
    export const DESCRIBE: number;
    export const DETERMINISTIC: number;
    export const DIAGNOSTICS: number;
    export const DISTINCT: number;
    export const DISTINCTROW: number;
    export const DROP: number;
    export const EACH: number;
    export const ELSE: number;
    export const ELSEIF: number;
    export const ENCLOSED: number;
    export const ESCAPED: number;
    export const EXISTS: number;
    export const EXIT: number;
    export const EXPLAIN: number;
    export const FALSE: number;
    export const FETCH: number;
    export const FOR: number;
    export const FORCE: number;
    export const FOREIGN: number;
    export const FROM: number;
    export const FULLTEXT: number;
    export const GENERATED: number;
    export const GET: number;
    export const GRANT: number;
    export const GROUP: number;
    export const HAVING: number;
    export const HIGH_PRIORITY: number;
    export const IF: number;
    export const IGNORE: number;
    export const IN: number;
    export const INDEX: number;
    export const INFILE: number;
    export const INNER: number;
    export const INOUT: number;
    export const INSERT: number;
    export const INTERVAL: number;
    export const INTO: number;
    export const IS: number;
    export const ITERATE: number;
    export const JOIN: number;
    export const KEY: number;
    export const KEYS: number;
    export const KILL: number;
    export const LEADING: number;
    export const LEAVE: number;
    export const LEFT: number;
    export const LIKE: number;
    export const LIMIT: number;
    export const LINEAR: number;
    export const LINES: number;
    export const LOAD: number;
    export const LOCK: number;
    export const LOOP: number;
    export const LOW_PRIORITY: number;
    export const MASTER_BIND: number;
    export const MASTER_SSL_VERIFY_SERVER_CERT: number;
    export const MATCH: number;
    export const MAXVALUE: number;
    export const MODIFIES: number;
    export const NATURAL: number;
    export const NOT: number;
    export const NO_WRITE_TO_BINLOG: number;
    export const NULL_LITERAL: number;
    export const NUMBER: number;
    export const ON: number;
    export const OPTIMIZE: number;
    export const OPTION: number;
    export const OPTIONALLY: number;
    export const OR: number;
    export const ORDER: number;
    export const OUT: number;
    export const OUTER: number;
    export const OUTFILE: number;
    export const PARTITION: number;
    export const PRIMARY: number;
    export const PROCEDURE: number;
    export const PURGE: number;
    export const RANGE: number;
    export const READ: number;
    export const READS: number;
    export const REFERENCES: number;
    export const REGEXP: number;
    export const RELEASE: number;
    export const RENAME: number;
    export const REPEAT: number;
    export const REPLACE: number;
    export const REQUIRE: number;
    export const RESIGNAL: number;
    export const RESTRICT: number;
    export const RETURN: number;
    export const REVOKE: number;
    export const RIGHT: number;
    export const RLIKE: number;
    export const SCHEMA: number;
    export const SCHEMAS: number;
    export const SELECT: number;
    export const SET: number;
    export const SEPARATOR: number;
    export const SHOW: number;
    export const SIGNAL: number;
    export const SPATIAL: number;
    export const SQL: number;
    export const SQLEXCEPTION: number;
    export const SQLSTATE: number;
    export const SQLWARNING: number;
    export const SQL_BIG_RESULT: number;
    export const SQL_CALC_FOUND_ROWS: number;
    export const SQL_SMALL_RESULT: number;
    export const SSL: number;
    export const STACKED: number;
    export const STARTING: number;
    export const STRAIGHT_JOIN: number;
    export const TABLE: number;
    export const TERMINATED: number;
    export const THEN: number;
    export const TO: number;
    export const TRAILING: number;
    export const TRIGGER: number;
    export const TRUE: number;
    export const UNDO: number;
    export const UNION: number;
    export const UNIQUE: number;
    export const UNLOCK: number;
    export const UNSIGNED: number;
    export const UPDATE: number;
    export const USAGE: number;
    export const USE: number;
    export const USING: number;
    export const VALUES: number;
    export const WHEN: number;
    export const WHERE: number;
    export const WHILE: number;
    export const WITH: number;
    export const WRITE: number;
    export const XOR: number;
    export const ZEROFILL: number;
    export const TINYINT: number;
    export const SMALLINT: number;
    export const MEDIUMINT: number;
    export const MIDDLEINT: number;
    export const INT: number;
    export const INT1: number;
    export const INT2: number;
    export const INT3: number;
    export const INT4: number;
    export const INT8: number;
    export const INTEGER: number;
    export const BIGINT: number;
    export const REAL: number;
    export const DOUBLE: number;
    export const PRECISION: number;
    export const FLOAT: number;
    export const FLOAT4: number;
    export const FLOAT8: number;
    export const DECIMAL: number;
    export const DEC: number;
    export const NUMERIC: number;
    export const DATE: number;
    export const TIME: number;
    export const TIMESTAMP: number;
    export const DATETIME: number;
    export const YEAR: number;
    export const CHAR: number;
    export const VARCHAR: number;
    export const NVARCHAR: number;
    export const NATIONAL: number;
    export const BINARY: number;
    export const VARBINARY: number;
    export const TINYBLOB: number;
    export const BLOB: number;
    export const MEDIUMBLOB: number;
    export const LONG: number;
    export const LONGBLOB: number;
    export const TINYTEXT: number;
    export const TEXT: number;
    export const MEDIUMTEXT: number;
    export const LONGTEXT: number;
    export const ENUM: number;
    export const VARYING: number;
    export const SERIAL: number;
    export const YEAR_MONTH: number;
    export const DAY_HOUR: number;
    export const DAY_MINUTE: number;
    export const DAY_SECOND: number;
    export const HOUR_MINUTE: number;
    export const HOUR_SECOND: number;
    export const MINUTE_SECOND: number;
    export const SECOND_MICROSECOND: number;
    export const MINUTE_MICROSECOND: number;
    export const HOUR_MICROSECOND: number;
    export const DAY_MICROSECOND: number;
    export const JSON_VALID: number;
    export const JSON_SCHEMA_VALID: number;
    export const AVG: number;
    export const BIT_AND: number;
    export const BIT_OR: number;
    export const BIT_XOR: number;
    export const COUNT: number;
    export const GROUP_CONCAT: number;
    export const MAX: number;
    export const MIN: number;
    export const STD: number;
    export const STDDEV: number;
    export const STDDEV_POP: number;
    export const STDDEV_SAMP: number;
    export const SUM: number;
    export const VAR_POP: number;
    export const VAR_SAMP: number;
    export const VARIANCE: number;
    export const CURRENT_DATE: number;
    export const CURRENT_TIME: number;
    export const CURRENT_TIMESTAMP: number;
    export const LOCALTIME: number;
    export const CURDATE: number;
    export const CURTIME: number;
    export const DATE_ADD: number;
    export const DATE_SUB: number;
    export const EXTRACT: number;
    export const LOCALTIMESTAMP: number;
    export const NOW: number;
    export const POSITION: number;
    export const SUBSTR: number;
    export const SUBSTRING: number;
    export const SYSDATE: number;
    export const TRIM: number;
    export const UTC_DATE: number;
    export const UTC_TIME: number;
    export const UTC_TIMESTAMP: number;
    export const ACCOUNT: number;
    export const ACTION: number;
    export const AFTER: number;
    export const AGGREGATE: number;
    export const ALGORITHM: number;
    export const ANY: number;
    export const AT: number;
    export const AUTHORS: number;
    export const AUTOCOMMIT: number;
    export const AUTOEXTEND_SIZE: number;
    export const AUTO_INCREMENT: number;
    export const AVG_ROW_LENGTH: number;
    export const BEGIN: number;
    export const BINLOG: number;
    export const BIT: number;
    export const BLOCK: number;
    export const BOOL: number;
    export const BOOLEAN: number;
    export const BTREE: number;
    export const CACHE: number;
    export const CASCADED: number;
    export const CHAIN: number;
    export const CHANGED: number;
    export const CHANNEL: number;
    export const CHECKSUM: number;
    export const PAGE_CHECKSUM: number;
    export const CIPHER: number;
    export const CLASS_ORIGIN: number;
    export const CLIENT: number;
    export const CLOSE: number;
    export const COALESCE: number;
    export const CODE: number;
    export const COLUMNS: number;
    export const COLUMN_FORMAT: number;
    export const COLUMN_NAME: number;
    export const COMMENT: number;
    export const COMMIT: number;
    export const COMPACT: number;
    export const COMPLETION: number;
    export const COMPRESSED: number;
    export const COMPRESSION: number;
    export const CONCURRENT: number;
    export const CONNECTION: number;
    export const CONSISTENT: number;
    export const CONSTRAINT_CATALOG: number;
    export const CONSTRAINT_SCHEMA: number;
    export const CONSTRAINT_NAME: number;
    export const CONTAINS: number;
    export const CONTEXT: number;
    export const CONTRIBUTORS: number;
    export const COPY: number;
    export const CPU: number;
    export const CURSOR_NAME: number;
    export const DATA: number;
    export const DATAFILE: number;
    export const DEALLOCATE: number;
    export const DEFAULT_AUTH: number;
    export const DEFINER: number;
    export const DELAY_KEY_WRITE: number;
    export const DES_KEY_FILE: number;
    export const DIRECTORY: number;
    export const DISABLE: number;
    export const DISCARD: number;
    export const DISK: number;
    export const DO: number;
    export const DUMPFILE: number;
    export const DUPLICATE: number;
    export const DYNAMIC: number;
    export const ENABLE: number;
    export const ENCRYPTION: number;
    export const END: number;
    export const ENDS: number;
    export const ENGINE: number;
    export const ENGINES: number;
    export const ERROR: number;
    export const ERRORS: number;
    export const ESCAPE: number;
    export const EVEN: number;
    export const EVENT: number;
    export const EVENTS: number;
    export const EVERY: number;
    export const EXCHANGE: number;
    export const EXCLUSIVE: number;
    export const EXPIRE: number;
    export const EXPORT: number;
    export const EXTENDED: number;
    export const EXTENT_SIZE: number;
    export const FAST: number;
    export const FAULTS: number;
    export const FIELDS: number;
    export const FILE_BLOCK_SIZE: number;
    export const FILTER: number;
    export const FIRST: number;
    export const FIXED: number;
    export const FLUSH: number;
    export const FOLLOWS: number;
    export const FOUND: number;
    export const FULL: number;
    export const FUNCTION: number;
    export const GENERAL: number;
    export const GLOBAL: number;
    export const GRANTS: number;
    export const GROUP_REPLICATION: number;
    export const HANDLER: number;
    export const HASH: number;
    export const HELP: number;
    export const HOST: number;
    export const HOSTS: number;
    export const IDENTIFIED: number;
    export const IGNORE_SERVER_IDS: number;
    export const IMPORT: number;
    export const INDEXES: number;
    export const INITIAL_SIZE: number;
    export const INPLACE: number;
    export const INSERT_METHOD: number;
    export const INSTALL: number;
    export const INSTANCE: number;
    export const INVISIBLE: number;
    export const INVOKER: number;
    export const IO: number;
    export const IO_THREAD: number;
    export const IPC: number;
    export const ISOLATION: number;
    export const ISSUER: number;
    export const JSON: number;
    export const KEY_BLOCK_SIZE: number;
    export const LANGUAGE: number;
    export const LAST: number;
    export const LEAVES: number;
    export const LESS: number;
    export const LEVEL: number;
    export const LIST: number;
    export const LOCAL: number;
    export const LOGFILE: number;
    export const LOGS: number;
    export const MASTER: number;
    export const MASTER_AUTO_POSITION: number;
    export const MASTER_CONNECT_RETRY: number;
    export const MASTER_DELAY: number;
    export const MASTER_HEARTBEAT_PERIOD: number;
    export const MASTER_HOST: number;
    export const MASTER_LOG_FILE: number;
    export const MASTER_LOG_POS: number;
    export const MASTER_PASSWORD: number;
    export const MASTER_PORT: number;
    export const MASTER_RETRY_COUNT: number;
    export const MASTER_SSL: number;
    export const MASTER_SSL_CA: number;
    export const MASTER_SSL_CAPATH: number;
    export const MASTER_SSL_CERT: number;
    export const MASTER_SSL_CIPHER: number;
    export const MASTER_SSL_CRL: number;
    export const MASTER_SSL_CRLPATH: number;
    export const MASTER_SSL_KEY: number;
    export const MASTER_TLS_VERSION: number;
    export const MASTER_USER: number;
    export const MAX_CONNECTIONS_PER_HOUR: number;
    export const MAX_QUERIES_PER_HOUR: number;
    export const MAX_ROWS: number;
    export const MAX_SIZE: number;
    export const MAX_UPDATES_PER_HOUR: number;
    export const MAX_USER_CONNECTIONS: number;
    export const MEDIUM: number;
    export const MEMBER: number;
    export const MERGE: number;
    export const MESSAGE_TEXT: number;
    export const MID: number;
    export const MIGRATE: number;
    export const MIN_ROWS: number;
    export const MODE: number;
    export const MODIFY: number;
    export const MUTEX: number;
    export const MYSQL: number;
    export const MYSQL_ERRNO: number;
    export const NAME: number;
    export const NAMES: number;
    export const NCHAR: number;
    export const NEVER: number;
    export const NEXT: number;
    export const NO: number;
    export const NODEGROUP: number;
    export const NONE: number;
    export const OFFLINE: number;
    export const OFFSET: number;
    export const OF: number;
    export const OJ: number;
    export const OLD_PASSWORD: number;
    export const ONE: number;
    export const ONLINE: number;
    export const ONLY: number;
    export const OPEN: number;
    export const OPTIMIZER_COSTS: number;
    export const OPTIONS: number;
    export const OWNER: number;
    export const PACK_KEYS: number;
    export const PAGE: number;
    export const PARSER: number;
    export const PARTIAL: number;
    export const PARTITIONING: number;
    export const PARTITIONS: number;
    export const PASSWORD: number;
    export const PHASE: number;
    export const PLUGIN: number;
    export const PLUGIN_DIR: number;
    export const PLUGINS: number;
    export const PORT: number;
    export const PRECEDES: number;
    export const PREPARE: number;
    export const PRESERVE: number;
    export const PREV: number;
    export const PROCESSLIST: number;
    export const PROFILE: number;
    export const PROFILES: number;
    export const PROXY: number;
    export const QUERY: number;
    export const QUICK: number;
    export const REBUILD: number;
    export const RECOVER: number;
    export const REDO_BUFFER_SIZE: number;
    export const REDUNDANT: number;
    export const RELAY: number;
    export const RELAY_LOG_FILE: number;
    export const RELAY_LOG_POS: number;
    export const RELAYLOG: number;
    export const REMOVE: number;
    export const REORGANIZE: number;
    export const REPAIR: number;
    export const REPLICATE_DO_DB: number;
    export const REPLICATE_DO_TABLE: number;
    export const REPLICATE_IGNORE_DB: number;
    export const REPLICATE_IGNORE_TABLE: number;
    export const REPLICATE_REWRITE_DB: number;
    export const REPLICATE_WILD_DO_TABLE: number;
    export const REPLICATE_WILD_IGNORE_TABLE: number;
    export const REPLICATION: number;
    export const RESET: number;
    export const RESUME: number;
    export const RETURNED_SQLSTATE: number;
    export const RETURNS: number;
    export const ROLE: number;
    export const ROLLBACK: number;
    export const ROLLUP: number;
    export const ROTATE: number;
    export const ROW: number;
    export const ROWS: number;
    export const ROW_FORMAT: number;
    export const SAVEPOINT: number;
    export const SCHEDULE: number;
    export const SECURITY: number;
    export const SERVER: number;
    export const SESSION: number;
    export const SHARE: number;
    export const SHARED: number;
    export const SIGNED: number;
    export const SIMPLE: number;
    export const SLAVE: number;
    export const SLOW: number;
    export const SNAPSHOT: number;
    export const SOCKET: number;
    export const SOME: number;
    export const SONAME: number;
    export const SOUNDS: number;
    export const SOURCE: number;
    export const SQL_AFTER_GTIDS: number;
    export const SQL_AFTER_MTS_GAPS: number;
    export const SQL_BEFORE_GTIDS: number;
    export const SQL_BUFFER_RESULT: number;
    export const SQL_CACHE: number;
    export const SQL_NO_CACHE: number;
    export const SQL_THREAD: number;
    export const START: number;
    export const STARTS: number;
    export const STATS_AUTO_RECALC: number;
    export const STATS_PERSISTENT: number;
    export const STATS_SAMPLE_PAGES: number;
    export const STATUS: number;
    export const STOP: number;
    export const STORAGE: number;
    export const STORED: number;
    export const STRING: number;
    export const SUBCLASS_ORIGIN: number;
    export const SUBJECT: number;
    export const SUBPARTITION: number;
    export const SUBPARTITIONS: number;
    export const SUSPEND: number;
    export const SWAPS: number;
    export const SWITCHES: number;
    export const TABLE_NAME: number;
    export const TABLESPACE: number;
    export const TEMPORARY: number;
    export const TEMPTABLE: number;
    export const THAN: number;
    export const TRADITIONAL: number;
    export const TRANSACTION: number;
    export const TRANSACTIONAL: number;
    export const TRIGGERS: number;
    export const TRUNCATE: number;
    export const UNDEFINED: number;
    export const UNDOFILE: number;
    export const UNDO_BUFFER_SIZE: number;
    export const UNINSTALL: number;
    export const UNKNOWN: number;
    export const UNTIL: number;
    export const UPGRADE: number;
    export const USER: number;
    export const USE_FRM: number;
    export const USER_RESOURCES: number;
    export const VALIDATION: number;
    export const VALUE: number;
    export const VARIABLES: number;
    export const VIEW: number;
    export const VIRTUAL: number;
    export const VISIBLE: number;
    export const WAIT: number;
    export const WARNINGS: number;
    export const WITHOUT: number;
    export const WORK: number;
    export const WRAPPER: number;
    export const X509: number;
    export const XA: number;
    export const XML: number;
    export const EUR: number;
    export const USA: number;
    export const JIS: number;
    export const ISO: number;
    export const INTERNAL: number;
    export const QUARTER: number;
    export const MONTH: number;
    export const DAY: number;
    export const HOUR: number;
    export const MINUTE: number;
    export const WEEK: number;
    export const SECOND: number;
    export const MICROSECOND: number;
    export const TABLES: number;
    export const ROUTINE: number;
    export const EXECUTE: number;
    export const FILE: number;
    export const PROCESS: number;
    export const RELOAD: number;
    export const SHUTDOWN: number;
    export const SUPER: number;
    export const PRIVILEGES: number;
    export const APPLICATION_PASSWORD_ADMIN: number;
    export const AUDIT_ADMIN: number;
    export const BACKUP_ADMIN: number;
    export const BINLOG_ADMIN: number;
    export const BINLOG_ENCRYPTION_ADMIN: number;
    export const CLONE_ADMIN: number;
    export const CONNECTION_ADMIN: number;
    export const ENCRYPTION_KEY_ADMIN: number;
    export const FIREWALL_ADMIN: number;
    export const FIREWALL_USER: number;
    export const GROUP_REPLICATION_ADMIN: number;
    export const INNODB_REDO_LOG_ARCHIVE: number;
    export const NDB_STORED_USER: number;
    export const PERSIST_RO_VARIABLES_ADMIN: number;
    export const REPLICATION_APPLIER: number;
    export const REPLICATION_SLAVE_ADMIN: number;
    export const RESOURCE_GROUP_ADMIN: number;
    export const RESOURCE_GROUP_USER: number;
    export const ROLE_ADMIN: number;
    export const SESSION_VARIABLES_ADMIN: number;
    export const SET_USER_ID: number;
    export const SHOW_ROUTINE: number;
    export const SYSTEM_VARIABLES_ADMIN: number;
    export const TABLE_ENCRYPTION_ADMIN: number;
    export const VERSION_TOKEN_ADMIN: number;
    export const XA_RECOVER_ADMIN: number;
    export const ARMSCII8: number;
    export const ASCII: number;
    export const BIG5: number;
    export const CP1250: number;
    export const CP1251: number;
    export const CP1256: number;
    export const CP1257: number;
    export const CP850: number;
    export const CP852: number;
    export const CP866: number;
    export const CP932: number;
    export const DEC8: number;
    export const EUCJPMS: number;
    export const EUCKR: number;
    export const GB2312: number;
    export const GBK: number;
    export const GEOSTD8: number;
    export const GREEK: number;
    export const HEBREW: number;
    export const HP8: number;
    export const KEYBCS2: number;
    export const KOI8R: number;
    export const KOI8U: number;
    export const LATIN1: number;
    export const LATIN2: number;
    export const LATIN5: number;
    export const LATIN7: number;
    export const MACCE: number;
    export const MACROMAN: number;
    export const SJIS: number;
    export const SWE7: number;
    export const TIS620: number;
    export const UCS2: number;
    export const UJIS: number;
    export const UTF16: number;
    export const UTF16LE: number;
    export const UTF32: number;
    export const UTF8: number;
    export const UTF8MB3: number;
    export const UTF8MB4: number;
    export const ARCHIVE: number;
    export const BLACKHOLE: number;
    export const CSV: number;
    export const FEDERATED: number;
    export const INNODB: number;
    export const MEMORY: number;
    export const MRG_MYISAM: number;
    export const MYISAM: number;
    export const NDB: number;
    export const NDBCLUSTER: number;
    export const PERFORMANCE_SCHEMA: number;
    export const TOKUDB: number;
    export const REPEATABLE: number;
    export const COMMITTED: number;
    export const UNCOMMITTED: number;
    export const SERIALIZABLE: number;
    export const GEOMETRYCOLLECTION: number;
    export const GEOMCOLLECTION: number;
    export const GEOMETRY: number;
    export const LINESTRING: number;
    export const MULTILINESTRING: number;
    export const MULTIPOINT: number;
    export const MULTIPOLYGON: number;
    export const POINT: number;
    export const POLYGON: number;
    export const ABS: number;
    export const ACOS: number;
    export const ADDDATE: number;
    export const ADDTIME: number;
    export const AES_DECRYPT: number;
    export const AES_ENCRYPT: number;
    export const AREA: number;
    export const ASBINARY: number;
    export const ASIN: number;
    export const ASTEXT: number;
    export const ASWKB: number;
    export const ASWKT: number;
    export const ASYMMETRIC_DECRYPT: number;
    export const ASYMMETRIC_DERIVE: number;
    export const ASYMMETRIC_ENCRYPT: number;
    export const ASYMMETRIC_SIGN: number;
    export const ASYMMETRIC_VERIFY: number;
    export const ATAN: number;
    export const ATAN2: number;
    export const BENCHMARK: number;
    export const BIN: number;
    export const BIT_COUNT: number;
    export const BIT_LENGTH: number;
    export const BUFFER: number;
    export const CATALOG_NAME: number;
    export const CEIL: number;
    export const CEILING: number;
    export const CENTROID: number;
    export const CHARACTER_LENGTH: number;
    export const CHARSET: number;
    export const CHAR_LENGTH: number;
    export const COERCIBILITY: number;
    export const COLLATION: number;
    export const COMPRESS: number;
    export const CONCAT: number;
    export const CONCAT_WS: number;
    export const CONNECTION_ID: number;
    export const CONV: number;
    export const CONVERT_TZ: number;
    export const COS: number;
    export const COT: number;
    export const CRC32: number;
    export const CREATE_ASYMMETRIC_PRIV_KEY: number;
    export const CREATE_ASYMMETRIC_PUB_KEY: number;
    export const CREATE_DH_PARAMETERS: number;
    export const CREATE_DIGEST: number;
    export const CROSSES: number;
    export const DATEDIFF: number;
    export const DATE_FORMAT: number;
    export const DAYNAME: number;
    export const DAYOFMONTH: number;
    export const DAYOFWEEK: number;
    export const DAYOFYEAR: number;
    export const DECODE: number;
    export const DEGREES: number;
    export const DES_DECRYPT: number;
    export const DES_ENCRYPT: number;
    export const DIMENSION: number;
    export const DISJOINT: number;
    export const ELT: number;
    export const ENCODE: number;
    export const ENCRYPT: number;
    export const ENDPOINT: number;
    export const ENVELOPE: number;
    export const EQUALS: number;
    export const EXP: number;
    export const EXPORT_SET: number;
    export const EXTERIORRING: number;
    export const EXTRACTVALUE: number;
    export const FIELD: number;
    export const FIND_IN_SET: number;
    export const FLOOR: number;
    export const FORMAT: number;
    export const FOUND_ROWS: number;
    export const FROM_BASE64: number;
    export const FROM_DAYS: number;
    export const FROM_UNIXTIME: number;
    export const GEOMCOLLFROMTEXT: number;
    export const GEOMCOLLFROMWKB: number;
    export const GEOMETRYCOLLECTIONFROMTEXT: number;
    export const GEOMETRYCOLLECTIONFROMWKB: number;
    export const GEOMETRYFROMTEXT: number;
    export const GEOMETRYFROMWKB: number;
    export const GEOMETRYN: number;
    export const GEOMETRYTYPE: number;
    export const GEOMFROMTEXT: number;
    export const GEOMFROMWKB: number;
    export const GET_FORMAT: number;
    export const GET_LOCK: number;
    export const GLENGTH: number;
    export const GREATEST: number;
    export const GTID_SUBSET: number;
    export const GTID_SUBTRACT: number;
    export const HEX: number;
    export const IFNULL: number;
    export const INET6_ATON: number;
    export const INET6_NTOA: number;
    export const INET_ATON: number;
    export const INET_NTOA: number;
    export const INSTR: number;
    export const INTERIORRINGN: number;
    export const INTERSECTS: number;
    export const ISCLOSED: number;
    export const ISEMPTY: number;
    export const ISNULL: number;
    export const ISSIMPLE: number;
    export const IS_FREE_LOCK: number;
    export const IS_IPV4: number;
    export const IS_IPV4_COMPAT: number;
    export const IS_IPV4_MAPPED: number;
    export const IS_IPV6: number;
    export const IS_USED_LOCK: number;
    export const LAST_INSERT_ID: number;
    export const LCASE: number;
    export const LEAST: number;
    export const LENGTH: number;
    export const LINEFROMTEXT: number;
    export const LINEFROMWKB: number;
    export const LINESTRINGFROMTEXT: number;
    export const LINESTRINGFROMWKB: number;
    export const LN: number;
    export const LOAD_FILE: number;
    export const LOCATE: number;
    export const LOG: number;
    export const LOG10: number;
    export const LOG2: number;
    export const LOWER: number;
    export const LPAD: number;
    export const LTRIM: number;
    export const MAKEDATE: number;
    export const MAKETIME: number;
    export const MAKE_SET: number;
    export const MASTER_POS_WAIT: number;
    export const MBRCONTAINS: number;
    export const MBRDISJOINT: number;
    export const MBREQUAL: number;
    export const MBRINTERSECTS: number;
    export const MBROVERLAPS: number;
    export const MBRTOUCHES: number;
    export const MBRWITHIN: number;
    export const MD5: number;
    export const MLINEFROMTEXT: number;
    export const MLINEFROMWKB: number;
    export const MONTHNAME: number;
    export const MPOINTFROMTEXT: number;
    export const MPOINTFROMWKB: number;
    export const MPOLYFROMTEXT: number;
    export const MPOLYFROMWKB: number;
    export const MULTILINESTRINGFROMTEXT: number;
    export const MULTILINESTRINGFROMWKB: number;
    export const MULTIPOINTFROMTEXT: number;
    export const MULTIPOINTFROMWKB: number;
    export const MULTIPOLYGONFROMTEXT: number;
    export const MULTIPOLYGONFROMWKB: number;
    export const NAME_CONST: number;
    export const NULLIF: number;
    export const NUMGEOMETRIES: number;
    export const NUMINTERIORRINGS: number;
    export const NUMPOINTS: number;
    export const OCT: number;
    export const OCTET_LENGTH: number;
    export const ORD: number;
    export const OVERLAPS: number;
    export const PERIOD_ADD: number;
    export const PERIOD_DIFF: number;
    export const PI: number;
    export const POINTFROMTEXT: number;
    export const POINTFROMWKB: number;
    export const POINTN: number;
    export const POLYFROMTEXT: number;
    export const POLYFROMWKB: number;
    export const POLYGONFROMTEXT: number;
    export const POLYGONFROMWKB: number;
    export const POW: number;
    export const POWER: number;
    export const QUOTE: number;
    export const RADIANS: number;
    export const RAND: number;
    export const RANDOM_BYTES: number;
    export const RELEASE_LOCK: number;
    export const REVERSE: number;
    export const ROUND: number;
    export const ROW_COUNT: number;
    export const RPAD: number;
    export const RTRIM: number;
    export const SEC_TO_TIME: number;
    export const SESSION_USER: number;
    export const SHA: number;
    export const SHA1: number;
    export const SHA2: number;
    export const SCHEMA_NAME: number;
    export const SIGN: number;
    export const SIN: number;
    export const SLEEP: number;
    export const SOUNDEX: number;
    export const SQL_THREAD_WAIT_AFTER_GTIDS: number;
    export const SQRT: number;
    export const SRID: number;
    export const STARTPOINT: number;
    export const STRCMP: number;
    export const STR_TO_DATE: number;
    export const ST_AREA: number;
    export const ST_ASBINARY: number;
    export const ST_ASTEXT: number;
    export const ST_ASWKB: number;
    export const ST_ASWKT: number;
    export const ST_BUFFER: number;
    export const ST_CENTROID: number;
    export const ST_CONTAINS: number;
    export const ST_CROSSES: number;
    export const ST_DIFFERENCE: number;
    export const ST_DIMENSION: number;
    export const ST_DISJOINT: number;
    export const ST_DISTANCE: number;
    export const ST_ENDPOINT: number;
    export const ST_ENVELOPE: number;
    export const ST_EQUALS: number;
    export const ST_EXTERIORRING: number;
    export const ST_GEOMCOLLFROMTEXT: number;
    export const ST_GEOMCOLLFROMTXT: number;
    export const ST_GEOMCOLLFROMWKB: number;
    export const ST_GEOMETRYCOLLECTIONFROMTEXT: number;
    export const ST_GEOMETRYCOLLECTIONFROMWKB: number;
    export const ST_GEOMETRYFROMTEXT: number;
    export const ST_GEOMETRYFROMWKB: number;
    export const ST_GEOMETRYN: number;
    export const ST_GEOMETRYTYPE: number;
    export const ST_GEOMFROMTEXT: number;
    export const ST_GEOMFROMWKB: number;
    export const ST_INTERIORRINGN: number;
    export const ST_INTERSECTION: number;
    export const ST_INTERSECTS: number;
    export const ST_ISCLOSED: number;
    export const ST_ISEMPTY: number;
    export const ST_ISSIMPLE: number;
    export const ST_LINEFROMTEXT: number;
    export const ST_LINEFROMWKB: number;
    export const ST_LINESTRINGFROMTEXT: number;
    export const ST_LINESTRINGFROMWKB: number;
    export const ST_NUMGEOMETRIES: number;
    export const ST_NUMINTERIORRING: number;
    export const ST_NUMINTERIORRINGS: number;
    export const ST_NUMPOINTS: number;
    export const ST_OVERLAPS: number;
    export const ST_POINTFROMTEXT: number;
    export const ST_POINTFROMWKB: number;
    export const ST_POINTN: number;
    export const ST_POLYFROMTEXT: number;
    export const ST_POLYFROMWKB: number;
    export const ST_POLYGONFROMTEXT: number;
    export const ST_POLYGONFROMWKB: number;
    export const ST_SRID: number;
    export const ST_STARTPOINT: number;
    export const ST_SYMDIFFERENCE: number;
    export const ST_TOUCHES: number;
    export const ST_UNION: number;
    export const ST_WITHIN: number;
    export const ST_X: number;
    export const ST_Y: number;
    export const SUBDATE: number;
    export const SUBSTRING_INDEX: number;
    export const SUBTIME: number;
    export const SYSTEM_USER: number;
    export const TAN: number;
    export const TIMEDIFF: number;
    export const TIMESTAMPADD: number;
    export const TIMESTAMPDIFF: number;
    export const TIME_FORMAT: number;
    export const TIME_TO_SEC: number;
    export const TOUCHES: number;
    export const TO_BASE64: number;
    export const TO_DAYS: number;
    export const TO_SECONDS: number;
    export const UCASE: number;
    export const UNCOMPRESS: number;
    export const UNCOMPRESSED_LENGTH: number;
    export const UNHEX: number;
    export const UNIX_TIMESTAMP: number;
    export const UPDATEXML: number;
    export const UPPER: number;
    export const UUID: number;
    export const UUID_SHORT: number;
    export const VALIDATE_PASSWORD_STRENGTH: number;
    export const VERSION: number;
    export const WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS: number;
    export const WEEKDAY: number;
    export const WEEKOFYEAR: number;
    export const WEIGHT_STRING: number;
    export const WITHIN: number;
    export const YEARWEEK: number;
    export const Y_FUNCTION: number;
    export const X_FUNCTION: number;
    export const VAR_ASSIGN: number;
    export const PLUS_ASSIGN: number;
    export const MINUS_ASSIGN: number;
    export const MULT_ASSIGN: number;
    export const DIV_ASSIGN: number;
    export const MOD_ASSIGN: number;
    export const AND_ASSIGN: number;
    export const XOR_ASSIGN: number;
    export const OR_ASSIGN: number;
    export const STAR: number;
    export const DIVIDE: number;
    export const MODULE: number;
    export const PLUS: number;
    export const MINUSMINUS: number;
    export const MINUS: number;
    export const DIV: number;
    export const MOD: number;
    export const EQUAL_SYMBOL: number;
    export const GREATER_SYMBOL: number;
    export const LESS_SYMBOL: number;
    export const EXCLAMATION_SYMBOL: number;
    export const BIT_NOT_OP: number;
    export const BIT_OR_OP: number;
    export const BIT_AND_OP: number;
    export const BIT_XOR_OP: number;
    export const DOT: number;
    export const LR_BRACKET: number;
    export const RR_BRACKET: number;
    export const COMMA: number;
    export const SEMI: number;
    export const AT_SIGN: number;
    export const ZERO_DECIMAL: number;
    export const ONE_DECIMAL: number;
    export const TWO_DECIMAL: number;
    export const SINGLE_QUOTE_SYMB: number;
    export const DOUBLE_QUOTE_SYMB: number;
    export const REVERSE_QUOTE_SYMB: number;
    export const COLON_SYMB: number;
    export const CHARSET_REVERSE_QOUTE_STRING: number;
    export const FILESIZE_LITERAL: number;
    export const START_NATIONAL_STRING_LITERAL: number;
    export const STRING_LITERAL: number;
    export const DECIMAL_LITERAL: number;
    export const HEXADECIMAL_LITERAL: number;
    export const REAL_LITERAL: number;
    export const NULL_SPEC_LITERAL: number;
    export const BIT_STRING: number;
    export const STRING_CHARSET_NAME: number;
    export const DOT_ID: number;
    export const ID: number;
    export const REVERSE_QUOTE_ID: number;
    export const STRING_USER_NAME: number;
    export const IP_ADDRESS: number;
    export const LOCAL_ID: number;
    export const GLOBAL_ID: number;
    export const ERROR_RECONGNIGION: number;
    export const RULE_root: number;
    export const RULE_sqlStatements: number;
    export const RULE_sqlStatement: number;
    export const RULE_emptyStatement: number;
    export const RULE_ddlStatement: number;
    export const RULE_dmlStatement: number;
    export const RULE_transactionStatement: number;
    export const RULE_replicationStatement: number;
    export const RULE_preparedStatement: number;
    export const RULE_compoundStatement: number;
    export const RULE_administrationStatement: number;
    export const RULE_utilityStatement: number;
    export const RULE_createDatabase: number;
    export const RULE_createEvent: number;
    export const RULE_createIndex: number;
    export const RULE_createLogfileGroup: number;
    export const RULE_createProcedure: number;
    export const RULE_createFunction: number;
    export const RULE_createServer: number;
    export const RULE_createTable: number;
    export const RULE_createTablespaceInnodb: number;
    export const RULE_createTablespaceNdb: number;
    export const RULE_createTrigger: number;
    export const RULE_createView: number;
    export const RULE_createDatabaseOption: number;
    export const RULE_ownerStatement: number;
    export const RULE_scheduleExpression: number;
    export const RULE_timestampValue: number;
    export const RULE_intervalExpr: number;
    export const RULE_intervalType: number;
    export const RULE_enableType: number;
    export const RULE_indexType: number;
    export const RULE_indexOption: number;
    export const RULE_procedureParameter: number;
    export const RULE_functionParameter: number;
    export const RULE_routineOption: number;
    export const RULE_serverOption: number;
    export const RULE_createDefinitions: number;
    export const RULE_createDefinition: number;
    export const RULE_columnDefinition: number;
    export const RULE_columnConstraint: number;
    export const RULE_tableConstraint: number;
    export const RULE_referenceDefinition: number;
    export const RULE_referenceAction: number;
    export const RULE_referenceControlType: number;
    export const RULE_indexColumnDefinition: number;
    export const RULE_tableOption: number;
    export const RULE_tablespaceStorage: number;
    export const RULE_partitionDefinitions: number;
    export const RULE_partitionFunctionDefinition: number;
    export const RULE_subpartitionFunctionDefinition: number;
    export const RULE_partitionDefinition: number;
    export const RULE_partitionDefinerAtom: number;
    export const RULE_partitionDefinerVector: number;
    export const RULE_subpartitionDefinition: number;
    export const RULE_partitionOption: number;
    export const RULE_alterDatabase: number;
    export const RULE_alterEvent: number;
    export const RULE_alterFunction: number;
    export const RULE_alterInstance: number;
    export const RULE_alterLogfileGroup: number;
    export const RULE_alterProcedure: number;
    export const RULE_alterServer: number;
    export const RULE_alterTable: number;
    export const RULE_alterTablespace: number;
    export const RULE_alterView: number;
    export const RULE_alterSpecification: number;
    export const RULE_dropDatabase: number;
    export const RULE_dropEvent: number;
    export const RULE_dropIndex: number;
    export const RULE_dropLogfileGroup: number;
    export const RULE_dropProcedure: number;
    export const RULE_dropFunction: number;
    export const RULE_dropServer: number;
    export const RULE_dropTable: number;
    export const RULE_dropTablespace: number;
    export const RULE_dropTrigger: number;
    export const RULE_dropView: number;
    export const RULE_renameTable: number;
    export const RULE_renameTableClause: number;
    export const RULE_truncateTable: number;
    export const RULE_callStatement: number;
    export const RULE_deleteStatement: number;
    export const RULE_doStatement: number;
    export const RULE_handlerStatement: number;
    export const RULE_insertStatement: number;
    export const RULE_loadDataStatement: number;
    export const RULE_loadXmlStatement: number;
    export const RULE_replaceStatement: number;
    export const RULE_selectStatement: number;
    export const RULE_updateStatement: number;
    export const RULE_insertStatementValue: number;
    export const RULE_updatedElement: number;
    export const RULE_assignmentField: number;
    export const RULE_lockClause: number;
    export const RULE_singleDeleteStatement: number;
    export const RULE_multipleDeleteStatement: number;
    export const RULE_handlerOpenStatement: number;
    export const RULE_handlerReadIndexStatement: number;
    export const RULE_handlerReadStatement: number;
    export const RULE_handlerCloseStatement: number;
    export const RULE_singleUpdateStatement: number;
    export const RULE_multipleUpdateStatement: number;
    export const RULE_orderByClause: number;
    export const RULE_orderByExpression: number;
    export const RULE_tableSources: number;
    export const RULE_tableSource: number;
    export const RULE_tableSourceItem: number;
    export const RULE_indexHint: number;
    export const RULE_indexHintType: number;
    export const RULE_joinPart: number;
    export const RULE_queryExpression: number;
    export const RULE_queryExpressionNointo: number;
    export const RULE_querySpecification: number;
    export const RULE_querySpecificationNointo: number;
    export const RULE_unionParenthesis: number;
    export const RULE_unionStatement: number;
    export const RULE_selectSpec: number;
    export const RULE_selectElements: number;
    export const RULE_selectElement: number;
    export const RULE_selectIntoExpression: number;
    export const RULE_selectFieldsInto: number;
    export const RULE_selectLinesInto: number;
    export const RULE_fromClause: number;
    export const RULE_groupByItem: number;
    export const RULE_limitClause: number;
    export const RULE_limitClauseAtom: number;
    export const RULE_startTransaction: number;
    export const RULE_beginWork: number;
    export const RULE_commitWork: number;
    export const RULE_rollbackWork: number;
    export const RULE_savepointStatement: number;
    export const RULE_rollbackStatement: number;
    export const RULE_releaseStatement: number;
    export const RULE_lockTables: number;
    export const RULE_unlockTables: number;
    export const RULE_setAutocommitStatement: number;
    export const RULE_setTransactionStatement: number;
    export const RULE_transactionMode: number;
    export const RULE_lockTableElement: number;
    export const RULE_lockAction: number;
    export const RULE_transactionOption: number;
    export const RULE_transactionLevel: number;
    export const RULE_changeMaster: number;
    export const RULE_changeReplicationFilter: number;
    export const RULE_purgeBinaryLogs: number;
    export const RULE_resetMaster: number;
    export const RULE_resetSlave: number;
    export const RULE_startSlave: number;
    export const RULE_stopSlave: number;
    export const RULE_startGroupReplication: number;
    export const RULE_stopGroupReplication: number;
    export const RULE_masterOption: number;
    export const RULE_stringMasterOption: number;
    export const RULE_decimalMasterOption: number;
    export const RULE_boolMasterOption: number;
    export const RULE_channelOption: number;
    export const RULE_replicationFilter: number;
    export const RULE_tablePair: number;
    export const RULE_threadType: number;
    export const RULE_untilOption: number;
    export const RULE_connectionOption: number;
    export const RULE_gtuidSet: number;
    export const RULE_xaStartTransaction: number;
    export const RULE_xaEndTransaction: number;
    export const RULE_xaPrepareStatement: number;
    export const RULE_xaCommitWork: number;
    export const RULE_xaRollbackWork: number;
    export const RULE_xaRecoverWork: number;
    export const RULE_prepareStatement: number;
    export const RULE_executeStatement: number;
    export const RULE_deallocatePrepare: number;
    export const RULE_routineBody: number;
    export const RULE_blockStatement: number;
    export const RULE_caseStatement: number;
    export const RULE_ifStatement: number;
    export const RULE_iterateStatement: number;
    export const RULE_leaveStatement: number;
    export const RULE_loopStatement: number;
    export const RULE_repeatStatement: number;
    export const RULE_returnStatement: number;
    export const RULE_whileStatement: number;
    export const RULE_cursorStatement: number;
    export const RULE_declareVariable: number;
    export const RULE_declareCondition: number;
    export const RULE_declareCursor: number;
    export const RULE_declareHandler: number;
    export const RULE_handlerConditionValue: number;
    export const RULE_procedureSqlStatement: number;
    export const RULE_caseAlternative: number;
    export const RULE_elifAlternative: number;
    export const RULE_alterUser: number;
    export const RULE_createUser: number;
    export const RULE_dropUser: number;
    export const RULE_grantStatement: number;
    export const RULE_grantProxy: number;
    export const RULE_renameUser: number;
    export const RULE_revokeStatement: number;
    export const RULE_revokeProxy: number;
    export const RULE_setPasswordStatement: number;
    export const RULE_userSpecification: number;
    export const RULE_userAuthOption: number;
    export const RULE_tlsOption: number;
    export const RULE_userResourceOption: number;
    export const RULE_userPasswordOption: number;
    export const RULE_userLockOption: number;
    export const RULE_privelegeClause: number;
    export const RULE_privilege: number;
    export const RULE_privilegeLevel: number;
    export const RULE_renameUserClause: number;
    export const RULE_analyzeTable: number;
    export const RULE_checkTable: number;
    export const RULE_checksumTable: number;
    export const RULE_optimizeTable: number;
    export const RULE_repairTable: number;
    export const RULE_checkTableOption: number;
    export const RULE_createUdfunction: number;
    export const RULE_installPlugin: number;
    export const RULE_uninstallPlugin: number;
    export const RULE_setStatement: number;
    export const RULE_showStatement: number;
    export const RULE_variableClause: number;
    export const RULE_showCommonEntity: number;
    export const RULE_showFilter: number;
    export const RULE_showGlobalInfoClause: number;
    export const RULE_showSchemaEntity: number;
    export const RULE_showProfileType: number;
    export const RULE_binlogStatement: number;
    export const RULE_cacheIndexStatement: number;
    export const RULE_flushStatement: number;
    export const RULE_killStatement: number;
    export const RULE_loadIndexIntoCache: number;
    export const RULE_resetStatement: number;
    export const RULE_shutdownStatement: number;
    export const RULE_tableIndexes: number;
    export const RULE_flushOption: number;
    export const RULE_flushTableOption: number;
    export const RULE_loadedTableIndexes: number;
    export const RULE_simpleDescribeStatement: number;
    export const RULE_fullDescribeStatement: number;
    export const RULE_helpStatement: number;
    export const RULE_useStatement: number;
    export const RULE_signalStatement: number;
    export const RULE_resignalStatement: number;
    export const RULE_signalConditionInformation: number;
    export const RULE_diagnosticsStatement: number;
    export const RULE_diagnosticsConditionInformationName: number;
    export const RULE_describeObjectClause: number;
    export const RULE_fullId: number;
    export const RULE_tableName: number;
    export const RULE_fullColumnName: number;
    export const RULE_indexColumnName: number;
    export const RULE_userName: number;
    export const RULE_mysqlVariable: number;
    export const RULE_charsetName: number;
    export const RULE_collationName: number;
    export const RULE_engineName: number;
    export const RULE_uuidSet: number;
    export const RULE_xid: number;
    export const RULE_xuidStringId: number;
    export const RULE_authPlugin: number;
    export const RULE_uid: number;
    export const RULE_simpleId: number;
    export const RULE_dottedId: number;
    export const RULE_decimalLiteral: number;
    export const RULE_fileSizeLiteral: number;
    export const RULE_stringLiteral: number;
    export const RULE_booleanLiteral: number;
    export const RULE_hexadecimalLiteral: number;
    export const RULE_nullNotnull: number;
    export const RULE_constant: number;
    export const RULE_dataType: number;
    export const RULE_collectionOptions: number;
    export const RULE_convertedDataType: number;
    export const RULE_lengthOneDimension: number;
    export const RULE_lengthTwoDimension: number;
    export const RULE_lengthTwoOptionalDimension: number;
    export const RULE_uidList: number;
    export const RULE_tables: number;
    export const RULE_indexColumnNames: number;
    export const RULE_expressions: number;
    export const RULE_expressionsWithDefaults: number;
    export const RULE_constants: number;
    export const RULE_simpleStrings: number;
    export const RULE_userVariables: number;
    export const RULE_defaultValue: number;
    export const RULE_currentTimestamp: number;
    export const RULE_expressionOrDefault: number;
    export const RULE_ifExists: number;
    export const RULE_ifNotExists: number;
    export const RULE_functionCall: number;
    export const RULE_specificFunction: number;
    export const RULE_caseFuncAlternative: number;
    export const RULE_levelsInWeightString: number;
    export const RULE_levelInWeightListElement: number;
    export const RULE_aggregateWindowedFunction: number;
    export const RULE_scalarFunctionName: number;
    export const RULE_passwordFunctionClause: number;
    export const RULE_functionArgs: number;
    export const RULE_functionArg: number;
    export const RULE_expression: number;
    export const RULE_predicate: number;
    export const RULE_expressionAtom: number;
    export const RULE_unaryOperator: number;
    export const RULE_comparisonOperator: number;
    export const RULE_logicalOperator: number;
    export const RULE_bitOperator: number;
    export const RULE_mathOperator: number;
    export const RULE_jsonOperator: number;
    export const RULE_charsetNameBase: number;
    export const RULE_transactionLevelBase: number;
    export const RULE_privilegesBase: number;
    export const RULE_intervalTypeBase: number;
    export const RULE_dataTypeBase: number;
    export const RULE_keywordsCanBeId: number;
    export const RULE_functionNameBase: number;
    export { RootContext };
    export { SqlStatementsContext };
    export { SqlStatementContext };
    export { EmptyStatementContext };
    export { DdlStatementContext };
    export { DmlStatementContext };
    export { TransactionStatementContext };
    export { ReplicationStatementContext };
    export { PreparedStatementContext };
    export { CompoundStatementContext };
    export { AdministrationStatementContext };
    export { UtilityStatementContext };
    export { CreateDatabaseContext };
    export { CreateEventContext };
    export { CreateIndexContext };
    export { CreateLogfileGroupContext };
    export { CreateProcedureContext };
    export { CreateFunctionContext };
    export { CreateServerContext };
    export { CopyCreateTableContext };
    export { ColumnCreateTableContext };
    export { QueryCreateTableContext };
    export { CreateTableContext };
    export { CreateTablespaceInnodbContext };
    export { CreateTablespaceNdbContext };
    export { CreateTriggerContext };
    export { CreateViewContext };
    export { CreateDatabaseOptionContext };
    export { OwnerStatementContext };
    export { PreciseScheduleContext };
    export { IntervalScheduleContext };
    export { ScheduleExpressionContext };
    export { TimestampValueContext };
    export { IntervalExprContext };
    export { IntervalTypeContext };
    export { EnableTypeContext };
    export { IndexTypeContext };
    export { IndexOptionContext };
    export { ProcedureParameterContext };
    export { FunctionParameterContext };
    export { RoutineBehaviorContext };
    export { RoutineLanguageContext };
    export { RoutineCommentContext };
    export { RoutineSecurityContext };
    export { RoutineDataContext };
    export { RoutineOptionContext };
    export { ServerOptionContext };
    export { CreateDefinitionsContext };
    export { ColumnDeclarationContext };
    export { ConstraintDeclarationContext };
    export { IndexDeclarationContext };
    export { CreateDefinitionContext };
    export { ColumnDefinitionContext };
    export { StorageColumnConstraintContext };
    export { AutoIncrementColumnConstraintContext };
    export { CommentColumnConstraintContext };
    export { UniqueKeyColumnConstraintContext };
    export { SerialDefaultColumnConstraintContext };
    export { GeneratedColumnConstraintContext };
    export { FormatColumnConstraintContext };
    export { CollateColumnConstraintContext };
    export { PrimaryKeyColumnConstraintContext };
    export { CheckColumnConstraintContext };
    export { NullColumnConstraintContext };
    export { DefaultColumnConstraintContext };
    export { ReferenceColumnConstraintContext };
    export { ColumnConstraintContext };
    export { UniqueKeyTableConstraintContext };
    export { CheckTableConstraintContext };
    export { PrimaryKeyTableConstraintContext };
    export { ForeignKeyTableConstraintContext };
    export { TableConstraintContext };
    export { ReferenceDefinitionContext };
    export { ReferenceActionContext };
    export { ReferenceControlTypeContext };
    export { SpecialIndexDeclarationContext };
    export { SimpleIndexDeclarationContext };
    export { IndexColumnDefinitionContext };
    export { TableOptionEngineContext };
    export { TableOptionMaxRowsContext };
    export { TableOptionCollateContext };
    export { TableOptionPersistentContext };
    export { TableOptionTablespaceContext };
    export { TableOptionPackKeysContext };
    export { TableOptionPasswordContext };
    export { TableOptionUnionContext };
    export { TableOptionSamplePageContext };
    export { TableOptionCharsetContext };
    export { TableOptionIndexDirectoryContext };
    export { TableOptionKeyBlockSizeContext };
    export { TableOptionEncryptionContext };
    export { TableOptionDataDirectoryContext };
    export { TableOptionRecalculationContext };
    export { TableOptionAutoIncrementContext };
    export { TableOptionChecksumContext };
    export { TableOptionDelayContext };
    export { TableOptionConnectionContext };
    export { TableOptionCommentContext };
    export { TableOptionAverageContext };
    export { TableOptionRowFormatContext };
    export { TableOptionCompressionContext };
    export { TableOptionInsertMethodContext };
    export { TableOptionMinRowsContext };
    export { TableOptionContext };
    export { TablespaceStorageContext };
    export { PartitionDefinitionsContext };
    export { PartitionFunctionKeyContext };
    export { PartitionFunctionHashContext };
    export { PartitionFunctionListContext };
    export { PartitionFunctionRangeContext };
    export { PartitionFunctionDefinitionContext };
    export { SubPartitionFunctionHashContext };
    export { SubPartitionFunctionKeyContext };
    export { SubpartitionFunctionDefinitionContext };
    export { PartitionComparisionContext };
    export { PartitionListAtomContext };
    export { PartitionListVectorContext };
    export { PartitionSimpleContext };
    export { PartitionDefinitionContext };
    export { PartitionDefinerAtomContext };
    export { PartitionDefinerVectorContext };
    export { SubpartitionDefinitionContext };
    export { PartitionOptionCommentContext };
    export { PartitionOptionNodeGroupContext };
    export { PartitionOptionIndexDirectoryContext };
    export { PartitionOptionMaxRowsContext };
    export { PartitionOptionTablespaceContext };
    export { PartitionOptionEngineContext };
    export { PartitionOptionMinRowsContext };
    export { PartitionOptionDataDirectoryContext };
    export { PartitionOptionContext };
    export { AlterUpgradeNameContext };
    export { AlterSimpleDatabaseContext };
    export { AlterDatabaseContext };
    export { AlterEventContext };
    export { AlterFunctionContext };
    export { AlterInstanceContext };
    export { AlterLogfileGroupContext };
    export { AlterProcedureContext };
    export { AlterServerContext };
    export { AlterTableContext };
    export { AlterTablespaceContext };
    export { AlterViewContext };
    export { AlterByDisableKeysContext };
    export { AlterByDefaultCharsetContext };
    export { AlterByRenameColumnContext };
    export { AlterByConvertCharsetContext };
    export { AlterByAddPartitionContext };
    export { AlterByAddForeignKeyContext };
    export { AlterByRenameIndexContext };
    export { AlterByRemovePartitioningContext };
    export { AlterByRenameContext };
    export { AlterByOptimizePartitionContext };
    export { AlterByImportTablespaceContext };
    export { AlterByCoalescePartitionContext };
    export { AlterByDropConstraintCheckContext };
    export { AlterByAddColumnsContext };
    export { AlterByAlterIndexVisibilityContext };
    export { AlterByDropForeignKeyContext };
    export { AlterByAddCheckTableConstraintContext };
    export { AlterByRebuildPartitionContext };
    export { AlterByUpgradePartitioningContext };
    export { AlterByRepairPartitionContext };
    export { AlterByExchangePartitionContext };
    export { AlterByAddIndexContext };
    export { AlterByDropColumnContext };
    export { AlterByImportPartitionContext };
    export { AlterByChangeDefaultContext };
    export { AlterByForceContext };
    export { AlterByDropPartitionContext };
    export { AlterByAddSpecialIndexContext };
    export { AlterByModifyColumnContext };
    export { AlterByTableOptionContext };
    export { AlterByDropPrimaryKeyContext };
    export { AlterByLockContext };
    export { AlterByDiscardPartitionContext };
    export { AlterByDiscardTablespaceContext };
    export { AlterByValidateContext };
    export { AlterByAddPrimaryKeyContext };
    export { AlterByCheckPartitionContext };
    export { AlterByEnableKeysContext };
    export { AlterByReorganizePartitionContext };
    export { AlterBySetAlgorithmContext };
    export { AlterByAnalyzePartitionContext };
    export { AlterByChangeColumnContext };
    export { AlterByAddUniqueKeyContext };
    export { AlterByTruncatePartitionContext };
    export { AlterByDropIndexContext };
    export { AlterByAddColumnContext };
    export { AlterByOrderContext };
    export { AlterSpecificationContext };
    export { DropDatabaseContext };
    export { DropEventContext };
    export { DropIndexContext };
    export { DropLogfileGroupContext };
    export { DropProcedureContext };
    export { DropFunctionContext };
    export { DropServerContext };
    export { DropTableContext };
    export { DropTablespaceContext };
    export { DropTriggerContext };
    export { DropViewContext };
    export { RenameTableContext };
    export { RenameTableClauseContext };
    export { TruncateTableContext };
    export { CallStatementContext };
    export { DeleteStatementContext };
    export { DoStatementContext };
    export { HandlerStatementContext };
    export { InsertStatementContext };
    export { LoadDataStatementContext };
    export { LoadXmlStatementContext };
    export { ReplaceStatementContext };
    export { UnionSelectContext };
    export { UnionParenthesisSelectContext };
    export { SimpleSelectContext };
    export { ParenthesisSelectContext };
    export { SelectStatementContext };
    export { UpdateStatementContext };
    export { InsertStatementValueContext };
    export { UpdatedElementContext };
    export { AssignmentFieldContext };
    export { LockClauseContext };
    export { SingleDeleteStatementContext };
    export { MultipleDeleteStatementContext };
    export { HandlerOpenStatementContext };
    export { HandlerReadIndexStatementContext };
    export { HandlerReadStatementContext };
    export { HandlerCloseStatementContext };
    export { SingleUpdateStatementContext };
    export { MultipleUpdateStatementContext };
    export { OrderByClauseContext };
    export { OrderByExpressionContext };
    export { TableSourcesContext };
    export { TableSourceNestedContext };
    export { TableSourceBaseContext };
    export { TableSourceContext };
    export { SubqueryTableItemContext };
    export { AtomTableItemContext };
    export { TableSourcesItemContext };
    export { TableSourceItemContext };
    export { IndexHintContext };
    export { IndexHintTypeContext };
    export { InnerJoinContext };
    export { NaturalJoinContext };
    export { OuterJoinContext };
    export { StraightJoinContext };
    export { JoinPartContext };
    export { QueryExpressionContext };
    export { QueryExpressionNointoContext };
    export { QuerySpecificationContext };
    export { QuerySpecificationNointoContext };
    export { UnionParenthesisContext };
    export { UnionStatementContext };
    export { SelectSpecContext };
    export { SelectElementsContext };
    export { SelectExpressionElementContext };
    export { SelectFunctionElementContext };
    export { SelectStarElementContext };
    export { SelectColumnElementContext };
    export { SelectElementContext };
    export { SelectIntoVariablesContext };
    export { SelectIntoTextFileContext };
    export { SelectIntoDumpFileContext };
    export { SelectIntoExpressionContext };
    export { SelectFieldsIntoContext };
    export { SelectLinesIntoContext };
    export { FromClauseContext };
    export { GroupByItemContext };
    export { LimitClauseContext };
    export { LimitClauseAtomContext };
    export { StartTransactionContext };
    export { BeginWorkContext };
    export { CommitWorkContext };
    export { RollbackWorkContext };
    export { SavepointStatementContext };
    export { RollbackStatementContext };
    export { ReleaseStatementContext };
    export { LockTablesContext };
    export { UnlockTablesContext };
    export { SetAutocommitStatementContext };
    export { SetTransactionStatementContext };
    export { TransactionModeContext };
    export { LockTableElementContext };
    export { LockActionContext };
    export { TransactionOptionContext };
    export { TransactionLevelContext };
    export { ChangeMasterContext };
    export { ChangeReplicationFilterContext };
    export { PurgeBinaryLogsContext };
    export { ResetMasterContext };
    export { ResetSlaveContext };
    export { StartSlaveContext };
    export { StopSlaveContext };
    export { StartGroupReplicationContext };
    export { StopGroupReplicationContext };
    export { MasterStringOptionContext };
    export { MasterRealOptionContext };
    export { MasterBoolOptionContext };
    export { MasterUidListOptionContext };
    export { MasterDecimalOptionContext };
    export { MasterOptionContext };
    export { StringMasterOptionContext };
    export { DecimalMasterOptionContext };
    export { BoolMasterOptionContext };
    export { ChannelOptionContext };
    export { WildIgnoreTableReplicationContext };
    export { DoTableReplicationContext };
    export { IgnoreTableReplicationContext };
    export { RewriteDbReplicationContext };
    export { DoDbReplicationContext };
    export { IgnoreDbReplicationContext };
    export { WildDoTableReplicationContext };
    export { ReplicationFilterContext };
    export { TablePairContext };
    export { ThreadTypeContext };
    export { GtidsUntilOptionContext };
    export { SqlGapsUntilOptionContext };
    export { MasterLogUntilOptionContext };
    export { RelayLogUntilOptionContext };
    export { UntilOptionContext };
    export { PluginDirConnectionOptionContext };
    export { UserConnectionOptionContext };
    export { DefaultAuthConnectionOptionContext };
    export { PasswordConnectionOptionContext };
    export { ConnectionOptionContext };
    export { GtuidSetContext };
    export { XaStartTransactionContext };
    export { XaEndTransactionContext };
    export { XaPrepareStatementContext };
    export { XaCommitWorkContext };
    export { XaRollbackWorkContext };
    export { XaRecoverWorkContext };
    export { PrepareStatementContext };
    export { ExecuteStatementContext };
    export { DeallocatePrepareContext };
    export { RoutineBodyContext };
    export { BlockStatementContext };
    export { CaseStatementContext };
    export { IfStatementContext };
    export { IterateStatementContext };
    export { LeaveStatementContext };
    export { LoopStatementContext };
    export { RepeatStatementContext };
    export { ReturnStatementContext };
    export { WhileStatementContext };
    export { CloseCursorContext };
    export { OpenCursorContext };
    export { FetchCursorContext };
    export { CursorStatementContext };
    export { DeclareVariableContext };
    export { DeclareConditionContext };
    export { DeclareCursorContext };
    export { DeclareHandlerContext };
    export { HandlerConditionWarningContext };
    export { HandlerConditionCodeContext };
    export { HandlerConditionNotfoundContext };
    export { HandlerConditionStateContext };
    export { HandlerConditionExceptionContext };
    export { HandlerConditionNameContext };
    export { HandlerConditionValueContext };
    export { ProcedureSqlStatementContext };
    export { CaseAlternativeContext };
    export { ElifAlternativeContext };
    export { AlterUserMysqlV56Context };
    export { AlterUserMysqlV57Context };
    export { AlterUserContext };
    export { CreateUserMysqlV57Context };
    export { CreateUserMysqlV56Context };
    export { CreateUserContext };
    export { DropUserContext };
    export { GrantStatementContext };
    export { GrantProxyContext };
    export { RenameUserContext };
    export { DetailRevokeContext };
    export { ShortRevokeContext };
    export { RevokeStatementContext };
    export { RevokeProxyContext };
    export { SetPasswordStatementContext };
    export { UserSpecificationContext };
    export { SimpleAuthOptionContext };
    export { PasswordAuthOptionContext };
    export { StringAuthOptionContext };
    export { HashAuthOptionContext };
    export { UserAuthOptionContext };
    export { TlsOptionContext };
    export { UserResourceOptionContext };
    export { UserPasswordOptionContext };
    export { UserLockOptionContext };
    export { PrivelegeClauseContext };
    export { PrivilegeContext };
    export { DefiniteSchemaPrivLevelContext };
    export { DefiniteFullTablePrivLevel2Context };
    export { DefiniteFullTablePrivLevelContext };
    export { GlobalPrivLevelContext };
    export { DefiniteTablePrivLevelContext };
    export { CurrentSchemaPriviLevelContext };
    export { PrivilegeLevelContext };
    export { RenameUserClauseContext };
    export { AnalyzeTableContext };
    export { CheckTableContext };
    export { ChecksumTableContext };
    export { OptimizeTableContext };
    export { RepairTableContext };
    export { CheckTableOptionContext };
    export { CreateUdfunctionContext };
    export { InstallPluginContext };
    export { UninstallPluginContext };
    export { SetTransactionContext };
    export { SetCharsetContext };
    export { SetNamesContext };
    export { SetPasswordContext };
    export { SetAutocommitContext };
    export { SetNewValueInsideTriggerContext };
    export { SetVariableContext };
    export { SetStatementContext };
    export { ShowOpenTablesContext };
    export { ShowGlobalInfoContext };
    export { ShowCreateFullIdObjectContext };
    export { ShowCreateUserContext };
    export { ShowErrorsContext };
    export { ShowCountErrorsContext };
    export { ShowObjectFilterContext };
    export { ShowCreateDbContext };
    export { ShowEngineContext };
    export { ShowSchemaFilterContext };
    export { ShowIndexesContext };
    export { ShowLogEventsContext };
    export { ShowMasterLogsContext };
    export { ShowGrantsContext };
    export { ShowSlaveStatusContext };
    export { ShowRoutineContext };
    export { ShowProfileContext };
    export { ShowColumnsContext };
    export { ShowStatementContext };
    export { VariableClauseContext };
    export { ShowCommonEntityContext };
    export { ShowFilterContext };
    export { ShowGlobalInfoClauseContext };
    export { ShowSchemaEntityContext };
    export { ShowProfileTypeContext };
    export { BinlogStatementContext };
    export { CacheIndexStatementContext };
    export { FlushStatementContext };
    export { KillStatementContext };
    export { LoadIndexIntoCacheContext };
    export { ResetStatementContext };
    export { ShutdownStatementContext };
    export { TableIndexesContext };
    export { TableFlushOptionContext };
    export { ChannelFlushOptionContext };
    export { SimpleFlushOptionContext };
    export { FlushOptionContext };
    export { FlushTableOptionContext };
    export { LoadedTableIndexesContext };
    export { SimpleDescribeStatementContext };
    export { FullDescribeStatementContext };
    export { HelpStatementContext };
    export { UseStatementContext };
    export { SignalStatementContext };
    export { ResignalStatementContext };
    export { SignalConditionInformationContext };
    export { DiagnosticsStatementContext };
    export { DiagnosticsConditionInformationNameContext };
    export { DescribeStatementsContext };
    export { DescribeConnectionContext };
    export { DescribeObjectClauseContext };
    export { FullIdContext };
    export { TableNameContext };
    export { FullColumnNameContext };
    export { IndexColumnNameContext };
    export { UserNameContext };
    export { MysqlVariableContext };
    export { CharsetNameContext };
    export { CollationNameContext };
    export { EngineNameContext };
    export { UuidSetContext };
    export { XidContext };
    export { XuidStringIdContext };
    export { AuthPluginContext };
    export { UidContext };
    export { SimpleIdContext };
    export { DottedIdContext };
    export { DecimalLiteralContext };
    export { FileSizeLiteralContext };
    export { StringLiteralContext };
    export { BooleanLiteralContext };
    export { HexadecimalLiteralContext };
    export { NullNotnullContext };
    export { ConstantContext };
    export { SpatialDataTypeContext };
    export { LongVarbinaryDataTypeContext };
    export { CollectionDataTypeContext };
    export { NationalVaryingStringDataTypeContext };
    export { DimensionDataTypeContext };
    export { StringDataTypeContext };
    export { LongVarcharDataTypeContext };
    export { NationalStringDataTypeContext };
    export { SimpleDataTypeContext };
    export { DataTypeContext };
    export { CollectionOptionsContext };
    export { ConvertedDataTypeContext };
    export { LengthOneDimensionContext };
    export { LengthTwoDimensionContext };
    export { LengthTwoOptionalDimensionContext };
    export { UidListContext };
    export { TablesContext };
    export { IndexColumnNamesContext };
    export { ExpressionsContext };
    export { ExpressionsWithDefaultsContext };
    export { ConstantsContext };
    export { SimpleStringsContext };
    export { UserVariablesContext };
    export { DefaultValueContext };
    export { CurrentTimestampContext };
    export { ExpressionOrDefaultContext };
    export { IfExistsContext };
    export { IfNotExistsContext };
    export { SpecificFunctionCallContext };
    export { PasswordFunctionCallContext };
    export { UdfFunctionCallContext };
    export { AggregateFunctionCallContext };
    export { ScalarFunctionCallContext };
    export { FunctionCallContext };
    export { PositionFunctionCallContext };
    export { TrimFunctionCallContext };
    export { SimpleFunctionCallContext };
    export { CharFunctionCallContext };
    export { WeightFunctionCallContext };
    export { GetFormatFunctionCallContext };
    export { CaseFunctionCallContext };
    export { ExtractFunctionCallContext };
    export { DataTypeFunctionCallContext };
    export { ValuesFunctionCallContext };
    export { SubstrFunctionCallContext };
    export { SpecificFunctionContext };
    export { CaseFuncAlternativeContext };
    export { LevelWeightRangeContext };
    export { LevelWeightListContext };
    export { LevelsInWeightStringContext };
    export { LevelInWeightListElementContext };
    export { AggregateWindowedFunctionContext };
    export { ScalarFunctionNameContext };
    export { PasswordFunctionClauseContext };
    export { FunctionArgsContext };
    export { FunctionArgContext };
    export { IsExpressionContext };
    export { NotExpressionContext };
    export { LogicalExpressionContext };
    export { PredicateExpressionContext };
    export { SoundsLikePredicateContext };
    export { ExpressionAtomPredicateContext };
    export { JsonMemberOfPredicateContext };
    export { InPredicateContext };
    export { SubqueryComparasionPredicateContext };
    export { BetweenPredicateContext };
    export { BinaryComparasionPredicateContext };
    export { IsNullPredicateContext };
    export { LikePredicateContext };
    export { RegexpPredicateContext };
    export { UnaryExpressionAtomContext };
    export { CollateExpressionAtomContext };
    export { MysqlVariableExpressionAtomContext };
    export { NestedExpressionAtomContext };
    export { NestedRowExpressionAtomContext };
    export { MathExpressionAtomContext };
    export { ExistsExpressionAtomContext };
    export { IntervalExpressionAtomContext };
    export { JsonExpressionAtomContext };
    export { SubqueryExpressionAtomContext };
    export { ConstantExpressionAtomContext };
    export { FunctionCallExpressionAtomContext };
    export { BinaryExpressionAtomContext };
    export { FullColumnNameExpressionAtomContext };
    export { BitExpressionAtomContext };
    export { UnaryOperatorContext };
    export { ComparisonOperatorContext };
    export { LogicalOperatorContext };
    export { BitOperatorContext };
    export { MathOperatorContext };
    export { JsonOperatorContext };
    export { CharsetNameBaseContext };
    export { TransactionLevelBaseContext };
    export { PrivilegesBaseContext };
    export { IntervalTypeBaseContext };
    export { DataTypeBaseContext };
    export { KeywordsCanBeIdContext };
    export { FunctionNameBaseContext };
}
declare function RootContext(parser: any, parent: any, invokingState: any): this;
declare class RootContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof RootContext;
    EOF(): any;
    sqlStatements(): any;
    MINUSMINUS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SqlStatementsContext(parser: any, parent: any, invokingState: any): this;
declare class SqlStatementsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SqlStatementsContext;
    sqlStatement(i: any): any;
    emptyStatement(i: any): any;
    SEMI(i: any): any;
    MINUSMINUS(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SqlStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SqlStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SqlStatementContext;
    ddlStatement(): any;
    dmlStatement(): any;
    transactionStatement(): any;
    replicationStatement(): any;
    preparedStatement(): any;
    administrationStatement(): any;
    utilityStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function EmptyStatementContext(parser: any, parent: any, invokingState: any): this;
declare class EmptyStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof EmptyStatementContext;
    SEMI(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DdlStatementContext(parser: any, parent: any, invokingState: any): this;
declare class DdlStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DdlStatementContext;
    createDatabase(): any;
    createEvent(): any;
    createIndex(): any;
    createLogfileGroup(): any;
    createProcedure(): any;
    createFunction(): any;
    createServer(): any;
    createTable(): any;
    createTablespaceInnodb(): any;
    createTablespaceNdb(): any;
    createTrigger(): any;
    createView(): any;
    alterDatabase(): any;
    alterEvent(): any;
    alterFunction(): any;
    alterInstance(): any;
    alterLogfileGroup(): any;
    alterProcedure(): any;
    alterServer(): any;
    alterTable(): any;
    alterTablespace(): any;
    alterView(): any;
    dropDatabase(): any;
    dropEvent(): any;
    dropIndex(): any;
    dropLogfileGroup(): any;
    dropProcedure(): any;
    dropFunction(): any;
    dropServer(): any;
    dropTable(): any;
    dropTablespace(): any;
    dropTrigger(): any;
    dropView(): any;
    renameTable(): any;
    truncateTable(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DmlStatementContext(parser: any, parent: any, invokingState: any): this;
declare class DmlStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DmlStatementContext;
    selectStatement(): any;
    insertStatement(): any;
    updateStatement(): any;
    deleteStatement(): any;
    replaceStatement(): any;
    callStatement(): any;
    loadDataStatement(): any;
    loadXmlStatement(): any;
    doStatement(): any;
    handlerStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TransactionStatementContext(parser: any, parent: any, invokingState: any): this;
declare class TransactionStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TransactionStatementContext;
    startTransaction(): any;
    beginWork(): any;
    commitWork(): any;
    rollbackWork(): any;
    savepointStatement(): any;
    rollbackStatement(): any;
    releaseStatement(): any;
    lockTables(): any;
    unlockTables(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ReplicationStatementContext(parser: any, parent: any, invokingState: any): this;
declare class ReplicationStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ReplicationStatementContext;
    changeMaster(): any;
    changeReplicationFilter(): any;
    purgeBinaryLogs(): any;
    resetMaster(): any;
    resetSlave(): any;
    startSlave(): any;
    stopSlave(): any;
    startGroupReplication(): any;
    stopGroupReplication(): any;
    xaStartTransaction(): any;
    xaEndTransaction(): any;
    xaPrepareStatement(): any;
    xaCommitWork(): any;
    xaRollbackWork(): any;
    xaRecoverWork(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PreparedStatementContext(parser: any, parent: any, invokingState: any): this;
declare class PreparedStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PreparedStatementContext;
    prepareStatement(): any;
    executeStatement(): any;
    deallocatePrepare(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CompoundStatementContext(parser: any, parent: any, invokingState: any): this;
declare class CompoundStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CompoundStatementContext;
    blockStatement(): any;
    caseStatement(): any;
    ifStatement(): any;
    leaveStatement(): any;
    loopStatement(): any;
    repeatStatement(): any;
    whileStatement(): any;
    iterateStatement(): any;
    returnStatement(): any;
    cursorStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AdministrationStatementContext(parser: any, parent: any, invokingState: any): this;
declare class AdministrationStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AdministrationStatementContext;
    alterUser(): any;
    createUser(): any;
    dropUser(): any;
    grantStatement(): any;
    grantProxy(): any;
    renameUser(): any;
    revokeStatement(): any;
    revokeProxy(): any;
    analyzeTable(): any;
    checkTable(): any;
    checksumTable(): any;
    optimizeTable(): any;
    repairTable(): any;
    createUdfunction(): any;
    installPlugin(): any;
    uninstallPlugin(): any;
    setStatement(): any;
    showStatement(): any;
    binlogStatement(): any;
    cacheIndexStatement(): any;
    flushStatement(): any;
    killStatement(): any;
    loadIndexIntoCache(): any;
    resetStatement(): any;
    shutdownStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UtilityStatementContext(parser: any, parent: any, invokingState: any): this;
declare class UtilityStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UtilityStatementContext;
    simpleDescribeStatement(): any;
    fullDescribeStatement(): any;
    helpStatement(): any;
    useStatement(): any;
    signalStatement(): any;
    resignalStatement(): any;
    diagnosticsStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateDatabaseContext(parser: any, parent: any, invokingState: any): this;
declare class CreateDatabaseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    dbFormat: any;
    constructor: typeof CreateDatabaseContext;
    CREATE(): any;
    uid(): any;
    DATABASE(): any;
    SCHEMA(): any;
    ifNotExists(): any;
    createDatabaseOption(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateEventContext(parser: any, parent: any, invokingState: any): this;
declare class CreateEventContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CreateEventContext;
    CREATE(): any;
    EVENT(): any;
    fullId(): any;
    ON(i: any): any;
    SCHEDULE(): any;
    scheduleExpression(): any;
    DO(): any;
    routineBody(): any;
    ownerStatement(): any;
    ifNotExists(): any;
    COMPLETION(): any;
    PRESERVE(): any;
    enableType(): any;
    COMMENT(): any;
    STRING_LITERAL(): any;
    NOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateIndexContext(parser: any, parent: any, invokingState: any): this;
declare class CreateIndexContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    intimeAction: any;
    indexCategory: any;
    algType: any;
    lockType: any;
    constructor: typeof CreateIndexContext;
    CREATE(): any;
    INDEX(): any;
    uid(): any;
    ON(): any;
    tableName(): any;
    indexColumnNames(): any;
    indexType(): any;
    indexOption(i: any): any;
    ALGORITHM(i: any): any;
    LOCK(i: any): any;
    ONLINE(): any;
    OFFLINE(): any;
    UNIQUE(): any;
    FULLTEXT(): any;
    SPATIAL(): any;
    DEFAULT(i: any): any;
    INPLACE(i: any): any;
    COPY(i: any): any;
    NONE(i: any): any;
    SHARED(i: any): any;
    EXCLUSIVE(i: any): any;
    EQUAL_SYMBOL(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateLogfileGroupContext(parser: any, parent: any, invokingState: any): this;
declare class CreateLogfileGroupContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    undoFile: any;
    initSize: any;
    undoSize: any;
    redoSize: any;
    comment: any;
    constructor: typeof CreateLogfileGroupContext;
    CREATE(): any;
    LOGFILE(): any;
    GROUP(): any;
    uid(i: any): any;
    ADD(): any;
    UNDOFILE(): any;
    ENGINE(): any;
    engineName(): any;
    STRING_LITERAL(i: any): any;
    INITIAL_SIZE(): any;
    UNDO_BUFFER_SIZE(): any;
    REDO_BUFFER_SIZE(): any;
    NODEGROUP(): any;
    WAIT(): any;
    COMMENT(): any;
    EQUAL_SYMBOL(i: any): any;
    fileSizeLiteral(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateProcedureContext(parser: any, parent: any, invokingState: any): this;
declare class CreateProcedureContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CreateProcedureContext;
    CREATE(): any;
    PROCEDURE(): any;
    fullId(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    routineBody(): any;
    ownerStatement(): any;
    procedureParameter(i: any): any;
    COMMA(i: any): any;
    routineOption(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateFunctionContext(parser: any, parent: any, invokingState: any): this;
declare class CreateFunctionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CreateFunctionContext;
    CREATE(): any;
    FUNCTION(): any;
    fullId(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    RETURNS(): any;
    dataType(): any;
    routineBody(): any;
    returnStatement(): any;
    ownerStatement(): any;
    functionParameter(i: any): any;
    COMMA(i: any): any;
    routineOption(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateServerContext(parser: any, parent: any, invokingState: any): this;
declare class CreateServerContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    wrapperName: any;
    constructor: typeof CreateServerContext;
    CREATE(): any;
    SERVER(): any;
    uid(): any;
    FOREIGN(): any;
    DATA(): any;
    WRAPPER(): any;
    OPTIONS(): any;
    LR_BRACKET(): any;
    serverOption(i: any): any;
    RR_BRACKET(): any;
    MYSQL(): any;
    STRING_LITERAL(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateTableContext(parser: any, parent: any, invokingState: any): this;
declare class CreateTableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CreateTableContext;
    copyFrom(ctx: any): void;
}
declare function CreateTablespaceInnodbContext(parser: any, parent: any, invokingState: any): this;
declare class CreateTablespaceInnodbContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    datafile: any;
    fileBlockSize: any;
    constructor: typeof CreateTablespaceInnodbContext;
    CREATE(): any;
    TABLESPACE(): any;
    uid(): any;
    ADD(): any;
    DATAFILE(): any;
    STRING_LITERAL(): any;
    FILE_BLOCK_SIZE(): any;
    EQUAL_SYMBOL(i: any): any;
    ENGINE(): any;
    engineName(): any;
    fileSizeLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateTablespaceNdbContext(parser: any, parent: any, invokingState: any): this;
declare class CreateTablespaceNdbContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    datafile: any;
    extentSize: any;
    initialSize: any;
    autoextendSize: any;
    maxSize: any;
    comment: any;
    constructor: typeof CreateTablespaceNdbContext;
    CREATE(): any;
    TABLESPACE(): any;
    uid(i: any): any;
    ADD(): any;
    DATAFILE(): any;
    USE(): any;
    LOGFILE(): any;
    GROUP(): any;
    ENGINE(): any;
    engineName(): any;
    STRING_LITERAL(i: any): any;
    EXTENT_SIZE(): any;
    INITIAL_SIZE(): any;
    AUTOEXTEND_SIZE(): any;
    MAX_SIZE(): any;
    NODEGROUP(): any;
    WAIT(): any;
    COMMENT(): any;
    EQUAL_SYMBOL(i: any): any;
    fileSizeLiteral(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateTriggerContext(parser: any, parent: any, invokingState: any): this;
declare class CreateTriggerContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    thisTrigger: any;
    triggerTime: any;
    triggerEvent: any;
    triggerPlace: any;
    otherTrigger: any;
    constructor: typeof CreateTriggerContext;
    CREATE(): any;
    TRIGGER(): any;
    ON(): any;
    tableName(): any;
    FOR(): any;
    EACH(): any;
    ROW(): any;
    routineBody(): any;
    fullId(i: any): any;
    BEFORE(): any;
    AFTER(): any;
    INSERT(): any;
    UPDATE(): any;
    DELETE(): any;
    ownerStatement(): any;
    FOLLOWS(): any;
    PRECEDES(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateViewContext(parser: any, parent: any, invokingState: any): this;
declare class CreateViewContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    algType: any;
    secContext: any;
    checkOption: any;
    constructor: typeof CreateViewContext;
    CREATE(): any;
    VIEW(): any;
    fullId(): any;
    AS(): any;
    selectStatement(): any;
    OR(): any;
    REPLACE(): any;
    ALGORITHM(): any;
    EQUAL_SYMBOL(): any;
    ownerStatement(): any;
    SQL(): any;
    SECURITY(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    WITH(): any;
    CHECK(): any;
    OPTION(): any;
    UNDEFINED(): any;
    MERGE(): any;
    TEMPTABLE(): any;
    DEFINER(): any;
    INVOKER(): any;
    CASCADED(): any;
    LOCAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateDatabaseOptionContext(parser: any, parent: any, invokingState: any): this;
declare class CreateDatabaseOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CreateDatabaseOptionContext;
    CHARACTER(): any;
    SET(): any;
    CHARSET(): any;
    charsetName(): any;
    DEFAULT(i: any): any;
    EQUAL_SYMBOL(): any;
    COLLATE(): any;
    collationName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function OwnerStatementContext(parser: any, parent: any, invokingState: any): this;
declare class OwnerStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof OwnerStatementContext;
    DEFINER(): any;
    EQUAL_SYMBOL(): any;
    userName(): any;
    CURRENT_USER(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ScheduleExpressionContext(parser: any, parent: any, invokingState: any): this;
declare class ScheduleExpressionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ScheduleExpressionContext;
    copyFrom(ctx: any): void;
}
declare function TimestampValueContext(parser: any, parent: any, invokingState: any): this;
declare class TimestampValueContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TimestampValueContext;
    CURRENT_TIMESTAMP(): any;
    stringLiteral(): any;
    decimalLiteral(): any;
    expression(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IntervalExprContext(parser: any, parent: any, invokingState: any): this;
declare class IntervalExprContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IntervalExprContext;
    PLUS(): any;
    INTERVAL(): any;
    intervalType(): any;
    decimalLiteral(): any;
    expression(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IntervalTypeContext(parser: any, parent: any, invokingState: any): this;
declare class IntervalTypeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IntervalTypeContext;
    intervalTypeBase(): any;
    YEAR(): any;
    YEAR_MONTH(): any;
    DAY_HOUR(): any;
    DAY_MINUTE(): any;
    DAY_SECOND(): any;
    HOUR_MINUTE(): any;
    HOUR_SECOND(): any;
    MINUTE_SECOND(): any;
    SECOND_MICROSECOND(): any;
    MINUTE_MICROSECOND(): any;
    HOUR_MICROSECOND(): any;
    DAY_MICROSECOND(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function EnableTypeContext(parser: any, parent: any, invokingState: any): this;
declare class EnableTypeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof EnableTypeContext;
    ENABLE(): any;
    DISABLE(): any;
    ON(): any;
    SLAVE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IndexTypeContext(parser: any, parent: any, invokingState: any): this;
declare class IndexTypeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IndexTypeContext;
    USING(): any;
    BTREE(): any;
    HASH(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IndexOptionContext(parser: any, parent: any, invokingState: any): this;
declare class IndexOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IndexOptionContext;
    KEY_BLOCK_SIZE(): any;
    fileSizeLiteral(): any;
    EQUAL_SYMBOL(): any;
    indexType(): any;
    WITH(): any;
    PARSER(): any;
    uid(): any;
    COMMENT(): any;
    STRING_LITERAL(): any;
    INVISIBLE(): any;
    VISIBLE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ProcedureParameterContext(parser: any, parent: any, invokingState: any): this;
declare class ProcedureParameterContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    direction: any;
    constructor: typeof ProcedureParameterContext;
    uid(): any;
    dataType(): any;
    IN(): any;
    OUT(): any;
    INOUT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FunctionParameterContext(parser: any, parent: any, invokingState: any): this;
declare class FunctionParameterContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof FunctionParameterContext;
    uid(): any;
    dataType(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RoutineOptionContext(parser: any, parent: any, invokingState: any): this;
declare class RoutineOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof RoutineOptionContext;
    copyFrom(ctx: any): void;
}
declare function ServerOptionContext(parser: any, parent: any, invokingState: any): this;
declare class ServerOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ServerOptionContext;
    HOST(): any;
    STRING_LITERAL(): any;
    DATABASE(): any;
    USER(): any;
    PASSWORD(): any;
    SOCKET(): any;
    OWNER(): any;
    PORT(): any;
    decimalLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateDefinitionsContext(parser: any, parent: any, invokingState: any): this;
declare class CreateDefinitionsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CreateDefinitionsContext;
    LR_BRACKET(): any;
    createDefinition(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateDefinitionContext(parser: any, parent: any, invokingState: any): this;
declare class CreateDefinitionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CreateDefinitionContext;
    copyFrom(ctx: any): void;
}
declare function ColumnDefinitionContext(parser: any, parent: any, invokingState: any): this;
declare class ColumnDefinitionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ColumnDefinitionContext;
    dataType(): any;
    columnConstraint(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ColumnConstraintContext(parser: any, parent: any, invokingState: any): this;
declare class ColumnConstraintContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ColumnConstraintContext;
    copyFrom(ctx: any): void;
}
declare function TableConstraintContext(parser: any, parent: any, invokingState: any): this;
declare class TableConstraintContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TableConstraintContext;
    copyFrom(ctx: any): void;
}
declare function ReferenceDefinitionContext(parser: any, parent: any, invokingState: any): this;
declare class ReferenceDefinitionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    matchType: any;
    constructor: typeof ReferenceDefinitionContext;
    REFERENCES(): any;
    tableName(): any;
    indexColumnNames(): any;
    MATCH(): any;
    referenceAction(): any;
    FULL(): any;
    PARTIAL(): any;
    SIMPLE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ReferenceActionContext(parser: any, parent: any, invokingState: any): this;
declare class ReferenceActionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    onDelete: any;
    onUpdate: any;
    constructor: typeof ReferenceActionContext;
    ON(i: any): any;
    DELETE(): any;
    referenceControlType(i: any): any;
    UPDATE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ReferenceControlTypeContext(parser: any, parent: any, invokingState: any): this;
declare class ReferenceControlTypeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ReferenceControlTypeContext;
    RESTRICT(): any;
    CASCADE(): any;
    SET(): any;
    NULL_LITERAL(): any;
    NO(): any;
    ACTION(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IndexColumnDefinitionContext(parser: any, parent: any, invokingState: any): this;
declare class IndexColumnDefinitionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IndexColumnDefinitionContext;
    copyFrom(ctx: any): void;
}
declare function TableOptionContext(parser: any, parent: any, invokingState: any): this;
declare class TableOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TableOptionContext;
    copyFrom(ctx: any): void;
}
declare function TablespaceStorageContext(parser: any, parent: any, invokingState: any): this;
declare class TablespaceStorageContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TablespaceStorageContext;
    STORAGE(): any;
    DISK(): any;
    MEMORY(): any;
    DEFAULT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionDefinitionsContext(parser: any, parent: any, invokingState: any): this;
declare class PartitionDefinitionsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    count: any;
    subCount: any;
    constructor: typeof PartitionDefinitionsContext;
    PARTITION(): any;
    BY(i: any): any;
    partitionFunctionDefinition(): any;
    PARTITIONS(): any;
    SUBPARTITION(): any;
    subpartitionFunctionDefinition(): any;
    LR_BRACKET(): any;
    partitionDefinition(i: any): any;
    RR_BRACKET(): any;
    decimalLiteral(i: any): any;
    SUBPARTITIONS(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionFunctionDefinitionContext(parser: any, parent: any, invokingState: any): this;
declare class PartitionFunctionDefinitionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PartitionFunctionDefinitionContext;
    copyFrom(ctx: any): void;
}
declare function SubpartitionFunctionDefinitionContext(parser: any, parent: any, invokingState: any): this;
declare class SubpartitionFunctionDefinitionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SubpartitionFunctionDefinitionContext;
    copyFrom(ctx: any): void;
}
declare function PartitionDefinitionContext(parser: any, parent: any, invokingState: any): this;
declare class PartitionDefinitionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PartitionDefinitionContext;
    copyFrom(ctx: any): void;
}
declare function PartitionDefinerAtomContext(parser: any, parent: any, invokingState: any): this;
declare class PartitionDefinerAtomContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PartitionDefinerAtomContext;
    constant(): any;
    expression(): any;
    MAXVALUE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionDefinerVectorContext(parser: any, parent: any, invokingState: any): this;
declare class PartitionDefinerVectorContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PartitionDefinerVectorContext;
    LR_BRACKET(): any;
    partitionDefinerAtom(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SubpartitionDefinitionContext(parser: any, parent: any, invokingState: any): this;
declare class SubpartitionDefinitionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SubpartitionDefinitionContext;
    SUBPARTITION(): any;
    uid(): any;
    partitionOption(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionOptionContext(parser: any, parent: any, invokingState: any): this;
declare class PartitionOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PartitionOptionContext;
    copyFrom(ctx: any): void;
}
declare function AlterDatabaseContext(parser: any, parent: any, invokingState: any): this;
declare class AlterDatabaseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AlterDatabaseContext;
    copyFrom(ctx: any): void;
}
declare function AlterEventContext(parser: any, parent: any, invokingState: any): this;
declare class AlterEventContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AlterEventContext;
    ALTER(): any;
    EVENT(): any;
    fullId(i: any): any;
    ownerStatement(): any;
    ON(i: any): any;
    SCHEDULE(): any;
    scheduleExpression(): any;
    COMPLETION(): any;
    PRESERVE(): any;
    RENAME(): any;
    TO(): any;
    enableType(): any;
    COMMENT(): any;
    STRING_LITERAL(): any;
    DO(): any;
    routineBody(): any;
    NOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterFunctionContext(parser: any, parent: any, invokingState: any): this;
declare class AlterFunctionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AlterFunctionContext;
    ALTER(): any;
    FUNCTION(): any;
    fullId(): any;
    routineOption(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterInstanceContext(parser: any, parent: any, invokingState: any): this;
declare class AlterInstanceContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AlterInstanceContext;
    ALTER(): any;
    INSTANCE(): any;
    ROTATE(): any;
    INNODB(): any;
    MASTER(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterLogfileGroupContext(parser: any, parent: any, invokingState: any): this;
declare class AlterLogfileGroupContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AlterLogfileGroupContext;
    ALTER(): any;
    LOGFILE(): any;
    GROUP(): any;
    uid(): any;
    ADD(): any;
    UNDOFILE(): any;
    STRING_LITERAL(): any;
    ENGINE(): any;
    engineName(): any;
    INITIAL_SIZE(): any;
    fileSizeLiteral(): any;
    WAIT(): any;
    EQUAL_SYMBOL(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterProcedureContext(parser: any, parent: any, invokingState: any): this;
declare class AlterProcedureContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AlterProcedureContext;
    ALTER(): any;
    PROCEDURE(): any;
    fullId(): any;
    routineOption(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterServerContext(parser: any, parent: any, invokingState: any): this;
declare class AlterServerContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AlterServerContext;
    ALTER(): any;
    SERVER(): any;
    uid(): any;
    OPTIONS(): any;
    LR_BRACKET(): any;
    serverOption(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterTableContext(parser: any, parent: any, invokingState: any): this;
declare class AlterTableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    intimeAction: any;
    constructor: typeof AlterTableContext;
    ALTER(): any;
    TABLE(): any;
    tableName(): any;
    IGNORE(): any;
    alterSpecification(i: any): any;
    partitionDefinitions(): any;
    ONLINE(): any;
    OFFLINE(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterTablespaceContext(parser: any, parent: any, invokingState: any): this;
declare class AlterTablespaceContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    objectAction: any;
    constructor: typeof AlterTablespaceContext;
    ALTER(): any;
    TABLESPACE(): any;
    uid(): any;
    DATAFILE(): any;
    STRING_LITERAL(): any;
    ENGINE(): any;
    engineName(): any;
    ADD(): any;
    DROP(): any;
    INITIAL_SIZE(): any;
    EQUAL_SYMBOL(i: any): any;
    fileSizeLiteral(): any;
    WAIT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterViewContext(parser: any, parent: any, invokingState: any): this;
declare class AlterViewContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    algType: any;
    secContext: any;
    checkOpt: any;
    constructor: typeof AlterViewContext;
    ALTER(): any;
    VIEW(): any;
    fullId(): any;
    AS(): any;
    selectStatement(): any;
    ALGORITHM(): any;
    EQUAL_SYMBOL(): any;
    ownerStatement(): any;
    SQL(): any;
    SECURITY(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    WITH(): any;
    CHECK(): any;
    OPTION(): any;
    UNDEFINED(): any;
    MERGE(): any;
    TEMPTABLE(): any;
    DEFINER(): any;
    INVOKER(): any;
    CASCADED(): any;
    LOCAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterSpecificationContext(parser: any, parent: any, invokingState: any): this;
declare class AlterSpecificationContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AlterSpecificationContext;
    copyFrom(ctx: any): void;
}
declare function DropDatabaseContext(parser: any, parent: any, invokingState: any): this;
declare class DropDatabaseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    dbFormat: any;
    constructor: typeof DropDatabaseContext;
    DROP(): any;
    uid(): any;
    DATABASE(): any;
    SCHEMA(): any;
    ifExists(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DropEventContext(parser: any, parent: any, invokingState: any): this;
declare class DropEventContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DropEventContext;
    DROP(): any;
    EVENT(): any;
    fullId(): any;
    ifExists(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DropIndexContext(parser: any, parent: any, invokingState: any): this;
declare class DropIndexContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    intimeAction: any;
    algType: any;
    lockType: any;
    constructor: typeof DropIndexContext;
    DROP(): any;
    INDEX(): any;
    uid(): any;
    ON(): any;
    tableName(): any;
    ALGORITHM(i: any): any;
    LOCK(i: any): any;
    ONLINE(): any;
    OFFLINE(): any;
    DEFAULT(i: any): any;
    INPLACE(i: any): any;
    COPY(i: any): any;
    NONE(i: any): any;
    SHARED(i: any): any;
    EXCLUSIVE(i: any): any;
    EQUAL_SYMBOL(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DropLogfileGroupContext(parser: any, parent: any, invokingState: any): this;
declare class DropLogfileGroupContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DropLogfileGroupContext;
    DROP(): any;
    LOGFILE(): any;
    GROUP(): any;
    uid(): any;
    ENGINE(): any;
    EQUAL_SYMBOL(): any;
    engineName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DropProcedureContext(parser: any, parent: any, invokingState: any): this;
declare class DropProcedureContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DropProcedureContext;
    DROP(): any;
    PROCEDURE(): any;
    fullId(): any;
    ifExists(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DropFunctionContext(parser: any, parent: any, invokingState: any): this;
declare class DropFunctionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DropFunctionContext;
    DROP(): any;
    FUNCTION(): any;
    fullId(): any;
    ifExists(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DropServerContext(parser: any, parent: any, invokingState: any): this;
declare class DropServerContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DropServerContext;
    DROP(): any;
    SERVER(): any;
    uid(): any;
    ifExists(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DropTableContext(parser: any, parent: any, invokingState: any): this;
declare class DropTableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    dropType: any;
    constructor: typeof DropTableContext;
    DROP(): any;
    TABLE(): any;
    tables(): any;
    TEMPORARY(): any;
    ifExists(): any;
    RESTRICT(): any;
    CASCADE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DropTablespaceContext(parser: any, parent: any, invokingState: any): this;
declare class DropTablespaceContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DropTablespaceContext;
    DROP(): any;
    TABLESPACE(): any;
    uid(): any;
    ENGINE(): any;
    engineName(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DropTriggerContext(parser: any, parent: any, invokingState: any): this;
declare class DropTriggerContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DropTriggerContext;
    DROP(): any;
    TRIGGER(): any;
    fullId(): any;
    ifExists(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DropViewContext(parser: any, parent: any, invokingState: any): this;
declare class DropViewContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    dropType: any;
    constructor: typeof DropViewContext;
    DROP(): any;
    VIEW(): any;
    fullId(i: any): any;
    ifExists(): any;
    COMMA(i: any): any;
    RESTRICT(): any;
    CASCADE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RenameTableContext(parser: any, parent: any, invokingState: any): this;
declare class RenameTableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof RenameTableContext;
    RENAME(): any;
    TABLE(): any;
    renameTableClause(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RenameTableClauseContext(parser: any, parent: any, invokingState: any): this;
declare class RenameTableClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof RenameTableClauseContext;
    tableName(i: any): any;
    TO(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TruncateTableContext(parser: any, parent: any, invokingState: any): this;
declare class TruncateTableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TruncateTableContext;
    TRUNCATE(): any;
    tableName(): any;
    TABLE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CallStatementContext(parser: any, parent: any, invokingState: any): this;
declare class CallStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CallStatementContext;
    CALL(): any;
    fullId(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    constants(): any;
    expressions(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DeleteStatementContext(parser: any, parent: any, invokingState: any): this;
declare class DeleteStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DeleteStatementContext;
    singleDeleteStatement(): any;
    multipleDeleteStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DoStatementContext(parser: any, parent: any, invokingState: any): this;
declare class DoStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DoStatementContext;
    DO(): any;
    expressions(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerStatementContext(parser: any, parent: any, invokingState: any): this;
declare class HandlerStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof HandlerStatementContext;
    handlerOpenStatement(): any;
    handlerReadIndexStatement(): any;
    handlerReadStatement(): any;
    handlerCloseStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InsertStatementContext(parser: any, parent: any, invokingState: any): this;
declare class InsertStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    priority: any;
    partitions: any;
    columns: any;
    setFirst: any;
    _updatedElement: any;
    setElements: any[];
    duplicatedFirst: any;
    duplicatedElements: any[];
    constructor: typeof InsertStatementContext;
    INSERT(): any;
    tableName(): any;
    insertStatementValue(): any;
    SET(): any;
    IGNORE(): any;
    INTO(): any;
    PARTITION(): any;
    LR_BRACKET(i: any): any;
    RR_BRACKET(i: any): any;
    updatedElement(i: any): any;
    ON(): any;
    DUPLICATE(): any;
    KEY(): any;
    UPDATE(): any;
    LOW_PRIORITY(): any;
    DELAYED(): any;
    HIGH_PRIORITY(): any;
    COMMA(i: any): any;
    uidList(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LoadDataStatementContext(parser: any, parent: any, invokingState: any): this;
declare class LoadDataStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    priority: any;
    filename: any;
    violation: any;
    charset: any;
    fieldsFormat: any;
    linesFormat: any;
    constructor: typeof LoadDataStatementContext;
    LOAD(): any;
    DATA(): any;
    INFILE(): any;
    INTO(): any;
    TABLE(): any;
    tableName(): any;
    STRING_LITERAL(): any;
    LOCAL(): any;
    PARTITION(): any;
    LR_BRACKET(i: any): any;
    uidList(): any;
    RR_BRACKET(i: any): any;
    CHARACTER(): any;
    SET(i: any): any;
    LINES(i: any): any;
    IGNORE(i: any): any;
    decimalLiteral(): any;
    assignmentField(i: any): any;
    updatedElement(i: any): any;
    charsetName(): any;
    LOW_PRIORITY(): any;
    CONCURRENT(): any;
    REPLACE(): any;
    FIELDS(): any;
    COLUMNS(): any;
    ROWS(): any;
    selectFieldsInto(i: any): any;
    selectLinesInto(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LoadXmlStatementContext(parser: any, parent: any, invokingState: any): this;
declare class LoadXmlStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    priority: any;
    filename: any;
    violation: any;
    charset: any;
    tag: any;
    linesFormat: any;
    constructor: typeof LoadXmlStatementContext;
    LOAD(): any;
    XML(): any;
    INFILE(): any;
    INTO(): any;
    TABLE(): any;
    tableName(): any;
    STRING_LITERAL(i: any): any;
    LOCAL(): any;
    CHARACTER(): any;
    SET(i: any): any;
    ROWS(i: any): any;
    IDENTIFIED(): any;
    BY(): any;
    LESS_SYMBOL(): any;
    GREATER_SYMBOL(): any;
    IGNORE(i: any): any;
    decimalLiteral(): any;
    LR_BRACKET(): any;
    assignmentField(i: any): any;
    RR_BRACKET(): any;
    updatedElement(i: any): any;
    charsetName(): any;
    LOW_PRIORITY(): any;
    CONCURRENT(): any;
    REPLACE(): any;
    LINES(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ReplaceStatementContext(parser: any, parent: any, invokingState: any): this;
declare class ReplaceStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    priority: any;
    partitions: any;
    columns: any;
    setFirst: any;
    _updatedElement: any;
    setElements: any[];
    constructor: typeof ReplaceStatementContext;
    REPLACE(): any;
    tableName(): any;
    insertStatementValue(): any;
    SET(): any;
    INTO(): any;
    PARTITION(): any;
    LR_BRACKET(i: any): any;
    RR_BRACKET(i: any): any;
    updatedElement(i: any): any;
    uidList(i: any): any;
    LOW_PRIORITY(): any;
    DELAYED(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SelectStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SelectStatementContext;
    copyFrom(ctx: any): void;
}
declare function UpdateStatementContext(parser: any, parent: any, invokingState: any): this;
declare class UpdateStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UpdateStatementContext;
    singleUpdateStatement(): any;
    multipleUpdateStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InsertStatementValueContext(parser: any, parent: any, invokingState: any): this;
declare class InsertStatementValueContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    insertFormat: any;
    constructor: typeof InsertStatementValueContext;
    selectStatement(): any;
    LR_BRACKET(i: any): any;
    RR_BRACKET(i: any): any;
    VALUES(): any;
    VALUE(): any;
    expressionsWithDefaults(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UpdatedElementContext(parser: any, parent: any, invokingState: any): this;
declare class UpdatedElementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UpdatedElementContext;
    fullColumnName(): any;
    EQUAL_SYMBOL(): any;
    expression(): any;
    DEFAULT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AssignmentFieldContext(parser: any, parent: any, invokingState: any): this;
declare class AssignmentFieldContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AssignmentFieldContext;
    uid(): any;
    LOCAL_ID(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LockClauseContext(parser: any, parent: any, invokingState: any): this;
declare class LockClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LockClauseContext;
    FOR(): any;
    UPDATE(): any;
    LOCK(): any;
    IN(): any;
    SHARE(): any;
    MODE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SingleDeleteStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SingleDeleteStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    priority: any;
    constructor: typeof SingleDeleteStatementContext;
    DELETE(): any;
    FROM(): any;
    tableName(): any;
    QUICK(): any;
    IGNORE(): any;
    PARTITION(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    WHERE(): any;
    expression(): any;
    orderByClause(): any;
    LIMIT(): any;
    limitClauseAtom(): any;
    LOW_PRIORITY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MultipleDeleteStatementContext(parser: any, parent: any, invokingState: any): this;
declare class MultipleDeleteStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    priority: any;
    constructor: typeof MultipleDeleteStatementContext;
    DELETE(): any;
    tableName(i: any): any;
    FROM(): any;
    tableSources(): any;
    USING(): any;
    QUICK(): any;
    IGNORE(): any;
    WHERE(): any;
    expression(): any;
    LOW_PRIORITY(): any;
    DOT(i: any): any;
    STAR(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerOpenStatementContext(parser: any, parent: any, invokingState: any): this;
declare class HandlerOpenStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof HandlerOpenStatementContext;
    HANDLER(): any;
    tableName(): any;
    OPEN(): any;
    uid(): any;
    AS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerReadIndexStatementContext(parser: any, parent: any, invokingState: any): this;
declare class HandlerReadIndexStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    index: any;
    moveOrder: any;
    constructor: typeof HandlerReadIndexStatementContext;
    HANDLER(): any;
    tableName(): any;
    READ(): any;
    uid(): any;
    comparisonOperator(): any;
    LR_BRACKET(): any;
    constants(): any;
    RR_BRACKET(): any;
    WHERE(): any;
    expression(): any;
    LIMIT(): any;
    limitClauseAtom(): any;
    FIRST(): any;
    NEXT(): any;
    PREV(): any;
    LAST(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerReadStatementContext(parser: any, parent: any, invokingState: any): this;
declare class HandlerReadStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    moveOrder: any;
    constructor: typeof HandlerReadStatementContext;
    HANDLER(): any;
    tableName(): any;
    READ(): any;
    FIRST(): any;
    NEXT(): any;
    WHERE(): any;
    expression(): any;
    LIMIT(): any;
    limitClauseAtom(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerCloseStatementContext(parser: any, parent: any, invokingState: any): this;
declare class HandlerCloseStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof HandlerCloseStatementContext;
    HANDLER(): any;
    tableName(): any;
    CLOSE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SingleUpdateStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SingleUpdateStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    priority: any;
    constructor: typeof SingleUpdateStatementContext;
    UPDATE(): any;
    tableName(): any;
    SET(): any;
    updatedElement(i: any): any;
    IGNORE(): any;
    uid(): any;
    COMMA(i: any): any;
    WHERE(): any;
    expression(): any;
    orderByClause(): any;
    limitClause(): any;
    LOW_PRIORITY(): any;
    AS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MultipleUpdateStatementContext(parser: any, parent: any, invokingState: any): this;
declare class MultipleUpdateStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    priority: any;
    constructor: typeof MultipleUpdateStatementContext;
    UPDATE(): any;
    tableSources(): any;
    SET(): any;
    updatedElement(i: any): any;
    IGNORE(): any;
    COMMA(i: any): any;
    WHERE(): any;
    expression(): any;
    LOW_PRIORITY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function OrderByClauseContext(parser: any, parent: any, invokingState: any): this;
declare class OrderByClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof OrderByClauseContext;
    ORDER(): any;
    BY(): any;
    orderByExpression(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function OrderByExpressionContext(parser: any, parent: any, invokingState: any): this;
declare class OrderByExpressionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    order: any;
    constructor: typeof OrderByExpressionContext;
    expression(): any;
    ASC(): any;
    DESC(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableSourcesContext(parser: any, parent: any, invokingState: any): this;
declare class TableSourcesContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TableSourcesContext;
    tableSource(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableSourceContext(parser: any, parent: any, invokingState: any): this;
declare class TableSourceContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TableSourceContext;
    copyFrom(ctx: any): void;
}
declare function TableSourceItemContext(parser: any, parent: any, invokingState: any): this;
declare class TableSourceItemContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TableSourceItemContext;
    copyFrom(ctx: any): void;
}
declare function IndexHintContext(parser: any, parent: any, invokingState: any): this;
declare class IndexHintContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    indexHintAction: any;
    keyFormat: any;
    constructor: typeof IndexHintContext;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    USE(): any;
    IGNORE(): any;
    FORCE(): any;
    INDEX(): any;
    KEY(): any;
    FOR(): any;
    indexHintType(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IndexHintTypeContext(parser: any, parent: any, invokingState: any): this;
declare class IndexHintTypeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IndexHintTypeContext;
    JOIN(): any;
    ORDER(): any;
    BY(): any;
    GROUP(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function JoinPartContext(parser: any, parent: any, invokingState: any): this;
declare class JoinPartContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof JoinPartContext;
    copyFrom(ctx: any): void;
}
declare function QueryExpressionContext(parser: any, parent: any, invokingState: any): this;
declare class QueryExpressionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof QueryExpressionContext;
    LR_BRACKET(): any;
    querySpecification(): any;
    RR_BRACKET(): any;
    queryExpression(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function QueryExpressionNointoContext(parser: any, parent: any, invokingState: any): this;
declare class QueryExpressionNointoContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof QueryExpressionNointoContext;
    LR_BRACKET(): any;
    querySpecificationNointo(): any;
    RR_BRACKET(): any;
    queryExpressionNointo(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function QuerySpecificationContext(parser: any, parent: any, invokingState: any): this;
declare class QuerySpecificationContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof QuerySpecificationContext;
    SELECT(): any;
    selectElements(): any;
    selectSpec(i: any): any;
    selectIntoExpression(): any;
    fromClause(): any;
    orderByClause(): any;
    limitClause(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function QuerySpecificationNointoContext(parser: any, parent: any, invokingState: any): this;
declare class QuerySpecificationNointoContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof QuerySpecificationNointoContext;
    SELECT(): any;
    selectElements(): any;
    selectSpec(i: any): any;
    fromClause(): any;
    orderByClause(): any;
    limitClause(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UnionParenthesisContext(parser: any, parent: any, invokingState: any): this;
declare class UnionParenthesisContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    unionType: any;
    constructor: typeof UnionParenthesisContext;
    UNION(): any;
    queryExpressionNointo(): any;
    ALL(): any;
    DISTINCT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UnionStatementContext(parser: any, parent: any, invokingState: any): this;
declare class UnionStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    unionType: any;
    constructor: typeof UnionStatementContext;
    UNION(): any;
    querySpecificationNointo(): any;
    queryExpressionNointo(): any;
    ALL(): any;
    DISTINCT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectSpecContext(parser: any, parent: any, invokingState: any): this;
declare class SelectSpecContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SelectSpecContext;
    ALL(): any;
    DISTINCT(): any;
    DISTINCTROW(): any;
    HIGH_PRIORITY(): any;
    STRAIGHT_JOIN(): any;
    SQL_SMALL_RESULT(): any;
    SQL_BIG_RESULT(): any;
    SQL_BUFFER_RESULT(): any;
    SQL_CACHE(): any;
    SQL_NO_CACHE(): any;
    SQL_CALC_FOUND_ROWS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectElementsContext(parser: any, parent: any, invokingState: any): this;
declare class SelectElementsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    star: any;
    constructor: typeof SelectElementsContext;
    selectElement(i: any): any;
    STAR(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectElementContext(parser: any, parent: any, invokingState: any): this;
declare class SelectElementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SelectElementContext;
    copyFrom(ctx: any): void;
}
declare function SelectIntoExpressionContext(parser: any, parent: any, invokingState: any): this;
declare class SelectIntoExpressionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SelectIntoExpressionContext;
    copyFrom(ctx: any): void;
}
declare function SelectFieldsIntoContext(parser: any, parent: any, invokingState: any): this;
declare class SelectFieldsIntoContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    terminationField: any;
    enclosion: any;
    escaping: any;
    constructor: typeof SelectFieldsIntoContext;
    TERMINATED(): any;
    BY(): any;
    STRING_LITERAL(): any;
    ENCLOSED(): any;
    OPTIONALLY(): any;
    ESCAPED(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectLinesIntoContext(parser: any, parent: any, invokingState: any): this;
declare class SelectLinesIntoContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    starting: any;
    terminationLine: any;
    constructor: typeof SelectLinesIntoContext;
    STARTING(): any;
    BY(): any;
    STRING_LITERAL(): any;
    TERMINATED(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FromClauseContext(parser: any, parent: any, invokingState: any): this;
declare class FromClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    whereExpr: any;
    havingExpr: any;
    constructor: typeof FromClauseContext;
    FROM(): any;
    tableSources(): any;
    WHERE(): any;
    GROUP(): any;
    BY(): any;
    groupByItem(i: any): any;
    HAVING(): any;
    expression(i: any): any;
    COMMA(i: any): any;
    WITH(): any;
    ROLLUP(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function GroupByItemContext(parser: any, parent: any, invokingState: any): this;
declare class GroupByItemContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    order: any;
    constructor: typeof GroupByItemContext;
    expression(): any;
    ASC(): any;
    DESC(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LimitClauseContext(parser: any, parent: any, invokingState: any): this;
declare class LimitClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    offset: any;
    limit: any;
    constructor: typeof LimitClauseContext;
    LIMIT(): any;
    OFFSET(): any;
    limitClauseAtom(i: any): any;
    COMMA(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LimitClauseAtomContext(parser: any, parent: any, invokingState: any): this;
declare class LimitClauseAtomContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LimitClauseAtomContext;
    decimalLiteral(): any;
    mysqlVariable(): any;
    simpleId(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StartTransactionContext(parser: any, parent: any, invokingState: any): this;
declare class StartTransactionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof StartTransactionContext;
    START(): any;
    TRANSACTION(): any;
    transactionMode(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BeginWorkContext(parser: any, parent: any, invokingState: any): this;
declare class BeginWorkContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof BeginWorkContext;
    BEGIN(): any;
    WORK(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CommitWorkContext(parser: any, parent: any, invokingState: any): this;
declare class CommitWorkContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    nochain: any;
    norelease: any;
    constructor: typeof CommitWorkContext;
    COMMIT(): any;
    WORK(): any;
    AND(): any;
    CHAIN(): any;
    RELEASE(): any;
    NO(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RollbackWorkContext(parser: any, parent: any, invokingState: any): this;
declare class RollbackWorkContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    nochain: any;
    norelease: any;
    constructor: typeof RollbackWorkContext;
    ROLLBACK(): any;
    WORK(): any;
    AND(): any;
    CHAIN(): any;
    RELEASE(): any;
    NO(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SavepointStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SavepointStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SavepointStatementContext;
    SAVEPOINT(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RollbackStatementContext(parser: any, parent: any, invokingState: any): this;
declare class RollbackStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof RollbackStatementContext;
    ROLLBACK(): any;
    TO(): any;
    uid(): any;
    WORK(): any;
    SAVEPOINT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ReleaseStatementContext(parser: any, parent: any, invokingState: any): this;
declare class ReleaseStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ReleaseStatementContext;
    RELEASE(): any;
    SAVEPOINT(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LockTablesContext(parser: any, parent: any, invokingState: any): this;
declare class LockTablesContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LockTablesContext;
    LOCK(): any;
    TABLES(): any;
    lockTableElement(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UnlockTablesContext(parser: any, parent: any, invokingState: any): this;
declare class UnlockTablesContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UnlockTablesContext;
    UNLOCK(): any;
    TABLES(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetAutocommitStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SetAutocommitStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    autocommitValue: any;
    constructor: typeof SetAutocommitStatementContext;
    SET(): any;
    AUTOCOMMIT(): any;
    EQUAL_SYMBOL(): any;
    ZERO_DECIMAL(): any;
    ONE_DECIMAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetTransactionStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SetTransactionStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    transactionContext: any;
    constructor: typeof SetTransactionStatementContext;
    SET(): any;
    TRANSACTION(): any;
    transactionOption(i: any): any;
    COMMA(i: any): any;
    GLOBAL(): any;
    SESSION(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TransactionModeContext(parser: any, parent: any, invokingState: any): this;
declare class TransactionModeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TransactionModeContext;
    WITH(): any;
    CONSISTENT(): any;
    SNAPSHOT(): any;
    READ(): any;
    WRITE(): any;
    ONLY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LockTableElementContext(parser: any, parent: any, invokingState: any): this;
declare class LockTableElementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LockTableElementContext;
    tableName(): any;
    lockAction(): any;
    uid(): any;
    AS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LockActionContext(parser: any, parent: any, invokingState: any): this;
declare class LockActionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LockActionContext;
    READ(): any;
    LOCAL(): any;
    WRITE(): any;
    LOW_PRIORITY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TransactionOptionContext(parser: any, parent: any, invokingState: any): this;
declare class TransactionOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TransactionOptionContext;
    ISOLATION(): any;
    LEVEL(): any;
    transactionLevel(): any;
    READ(): any;
    WRITE(): any;
    ONLY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TransactionLevelContext(parser: any, parent: any, invokingState: any): this;
declare class TransactionLevelContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TransactionLevelContext;
    REPEATABLE(): any;
    READ(): any;
    COMMITTED(): any;
    UNCOMMITTED(): any;
    SERIALIZABLE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ChangeMasterContext(parser: any, parent: any, invokingState: any): this;
declare class ChangeMasterContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ChangeMasterContext;
    CHANGE(): any;
    MASTER(): any;
    TO(): any;
    masterOption(i: any): any;
    COMMA(i: any): any;
    channelOption(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ChangeReplicationFilterContext(parser: any, parent: any, invokingState: any): this;
declare class ChangeReplicationFilterContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ChangeReplicationFilterContext;
    CHANGE(): any;
    REPLICATION(): any;
    FILTER(): any;
    replicationFilter(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PurgeBinaryLogsContext(parser: any, parent: any, invokingState: any): this;
declare class PurgeBinaryLogsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    purgeFormat: any;
    fileName: any;
    timeValue: any;
    constructor: typeof PurgeBinaryLogsContext;
    PURGE(): any;
    LOGS(): any;
    BINARY(): any;
    MASTER(): any;
    TO(): any;
    BEFORE(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ResetMasterContext(parser: any, parent: any, invokingState: any): this;
declare class ResetMasterContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ResetMasterContext;
    RESET(): any;
    MASTER(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ResetSlaveContext(parser: any, parent: any, invokingState: any): this;
declare class ResetSlaveContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ResetSlaveContext;
    RESET(): any;
    SLAVE(): any;
    ALL(): any;
    channelOption(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StartSlaveContext(parser: any, parent: any, invokingState: any): this;
declare class StartSlaveContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof StartSlaveContext;
    START(): any;
    SLAVE(): any;
    threadType(i: any): any;
    UNTIL(): any;
    untilOption(): any;
    connectionOption(i: any): any;
    channelOption(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StopSlaveContext(parser: any, parent: any, invokingState: any): this;
declare class StopSlaveContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof StopSlaveContext;
    STOP(): any;
    SLAVE(): any;
    threadType(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StartGroupReplicationContext(parser: any, parent: any, invokingState: any): this;
declare class StartGroupReplicationContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof StartGroupReplicationContext;
    START(): any;
    GROUP_REPLICATION(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StopGroupReplicationContext(parser: any, parent: any, invokingState: any): this;
declare class StopGroupReplicationContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof StopGroupReplicationContext;
    STOP(): any;
    GROUP_REPLICATION(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MasterOptionContext(parser: any, parent: any, invokingState: any): this;
declare class MasterOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof MasterOptionContext;
    copyFrom(ctx: any): void;
}
declare function StringMasterOptionContext(parser: any, parent: any, invokingState: any): this;
declare class StringMasterOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof StringMasterOptionContext;
    MASTER_BIND(): any;
    MASTER_HOST(): any;
    MASTER_USER(): any;
    MASTER_PASSWORD(): any;
    MASTER_LOG_FILE(): any;
    RELAY_LOG_FILE(): any;
    MASTER_SSL_CA(): any;
    MASTER_SSL_CAPATH(): any;
    MASTER_SSL_CERT(): any;
    MASTER_SSL_CRL(): any;
    MASTER_SSL_CRLPATH(): any;
    MASTER_SSL_KEY(): any;
    MASTER_SSL_CIPHER(): any;
    MASTER_TLS_VERSION(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DecimalMasterOptionContext(parser: any, parent: any, invokingState: any): this;
declare class DecimalMasterOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DecimalMasterOptionContext;
    MASTER_PORT(): any;
    MASTER_CONNECT_RETRY(): any;
    MASTER_RETRY_COUNT(): any;
    MASTER_DELAY(): any;
    MASTER_LOG_POS(): any;
    RELAY_LOG_POS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BoolMasterOptionContext(parser: any, parent: any, invokingState: any): this;
declare class BoolMasterOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof BoolMasterOptionContext;
    MASTER_AUTO_POSITION(): any;
    MASTER_SSL(): any;
    MASTER_SSL_VERIFY_SERVER_CERT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ChannelOptionContext(parser: any, parent: any, invokingState: any): this;
declare class ChannelOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ChannelOptionContext;
    FOR(): any;
    CHANNEL(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ReplicationFilterContext(parser: any, parent: any, invokingState: any): this;
declare class ReplicationFilterContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ReplicationFilterContext;
    copyFrom(ctx: any): void;
}
declare function TablePairContext(parser: any, parent: any, invokingState: any): this;
declare class TablePairContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    firstTable: any;
    secondTable: any;
    constructor: typeof TablePairContext;
    LR_BRACKET(): any;
    COMMA(): any;
    RR_BRACKET(): any;
    tableName(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ThreadTypeContext(parser: any, parent: any, invokingState: any): this;
declare class ThreadTypeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ThreadTypeContext;
    IO_THREAD(): any;
    SQL_THREAD(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UntilOptionContext(parser: any, parent: any, invokingState: any): this;
declare class UntilOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UntilOptionContext;
    copyFrom(ctx: any): void;
}
declare function ConnectionOptionContext(parser: any, parent: any, invokingState: any): this;
declare class ConnectionOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ConnectionOptionContext;
    copyFrom(ctx: any): void;
}
declare function GtuidSetContext(parser: any, parent: any, invokingState: any): this;
declare class GtuidSetContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof GtuidSetContext;
    uuidSet(i: any): any;
    COMMA(i: any): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function XaStartTransactionContext(parser: any, parent: any, invokingState: any): this;
declare class XaStartTransactionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    xaStart: any;
    xaAction: any;
    constructor: typeof XaStartTransactionContext;
    XA(): any;
    xid(): any;
    START(): any;
    BEGIN(): any;
    JOIN(): any;
    RESUME(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function XaEndTransactionContext(parser: any, parent: any, invokingState: any): this;
declare class XaEndTransactionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof XaEndTransactionContext;
    XA(): any;
    END(): any;
    xid(): any;
    SUSPEND(): any;
    FOR(): any;
    MIGRATE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function XaPrepareStatementContext(parser: any, parent: any, invokingState: any): this;
declare class XaPrepareStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof XaPrepareStatementContext;
    XA(): any;
    PREPARE(): any;
    xid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function XaCommitWorkContext(parser: any, parent: any, invokingState: any): this;
declare class XaCommitWorkContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof XaCommitWorkContext;
    XA(): any;
    COMMIT(): any;
    xid(): any;
    ONE(): any;
    PHASE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function XaRollbackWorkContext(parser: any, parent: any, invokingState: any): this;
declare class XaRollbackWorkContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof XaRollbackWorkContext;
    XA(): any;
    ROLLBACK(): any;
    xid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function XaRecoverWorkContext(parser: any, parent: any, invokingState: any): this;
declare class XaRecoverWorkContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof XaRecoverWorkContext;
    XA(): any;
    RECOVER(): any;
    CONVERT(): any;
    xid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PrepareStatementContext(parser: any, parent: any, invokingState: any): this;
declare class PrepareStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    query: any;
    variable: any;
    constructor: typeof PrepareStatementContext;
    PREPARE(): any;
    uid(): any;
    FROM(): any;
    STRING_LITERAL(): any;
    LOCAL_ID(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ExecuteStatementContext(parser: any, parent: any, invokingState: any): this;
declare class ExecuteStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ExecuteStatementContext;
    EXECUTE(): any;
    uid(): any;
    USING(): any;
    userVariables(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DeallocatePrepareContext(parser: any, parent: any, invokingState: any): this;
declare class DeallocatePrepareContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    dropFormat: any;
    constructor: typeof DeallocatePrepareContext;
    PREPARE(): any;
    uid(): any;
    DEALLOCATE(): any;
    DROP(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RoutineBodyContext(parser: any, parent: any, invokingState: any): this;
declare class RoutineBodyContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof RoutineBodyContext;
    blockStatement(): any;
    sqlStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BlockStatementContext(parser: any, parent: any, invokingState: any): this;
declare class BlockStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof BlockStatementContext;
    BEGIN(): any;
    END(): any;
    uid(i: any): any;
    COLON_SYMB(): any;
    declareVariable(i: any): any;
    SEMI(i: any): any;
    declareCondition(i: any): any;
    declareCursor(i: any): any;
    declareHandler(i: any): any;
    procedureSqlStatement(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CaseStatementContext(parser: any, parent: any, invokingState: any): this;
declare class CaseStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CaseStatementContext;
    CASE(i: any): any;
    END(): any;
    uid(): any;
    expression(): any;
    caseAlternative(i: any): any;
    ELSE(): any;
    procedureSqlStatement(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IfStatementContext(parser: any, parent: any, invokingState: any): this;
declare class IfStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    _procedureSqlStatement: any;
    thenStatements: any[];
    elseStatements: any[];
    constructor: typeof IfStatementContext;
    IF(i: any): any;
    expression(): any;
    THEN(): any;
    END(): any;
    elifAlternative(i: any): any;
    ELSE(): any;
    procedureSqlStatement(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IterateStatementContext(parser: any, parent: any, invokingState: any): this;
declare class IterateStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IterateStatementContext;
    ITERATE(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LeaveStatementContext(parser: any, parent: any, invokingState: any): this;
declare class LeaveStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LeaveStatementContext;
    LEAVE(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LoopStatementContext(parser: any, parent: any, invokingState: any): this;
declare class LoopStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LoopStatementContext;
    LOOP(i: any): any;
    END(): any;
    uid(i: any): any;
    COLON_SYMB(): any;
    procedureSqlStatement(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RepeatStatementContext(parser: any, parent: any, invokingState: any): this;
declare class RepeatStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof RepeatStatementContext;
    REPEAT(i: any): any;
    UNTIL(): any;
    expression(): any;
    END(): any;
    uid(i: any): any;
    COLON_SYMB(): any;
    procedureSqlStatement(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ReturnStatementContext(parser: any, parent: any, invokingState: any): this;
declare class ReturnStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ReturnStatementContext;
    RETURN(): any;
    expression(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function WhileStatementContext(parser: any, parent: any, invokingState: any): this;
declare class WhileStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof WhileStatementContext;
    WHILE(i: any): any;
    expression(): any;
    DO(): any;
    END(): any;
    uid(i: any): any;
    COLON_SYMB(): any;
    procedureSqlStatement(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CursorStatementContext(parser: any, parent: any, invokingState: any): this;
declare class CursorStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CursorStatementContext;
    copyFrom(ctx: any): void;
}
declare function DeclareVariableContext(parser: any, parent: any, invokingState: any): this;
declare class DeclareVariableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DeclareVariableContext;
    DECLARE(): any;
    uidList(): any;
    dataType(): any;
    DEFAULT(): any;
    expression(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DeclareConditionContext(parser: any, parent: any, invokingState: any): this;
declare class DeclareConditionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DeclareConditionContext;
    DECLARE(): any;
    uid(): any;
    CONDITION(): any;
    FOR(): any;
    decimalLiteral(): any;
    SQLSTATE(): any;
    STRING_LITERAL(): any;
    VALUE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DeclareCursorContext(parser: any, parent: any, invokingState: any): this;
declare class DeclareCursorContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DeclareCursorContext;
    DECLARE(): any;
    uid(): any;
    CURSOR(): any;
    FOR(): any;
    selectStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DeclareHandlerContext(parser: any, parent: any, invokingState: any): this;
declare class DeclareHandlerContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    handlerAction: any;
    constructor: typeof DeclareHandlerContext;
    DECLARE(): any;
    HANDLER(): any;
    FOR(): any;
    handlerConditionValue(i: any): any;
    routineBody(): any;
    CONTINUE(): any;
    EXIT(): any;
    UNDO(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerConditionValueContext(parser: any, parent: any, invokingState: any): this;
declare class HandlerConditionValueContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof HandlerConditionValueContext;
    copyFrom(ctx: any): void;
}
declare function ProcedureSqlStatementContext(parser: any, parent: any, invokingState: any): this;
declare class ProcedureSqlStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ProcedureSqlStatementContext;
    SEMI(): any;
    compoundStatement(): any;
    sqlStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CaseAlternativeContext(parser: any, parent: any, invokingState: any): this;
declare class CaseAlternativeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CaseAlternativeContext;
    WHEN(): any;
    THEN(): any;
    constant(): any;
    expression(): any;
    procedureSqlStatement(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ElifAlternativeContext(parser: any, parent: any, invokingState: any): this;
declare class ElifAlternativeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ElifAlternativeContext;
    ELSEIF(): any;
    expression(): any;
    THEN(): any;
    procedureSqlStatement(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterUserContext(parser: any, parent: any, invokingState: any): this;
declare class AlterUserContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AlterUserContext;
    copyFrom(ctx: any): void;
}
declare function CreateUserContext(parser: any, parent: any, invokingState: any): this;
declare class CreateUserContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CreateUserContext;
    copyFrom(ctx: any): void;
}
declare function DropUserContext(parser: any, parent: any, invokingState: any): this;
declare class DropUserContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DropUserContext;
    DROP(): any;
    USER(): any;
    userName(i: any): any;
    ifExists(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function GrantStatementContext(parser: any, parent: any, invokingState: any): this;
declare class GrantStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    privilegeObject: any;
    tlsNone: any;
    constructor: typeof GrantStatementContext;
    GRANT(i: any): any;
    privelegeClause(i: any): any;
    ON(): any;
    privilegeLevel(): any;
    TO(): any;
    userAuthOption(i: any): any;
    COMMA(i: any): any;
    REQUIRE(): any;
    WITH(): any;
    TABLE(): any;
    FUNCTION(): any;
    PROCEDURE(): any;
    tlsOption(i: any): any;
    NONE(): any;
    OPTION(i: any): any;
    userResourceOption(i: any): any;
    AND(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function GrantProxyContext(parser: any, parent: any, invokingState: any): this;
declare class GrantProxyContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    fromFirst: any;
    toFirst: any;
    _userName: any;
    toOther: any[];
    constructor: typeof GrantProxyContext;
    GRANT(i: any): any;
    PROXY(): any;
    ON(): any;
    TO(): any;
    userName(i: any): any;
    COMMA(i: any): any;
    WITH(): any;
    OPTION(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RenameUserContext(parser: any, parent: any, invokingState: any): this;
declare class RenameUserContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof RenameUserContext;
    RENAME(): any;
    USER(): any;
    renameUserClause(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RevokeStatementContext(parser: any, parent: any, invokingState: any): this;
declare class RevokeStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof RevokeStatementContext;
    copyFrom(ctx: any): void;
}
declare function RevokeProxyContext(parser: any, parent: any, invokingState: any): this;
declare class RevokeProxyContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    onUser: any;
    fromFirst: any;
    _userName: any;
    fromOther: any[];
    constructor: typeof RevokeProxyContext;
    REVOKE(): any;
    PROXY(): any;
    ON(): any;
    FROM(): any;
    userName(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetPasswordStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SetPasswordStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SetPasswordStatementContext;
    SET(): any;
    PASSWORD(): any;
    EQUAL_SYMBOL(): any;
    passwordFunctionClause(): any;
    STRING_LITERAL(): any;
    FOR(): any;
    userName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UserSpecificationContext(parser: any, parent: any, invokingState: any): this;
declare class UserSpecificationContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UserSpecificationContext;
    userName(): any;
    userPasswordOption(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UserAuthOptionContext(parser: any, parent: any, invokingState: any): this;
declare class UserAuthOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UserAuthOptionContext;
    copyFrom(ctx: any): void;
}
declare function TlsOptionContext(parser: any, parent: any, invokingState: any): this;
declare class TlsOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TlsOptionContext;
    SSL(): any;
    X509(): any;
    CIPHER(): any;
    STRING_LITERAL(): any;
    ISSUER(): any;
    SUBJECT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UserResourceOptionContext(parser: any, parent: any, invokingState: any): this;
declare class UserResourceOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UserResourceOptionContext;
    MAX_QUERIES_PER_HOUR(): any;
    decimalLiteral(): any;
    MAX_UPDATES_PER_HOUR(): any;
    MAX_CONNECTIONS_PER_HOUR(): any;
    MAX_USER_CONNECTIONS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UserPasswordOptionContext(parser: any, parent: any, invokingState: any): this;
declare class UserPasswordOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    expireType: any;
    constructor: typeof UserPasswordOptionContext;
    PASSWORD(): any;
    EXPIRE(): any;
    decimalLiteral(): any;
    DAY(): any;
    DEFAULT(): any;
    NEVER(): any;
    INTERVAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UserLockOptionContext(parser: any, parent: any, invokingState: any): this;
declare class UserLockOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    lockType: any;
    constructor: typeof UserLockOptionContext;
    ACCOUNT(): any;
    LOCK(): any;
    UNLOCK(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PrivelegeClauseContext(parser: any, parent: any, invokingState: any): this;
declare class PrivelegeClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PrivelegeClauseContext;
    privilege(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PrivilegeContext(parser: any, parent: any, invokingState: any): this;
declare class PrivilegeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PrivilegeContext;
    ALL(): any;
    PRIVILEGES(): any;
    ALTER(): any;
    ROUTINE(): any;
    CREATE(): any;
    TEMPORARY(): any;
    TABLES(): any;
    VIEW(): any;
    USER(): any;
    TABLESPACE(): any;
    ROLE(): any;
    DELETE(): any;
    DROP(): any;
    EVENT(): any;
    EXECUTE(): any;
    FILE(): any;
    GRANT(): any;
    OPTION(): any;
    INDEX(): any;
    INSERT(): any;
    LOCK(): any;
    PROCESS(): any;
    PROXY(): any;
    REFERENCES(): any;
    RELOAD(): any;
    REPLICATION(): any;
    CLIENT(): any;
    SLAVE(): any;
    SELECT(): any;
    SHOW(): any;
    DATABASES(): any;
    SHUTDOWN(): any;
    SUPER(): any;
    TRIGGER(): any;
    UPDATE(): any;
    USAGE(): any;
    AUDIT_ADMIN(): any;
    BACKUP_ADMIN(): any;
    BINLOG_ADMIN(): any;
    BINLOG_ENCRYPTION_ADMIN(): any;
    CLONE_ADMIN(): any;
    CONNECTION_ADMIN(): any;
    ENCRYPTION_KEY_ADMIN(): any;
    FIREWALL_ADMIN(): any;
    FIREWALL_USER(): any;
    GROUP_REPLICATION_ADMIN(): any;
    INNODB_REDO_LOG_ARCHIVE(): any;
    NDB_STORED_USER(): any;
    PERSIST_RO_VARIABLES_ADMIN(): any;
    REPLICATION_APPLIER(): any;
    REPLICATION_SLAVE_ADMIN(): any;
    RESOURCE_GROUP_ADMIN(): any;
    RESOURCE_GROUP_USER(): any;
    ROLE_ADMIN(): any;
    SESSION_VARIABLES_ADMIN(): any;
    SET_USER_ID(): any;
    SHOW_ROUTINE(): any;
    SYSTEM_VARIABLES_ADMIN(): any;
    TABLE_ENCRYPTION_ADMIN(): any;
    VERSION_TOKEN_ADMIN(): any;
    XA_RECOVER_ADMIN(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PrivilegeLevelContext(parser: any, parent: any, invokingState: any): this;
declare class PrivilegeLevelContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PrivilegeLevelContext;
    copyFrom(ctx: any): void;
}
declare function RenameUserClauseContext(parser: any, parent: any, invokingState: any): this;
declare class RenameUserClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    fromFirst: any;
    toFirst: any;
    constructor: typeof RenameUserClauseContext;
    TO(): any;
    userName(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AnalyzeTableContext(parser: any, parent: any, invokingState: any): this;
declare class AnalyzeTableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    actionOption: any;
    constructor: typeof AnalyzeTableContext;
    ANALYZE(): any;
    TABLE(): any;
    tables(): any;
    NO_WRITE_TO_BINLOG(): any;
    LOCAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CheckTableContext(parser: any, parent: any, invokingState: any): this;
declare class CheckTableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CheckTableContext;
    CHECK(): any;
    TABLE(): any;
    tables(): any;
    checkTableOption(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ChecksumTableContext(parser: any, parent: any, invokingState: any): this;
declare class ChecksumTableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    actionOption: any;
    constructor: typeof ChecksumTableContext;
    CHECKSUM(): any;
    TABLE(): any;
    tables(): any;
    QUICK(): any;
    EXTENDED(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function OptimizeTableContext(parser: any, parent: any, invokingState: any): this;
declare class OptimizeTableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    actionOption: any;
    constructor: typeof OptimizeTableContext;
    OPTIMIZE(): any;
    tables(): any;
    TABLE(): any;
    TABLES(): any;
    NO_WRITE_TO_BINLOG(): any;
    LOCAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RepairTableContext(parser: any, parent: any, invokingState: any): this;
declare class RepairTableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    actionOption: any;
    constructor: typeof RepairTableContext;
    REPAIR(): any;
    TABLE(): any;
    tables(): any;
    QUICK(): any;
    EXTENDED(): any;
    USE_FRM(): any;
    NO_WRITE_TO_BINLOG(): any;
    LOCAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CheckTableOptionContext(parser: any, parent: any, invokingState: any): this;
declare class CheckTableOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CheckTableOptionContext;
    FOR(): any;
    UPGRADE(): any;
    QUICK(): any;
    FAST(): any;
    MEDIUM(): any;
    EXTENDED(): any;
    CHANGED(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateUdfunctionContext(parser: any, parent: any, invokingState: any): this;
declare class CreateUdfunctionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    returnType: any;
    constructor: typeof CreateUdfunctionContext;
    CREATE(): any;
    FUNCTION(): any;
    uid(): any;
    RETURNS(): any;
    SONAME(): any;
    STRING_LITERAL(): any;
    STRING(): any;
    INTEGER(): any;
    REAL(): any;
    DECIMAL(): any;
    AGGREGATE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InstallPluginContext(parser: any, parent: any, invokingState: any): this;
declare class InstallPluginContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof InstallPluginContext;
    INSTALL(): any;
    PLUGIN(): any;
    uid(): any;
    SONAME(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UninstallPluginContext(parser: any, parent: any, invokingState: any): this;
declare class UninstallPluginContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UninstallPluginContext;
    UNINSTALL(): any;
    PLUGIN(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SetStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SetStatementContext;
    copyFrom(ctx: any): void;
}
declare function ShowStatementContext(parser: any, parent: any, invokingState: any): this;
declare class ShowStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ShowStatementContext;
    copyFrom(ctx: any): void;
}
declare function VariableClauseContext(parser: any, parent: any, invokingState: any): this;
declare class VariableClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof VariableClauseContext;
    LOCAL_ID(): any;
    GLOBAL_ID(): any;
    uid(): any;
    GLOBAL(): any;
    SESSION(): any;
    LOCAL(): any;
    AT_SIGN(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowCommonEntityContext(parser: any, parent: any, invokingState: any): this;
declare class ShowCommonEntityContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ShowCommonEntityContext;
    CHARACTER(): any;
    SET(): any;
    COLLATION(): any;
    DATABASES(): any;
    SCHEMAS(): any;
    FUNCTION(): any;
    STATUS(): any;
    PROCEDURE(): any;
    VARIABLES(): any;
    GLOBAL(): any;
    SESSION(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowFilterContext(parser: any, parent: any, invokingState: any): this;
declare class ShowFilterContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ShowFilterContext;
    LIKE(): any;
    STRING_LITERAL(): any;
    WHERE(): any;
    expression(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowGlobalInfoClauseContext(parser: any, parent: any, invokingState: any): this;
declare class ShowGlobalInfoClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ShowGlobalInfoClauseContext;
    ENGINES(): any;
    STORAGE(): any;
    MASTER(): any;
    STATUS(): any;
    PLUGINS(): any;
    PRIVILEGES(): any;
    PROCESSLIST(): any;
    FULL(): any;
    PROFILES(): any;
    SLAVE(): any;
    HOSTS(): any;
    AUTHORS(): any;
    CONTRIBUTORS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowSchemaEntityContext(parser: any, parent: any, invokingState: any): this;
declare class ShowSchemaEntityContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ShowSchemaEntityContext;
    EVENTS(): any;
    TABLE(): any;
    STATUS(): any;
    TABLES(): any;
    FULL(): any;
    TRIGGERS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowProfileTypeContext(parser: any, parent: any, invokingState: any): this;
declare class ShowProfileTypeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ShowProfileTypeContext;
    ALL(): any;
    BLOCK(): any;
    IO(): any;
    CONTEXT(): any;
    SWITCHES(): any;
    CPU(): any;
    IPC(): any;
    MEMORY(): any;
    PAGE(): any;
    FAULTS(): any;
    SOURCE(): any;
    SWAPS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BinlogStatementContext(parser: any, parent: any, invokingState: any): this;
declare class BinlogStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof BinlogStatementContext;
    BINLOG(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CacheIndexStatementContext(parser: any, parent: any, invokingState: any): this;
declare class CacheIndexStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    schema: any;
    constructor: typeof CacheIndexStatementContext;
    CACHE(): any;
    INDEX(): any;
    tableIndexes(i: any): any;
    IN(): any;
    uid(): any;
    COMMA(i: any): any;
    PARTITION(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    uidList(): any;
    ALL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FlushStatementContext(parser: any, parent: any, invokingState: any): this;
declare class FlushStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    flushFormat: any;
    constructor: typeof FlushStatementContext;
    FLUSH(): any;
    flushOption(i: any): any;
    COMMA(i: any): any;
    NO_WRITE_TO_BINLOG(): any;
    LOCAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function KillStatementContext(parser: any, parent: any, invokingState: any): this;
declare class KillStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    connectionFormat: any;
    constructor: typeof KillStatementContext;
    KILL(): any;
    decimalLiteral(i: any): any;
    CONNECTION(): any;
    QUERY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LoadIndexIntoCacheContext(parser: any, parent: any, invokingState: any): this;
declare class LoadIndexIntoCacheContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LoadIndexIntoCacheContext;
    LOAD(): any;
    INDEX(): any;
    INTO(): any;
    CACHE(): any;
    loadedTableIndexes(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ResetStatementContext(parser: any, parent: any, invokingState: any): this;
declare class ResetStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ResetStatementContext;
    RESET(): any;
    QUERY(): any;
    CACHE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShutdownStatementContext(parser: any, parent: any, invokingState: any): this;
declare class ShutdownStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ShutdownStatementContext;
    SHUTDOWN(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableIndexesContext(parser: any, parent: any, invokingState: any): this;
declare class TableIndexesContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    indexFormat: any;
    constructor: typeof TableIndexesContext;
    tableName(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    INDEX(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FlushOptionContext(parser: any, parent: any, invokingState: any): this;
declare class FlushOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof FlushOptionContext;
    copyFrom(ctx: any): void;
}
declare function FlushTableOptionContext(parser: any, parent: any, invokingState: any): this;
declare class FlushTableOptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof FlushTableOptionContext;
    WITH(): any;
    READ(): any;
    LOCK(): any;
    FOR(): any;
    EXPORT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LoadedTableIndexesContext(parser: any, parent: any, invokingState: any): this;
declare class LoadedTableIndexesContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    partitionList: any;
    indexFormat: any;
    indexList: any;
    constructor: typeof LoadedTableIndexesContext;
    tableName(): any;
    PARTITION(): any;
    LR_BRACKET(i: any): any;
    RR_BRACKET(i: any): any;
    IGNORE(): any;
    LEAVES(): any;
    uidList(i: any): any;
    ALL(): any;
    INDEX(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SimpleDescribeStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SimpleDescribeStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    command: any;
    column: any;
    pattern: any;
    constructor: typeof SimpleDescribeStatementContext;
    tableName(): any;
    EXPLAIN(): any;
    DESCRIBE(): any;
    DESC(): any;
    uid(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FullDescribeStatementContext(parser: any, parent: any, invokingState: any): this;
declare class FullDescribeStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    command: any;
    formatType: any;
    formatValue: any;
    constructor: typeof FullDescribeStatementContext;
    describeObjectClause(): any;
    EXPLAIN(): any;
    DESCRIBE(): any;
    DESC(): any;
    EQUAL_SYMBOL(): any;
    EXTENDED(): any;
    PARTITIONS(): any;
    FORMAT(): any;
    TRADITIONAL(): any;
    JSON(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HelpStatementContext(parser: any, parent: any, invokingState: any): this;
declare class HelpStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof HelpStatementContext;
    HELP(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UseStatementContext(parser: any, parent: any, invokingState: any): this;
declare class UseStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UseStatementContext;
    USE(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SignalStatementContext(parser: any, parent: any, invokingState: any): this;
declare class SignalStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SignalStatementContext;
    SIGNAL(): any;
    ID(): any;
    REVERSE_QUOTE_ID(): any;
    SET(): any;
    signalConditionInformation(i: any): any;
    SQLSTATE(): any;
    stringLiteral(): any;
    COMMA(i: any): any;
    VALUE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ResignalStatementContext(parser: any, parent: any, invokingState: any): this;
declare class ResignalStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ResignalStatementContext;
    RESIGNAL(): any;
    ID(): any;
    REVERSE_QUOTE_ID(): any;
    SET(): any;
    signalConditionInformation(i: any): any;
    SQLSTATE(): any;
    stringLiteral(): any;
    COMMA(i: any): any;
    VALUE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SignalConditionInformationContext(parser: any, parent: any, invokingState: any): this;
declare class SignalConditionInformationContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SignalConditionInformationContext;
    EQUAL_SYMBOL(): any;
    CLASS_ORIGIN(): any;
    SUBCLASS_ORIGIN(): any;
    MESSAGE_TEXT(): any;
    MYSQL_ERRNO(): any;
    CONSTRAINT_CATALOG(): any;
    CONSTRAINT_SCHEMA(): any;
    CONSTRAINT_NAME(): any;
    CATALOG_NAME(): any;
    SCHEMA_NAME(): any;
    TABLE_NAME(): any;
    COLUMN_NAME(): any;
    CURSOR_NAME(): any;
    stringLiteral(): any;
    DECIMAL_LITERAL(): any;
    mysqlVariable(): any;
    simpleId(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DiagnosticsStatementContext(parser: any, parent: any, invokingState: any): this;
declare class DiagnosticsStatementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DiagnosticsStatementContext;
    GET(): any;
    DIAGNOSTICS(): any;
    CURRENT(): any;
    STACKED(): any;
    variableClause(i: any): any;
    EQUAL_SYMBOL(i: any): any;
    CONDITION(): any;
    diagnosticsConditionInformationName(i: any): any;
    NUMBER(i: any): any;
    ROW_COUNT(i: any): any;
    decimalLiteral(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DiagnosticsConditionInformationNameContext(parser: any, parent: any, invokingState: any): this;
declare class DiagnosticsConditionInformationNameContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DiagnosticsConditionInformationNameContext;
    CLASS_ORIGIN(): any;
    SUBCLASS_ORIGIN(): any;
    RETURNED_SQLSTATE(): any;
    MESSAGE_TEXT(): any;
    MYSQL_ERRNO(): any;
    CONSTRAINT_CATALOG(): any;
    CONSTRAINT_SCHEMA(): any;
    CONSTRAINT_NAME(): any;
    CATALOG_NAME(): any;
    SCHEMA_NAME(): any;
    TABLE_NAME(): any;
    COLUMN_NAME(): any;
    CURSOR_NAME(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DescribeObjectClauseContext(parser: any, parent: any, invokingState: any): this;
declare class DescribeObjectClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DescribeObjectClauseContext;
    copyFrom(ctx: any): void;
}
declare function FullIdContext(parser: any, parent: any, invokingState: any): this;
declare class FullIdContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof FullIdContext;
    uid(i: any): any;
    DOT_ID(): any;
    DOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableNameContext(parser: any, parent: any, invokingState: any): this;
declare class TableNameContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TableNameContext;
    fullId(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FullColumnNameContext(parser: any, parent: any, invokingState: any): this;
declare class FullColumnNameContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof FullColumnNameContext;
    uid(): any;
    dottedId(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IndexColumnNameContext(parser: any, parent: any, invokingState: any): this;
declare class IndexColumnNameContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    sortType: any;
    constructor: typeof IndexColumnNameContext;
    uid(): any;
    STRING_LITERAL(): any;
    LR_BRACKET(): any;
    decimalLiteral(): any;
    RR_BRACKET(): any;
    ASC(): any;
    DESC(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UserNameContext(parser: any, parent: any, invokingState: any): this;
declare class UserNameContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UserNameContext;
    STRING_USER_NAME(): any;
    ID(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MysqlVariableContext(parser: any, parent: any, invokingState: any): this;
declare class MysqlVariableContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof MysqlVariableContext;
    LOCAL_ID(): any;
    GLOBAL_ID(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CharsetNameContext(parser: any, parent: any, invokingState: any): this;
declare class CharsetNameContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CharsetNameContext;
    BINARY(): any;
    charsetNameBase(): any;
    STRING_LITERAL(): any;
    CHARSET_REVERSE_QOUTE_STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CollationNameContext(parser: any, parent: any, invokingState: any): this;
declare class CollationNameContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CollationNameContext;
    uid(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function EngineNameContext(parser: any, parent: any, invokingState: any): this;
declare class EngineNameContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof EngineNameContext;
    ARCHIVE(): any;
    BLACKHOLE(): any;
    CSV(): any;
    FEDERATED(): any;
    INNODB(): any;
    MEMORY(): any;
    MRG_MYISAM(): any;
    MYISAM(): any;
    NDB(): any;
    NDBCLUSTER(): any;
    PERFORMANCE_SCHEMA(): any;
    TOKUDB(): any;
    ID(): any;
    STRING_LITERAL(): any;
    REVERSE_QUOTE_ID(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UuidSetContext(parser: any, parent: any, invokingState: any): this;
declare class UuidSetContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UuidSetContext;
    decimalLiteral(i: any): any;
    MINUS(i: any): any;
    COLON_SYMB(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function XidContext(parser: any, parent: any, invokingState: any): this;
declare class XidContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    globalTableUid: any;
    qualifier: any;
    idFormat: any;
    constructor: typeof XidContext;
    xuidStringId(i: any): any;
    COMMA(i: any): any;
    decimalLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function XuidStringIdContext(parser: any, parent: any, invokingState: any): this;
declare class XuidStringIdContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof XuidStringIdContext;
    STRING_LITERAL(): any;
    BIT_STRING(): any;
    HEXADECIMAL_LITERAL(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AuthPluginContext(parser: any, parent: any, invokingState: any): this;
declare class AuthPluginContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof AuthPluginContext;
    uid(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UidContext(parser: any, parent: any, invokingState: any): this;
declare class UidContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UidContext;
    simpleId(): any;
    REVERSE_QUOTE_ID(): any;
    CHARSET_REVERSE_QOUTE_STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SimpleIdContext(parser: any, parent: any, invokingState: any): this;
declare class SimpleIdContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SimpleIdContext;
    ID(): any;
    charsetNameBase(): any;
    transactionLevelBase(): any;
    engineName(): any;
    privilegesBase(): any;
    intervalTypeBase(): any;
    dataTypeBase(): any;
    keywordsCanBeId(): any;
    functionNameBase(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DottedIdContext(parser: any, parent: any, invokingState: any): this;
declare class DottedIdContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DottedIdContext;
    DOT_ID(): any;
    DOT(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DecimalLiteralContext(parser: any, parent: any, invokingState: any): this;
declare class DecimalLiteralContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DecimalLiteralContext;
    DECIMAL_LITERAL(): any;
    ZERO_DECIMAL(): any;
    ONE_DECIMAL(): any;
    TWO_DECIMAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FileSizeLiteralContext(parser: any, parent: any, invokingState: any): this;
declare class FileSizeLiteralContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof FileSizeLiteralContext;
    FILESIZE_LITERAL(): any;
    decimalLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StringLiteralContext(parser: any, parent: any, invokingState: any): this;
declare class StringLiteralContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof StringLiteralContext;
    STRING_LITERAL(i: any): any;
    START_NATIONAL_STRING_LITERAL(): any;
    STRING_CHARSET_NAME(): any;
    COLLATE(): any;
    collationName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BooleanLiteralContext(parser: any, parent: any, invokingState: any): this;
declare class BooleanLiteralContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof BooleanLiteralContext;
    TRUE(): any;
    FALSE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HexadecimalLiteralContext(parser: any, parent: any, invokingState: any): this;
declare class HexadecimalLiteralContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof HexadecimalLiteralContext;
    HEXADECIMAL_LITERAL(): any;
    STRING_CHARSET_NAME(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function NullNotnullContext(parser: any, parent: any, invokingState: any): this;
declare class NullNotnullContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof NullNotnullContext;
    NULL_LITERAL(): any;
    NULL_SPEC_LITERAL(): any;
    NOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ConstantContext(parser: any, parent: any, invokingState: any): this;
declare class ConstantContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    nullLiteral: any;
    constructor: typeof ConstantContext;
    stringLiteral(): any;
    decimalLiteral(): any;
    MINUS(): any;
    hexadecimalLiteral(): any;
    booleanLiteral(): any;
    REAL_LITERAL(): any;
    BIT_STRING(): any;
    NULL_LITERAL(): any;
    NULL_SPEC_LITERAL(): any;
    NOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DataTypeContext(parser: any, parent: any, invokingState: any): this;
declare class DataTypeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DataTypeContext;
    copyFrom(ctx: any): void;
}
declare function CollectionOptionsContext(parser: any, parent: any, invokingState: any): this;
declare class CollectionOptionsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CollectionOptionsContext;
    LR_BRACKET(): any;
    STRING_LITERAL(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ConvertedDataTypeContext(parser: any, parent: any, invokingState: any): this;
declare class ConvertedDataTypeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    typeName: any;
    constructor: typeof ConvertedDataTypeContext;
    BINARY(): any;
    NCHAR(): any;
    lengthOneDimension(): any;
    CHAR(): any;
    charsetName(): any;
    CHARACTER(): any;
    SET(): any;
    CHARSET(): any;
    DATE(): any;
    DATETIME(): any;
    TIME(): any;
    JSON(): any;
    DECIMAL(): any;
    lengthTwoDimension(): any;
    SIGNED(): any;
    UNSIGNED(): any;
    INTEGER(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LengthOneDimensionContext(parser: any, parent: any, invokingState: any): this;
declare class LengthOneDimensionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LengthOneDimensionContext;
    LR_BRACKET(): any;
    decimalLiteral(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LengthTwoDimensionContext(parser: any, parent: any, invokingState: any): this;
declare class LengthTwoDimensionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LengthTwoDimensionContext;
    LR_BRACKET(): any;
    decimalLiteral(i: any): any;
    COMMA(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LengthTwoOptionalDimensionContext(parser: any, parent: any, invokingState: any): this;
declare class LengthTwoOptionalDimensionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LengthTwoOptionalDimensionContext;
    LR_BRACKET(): any;
    decimalLiteral(i: any): any;
    RR_BRACKET(): any;
    COMMA(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UidListContext(parser: any, parent: any, invokingState: any): this;
declare class UidListContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UidListContext;
    uid(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TablesContext(parser: any, parent: any, invokingState: any): this;
declare class TablesContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TablesContext;
    tableName(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IndexColumnNamesContext(parser: any, parent: any, invokingState: any): this;
declare class IndexColumnNamesContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IndexColumnNamesContext;
    LR_BRACKET(): any;
    indexColumnName(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ExpressionsContext(parser: any, parent: any, invokingState: any): this;
declare class ExpressionsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ExpressionsContext;
    expression(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ExpressionsWithDefaultsContext(parser: any, parent: any, invokingState: any): this;
declare class ExpressionsWithDefaultsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ExpressionsWithDefaultsContext;
    expressionOrDefault(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ConstantsContext(parser: any, parent: any, invokingState: any): this;
declare class ConstantsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ConstantsContext;
    constant(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SimpleStringsContext(parser: any, parent: any, invokingState: any): this;
declare class SimpleStringsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SimpleStringsContext;
    STRING_LITERAL(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UserVariablesContext(parser: any, parent: any, invokingState: any): this;
declare class UserVariablesContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UserVariablesContext;
    LOCAL_ID(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DefaultValueContext(parser: any, parent: any, invokingState: any): this;
declare class DefaultValueContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DefaultValueContext;
    NULL_LITERAL(): any;
    constant(): any;
    currentTimestamp(i: any): any;
    LR_BRACKET(): any;
    expression(): any;
    RR_BRACKET(): any;
    ON(): any;
    UPDATE(): any;
    unaryOperator(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CurrentTimestampContext(parser: any, parent: any, invokingState: any): this;
declare class CurrentTimestampContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CurrentTimestampContext;
    NOW(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    CURRENT_TIMESTAMP(): any;
    LOCALTIME(): any;
    LOCALTIMESTAMP(): any;
    decimalLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ExpressionOrDefaultContext(parser: any, parent: any, invokingState: any): this;
declare class ExpressionOrDefaultContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ExpressionOrDefaultContext;
    expression(): any;
    DEFAULT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IfExistsContext(parser: any, parent: any, invokingState: any): this;
declare class IfExistsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IfExistsContext;
    IF(): any;
    EXISTS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IfNotExistsContext(parser: any, parent: any, invokingState: any): this;
declare class IfNotExistsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IfNotExistsContext;
    IF(): any;
    NOT(): any;
    EXISTS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FunctionCallContext(parser: any, parent: any, invokingState: any): this;
declare class FunctionCallContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof FunctionCallContext;
    copyFrom(ctx: any): void;
}
declare function SpecificFunctionContext(parser: any, parent: any, invokingState: any): this;
declare class SpecificFunctionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof SpecificFunctionContext;
    copyFrom(ctx: any): void;
}
declare function CaseFuncAlternativeContext(parser: any, parent: any, invokingState: any): this;
declare class CaseFuncAlternativeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    condition: any;
    consequent: any;
    constructor: typeof CaseFuncAlternativeContext;
    WHEN(): any;
    THEN(): any;
    functionArg(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LevelsInWeightStringContext(parser: any, parent: any, invokingState: any): this;
declare class LevelsInWeightStringContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LevelsInWeightStringContext;
    copyFrom(ctx: any): void;
}
declare function LevelInWeightListElementContext(parser: any, parent: any, invokingState: any): this;
declare class LevelInWeightListElementContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    orderType: any;
    constructor: typeof LevelInWeightListElementContext;
    decimalLiteral(): any;
    ASC(): any;
    DESC(): any;
    REVERSE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AggregateWindowedFunctionContext(parser: any, parent: any, invokingState: any): this;
declare class AggregateWindowedFunctionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    aggregator: any;
    starArg: any;
    separator: any;
    constructor: typeof AggregateWindowedFunctionContext;
    LR_BRACKET(): any;
    functionArg(): any;
    RR_BRACKET(): any;
    AVG(): any;
    MAX(): any;
    MIN(): any;
    SUM(): any;
    ALL(): any;
    DISTINCT(): any;
    COUNT(): any;
    STAR(): any;
    functionArgs(): any;
    BIT_AND(): any;
    BIT_OR(): any;
    BIT_XOR(): any;
    STD(): any;
    STDDEV(): any;
    STDDEV_POP(): any;
    STDDEV_SAMP(): any;
    VAR_POP(): any;
    VAR_SAMP(): any;
    VARIANCE(): any;
    GROUP_CONCAT(): any;
    ORDER(): any;
    BY(): any;
    orderByExpression(i: any): any;
    SEPARATOR(): any;
    STRING_LITERAL(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ScalarFunctionNameContext(parser: any, parent: any, invokingState: any): this;
declare class ScalarFunctionNameContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ScalarFunctionNameContext;
    functionNameBase(): any;
    ASCII(): any;
    CURDATE(): any;
    CURRENT_DATE(): any;
    CURRENT_TIME(): any;
    CURRENT_TIMESTAMP(): any;
    CURTIME(): any;
    DATE_ADD(): any;
    DATE_SUB(): any;
    IF(): any;
    INSERT(): any;
    LOCALTIME(): any;
    LOCALTIMESTAMP(): any;
    MID(): any;
    NOW(): any;
    REPLACE(): any;
    SUBSTR(): any;
    SUBSTRING(): any;
    SYSDATE(): any;
    TRIM(): any;
    UTC_DATE(): any;
    UTC_TIME(): any;
    UTC_TIMESTAMP(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PasswordFunctionClauseContext(parser: any, parent: any, invokingState: any): this;
declare class PasswordFunctionClauseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    functionName: any;
    constructor: typeof PasswordFunctionClauseContext;
    LR_BRACKET(): any;
    functionArg(): any;
    RR_BRACKET(): any;
    PASSWORD(): any;
    OLD_PASSWORD(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FunctionArgsContext(parser: any, parent: any, invokingState: any): this;
declare class FunctionArgsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof FunctionArgsContext;
    constant(i: any): any;
    fullColumnName(i: any): any;
    functionCall(i: any): any;
    expression(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FunctionArgContext(parser: any, parent: any, invokingState: any): this;
declare class FunctionArgContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof FunctionArgContext;
    constant(): any;
    fullColumnName(): any;
    functionCall(): any;
    expression(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PredicateContext(parser: any, parent: any, invokingState: any): this;
declare class PredicateContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PredicateContext;
    copyFrom(ctx: any): void;
}
declare function ExpressionAtomContext(parser: any, parent: any, invokingState: any): this;
declare class ExpressionAtomContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ExpressionAtomContext;
    copyFrom(ctx: any): void;
}
declare function UnaryOperatorContext(parser: any, parent: any, invokingState: any): this;
declare class UnaryOperatorContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof UnaryOperatorContext;
    EXCLAMATION_SYMBOL(): any;
    BIT_NOT_OP(): any;
    PLUS(): any;
    MINUS(): any;
    NOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ComparisonOperatorContext(parser: any, parent: any, invokingState: any): this;
declare class ComparisonOperatorContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof ComparisonOperatorContext;
    EQUAL_SYMBOL(): any;
    GREATER_SYMBOL(): any;
    LESS_SYMBOL(): any;
    EXCLAMATION_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LogicalOperatorContext(parser: any, parent: any, invokingState: any): this;
declare class LogicalOperatorContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof LogicalOperatorContext;
    AND(): any;
    BIT_AND_OP(i: any): any;
    XOR(): any;
    OR(): any;
    BIT_OR_OP(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BitOperatorContext(parser: any, parent: any, invokingState: any): this;
declare class BitOperatorContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof BitOperatorContext;
    LESS_SYMBOL(i: any): any;
    GREATER_SYMBOL(i: any): any;
    BIT_AND_OP(): any;
    BIT_XOR_OP(): any;
    BIT_OR_OP(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MathOperatorContext(parser: any, parent: any, invokingState: any): this;
declare class MathOperatorContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof MathOperatorContext;
    STAR(): any;
    DIVIDE(): any;
    MODULE(): any;
    DIV(): any;
    MOD(): any;
    PLUS(): any;
    MINUS(): any;
    MINUSMINUS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function JsonOperatorContext(parser: any, parent: any, invokingState: any): this;
declare class JsonOperatorContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof JsonOperatorContext;
    MINUS(): any;
    GREATER_SYMBOL(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CharsetNameBaseContext(parser: any, parent: any, invokingState: any): this;
declare class CharsetNameBaseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof CharsetNameBaseContext;
    ARMSCII8(): any;
    ASCII(): any;
    BIG5(): any;
    CP1250(): any;
    CP1251(): any;
    CP1256(): any;
    CP1257(): any;
    CP850(): any;
    CP852(): any;
    CP866(): any;
    CP932(): any;
    DEC8(): any;
    EUCJPMS(): any;
    EUCKR(): any;
    GB2312(): any;
    GBK(): any;
    GEOSTD8(): any;
    GREEK(): any;
    HEBREW(): any;
    HP8(): any;
    KEYBCS2(): any;
    KOI8R(): any;
    KOI8U(): any;
    LATIN1(): any;
    LATIN2(): any;
    LATIN5(): any;
    LATIN7(): any;
    MACCE(): any;
    MACROMAN(): any;
    SJIS(): any;
    SWE7(): any;
    TIS620(): any;
    UCS2(): any;
    UJIS(): any;
    UTF16(): any;
    UTF16LE(): any;
    UTF32(): any;
    UTF8(): any;
    UTF8MB3(): any;
    UTF8MB4(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TransactionLevelBaseContext(parser: any, parent: any, invokingState: any): this;
declare class TransactionLevelBaseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof TransactionLevelBaseContext;
    REPEATABLE(): any;
    COMMITTED(): any;
    UNCOMMITTED(): any;
    SERIALIZABLE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PrivilegesBaseContext(parser: any, parent: any, invokingState: any): this;
declare class PrivilegesBaseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof PrivilegesBaseContext;
    TABLES(): any;
    ROUTINE(): any;
    EXECUTE(): any;
    FILE(): any;
    PROCESS(): any;
    RELOAD(): any;
    SHUTDOWN(): any;
    SUPER(): any;
    PRIVILEGES(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IntervalTypeBaseContext(parser: any, parent: any, invokingState: any): this;
declare class IntervalTypeBaseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof IntervalTypeBaseContext;
    QUARTER(): any;
    MONTH(): any;
    DAY(): any;
    HOUR(): any;
    MINUTE(): any;
    WEEK(): any;
    SECOND(): any;
    MICROSECOND(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DataTypeBaseContext(parser: any, parent: any, invokingState: any): this;
declare class DataTypeBaseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof DataTypeBaseContext;
    DATE(): any;
    TIME(): any;
    TIMESTAMP(): any;
    DATETIME(): any;
    YEAR(): any;
    ENUM(): any;
    TEXT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function KeywordsCanBeIdContext(parser: any, parent: any, invokingState: any): this;
declare class KeywordsCanBeIdContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof KeywordsCanBeIdContext;
    ACCOUNT(): any;
    ACTION(): any;
    AFTER(): any;
    AGGREGATE(): any;
    ALGORITHM(): any;
    ANY(): any;
    AT(): any;
    AUDIT_ADMIN(): any;
    AUTHORS(): any;
    AUTOCOMMIT(): any;
    AUTOEXTEND_SIZE(): any;
    AUTO_INCREMENT(): any;
    AVG(): any;
    AVG_ROW_LENGTH(): any;
    BACKUP_ADMIN(): any;
    BEGIN(): any;
    BINLOG(): any;
    BINLOG_ADMIN(): any;
    BINLOG_ENCRYPTION_ADMIN(): any;
    BIT(): any;
    BIT_AND(): any;
    BIT_OR(): any;
    BIT_XOR(): any;
    BLOCK(): any;
    BOOL(): any;
    BOOLEAN(): any;
    BTREE(): any;
    CACHE(): any;
    CASCADED(): any;
    CHAIN(): any;
    CHANGED(): any;
    CHANNEL(): any;
    CHECKSUM(): any;
    PAGE_CHECKSUM(): any;
    CATALOG_NAME(): any;
    CIPHER(): any;
    CLASS_ORIGIN(): any;
    CLIENT(): any;
    CLONE_ADMIN(): any;
    CLOSE(): any;
    COALESCE(): any;
    CODE(): any;
    COLUMNS(): any;
    COLUMN_FORMAT(): any;
    COLUMN_NAME(): any;
    COMMENT(): any;
    COMMIT(): any;
    COMPACT(): any;
    COMPLETION(): any;
    COMPRESSED(): any;
    COMPRESSION(): any;
    CONCURRENT(): any;
    CONNECTION(): any;
    CONNECTION_ADMIN(): any;
    CONSISTENT(): any;
    CONSTRAINT_CATALOG(): any;
    CONSTRAINT_NAME(): any;
    CONSTRAINT_SCHEMA(): any;
    CONTAINS(): any;
    CONTEXT(): any;
    CONTRIBUTORS(): any;
    COPY(): any;
    COUNT(): any;
    CPU(): any;
    CURRENT(): any;
    CURSOR_NAME(): any;
    DATA(): any;
    DATAFILE(): any;
    DEALLOCATE(): any;
    DEFAULT_AUTH(): any;
    DEFINER(): any;
    DELAY_KEY_WRITE(): any;
    DES_KEY_FILE(): any;
    DIAGNOSTICS(): any;
    DIRECTORY(): any;
    DISABLE(): any;
    DISCARD(): any;
    DISK(): any;
    DO(): any;
    DUMPFILE(): any;
    DUPLICATE(): any;
    DYNAMIC(): any;
    ENABLE(): any;
    ENCRYPTION(): any;
    ENCRYPTION_KEY_ADMIN(): any;
    END(): any;
    ENDS(): any;
    ENGINE(): any;
    ENGINES(): any;
    ERROR(): any;
    ERRORS(): any;
    ESCAPE(): any;
    EVEN(): any;
    EVENT(): any;
    EVENTS(): any;
    EVERY(): any;
    EXCHANGE(): any;
    EXCLUSIVE(): any;
    EXPIRE(): any;
    EXPORT(): any;
    EXTENDED(): any;
    EXTENT_SIZE(): any;
    FAST(): any;
    FAULTS(): any;
    FIELDS(): any;
    FILE_BLOCK_SIZE(): any;
    FILTER(): any;
    FIREWALL_ADMIN(): any;
    FIREWALL_USER(): any;
    FIRST(): any;
    FIXED(): any;
    FLUSH(): any;
    FOLLOWS(): any;
    FOUND(): any;
    FULL(): any;
    FUNCTION(): any;
    GENERAL(): any;
    GLOBAL(): any;
    GRANTS(): any;
    GROUP_CONCAT(): any;
    GROUP_REPLICATION(): any;
    GROUP_REPLICATION_ADMIN(): any;
    HANDLER(): any;
    HASH(): any;
    HELP(): any;
    HOST(): any;
    HOSTS(): any;
    IDENTIFIED(): any;
    IGNORE_SERVER_IDS(): any;
    IMPORT(): any;
    INDEXES(): any;
    INITIAL_SIZE(): any;
    INNODB_REDO_LOG_ARCHIVE(): any;
    INPLACE(): any;
    INSERT_METHOD(): any;
    INSTALL(): any;
    INSTANCE(): any;
    INTERNAL(): any;
    INVOKER(): any;
    IO(): any;
    IO_THREAD(): any;
    IPC(): any;
    ISOLATION(): any;
    ISSUER(): any;
    JSON(): any;
    KEY_BLOCK_SIZE(): any;
    LANGUAGE(): any;
    LAST(): any;
    LEAVES(): any;
    LESS(): any;
    LEVEL(): any;
    LIST(): any;
    LOCAL(): any;
    LOGFILE(): any;
    LOGS(): any;
    MASTER(): any;
    MASTER_AUTO_POSITION(): any;
    MASTER_CONNECT_RETRY(): any;
    MASTER_DELAY(): any;
    MASTER_HEARTBEAT_PERIOD(): any;
    MASTER_HOST(): any;
    MASTER_LOG_FILE(): any;
    MASTER_LOG_POS(): any;
    MASTER_PASSWORD(): any;
    MASTER_PORT(): any;
    MASTER_RETRY_COUNT(): any;
    MASTER_SSL(): any;
    MASTER_SSL_CA(): any;
    MASTER_SSL_CAPATH(): any;
    MASTER_SSL_CERT(): any;
    MASTER_SSL_CIPHER(): any;
    MASTER_SSL_CRL(): any;
    MASTER_SSL_CRLPATH(): any;
    MASTER_SSL_KEY(): any;
    MASTER_TLS_VERSION(): any;
    MASTER_USER(): any;
    MAX_CONNECTIONS_PER_HOUR(): any;
    MAX_QUERIES_PER_HOUR(): any;
    MAX(): any;
    MAX_ROWS(): any;
    MAX_SIZE(): any;
    MAX_UPDATES_PER_HOUR(): any;
    MAX_USER_CONNECTIONS(): any;
    MEDIUM(): any;
    MEMBER(): any;
    MEMORY(): any;
    MERGE(): any;
    MESSAGE_TEXT(): any;
    MID(): any;
    MIGRATE(): any;
    MIN(): any;
    MIN_ROWS(): any;
    MODE(): any;
    MODIFY(): any;
    MUTEX(): any;
    MYSQL(): any;
    MYSQL_ERRNO(): any;
    NAME(): any;
    NAMES(): any;
    NCHAR(): any;
    NDB_STORED_USER(): any;
    NEVER(): any;
    NEXT(): any;
    NO(): any;
    NODEGROUP(): any;
    NONE(): any;
    NUMBER(): any;
    OFFLINE(): any;
    OFFSET(): any;
    OF(): any;
    OJ(): any;
    OLD_PASSWORD(): any;
    ONE(): any;
    ONLINE(): any;
    ONLY(): any;
    OPEN(): any;
    OPTIMIZER_COSTS(): any;
    OPTIONS(): any;
    ORDER(): any;
    OWNER(): any;
    PACK_KEYS(): any;
    PAGE(): any;
    PARSER(): any;
    PARTIAL(): any;
    PARTITIONING(): any;
    PARTITIONS(): any;
    PASSWORD(): any;
    PERSIST_RO_VARIABLES_ADMIN(): any;
    PHASE(): any;
    PLUGINS(): any;
    PLUGIN_DIR(): any;
    PLUGIN(): any;
    PORT(): any;
    PRECEDES(): any;
    PREPARE(): any;
    PRESERVE(): any;
    PREV(): any;
    PROCESSLIST(): any;
    PROFILE(): any;
    PROFILES(): any;
    PROXY(): any;
    QUERY(): any;
    QUICK(): any;
    REBUILD(): any;
    RECOVER(): any;
    REDO_BUFFER_SIZE(): any;
    REDUNDANT(): any;
    RELAY(): any;
    RELAYLOG(): any;
    RELAY_LOG_FILE(): any;
    RELAY_LOG_POS(): any;
    REMOVE(): any;
    REORGANIZE(): any;
    REPAIR(): any;
    REPLICATE_DO_DB(): any;
    REPLICATE_DO_TABLE(): any;
    REPLICATE_IGNORE_DB(): any;
    REPLICATE_IGNORE_TABLE(): any;
    REPLICATE_REWRITE_DB(): any;
    REPLICATE_WILD_DO_TABLE(): any;
    REPLICATE_WILD_IGNORE_TABLE(): any;
    REPLICATION(): any;
    REPLICATION_APPLIER(): any;
    REPLICATION_SLAVE_ADMIN(): any;
    RESET(): any;
    RESOURCE_GROUP_ADMIN(): any;
    RESOURCE_GROUP_USER(): any;
    RESUME(): any;
    RETURNED_SQLSTATE(): any;
    RETURNS(): any;
    ROLE(): any;
    ROLE_ADMIN(): any;
    ROLLBACK(): any;
    ROLLUP(): any;
    ROTATE(): any;
    ROW(): any;
    ROWS(): any;
    ROW_FORMAT(): any;
    SAVEPOINT(): any;
    SCHEDULE(): any;
    SCHEMA_NAME(): any;
    SECURITY(): any;
    SERIAL(): any;
    SERVER(): any;
    SESSION(): any;
    SESSION_VARIABLES_ADMIN(): any;
    SET_USER_ID(): any;
    SHARE(): any;
    SHARED(): any;
    SHOW_ROUTINE(): any;
    SIGNED(): any;
    SIMPLE(): any;
    SLAVE(): any;
    SLOW(): any;
    SNAPSHOT(): any;
    SOCKET(): any;
    SOME(): any;
    SONAME(): any;
    SOUNDS(): any;
    SOURCE(): any;
    SQL_AFTER_GTIDS(): any;
    SQL_AFTER_MTS_GAPS(): any;
    SQL_BEFORE_GTIDS(): any;
    SQL_BUFFER_RESULT(): any;
    SQL_CACHE(): any;
    SQL_NO_CACHE(): any;
    SQL_THREAD(): any;
    STACKED(): any;
    START(): any;
    STARTS(): any;
    STATS_AUTO_RECALC(): any;
    STATS_PERSISTENT(): any;
    STATS_SAMPLE_PAGES(): any;
    STATUS(): any;
    STD(): any;
    STDDEV(): any;
    STDDEV_POP(): any;
    STDDEV_SAMP(): any;
    STOP(): any;
    STORAGE(): any;
    STRING(): any;
    SUBCLASS_ORIGIN(): any;
    SUBJECT(): any;
    SUBPARTITION(): any;
    SUBPARTITIONS(): any;
    SUM(): any;
    SUSPEND(): any;
    SWAPS(): any;
    SWITCHES(): any;
    SYSTEM_VARIABLES_ADMIN(): any;
    TABLE_NAME(): any;
    TABLESPACE(): any;
    TABLE_ENCRYPTION_ADMIN(): any;
    TEMPORARY(): any;
    TEMPTABLE(): any;
    THAN(): any;
    TRADITIONAL(): any;
    TRANSACTION(): any;
    TRANSACTIONAL(): any;
    TRIGGERS(): any;
    TRUNCATE(): any;
    UNDEFINED(): any;
    UNDOFILE(): any;
    UNDO_BUFFER_SIZE(): any;
    UNINSTALL(): any;
    UNKNOWN(): any;
    UNTIL(): any;
    UPGRADE(): any;
    USER(): any;
    USE_FRM(): any;
    USER_RESOURCES(): any;
    VALIDATION(): any;
    VALUE(): any;
    VAR_POP(): any;
    VAR_SAMP(): any;
    VARIABLES(): any;
    VARIANCE(): any;
    VERSION_TOKEN_ADMIN(): any;
    VIEW(): any;
    WAIT(): any;
    WARNINGS(): any;
    WITHOUT(): any;
    WORK(): any;
    WRAPPER(): any;
    X509(): any;
    XA(): any;
    XA_RECOVER_ADMIN(): any;
    XML(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FunctionNameBaseContext(parser: any, parent: any, invokingState: any): this;
declare class FunctionNameBaseContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    constructor: typeof FunctionNameBaseContext;
    ABS(): any;
    ACOS(): any;
    ADDDATE(): any;
    ADDTIME(): any;
    AES_DECRYPT(): any;
    AES_ENCRYPT(): any;
    AREA(): any;
    ASBINARY(): any;
    ASIN(): any;
    ASTEXT(): any;
    ASWKB(): any;
    ASWKT(): any;
    ASYMMETRIC_DECRYPT(): any;
    ASYMMETRIC_DERIVE(): any;
    ASYMMETRIC_ENCRYPT(): any;
    ASYMMETRIC_SIGN(): any;
    ASYMMETRIC_VERIFY(): any;
    ATAN(): any;
    ATAN2(): any;
    BENCHMARK(): any;
    BIN(): any;
    BIT_COUNT(): any;
    BIT_LENGTH(): any;
    BUFFER(): any;
    CEIL(): any;
    CEILING(): any;
    CENTROID(): any;
    CHARACTER_LENGTH(): any;
    CHARSET(): any;
    CHAR_LENGTH(): any;
    COERCIBILITY(): any;
    COLLATION(): any;
    COMPRESS(): any;
    CONCAT(): any;
    CONCAT_WS(): any;
    CONNECTION_ID(): any;
    CONV(): any;
    CONVERT_TZ(): any;
    COS(): any;
    COT(): any;
    COUNT(): any;
    CRC32(): any;
    CREATE_ASYMMETRIC_PRIV_KEY(): any;
    CREATE_ASYMMETRIC_PUB_KEY(): any;
    CREATE_DH_PARAMETERS(): any;
    CREATE_DIGEST(): any;
    CROSSES(): any;
    DATABASE(): any;
    DATE(): any;
    DATEDIFF(): any;
    DATE_FORMAT(): any;
    DAY(): any;
    DAYNAME(): any;
    DAYOFMONTH(): any;
    DAYOFWEEK(): any;
    DAYOFYEAR(): any;
    DECODE(): any;
    DEGREES(): any;
    DES_DECRYPT(): any;
    DES_ENCRYPT(): any;
    DIMENSION(): any;
    DISJOINT(): any;
    ELT(): any;
    ENCODE(): any;
    ENCRYPT(): any;
    ENDPOINT(): any;
    ENVELOPE(): any;
    EQUALS(): any;
    EXP(): any;
    EXPORT_SET(): any;
    EXTERIORRING(): any;
    EXTRACTVALUE(): any;
    FIELD(): any;
    FIND_IN_SET(): any;
    FLOOR(): any;
    FORMAT(): any;
    FOUND_ROWS(): any;
    FROM_BASE64(): any;
    FROM_DAYS(): any;
    FROM_UNIXTIME(): any;
    GEOMCOLLFROMTEXT(): any;
    GEOMCOLLFROMWKB(): any;
    GEOMETRYCOLLECTION(): any;
    GEOMETRYCOLLECTIONFROMTEXT(): any;
    GEOMETRYCOLLECTIONFROMWKB(): any;
    GEOMETRYFROMTEXT(): any;
    GEOMETRYFROMWKB(): any;
    GEOMETRYN(): any;
    GEOMETRYTYPE(): any;
    GEOMFROMTEXT(): any;
    GEOMFROMWKB(): any;
    GET_FORMAT(): any;
    GET_LOCK(): any;
    GLENGTH(): any;
    GREATEST(): any;
    GTID_SUBSET(): any;
    GTID_SUBTRACT(): any;
    HEX(): any;
    HOUR(): any;
    IFNULL(): any;
    INET6_ATON(): any;
    INET6_NTOA(): any;
    INET_ATON(): any;
    INET_NTOA(): any;
    INSTR(): any;
    INTERIORRINGN(): any;
    INTERSECTS(): any;
    INVISIBLE(): any;
    ISCLOSED(): any;
    ISEMPTY(): any;
    ISNULL(): any;
    ISSIMPLE(): any;
    IS_FREE_LOCK(): any;
    IS_IPV4(): any;
    IS_IPV4_COMPAT(): any;
    IS_IPV4_MAPPED(): any;
    IS_IPV6(): any;
    IS_USED_LOCK(): any;
    LAST_INSERT_ID(): any;
    LCASE(): any;
    LEAST(): any;
    LEFT(): any;
    LENGTH(): any;
    LINEFROMTEXT(): any;
    LINEFROMWKB(): any;
    LINESTRING(): any;
    LINESTRINGFROMTEXT(): any;
    LINESTRINGFROMWKB(): any;
    LN(): any;
    LOAD_FILE(): any;
    LOCATE(): any;
    LOG(): any;
    LOG10(): any;
    LOG2(): any;
    LOWER(): any;
    LPAD(): any;
    LTRIM(): any;
    MAKEDATE(): any;
    MAKETIME(): any;
    MAKE_SET(): any;
    MASTER_POS_WAIT(): any;
    MBRCONTAINS(): any;
    MBRDISJOINT(): any;
    MBREQUAL(): any;
    MBRINTERSECTS(): any;
    MBROVERLAPS(): any;
    MBRTOUCHES(): any;
    MBRWITHIN(): any;
    MD5(): any;
    MICROSECOND(): any;
    MINUTE(): any;
    MLINEFROMTEXT(): any;
    MLINEFROMWKB(): any;
    MOD(): any;
    MONTH(): any;
    MONTHNAME(): any;
    MPOINTFROMTEXT(): any;
    MPOINTFROMWKB(): any;
    MPOLYFROMTEXT(): any;
    MPOLYFROMWKB(): any;
    MULTILINESTRING(): any;
    MULTILINESTRINGFROMTEXT(): any;
    MULTILINESTRINGFROMWKB(): any;
    MULTIPOINT(): any;
    MULTIPOINTFROMTEXT(): any;
    MULTIPOINTFROMWKB(): any;
    MULTIPOLYGON(): any;
    MULTIPOLYGONFROMTEXT(): any;
    MULTIPOLYGONFROMWKB(): any;
    NAME_CONST(): any;
    NULLIF(): any;
    NUMGEOMETRIES(): any;
    NUMINTERIORRINGS(): any;
    NUMPOINTS(): any;
    OCT(): any;
    OCTET_LENGTH(): any;
    ORD(): any;
    OVERLAPS(): any;
    PERIOD_ADD(): any;
    PERIOD_DIFF(): any;
    PI(): any;
    POINT(): any;
    POINTFROMTEXT(): any;
    POINTFROMWKB(): any;
    POINTN(): any;
    POLYFROMTEXT(): any;
    POLYFROMWKB(): any;
    POLYGON(): any;
    POLYGONFROMTEXT(): any;
    POLYGONFROMWKB(): any;
    POSITION(): any;
    POW(): any;
    POWER(): any;
    QUARTER(): any;
    QUOTE(): any;
    RADIANS(): any;
    RAND(): any;
    RANDOM_BYTES(): any;
    RELEASE_LOCK(): any;
    REVERSE(): any;
    RIGHT(): any;
    ROUND(): any;
    ROW_COUNT(): any;
    RPAD(): any;
    RTRIM(): any;
    SECOND(): any;
    SEC_TO_TIME(): any;
    SCHEMA(): any;
    SESSION_USER(): any;
    SESSION_VARIABLES_ADMIN(): any;
    SHA(): any;
    SHA1(): any;
    SHA2(): any;
    SIGN(): any;
    SIN(): any;
    SLEEP(): any;
    SOUNDEX(): any;
    SQL_THREAD_WAIT_AFTER_GTIDS(): any;
    SQRT(): any;
    SRID(): any;
    STARTPOINT(): any;
    STRCMP(): any;
    STR_TO_DATE(): any;
    ST_AREA(): any;
    ST_ASBINARY(): any;
    ST_ASTEXT(): any;
    ST_ASWKB(): any;
    ST_ASWKT(): any;
    ST_BUFFER(): any;
    ST_CENTROID(): any;
    ST_CONTAINS(): any;
    ST_CROSSES(): any;
    ST_DIFFERENCE(): any;
    ST_DIMENSION(): any;
    ST_DISJOINT(): any;
    ST_DISTANCE(): any;
    ST_ENDPOINT(): any;
    ST_ENVELOPE(): any;
    ST_EQUALS(): any;
    ST_EXTERIORRING(): any;
    ST_GEOMCOLLFROMTEXT(): any;
    ST_GEOMCOLLFROMTXT(): any;
    ST_GEOMCOLLFROMWKB(): any;
    ST_GEOMETRYCOLLECTIONFROMTEXT(): any;
    ST_GEOMETRYCOLLECTIONFROMWKB(): any;
    ST_GEOMETRYFROMTEXT(): any;
    ST_GEOMETRYFROMWKB(): any;
    ST_GEOMETRYN(): any;
    ST_GEOMETRYTYPE(): any;
    ST_GEOMFROMTEXT(): any;
    ST_GEOMFROMWKB(): any;
    ST_INTERIORRINGN(): any;
    ST_INTERSECTION(): any;
    ST_INTERSECTS(): any;
    ST_ISCLOSED(): any;
    ST_ISEMPTY(): any;
    ST_ISSIMPLE(): any;
    ST_LINEFROMTEXT(): any;
    ST_LINEFROMWKB(): any;
    ST_LINESTRINGFROMTEXT(): any;
    ST_LINESTRINGFROMWKB(): any;
    ST_NUMGEOMETRIES(): any;
    ST_NUMINTERIORRING(): any;
    ST_NUMINTERIORRINGS(): any;
    ST_NUMPOINTS(): any;
    ST_OVERLAPS(): any;
    ST_POINTFROMTEXT(): any;
    ST_POINTFROMWKB(): any;
    ST_POINTN(): any;
    ST_POLYFROMTEXT(): any;
    ST_POLYFROMWKB(): any;
    ST_POLYGONFROMTEXT(): any;
    ST_POLYGONFROMWKB(): any;
    ST_SRID(): any;
    ST_STARTPOINT(): any;
    ST_SYMDIFFERENCE(): any;
    ST_TOUCHES(): any;
    ST_UNION(): any;
    ST_WITHIN(): any;
    ST_X(): any;
    ST_Y(): any;
    SUBDATE(): any;
    SUBSTRING_INDEX(): any;
    SUBTIME(): any;
    SYSTEM_USER(): any;
    TAN(): any;
    TIME(): any;
    TIMEDIFF(): any;
    TIMESTAMP(): any;
    TIMESTAMPADD(): any;
    TIMESTAMPDIFF(): any;
    TIME_FORMAT(): any;
    TIME_TO_SEC(): any;
    TOUCHES(): any;
    TO_BASE64(): any;
    TO_DAYS(): any;
    TO_SECONDS(): any;
    UCASE(): any;
    UNCOMPRESS(): any;
    UNCOMPRESSED_LENGTH(): any;
    UNHEX(): any;
    UNIX_TIMESTAMP(): any;
    UPDATEXML(): any;
    UPPER(): any;
    UUID(): any;
    UUID_SHORT(): any;
    VALIDATE_PASSWORD_STRENGTH(): any;
    VERSION(): any;
    VISIBLE(): any;
    WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(): any;
    WEEK(): any;
    WEEKDAY(): any;
    WEEKOFYEAR(): any;
    WEIGHT_STRING(): any;
    WITHIN(): any;
    YEAR(): any;
    YEARWEEK(): any;
    Y_FUNCTION(): any;
    X_FUNCTION(): any;
    JSON_VALID(): any;
    JSON_SCHEMA_VALID(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CopyCreateTableContext(parser: any, ctx: any): this;
declare class CopyCreateTableContext {
    constructor(parser: any, ctx: any);
    parenthesisTable: any;
    constructor: typeof CopyCreateTableContext;
    CREATE(): any;
    TABLE(): any;
    tableName(i: any): any;
    LIKE(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    TEMPORARY(): any;
    ifNotExists(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ColumnCreateTableContext(parser: any, ctx: any): this;
declare class ColumnCreateTableContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ColumnCreateTableContext;
    CREATE(): any;
    TABLE(): any;
    tableName(): any;
    createDefinitions(): any;
    TEMPORARY(): any;
    ifNotExists(): any;
    tableOption(i: any): any;
    partitionDefinitions(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function QueryCreateTableContext(parser: any, ctx: any): this;
declare class QueryCreateTableContext {
    constructor(parser: any, ctx: any);
    keyViolate: any;
    constructor: typeof QueryCreateTableContext;
    CREATE(): any;
    TABLE(): any;
    tableName(): any;
    selectStatement(): any;
    TEMPORARY(): any;
    ifNotExists(): any;
    createDefinitions(): any;
    tableOption(i: any): any;
    partitionDefinitions(): any;
    AS(): any;
    IGNORE(): any;
    REPLACE(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PreciseScheduleContext(parser: any, ctx: any): this;
declare class PreciseScheduleContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PreciseScheduleContext;
    AT(): any;
    timestampValue(): any;
    intervalExpr(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IntervalScheduleContext(parser: any, ctx: any): this;
declare class IntervalScheduleContext {
    constructor(parser: any, ctx: any);
    startTimestamp: any;
    _intervalExpr: any;
    startIntervals: any[];
    endTimestamp: any;
    endIntervals: any[];
    constructor: typeof IntervalScheduleContext;
    EVERY(): any;
    intervalType(): any;
    decimalLiteral(): any;
    expression(): any;
    STARTS(): any;
    ENDS(): any;
    timestampValue(i: any): any;
    intervalExpr(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RoutineBehaviorContext(parser: any, ctx: any): this;
declare class RoutineBehaviorContext {
    constructor(parser: any, ctx: any);
    constructor: typeof RoutineBehaviorContext;
    DETERMINISTIC(): any;
    NOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RoutineLanguageContext(parser: any, ctx: any): this;
declare class RoutineLanguageContext {
    constructor(parser: any, ctx: any);
    constructor: typeof RoutineLanguageContext;
    LANGUAGE(): any;
    SQL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RoutineCommentContext(parser: any, ctx: any): this;
declare class RoutineCommentContext {
    constructor(parser: any, ctx: any);
    constructor: typeof RoutineCommentContext;
    COMMENT(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RoutineSecurityContext(parser: any, ctx: any): this;
declare class RoutineSecurityContext {
    constructor(parser: any, ctx: any);
    context: any;
    constructor: typeof RoutineSecurityContext;
    SQL(): any;
    SECURITY(): any;
    DEFINER(): any;
    INVOKER(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RoutineDataContext(parser: any, ctx: any): this;
declare class RoutineDataContext {
    constructor(parser: any, ctx: any);
    constructor: typeof RoutineDataContext;
    CONTAINS(): any;
    SQL(): any;
    NO(): any;
    READS(): any;
    DATA(): any;
    MODIFIES(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ColumnDeclarationContext(parser: any, ctx: any): this;
declare class ColumnDeclarationContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ColumnDeclarationContext;
    uid(): any;
    columnDefinition(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ConstraintDeclarationContext(parser: any, ctx: any): this;
declare class ConstraintDeclarationContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ConstraintDeclarationContext;
    tableConstraint(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IndexDeclarationContext(parser: any, ctx: any): this;
declare class IndexDeclarationContext {
    constructor(parser: any, ctx: any);
    constructor: typeof IndexDeclarationContext;
    indexColumnDefinition(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StorageColumnConstraintContext(parser: any, ctx: any): this;
declare class StorageColumnConstraintContext {
    constructor(parser: any, ctx: any);
    storageval: any;
    constructor: typeof StorageColumnConstraintContext;
    STORAGE(): any;
    DISK(): any;
    MEMORY(): any;
    DEFAULT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AutoIncrementColumnConstraintContext(parser: any, ctx: any): this;
declare class AutoIncrementColumnConstraintContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AutoIncrementColumnConstraintContext;
    AUTO_INCREMENT(): any;
    ON(): any;
    UPDATE(): any;
    currentTimestamp(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CommentColumnConstraintContext(parser: any, ctx: any): this;
declare class CommentColumnConstraintContext {
    constructor(parser: any, ctx: any);
    constructor: typeof CommentColumnConstraintContext;
    COMMENT(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UniqueKeyColumnConstraintContext(parser: any, ctx: any): this;
declare class UniqueKeyColumnConstraintContext {
    constructor(parser: any, ctx: any);
    constructor: typeof UniqueKeyColumnConstraintContext;
    UNIQUE(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SerialDefaultColumnConstraintContext(parser: any, ctx: any): this;
declare class SerialDefaultColumnConstraintContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SerialDefaultColumnConstraintContext;
    SERIAL(): any;
    DEFAULT(): any;
    VALUE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function GeneratedColumnConstraintContext(parser: any, ctx: any): this;
declare class GeneratedColumnConstraintContext {
    constructor(parser: any, ctx: any);
    constructor: typeof GeneratedColumnConstraintContext;
    AS(): any;
    LR_BRACKET(): any;
    expression(): any;
    RR_BRACKET(): any;
    GENERATED(): any;
    ALWAYS(): any;
    VIRTUAL(): any;
    STORED(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FormatColumnConstraintContext(parser: any, ctx: any): this;
declare class FormatColumnConstraintContext {
    constructor(parser: any, ctx: any);
    colformat: any;
    constructor: typeof FormatColumnConstraintContext;
    COLUMN_FORMAT(): any;
    FIXED(): any;
    DYNAMIC(): any;
    DEFAULT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CollateColumnConstraintContext(parser: any, ctx: any): this;
declare class CollateColumnConstraintContext {
    constructor(parser: any, ctx: any);
    constructor: typeof CollateColumnConstraintContext;
    COLLATE(): any;
    collationName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PrimaryKeyColumnConstraintContext(parser: any, ctx: any): this;
declare class PrimaryKeyColumnConstraintContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PrimaryKeyColumnConstraintContext;
    KEY(): any;
    PRIMARY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CheckColumnConstraintContext(parser: any, ctx: any): this;
declare class CheckColumnConstraintContext {
    constructor(parser: any, ctx: any);
    name: any;
    constructor: typeof CheckColumnConstraintContext;
    CHECK(): any;
    LR_BRACKET(): any;
    expression(): any;
    RR_BRACKET(): any;
    CONSTRAINT(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function NullColumnConstraintContext(parser: any, ctx: any): this;
declare class NullColumnConstraintContext {
    constructor(parser: any, ctx: any);
    constructor: typeof NullColumnConstraintContext;
    nullNotnull(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DefaultColumnConstraintContext(parser: any, ctx: any): this;
declare class DefaultColumnConstraintContext {
    constructor(parser: any, ctx: any);
    constructor: typeof DefaultColumnConstraintContext;
    DEFAULT(): any;
    defaultValue(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ReferenceColumnConstraintContext(parser: any, ctx: any): this;
declare class ReferenceColumnConstraintContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ReferenceColumnConstraintContext;
    referenceDefinition(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UniqueKeyTableConstraintContext(parser: any, ctx: any): this;
declare class UniqueKeyTableConstraintContext {
    constructor(parser: any, ctx: any);
    name: any;
    indexFormat: any;
    index: any;
    constructor: typeof UniqueKeyTableConstraintContext;
    UNIQUE(): any;
    indexColumnNames(): any;
    CONSTRAINT(): any;
    indexType(): any;
    indexOption(i: any): any;
    uid(i: any): any;
    INDEX(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CheckTableConstraintContext(parser: any, ctx: any): this;
declare class CheckTableConstraintContext {
    constructor(parser: any, ctx: any);
    name: any;
    constructor: typeof CheckTableConstraintContext;
    CHECK(): any;
    LR_BRACKET(): any;
    expression(): any;
    RR_BRACKET(): any;
    CONSTRAINT(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PrimaryKeyTableConstraintContext(parser: any, ctx: any): this;
declare class PrimaryKeyTableConstraintContext {
    constructor(parser: any, ctx: any);
    name: any;
    index: any;
    constructor: typeof PrimaryKeyTableConstraintContext;
    PRIMARY(): any;
    KEY(): any;
    indexColumnNames(): any;
    CONSTRAINT(): any;
    indexType(): any;
    indexOption(i: any): any;
    uid(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ForeignKeyTableConstraintContext(parser: any, ctx: any): this;
declare class ForeignKeyTableConstraintContext {
    constructor(parser: any, ctx: any);
    name: any;
    index: any;
    constructor: typeof ForeignKeyTableConstraintContext;
    FOREIGN(): any;
    KEY(): any;
    indexColumnNames(): any;
    referenceDefinition(): any;
    CONSTRAINT(): any;
    uid(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SpecialIndexDeclarationContext(parser: any, ctx: any): this;
declare class SpecialIndexDeclarationContext {
    constructor(parser: any, ctx: any);
    indexFormat: any;
    constructor: typeof SpecialIndexDeclarationContext;
    indexColumnNames(): any;
    FULLTEXT(): any;
    SPATIAL(): any;
    uid(): any;
    indexOption(i: any): any;
    INDEX(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SimpleIndexDeclarationContext(parser: any, ctx: any): this;
declare class SimpleIndexDeclarationContext {
    constructor(parser: any, ctx: any);
    indexFormat: any;
    constructor: typeof SimpleIndexDeclarationContext;
    indexColumnNames(): any;
    INDEX(): any;
    KEY(): any;
    uid(): any;
    indexType(): any;
    indexOption(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionEngineContext(parser: any, ctx: any): this;
declare class TableOptionEngineContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionEngineContext;
    ENGINE(): any;
    engineName(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionMaxRowsContext(parser: any, ctx: any): this;
declare class TableOptionMaxRowsContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionMaxRowsContext;
    MAX_ROWS(): any;
    decimalLiteral(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionCollateContext(parser: any, ctx: any): this;
declare class TableOptionCollateContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionCollateContext;
    COLLATE(): any;
    collationName(): any;
    DEFAULT(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionPersistentContext(parser: any, ctx: any): this;
declare class TableOptionPersistentContext {
    constructor(parser: any, ctx: any);
    extBoolValue: any;
    constructor: typeof TableOptionPersistentContext;
    STATS_PERSISTENT(): any;
    DEFAULT(): any;
    ZERO_DECIMAL(): any;
    ONE_DECIMAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionTablespaceContext(parser: any, ctx: any): this;
declare class TableOptionTablespaceContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionTablespaceContext;
    TABLESPACE(): any;
    uid(): any;
    tablespaceStorage(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionPackKeysContext(parser: any, ctx: any): this;
declare class TableOptionPackKeysContext {
    constructor(parser: any, ctx: any);
    extBoolValue: any;
    constructor: typeof TableOptionPackKeysContext;
    PACK_KEYS(): any;
    ZERO_DECIMAL(): any;
    ONE_DECIMAL(): any;
    DEFAULT(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionPasswordContext(parser: any, ctx: any): this;
declare class TableOptionPasswordContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionPasswordContext;
    PASSWORD(): any;
    STRING_LITERAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionUnionContext(parser: any, ctx: any): this;
declare class TableOptionUnionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionUnionContext;
    UNION(): any;
    LR_BRACKET(): any;
    tables(): any;
    RR_BRACKET(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionSamplePageContext(parser: any, ctx: any): this;
declare class TableOptionSamplePageContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionSamplePageContext;
    STATS_SAMPLE_PAGES(): any;
    decimalLiteral(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionCharsetContext(parser: any, ctx: any): this;
declare class TableOptionCharsetContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionCharsetContext;
    CHARACTER(): any;
    SET(): any;
    CHARSET(): any;
    charsetName(): any;
    DEFAULT(i: any): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionIndexDirectoryContext(parser: any, ctx: any): this;
declare class TableOptionIndexDirectoryContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionIndexDirectoryContext;
    INDEX(): any;
    DIRECTORY(): any;
    STRING_LITERAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionKeyBlockSizeContext(parser: any, ctx: any): this;
declare class TableOptionKeyBlockSizeContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionKeyBlockSizeContext;
    KEY_BLOCK_SIZE(): any;
    fileSizeLiteral(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionEncryptionContext(parser: any, ctx: any): this;
declare class TableOptionEncryptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionEncryptionContext;
    ENCRYPTION(): any;
    STRING_LITERAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionDataDirectoryContext(parser: any, ctx: any): this;
declare class TableOptionDataDirectoryContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionDataDirectoryContext;
    DATA(): any;
    DIRECTORY(): any;
    STRING_LITERAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionRecalculationContext(parser: any, ctx: any): this;
declare class TableOptionRecalculationContext {
    constructor(parser: any, ctx: any);
    extBoolValue: any;
    constructor: typeof TableOptionRecalculationContext;
    STATS_AUTO_RECALC(): any;
    DEFAULT(): any;
    ZERO_DECIMAL(): any;
    ONE_DECIMAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionAutoIncrementContext(parser: any, ctx: any): this;
declare class TableOptionAutoIncrementContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionAutoIncrementContext;
    AUTO_INCREMENT(): any;
    decimalLiteral(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionChecksumContext(parser: any, ctx: any): this;
declare class TableOptionChecksumContext {
    constructor(parser: any, ctx: any);
    boolValue: any;
    constructor: typeof TableOptionChecksumContext;
    CHECKSUM(): any;
    PAGE_CHECKSUM(): any;
    ZERO_DECIMAL(): any;
    ONE_DECIMAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionDelayContext(parser: any, ctx: any): this;
declare class TableOptionDelayContext {
    constructor(parser: any, ctx: any);
    boolValue: any;
    constructor: typeof TableOptionDelayContext;
    DELAY_KEY_WRITE(): any;
    ZERO_DECIMAL(): any;
    ONE_DECIMAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionConnectionContext(parser: any, ctx: any): this;
declare class TableOptionConnectionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionConnectionContext;
    CONNECTION(): any;
    STRING_LITERAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionCommentContext(parser: any, ctx: any): this;
declare class TableOptionCommentContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionCommentContext;
    COMMENT(): any;
    STRING_LITERAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionAverageContext(parser: any, ctx: any): this;
declare class TableOptionAverageContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionAverageContext;
    AVG_ROW_LENGTH(): any;
    decimalLiteral(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionRowFormatContext(parser: any, ctx: any): this;
declare class TableOptionRowFormatContext {
    constructor(parser: any, ctx: any);
    rowFormat: any;
    constructor: typeof TableOptionRowFormatContext;
    ROW_FORMAT(): any;
    DEFAULT(): any;
    DYNAMIC(): any;
    FIXED(): any;
    COMPRESSED(): any;
    REDUNDANT(): any;
    COMPACT(): any;
    ID(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionCompressionContext(parser: any, ctx: any): this;
declare class TableOptionCompressionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionCompressionContext;
    COMPRESSION(): any;
    STRING_LITERAL(): any;
    ID(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionInsertMethodContext(parser: any, ctx: any): this;
declare class TableOptionInsertMethodContext {
    constructor(parser: any, ctx: any);
    insertMethod: any;
    constructor: typeof TableOptionInsertMethodContext;
    INSERT_METHOD(): any;
    NO(): any;
    FIRST(): any;
    LAST(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableOptionMinRowsContext(parser: any, ctx: any): this;
declare class TableOptionMinRowsContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableOptionMinRowsContext;
    MIN_ROWS(): any;
    decimalLiteral(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionFunctionKeyContext(parser: any, ctx: any): this;
declare class PartitionFunctionKeyContext {
    constructor(parser: any, ctx: any);
    algType: any;
    constructor: typeof PartitionFunctionKeyContext;
    KEY(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    LINEAR(): any;
    ALGORITHM(): any;
    EQUAL_SYMBOL(): any;
    ONE_DECIMAL(): any;
    TWO_DECIMAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionFunctionHashContext(parser: any, ctx: any): this;
declare class PartitionFunctionHashContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PartitionFunctionHashContext;
    HASH(): any;
    LR_BRACKET(): any;
    expression(): any;
    RR_BRACKET(): any;
    LINEAR(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionFunctionListContext(parser: any, ctx: any): this;
declare class PartitionFunctionListContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PartitionFunctionListContext;
    LIST(): any;
    LR_BRACKET(): any;
    expression(): any;
    RR_BRACKET(): any;
    COLUMNS(): any;
    uidList(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionFunctionRangeContext(parser: any, ctx: any): this;
declare class PartitionFunctionRangeContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PartitionFunctionRangeContext;
    RANGE(): any;
    LR_BRACKET(): any;
    expression(): any;
    RR_BRACKET(): any;
    COLUMNS(): any;
    uidList(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SubPartitionFunctionHashContext(parser: any, ctx: any): this;
declare class SubPartitionFunctionHashContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SubPartitionFunctionHashContext;
    HASH(): any;
    LR_BRACKET(): any;
    expression(): any;
    RR_BRACKET(): any;
    LINEAR(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SubPartitionFunctionKeyContext(parser: any, ctx: any): this;
declare class SubPartitionFunctionKeyContext {
    constructor(parser: any, ctx: any);
    algType: any;
    constructor: typeof SubPartitionFunctionKeyContext;
    KEY(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    LINEAR(): any;
    ALGORITHM(): any;
    EQUAL_SYMBOL(): any;
    ONE_DECIMAL(): any;
    TWO_DECIMAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionComparisionContext(parser: any, ctx: any): this;
declare class PartitionComparisionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PartitionComparisionContext;
    PARTITION(): any;
    uid(): any;
    VALUES(): any;
    LESS(): any;
    THAN(): any;
    LR_BRACKET(): any;
    partitionDefinerAtom(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    partitionOption(i: any): any;
    subpartitionDefinition(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionListAtomContext(parser: any, ctx: any): this;
declare class PartitionListAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PartitionListAtomContext;
    PARTITION(): any;
    uid(): any;
    VALUES(): any;
    IN(): any;
    LR_BRACKET(): any;
    partitionDefinerAtom(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    partitionOption(i: any): any;
    subpartitionDefinition(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionListVectorContext(parser: any, ctx: any): this;
declare class PartitionListVectorContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PartitionListVectorContext;
    PARTITION(): any;
    uid(): any;
    VALUES(): any;
    IN(): any;
    LR_BRACKET(): any;
    partitionDefinerVector(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    partitionOption(i: any): any;
    subpartitionDefinition(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionSimpleContext(parser: any, ctx: any): this;
declare class PartitionSimpleContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PartitionSimpleContext;
    PARTITION(): any;
    uid(): any;
    partitionOption(i: any): any;
    subpartitionDefinition(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionOptionCommentContext(parser: any, ctx: any): this;
declare class PartitionOptionCommentContext {
    constructor(parser: any, ctx: any);
    comment: any;
    constructor: typeof PartitionOptionCommentContext;
    COMMENT(): any;
    STRING_LITERAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionOptionNodeGroupContext(parser: any, ctx: any): this;
declare class PartitionOptionNodeGroupContext {
    constructor(parser: any, ctx: any);
    nodegroup: any;
    constructor: typeof PartitionOptionNodeGroupContext;
    NODEGROUP(): any;
    uid(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionOptionIndexDirectoryContext(parser: any, ctx: any): this;
declare class PartitionOptionIndexDirectoryContext {
    constructor(parser: any, ctx: any);
    indexDirectory: any;
    constructor: typeof PartitionOptionIndexDirectoryContext;
    INDEX(): any;
    DIRECTORY(): any;
    STRING_LITERAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionOptionMaxRowsContext(parser: any, ctx: any): this;
declare class PartitionOptionMaxRowsContext {
    constructor(parser: any, ctx: any);
    maxRows: any;
    constructor: typeof PartitionOptionMaxRowsContext;
    MAX_ROWS(): any;
    decimalLiteral(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionOptionTablespaceContext(parser: any, ctx: any): this;
declare class PartitionOptionTablespaceContext {
    constructor(parser: any, ctx: any);
    tablespace: any;
    constructor: typeof PartitionOptionTablespaceContext;
    TABLESPACE(): any;
    uid(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionOptionEngineContext(parser: any, ctx: any): this;
declare class PartitionOptionEngineContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PartitionOptionEngineContext;
    ENGINE(): any;
    engineName(): any;
    STORAGE(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionOptionMinRowsContext(parser: any, ctx: any): this;
declare class PartitionOptionMinRowsContext {
    constructor(parser: any, ctx: any);
    minRows: any;
    constructor: typeof PartitionOptionMinRowsContext;
    MIN_ROWS(): any;
    decimalLiteral(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PartitionOptionDataDirectoryContext(parser: any, ctx: any): this;
declare class PartitionOptionDataDirectoryContext {
    constructor(parser: any, ctx: any);
    dataDirectory: any;
    constructor: typeof PartitionOptionDataDirectoryContext;
    DATA(): any;
    DIRECTORY(): any;
    STRING_LITERAL(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterUpgradeNameContext(parser: any, ctx: any): this;
declare class AlterUpgradeNameContext {
    constructor(parser: any, ctx: any);
    dbFormat: any;
    constructor: typeof AlterUpgradeNameContext;
    ALTER(): any;
    uid(): any;
    UPGRADE(): any;
    DATA(): any;
    DIRECTORY(): any;
    NAME(): any;
    DATABASE(): any;
    SCHEMA(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterSimpleDatabaseContext(parser: any, ctx: any): this;
declare class AlterSimpleDatabaseContext {
    constructor(parser: any, ctx: any);
    dbFormat: any;
    constructor: typeof AlterSimpleDatabaseContext;
    ALTER(): any;
    DATABASE(): any;
    SCHEMA(): any;
    uid(): any;
    createDatabaseOption(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByDisableKeysContext(parser: any, ctx: any): this;
declare class AlterByDisableKeysContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByDisableKeysContext;
    DISABLE(): any;
    KEYS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByDefaultCharsetContext(parser: any, ctx: any): this;
declare class AlterByDefaultCharsetContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByDefaultCharsetContext;
    CHARACTER(): any;
    SET(): any;
    EQUAL_SYMBOL(i: any): any;
    charsetName(): any;
    DEFAULT(): any;
    COLLATE(): any;
    collationName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByRenameColumnContext(parser: any, ctx: any): this;
declare class AlterByRenameColumnContext {
    constructor(parser: any, ctx: any);
    oldColumn: any;
    newColumn: any;
    constructor: typeof AlterByRenameColumnContext;
    RENAME(): any;
    COLUMN(): any;
    TO(): any;
    uid(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByConvertCharsetContext(parser: any, ctx: any): this;
declare class AlterByConvertCharsetContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByConvertCharsetContext;
    CONVERT(): any;
    TO(): any;
    CHARACTER(): any;
    SET(): any;
    charsetName(): any;
    COLLATE(): any;
    collationName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAddPartitionContext(parser: any, ctx: any): this;
declare class AlterByAddPartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByAddPartitionContext;
    ADD(): any;
    PARTITION(): any;
    LR_BRACKET(): any;
    partitionDefinition(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAddForeignKeyContext(parser: any, ctx: any): this;
declare class AlterByAddForeignKeyContext {
    constructor(parser: any, ctx: any);
    name: any;
    indexName: any;
    constructor: typeof AlterByAddForeignKeyContext;
    ADD(): any;
    FOREIGN(): any;
    KEY(): any;
    indexColumnNames(): any;
    referenceDefinition(): any;
    CONSTRAINT(): any;
    uid(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByRenameIndexContext(parser: any, ctx: any): this;
declare class AlterByRenameIndexContext {
    constructor(parser: any, ctx: any);
    indexFormat: any;
    constructor: typeof AlterByRenameIndexContext;
    RENAME(): any;
    uid(i: any): any;
    TO(): any;
    INDEX(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByRemovePartitioningContext(parser: any, ctx: any): this;
declare class AlterByRemovePartitioningContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByRemovePartitioningContext;
    REMOVE(): any;
    PARTITIONING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByRenameContext(parser: any, ctx: any): this;
declare class AlterByRenameContext {
    constructor(parser: any, ctx: any);
    renameFormat: any;
    constructor: typeof AlterByRenameContext;
    RENAME(): any;
    uid(): any;
    fullId(): any;
    TO(): any;
    AS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByOptimizePartitionContext(parser: any, ctx: any): this;
declare class AlterByOptimizePartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByOptimizePartitionContext;
    OPTIMIZE(): any;
    PARTITION(): any;
    uidList(): any;
    ALL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByImportTablespaceContext(parser: any, ctx: any): this;
declare class AlterByImportTablespaceContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByImportTablespaceContext;
    IMPORT(): any;
    TABLESPACE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByCoalescePartitionContext(parser: any, ctx: any): this;
declare class AlterByCoalescePartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByCoalescePartitionContext;
    COALESCE(): any;
    PARTITION(): any;
    decimalLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByDropConstraintCheckContext(parser: any, ctx: any): this;
declare class AlterByDropConstraintCheckContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByDropConstraintCheckContext;
    DROP(): any;
    uid(): any;
    CONSTRAINT(): any;
    CHECK(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAddColumnsContext(parser: any, ctx: any): this;
declare class AlterByAddColumnsContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByAddColumnsContext;
    ADD(): any;
    LR_BRACKET(): any;
    uid(i: any): any;
    columnDefinition(i: any): any;
    RR_BRACKET(): any;
    COLUMN(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAlterIndexVisibilityContext(parser: any, ctx: any): this;
declare class AlterByAlterIndexVisibilityContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByAlterIndexVisibilityContext;
    ALTER(): any;
    INDEX(): any;
    uid(): any;
    VISIBLE(): any;
    INVISIBLE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByDropForeignKeyContext(parser: any, ctx: any): this;
declare class AlterByDropForeignKeyContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByDropForeignKeyContext;
    DROP(): any;
    FOREIGN(): any;
    KEY(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAddCheckTableConstraintContext(parser: any, ctx: any): this;
declare class AlterByAddCheckTableConstraintContext {
    constructor(parser: any, ctx: any);
    name: any;
    constructor: typeof AlterByAddCheckTableConstraintContext;
    ADD(): any;
    CHECK(): any;
    LR_BRACKET(): any;
    expression(): any;
    RR_BRACKET(): any;
    CONSTRAINT(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByRebuildPartitionContext(parser: any, ctx: any): this;
declare class AlterByRebuildPartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByRebuildPartitionContext;
    REBUILD(): any;
    PARTITION(): any;
    uidList(): any;
    ALL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByUpgradePartitioningContext(parser: any, ctx: any): this;
declare class AlterByUpgradePartitioningContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByUpgradePartitioningContext;
    UPGRADE(): any;
    PARTITIONING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByRepairPartitionContext(parser: any, ctx: any): this;
declare class AlterByRepairPartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByRepairPartitionContext;
    REPAIR(): any;
    PARTITION(): any;
    uidList(): any;
    ALL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByExchangePartitionContext(parser: any, ctx: any): this;
declare class AlterByExchangePartitionContext {
    constructor(parser: any, ctx: any);
    validationFormat: any;
    constructor: typeof AlterByExchangePartitionContext;
    EXCHANGE(): any;
    PARTITION(): any;
    uid(): any;
    WITH(i: any): any;
    TABLE(): any;
    tableName(): any;
    VALIDATION(): any;
    WITHOUT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAddIndexContext(parser: any, ctx: any): this;
declare class AlterByAddIndexContext {
    constructor(parser: any, ctx: any);
    indexFormat: any;
    constructor: typeof AlterByAddIndexContext;
    ADD(): any;
    indexColumnNames(): any;
    INDEX(): any;
    KEY(): any;
    uid(): any;
    indexType(): any;
    indexOption(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByDropColumnContext(parser: any, ctx: any): this;
declare class AlterByDropColumnContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByDropColumnContext;
    DROP(): any;
    uid(): any;
    COLUMN(): any;
    RESTRICT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByImportPartitionContext(parser: any, ctx: any): this;
declare class AlterByImportPartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByImportPartitionContext;
    IMPORT(): any;
    PARTITION(): any;
    TABLESPACE(): any;
    uidList(): any;
    ALL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByChangeDefaultContext(parser: any, ctx: any): this;
declare class AlterByChangeDefaultContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByChangeDefaultContext;
    ALTER(): any;
    uid(): any;
    SET(): any;
    DEFAULT(): any;
    defaultValue(): any;
    DROP(): any;
    COLUMN(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByForceContext(parser: any, ctx: any): this;
declare class AlterByForceContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByForceContext;
    FORCE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByDropPartitionContext(parser: any, ctx: any): this;
declare class AlterByDropPartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByDropPartitionContext;
    DROP(): any;
    PARTITION(): any;
    uidList(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAddSpecialIndexContext(parser: any, ctx: any): this;
declare class AlterByAddSpecialIndexContext {
    constructor(parser: any, ctx: any);
    keyType: any;
    indexFormat: any;
    constructor: typeof AlterByAddSpecialIndexContext;
    ADD(): any;
    indexColumnNames(): any;
    FULLTEXT(): any;
    SPATIAL(): any;
    uid(): any;
    indexOption(i: any): any;
    INDEX(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByModifyColumnContext(parser: any, ctx: any): this;
declare class AlterByModifyColumnContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByModifyColumnContext;
    MODIFY(): any;
    uid(i: any): any;
    columnDefinition(): any;
    COLUMN(): any;
    FIRST(): any;
    AFTER(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByTableOptionContext(parser: any, ctx: any): this;
declare class AlterByTableOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByTableOptionContext;
    tableOption(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByDropPrimaryKeyContext(parser: any, ctx: any): this;
declare class AlterByDropPrimaryKeyContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByDropPrimaryKeyContext;
    DROP(): any;
    PRIMARY(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByLockContext(parser: any, ctx: any): this;
declare class AlterByLockContext {
    constructor(parser: any, ctx: any);
    lockType: any;
    constructor: typeof AlterByLockContext;
    LOCK(): any;
    DEFAULT(): any;
    NONE(): any;
    SHARED(): any;
    EXCLUSIVE(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByDiscardPartitionContext(parser: any, ctx: any): this;
declare class AlterByDiscardPartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByDiscardPartitionContext;
    DISCARD(): any;
    PARTITION(): any;
    TABLESPACE(): any;
    uidList(): any;
    ALL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByDiscardTablespaceContext(parser: any, ctx: any): this;
declare class AlterByDiscardTablespaceContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByDiscardTablespaceContext;
    DISCARD(): any;
    TABLESPACE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByValidateContext(parser: any, ctx: any): this;
declare class AlterByValidateContext {
    constructor(parser: any, ctx: any);
    validationFormat: any;
    constructor: typeof AlterByValidateContext;
    VALIDATION(): any;
    WITHOUT(): any;
    WITH(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAddPrimaryKeyContext(parser: any, ctx: any): this;
declare class AlterByAddPrimaryKeyContext {
    constructor(parser: any, ctx: any);
    name: any;
    index: any;
    constructor: typeof AlterByAddPrimaryKeyContext;
    ADD(): any;
    PRIMARY(): any;
    KEY(): any;
    indexColumnNames(): any;
    CONSTRAINT(): any;
    indexType(): any;
    indexOption(i: any): any;
    uid(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByCheckPartitionContext(parser: any, ctx: any): this;
declare class AlterByCheckPartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByCheckPartitionContext;
    CHECK(): any;
    PARTITION(): any;
    uidList(): any;
    ALL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByEnableKeysContext(parser: any, ctx: any): this;
declare class AlterByEnableKeysContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByEnableKeysContext;
    ENABLE(): any;
    KEYS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByReorganizePartitionContext(parser: any, ctx: any): this;
declare class AlterByReorganizePartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByReorganizePartitionContext;
    REORGANIZE(): any;
    PARTITION(): any;
    uidList(): any;
    INTO(): any;
    LR_BRACKET(): any;
    partitionDefinition(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterBySetAlgorithmContext(parser: any, ctx: any): this;
declare class AlterBySetAlgorithmContext {
    constructor(parser: any, ctx: any);
    algType: any;
    constructor: typeof AlterBySetAlgorithmContext;
    ALGORITHM(): any;
    DEFAULT(): any;
    INPLACE(): any;
    COPY(): any;
    EQUAL_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAnalyzePartitionContext(parser: any, ctx: any): this;
declare class AlterByAnalyzePartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByAnalyzePartitionContext;
    ANALYZE(): any;
    PARTITION(): any;
    uidList(): any;
    ALL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByChangeColumnContext(parser: any, ctx: any): this;
declare class AlterByChangeColumnContext {
    constructor(parser: any, ctx: any);
    oldColumn: any;
    newColumn: any;
    afterColumn: any;
    constructor: typeof AlterByChangeColumnContext;
    CHANGE(): any;
    columnDefinition(): any;
    uid(i: any): any;
    COLUMN(): any;
    FIRST(): any;
    AFTER(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAddUniqueKeyContext(parser: any, ctx: any): this;
declare class AlterByAddUniqueKeyContext {
    constructor(parser: any, ctx: any);
    name: any;
    indexFormat: any;
    indexName: any;
    constructor: typeof AlterByAddUniqueKeyContext;
    ADD(): any;
    UNIQUE(): any;
    indexColumnNames(): any;
    CONSTRAINT(): any;
    indexType(): any;
    indexOption(i: any): any;
    uid(i: any): any;
    INDEX(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByTruncatePartitionContext(parser: any, ctx: any): this;
declare class AlterByTruncatePartitionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByTruncatePartitionContext;
    TRUNCATE(): any;
    PARTITION(): any;
    uidList(): any;
    ALL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByDropIndexContext(parser: any, ctx: any): this;
declare class AlterByDropIndexContext {
    constructor(parser: any, ctx: any);
    indexFormat: any;
    constructor: typeof AlterByDropIndexContext;
    DROP(): any;
    uid(): any;
    INDEX(): any;
    KEY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByAddColumnContext(parser: any, ctx: any): this;
declare class AlterByAddColumnContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByAddColumnContext;
    ADD(): any;
    uid(i: any): any;
    columnDefinition(): any;
    COLUMN(): any;
    FIRST(): any;
    AFTER(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterByOrderContext(parser: any, ctx: any): this;
declare class AlterByOrderContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterByOrderContext;
    ORDER(): any;
    BY(): any;
    uidList(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UnionSelectContext(parser: any, ctx: any): this;
declare class UnionSelectContext {
    constructor(parser: any, ctx: any);
    unionType: any;
    constructor: typeof UnionSelectContext;
    querySpecificationNointo(): any;
    unionStatement(i: any): any;
    UNION(): any;
    orderByClause(): any;
    limitClause(): any;
    lockClause(): any;
    querySpecification(): any;
    queryExpression(): any;
    ALL(): any;
    DISTINCT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UnionParenthesisSelectContext(parser: any, ctx: any): this;
declare class UnionParenthesisSelectContext {
    constructor(parser: any, ctx: any);
    unionType: any;
    constructor: typeof UnionParenthesisSelectContext;
    queryExpressionNointo(): any;
    unionParenthesis(i: any): any;
    UNION(): any;
    queryExpression(): any;
    orderByClause(): any;
    limitClause(): any;
    lockClause(): any;
    ALL(): any;
    DISTINCT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SimpleSelectContext(parser: any, ctx: any): this;
declare class SimpleSelectContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SimpleSelectContext;
    querySpecification(): any;
    lockClause(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ParenthesisSelectContext(parser: any, ctx: any): this;
declare class ParenthesisSelectContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ParenthesisSelectContext;
    queryExpression(): any;
    lockClause(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableSourceNestedContext(parser: any, ctx: any): this;
declare class TableSourceNestedContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableSourceNestedContext;
    LR_BRACKET(): any;
    tableSourceItem(): any;
    RR_BRACKET(): any;
    joinPart(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableSourceBaseContext(parser: any, ctx: any): this;
declare class TableSourceBaseContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableSourceBaseContext;
    tableSourceItem(): any;
    joinPart(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SubqueryTableItemContext(parser: any, ctx: any): this;
declare class SubqueryTableItemContext {
    constructor(parser: any, ctx: any);
    parenthesisSubquery: any;
    alias: any;
    constructor: typeof SubqueryTableItemContext;
    uid(): any;
    selectStatement(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    AS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AtomTableItemContext(parser: any, ctx: any): this;
declare class AtomTableItemContext {
    constructor(parser: any, ctx: any);
    alias: any;
    constructor: typeof AtomTableItemContext;
    tableName(): any;
    PARTITION(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    indexHint(i: any): any;
    uid(): any;
    AS(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableSourcesItemContext(parser: any, ctx: any): this;
declare class TableSourcesItemContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableSourcesItemContext;
    LR_BRACKET(): any;
    tableSources(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InnerJoinContext(parser: any, ctx: any): this;
declare class InnerJoinContext {
    constructor(parser: any, ctx: any);
    constructor: typeof InnerJoinContext;
    JOIN(): any;
    tableSourceItem(): any;
    ON(): any;
    expression(): any;
    USING(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    INNER(): any;
    CROSS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function NaturalJoinContext(parser: any, ctx: any): this;
declare class NaturalJoinContext {
    constructor(parser: any, ctx: any);
    constructor: typeof NaturalJoinContext;
    NATURAL(): any;
    JOIN(): any;
    tableSourceItem(): any;
    LEFT(): any;
    RIGHT(): any;
    OUTER(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function OuterJoinContext(parser: any, ctx: any): this;
declare class OuterJoinContext {
    constructor(parser: any, ctx: any);
    constructor: typeof OuterJoinContext;
    JOIN(): any;
    tableSourceItem(): any;
    LEFT(): any;
    RIGHT(): any;
    ON(): any;
    expression(): any;
    USING(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    OUTER(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StraightJoinContext(parser: any, ctx: any): this;
declare class StraightJoinContext {
    constructor(parser: any, ctx: any);
    constructor: typeof StraightJoinContext;
    STRAIGHT_JOIN(): any;
    tableSourceItem(): any;
    ON(): any;
    expression(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectExpressionElementContext(parser: any, ctx: any): this;
declare class SelectExpressionElementContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SelectExpressionElementContext;
    expression(): any;
    LOCAL_ID(): any;
    VAR_ASSIGN(): any;
    uid(): any;
    AS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectFunctionElementContext(parser: any, ctx: any): this;
declare class SelectFunctionElementContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SelectFunctionElementContext;
    functionCall(): any;
    uid(): any;
    AS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectStarElementContext(parser: any, ctx: any): this;
declare class SelectStarElementContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SelectStarElementContext;
    fullId(): any;
    DOT(): any;
    STAR(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectColumnElementContext(parser: any, ctx: any): this;
declare class SelectColumnElementContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SelectColumnElementContext;
    fullColumnName(): any;
    uid(): any;
    AS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectIntoVariablesContext(parser: any, ctx: any): this;
declare class SelectIntoVariablesContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SelectIntoVariablesContext;
    INTO(): any;
    assignmentField(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectIntoTextFileContext(parser: any, ctx: any): this;
declare class SelectIntoTextFileContext {
    constructor(parser: any, ctx: any);
    filename: any;
    charset: any;
    fieldsFormat: any;
    constructor: typeof SelectIntoTextFileContext;
    INTO(): any;
    OUTFILE(): any;
    STRING_LITERAL(): any;
    CHARACTER(): any;
    SET(): any;
    LINES(): any;
    charsetName(): any;
    FIELDS(): any;
    COLUMNS(): any;
    selectFieldsInto(i: any): any;
    selectLinesInto(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SelectIntoDumpFileContext(parser: any, ctx: any): this;
declare class SelectIntoDumpFileContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SelectIntoDumpFileContext;
    INTO(): any;
    DUMPFILE(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MasterStringOptionContext(parser: any, ctx: any): this;
declare class MasterStringOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof MasterStringOptionContext;
    stringMasterOption(): any;
    EQUAL_SYMBOL(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MasterRealOptionContext(parser: any, ctx: any): this;
declare class MasterRealOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof MasterRealOptionContext;
    MASTER_HEARTBEAT_PERIOD(): any;
    EQUAL_SYMBOL(): any;
    REAL_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MasterBoolOptionContext(parser: any, ctx: any): this;
declare class MasterBoolOptionContext {
    constructor(parser: any, ctx: any);
    boolVal: any;
    constructor: typeof MasterBoolOptionContext;
    boolMasterOption(): any;
    EQUAL_SYMBOL(): any;
    ZERO_DECIMAL(): any;
    ONE_DECIMAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MasterUidListOptionContext(parser: any, ctx: any): this;
declare class MasterUidListOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof MasterUidListOptionContext;
    IGNORE_SERVER_IDS(): any;
    EQUAL_SYMBOL(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    uid(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MasterDecimalOptionContext(parser: any, ctx: any): this;
declare class MasterDecimalOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof MasterDecimalOptionContext;
    decimalMasterOption(): any;
    EQUAL_SYMBOL(): any;
    decimalLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function WildIgnoreTableReplicationContext(parser: any, ctx: any): this;
declare class WildIgnoreTableReplicationContext {
    constructor(parser: any, ctx: any);
    constructor: typeof WildIgnoreTableReplicationContext;
    REPLICATE_WILD_IGNORE_TABLE(): any;
    EQUAL_SYMBOL(): any;
    LR_BRACKET(): any;
    simpleStrings(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DoTableReplicationContext(parser: any, ctx: any): this;
declare class DoTableReplicationContext {
    constructor(parser: any, ctx: any);
    constructor: typeof DoTableReplicationContext;
    REPLICATE_DO_TABLE(): any;
    EQUAL_SYMBOL(): any;
    LR_BRACKET(): any;
    tables(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IgnoreTableReplicationContext(parser: any, ctx: any): this;
declare class IgnoreTableReplicationContext {
    constructor(parser: any, ctx: any);
    constructor: typeof IgnoreTableReplicationContext;
    REPLICATE_IGNORE_TABLE(): any;
    EQUAL_SYMBOL(): any;
    LR_BRACKET(): any;
    tables(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RewriteDbReplicationContext(parser: any, ctx: any): this;
declare class RewriteDbReplicationContext {
    constructor(parser: any, ctx: any);
    constructor: typeof RewriteDbReplicationContext;
    REPLICATE_REWRITE_DB(): any;
    EQUAL_SYMBOL(): any;
    LR_BRACKET(): any;
    tablePair(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DoDbReplicationContext(parser: any, ctx: any): this;
declare class DoDbReplicationContext {
    constructor(parser: any, ctx: any);
    constructor: typeof DoDbReplicationContext;
    REPLICATE_DO_DB(): any;
    EQUAL_SYMBOL(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IgnoreDbReplicationContext(parser: any, ctx: any): this;
declare class IgnoreDbReplicationContext {
    constructor(parser: any, ctx: any);
    constructor: typeof IgnoreDbReplicationContext;
    REPLICATE_IGNORE_DB(): any;
    EQUAL_SYMBOL(): any;
    LR_BRACKET(): any;
    uidList(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function WildDoTableReplicationContext(parser: any, ctx: any): this;
declare class WildDoTableReplicationContext {
    constructor(parser: any, ctx: any);
    constructor: typeof WildDoTableReplicationContext;
    REPLICATE_WILD_DO_TABLE(): any;
    EQUAL_SYMBOL(): any;
    LR_BRACKET(): any;
    simpleStrings(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function GtidsUntilOptionContext(parser: any, ctx: any): this;
declare class GtidsUntilOptionContext {
    constructor(parser: any, ctx: any);
    gtids: any;
    constructor: typeof GtidsUntilOptionContext;
    EQUAL_SYMBOL(): any;
    gtuidSet(): any;
    SQL_BEFORE_GTIDS(): any;
    SQL_AFTER_GTIDS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SqlGapsUntilOptionContext(parser: any, ctx: any): this;
declare class SqlGapsUntilOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SqlGapsUntilOptionContext;
    SQL_AFTER_MTS_GAPS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MasterLogUntilOptionContext(parser: any, ctx: any): this;
declare class MasterLogUntilOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof MasterLogUntilOptionContext;
    MASTER_LOG_FILE(): any;
    EQUAL_SYMBOL(i: any): any;
    STRING_LITERAL(): any;
    COMMA(): any;
    MASTER_LOG_POS(): any;
    decimalLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RelayLogUntilOptionContext(parser: any, ctx: any): this;
declare class RelayLogUntilOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof RelayLogUntilOptionContext;
    RELAY_LOG_FILE(): any;
    EQUAL_SYMBOL(i: any): any;
    STRING_LITERAL(): any;
    COMMA(): any;
    RELAY_LOG_POS(): any;
    decimalLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PluginDirConnectionOptionContext(parser: any, ctx: any): this;
declare class PluginDirConnectionOptionContext {
    constructor(parser: any, ctx: any);
    conOptPluginDir: any;
    constructor: typeof PluginDirConnectionOptionContext;
    PLUGIN_DIR(): any;
    EQUAL_SYMBOL(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UserConnectionOptionContext(parser: any, ctx: any): this;
declare class UserConnectionOptionContext {
    constructor(parser: any, ctx: any);
    conOptUser: any;
    constructor: typeof UserConnectionOptionContext;
    USER(): any;
    EQUAL_SYMBOL(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DefaultAuthConnectionOptionContext(parser: any, ctx: any): this;
declare class DefaultAuthConnectionOptionContext {
    constructor(parser: any, ctx: any);
    conOptDefAuth: any;
    constructor: typeof DefaultAuthConnectionOptionContext;
    DEFAULT_AUTH(): any;
    EQUAL_SYMBOL(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PasswordConnectionOptionContext(parser: any, ctx: any): this;
declare class PasswordConnectionOptionContext {
    constructor(parser: any, ctx: any);
    conOptPassword: any;
    constructor: typeof PasswordConnectionOptionContext;
    PASSWORD(): any;
    EQUAL_SYMBOL(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CloseCursorContext(parser: any, ctx: any): this;
declare class CloseCursorContext {
    constructor(parser: any, ctx: any);
    constructor: typeof CloseCursorContext;
    CLOSE(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function OpenCursorContext(parser: any, ctx: any): this;
declare class OpenCursorContext {
    constructor(parser: any, ctx: any);
    constructor: typeof OpenCursorContext;
    OPEN(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FetchCursorContext(parser: any, ctx: any): this;
declare class FetchCursorContext {
    constructor(parser: any, ctx: any);
    constructor: typeof FetchCursorContext;
    FETCH(): any;
    uid(): any;
    INTO(): any;
    uidList(): any;
    FROM(): any;
    NEXT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerConditionWarningContext(parser: any, ctx: any): this;
declare class HandlerConditionWarningContext {
    constructor(parser: any, ctx: any);
    constructor: typeof HandlerConditionWarningContext;
    SQLWARNING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerConditionCodeContext(parser: any, ctx: any): this;
declare class HandlerConditionCodeContext {
    constructor(parser: any, ctx: any);
    constructor: typeof HandlerConditionCodeContext;
    decimalLiteral(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerConditionNotfoundContext(parser: any, ctx: any): this;
declare class HandlerConditionNotfoundContext {
    constructor(parser: any, ctx: any);
    constructor: typeof HandlerConditionNotfoundContext;
    NOT(): any;
    FOUND(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerConditionStateContext(parser: any, ctx: any): this;
declare class HandlerConditionStateContext {
    constructor(parser: any, ctx: any);
    constructor: typeof HandlerConditionStateContext;
    SQLSTATE(): any;
    STRING_LITERAL(): any;
    VALUE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerConditionExceptionContext(parser: any, ctx: any): this;
declare class HandlerConditionExceptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof HandlerConditionExceptionContext;
    SQLEXCEPTION(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HandlerConditionNameContext(parser: any, ctx: any): this;
declare class HandlerConditionNameContext {
    constructor(parser: any, ctx: any);
    constructor: typeof HandlerConditionNameContext;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterUserMysqlV56Context(parser: any, ctx: any): this;
declare class AlterUserMysqlV56Context {
    constructor(parser: any, ctx: any);
    constructor: typeof AlterUserMysqlV56Context;
    ALTER(): any;
    USER(): any;
    userSpecification(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AlterUserMysqlV57Context(parser: any, ctx: any): this;
declare class AlterUserMysqlV57Context {
    constructor(parser: any, ctx: any);
    tlsNone: any;
    constructor: typeof AlterUserMysqlV57Context;
    ALTER(): any;
    USER(): any;
    userAuthOption(i: any): any;
    ifExists(): any;
    COMMA(i: any): any;
    REQUIRE(): any;
    WITH(): any;
    userPasswordOption(i: any): any;
    userLockOption(i: any): any;
    tlsOption(i: any): any;
    NONE(): any;
    userResourceOption(i: any): any;
    AND(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateUserMysqlV57Context(parser: any, ctx: any): this;
declare class CreateUserMysqlV57Context {
    constructor(parser: any, ctx: any);
    tlsNone: any;
    constructor: typeof CreateUserMysqlV57Context;
    CREATE(): any;
    USER(): any;
    userAuthOption(i: any): any;
    ifNotExists(): any;
    COMMA(i: any): any;
    REQUIRE(): any;
    WITH(): any;
    userPasswordOption(i: any): any;
    userLockOption(i: any): any;
    tlsOption(i: any): any;
    NONE(): any;
    userResourceOption(i: any): any;
    AND(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CreateUserMysqlV56Context(parser: any, ctx: any): this;
declare class CreateUserMysqlV56Context {
    constructor(parser: any, ctx: any);
    constructor: typeof CreateUserMysqlV56Context;
    CREATE(): any;
    USER(): any;
    userAuthOption(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DetailRevokeContext(parser: any, ctx: any): this;
declare class DetailRevokeContext {
    constructor(parser: any, ctx: any);
    privilegeObject: any;
    constructor: typeof DetailRevokeContext;
    REVOKE(): any;
    privelegeClause(i: any): any;
    ON(): any;
    privilegeLevel(): any;
    FROM(): any;
    userName(i: any): any;
    COMMA(i: any): any;
    TABLE(): any;
    FUNCTION(): any;
    PROCEDURE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShortRevokeContext(parser: any, ctx: any): this;
declare class ShortRevokeContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ShortRevokeContext;
    REVOKE(): any;
    ALL(): any;
    COMMA(i: any): any;
    GRANT(): any;
    OPTION(): any;
    FROM(): any;
    userName(i: any): any;
    PRIVILEGES(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SimpleAuthOptionContext(parser: any, ctx: any): this;
declare class SimpleAuthOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SimpleAuthOptionContext;
    userName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PasswordAuthOptionContext(parser: any, ctx: any): this;
declare class PasswordAuthOptionContext {
    constructor(parser: any, ctx: any);
    hashed: any;
    constructor: typeof PasswordAuthOptionContext;
    userName(): any;
    IDENTIFIED(): any;
    BY(): any;
    PASSWORD(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StringAuthOptionContext(parser: any, ctx: any): this;
declare class StringAuthOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof StringAuthOptionContext;
    userName(): any;
    IDENTIFIED(): any;
    BY(): any;
    STRING_LITERAL(): any;
    WITH(): any;
    authPlugin(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function HashAuthOptionContext(parser: any, ctx: any): this;
declare class HashAuthOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof HashAuthOptionContext;
    userName(): any;
    IDENTIFIED(): any;
    WITH(): any;
    authPlugin(): any;
    AS(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DefiniteSchemaPrivLevelContext(parser: any, ctx: any): this;
declare class DefiniteSchemaPrivLevelContext {
    constructor(parser: any, ctx: any);
    constructor: typeof DefiniteSchemaPrivLevelContext;
    uid(): any;
    DOT(): any;
    STAR(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DefiniteFullTablePrivLevel2Context(parser: any, ctx: any): this;
declare class DefiniteFullTablePrivLevel2Context {
    constructor(parser: any, ctx: any);
    constructor: typeof DefiniteFullTablePrivLevel2Context;
    uid(): any;
    dottedId(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DefiniteFullTablePrivLevelContext(parser: any, ctx: any): this;
declare class DefiniteFullTablePrivLevelContext {
    constructor(parser: any, ctx: any);
    constructor: typeof DefiniteFullTablePrivLevelContext;
    uid(i: any): any;
    DOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function GlobalPrivLevelContext(parser: any, ctx: any): this;
declare class GlobalPrivLevelContext {
    constructor(parser: any, ctx: any);
    constructor: typeof GlobalPrivLevelContext;
    STAR(i: any): any;
    DOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DefiniteTablePrivLevelContext(parser: any, ctx: any): this;
declare class DefiniteTablePrivLevelContext {
    constructor(parser: any, ctx: any);
    constructor: typeof DefiniteTablePrivLevelContext;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CurrentSchemaPriviLevelContext(parser: any, ctx: any): this;
declare class CurrentSchemaPriviLevelContext {
    constructor(parser: any, ctx: any);
    constructor: typeof CurrentSchemaPriviLevelContext;
    STAR(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetTransactionContext(parser: any, ctx: any): this;
declare class SetTransactionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SetTransactionContext;
    setTransactionStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetCharsetContext(parser: any, ctx: any): this;
declare class SetCharsetContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SetCharsetContext;
    SET(i: any): any;
    CHARACTER(): any;
    CHARSET(): any;
    charsetName(): any;
    DEFAULT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetNamesContext(parser: any, ctx: any): this;
declare class SetNamesContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SetNamesContext;
    SET(): any;
    NAMES(): any;
    charsetName(): any;
    DEFAULT(): any;
    COLLATE(): any;
    collationName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetPasswordContext(parser: any, ctx: any): this;
declare class SetPasswordContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SetPasswordContext;
    setPasswordStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetAutocommitContext(parser: any, ctx: any): this;
declare class SetAutocommitContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SetAutocommitContext;
    setAutocommitStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetNewValueInsideTriggerContext(parser: any, ctx: any): this;
declare class SetNewValueInsideTriggerContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SetNewValueInsideTriggerContext;
    SET(): any;
    fullId(i: any): any;
    expression(i: any): any;
    EQUAL_SYMBOL(i: any): any;
    VAR_ASSIGN(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SetVariableContext(parser: any, ctx: any): this;
declare class SetVariableContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SetVariableContext;
    SET(): any;
    variableClause(i: any): any;
    expression(i: any): any;
    EQUAL_SYMBOL(i: any): any;
    VAR_ASSIGN(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowOpenTablesContext(parser: any, ctx: any): this;
declare class ShowOpenTablesContext {
    constructor(parser: any, ctx: any);
    schemaFormat: any;
    constructor: typeof ShowOpenTablesContext;
    SHOW(): any;
    OPEN(): any;
    TABLES(): any;
    uid(): any;
    showFilter(): any;
    FROM(): any;
    IN(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowGlobalInfoContext(parser: any, ctx: any): this;
declare class ShowGlobalInfoContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ShowGlobalInfoContext;
    SHOW(): any;
    showGlobalInfoClause(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowCreateFullIdObjectContext(parser: any, ctx: any): this;
declare class ShowCreateFullIdObjectContext {
    constructor(parser: any, ctx: any);
    namedEntity: any;
    constructor: typeof ShowCreateFullIdObjectContext;
    SHOW(): any;
    CREATE(): any;
    fullId(): any;
    EVENT(): any;
    FUNCTION(): any;
    PROCEDURE(): any;
    TABLE(): any;
    TRIGGER(): any;
    VIEW(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowCreateUserContext(parser: any, ctx: any): this;
declare class ShowCreateUserContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ShowCreateUserContext;
    SHOW(): any;
    CREATE(): any;
    USER(): any;
    userName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowErrorsContext(parser: any, ctx: any): this;
declare class ShowErrorsContext {
    constructor(parser: any, ctx: any);
    errorFormat: any;
    offset: any;
    rowCount: any;
    constructor: typeof ShowErrorsContext;
    SHOW(): any;
    ERRORS(): any;
    WARNINGS(): any;
    LIMIT(): any;
    decimalLiteral(i: any): any;
    COMMA(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowCountErrorsContext(parser: any, ctx: any): this;
declare class ShowCountErrorsContext {
    constructor(parser: any, ctx: any);
    errorFormat: any;
    constructor: typeof ShowCountErrorsContext;
    SHOW(): any;
    COUNT(): any;
    LR_BRACKET(): any;
    STAR(): any;
    RR_BRACKET(): any;
    ERRORS(): any;
    WARNINGS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowObjectFilterContext(parser: any, ctx: any): this;
declare class ShowObjectFilterContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ShowObjectFilterContext;
    SHOW(): any;
    showCommonEntity(): any;
    showFilter(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowCreateDbContext(parser: any, ctx: any): this;
declare class ShowCreateDbContext {
    constructor(parser: any, ctx: any);
    schemaFormat: any;
    constructor: typeof ShowCreateDbContext;
    SHOW(): any;
    CREATE(): any;
    uid(): any;
    DATABASE(): any;
    SCHEMA(): any;
    ifNotExists(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowEngineContext(parser: any, ctx: any): this;
declare class ShowEngineContext {
    constructor(parser: any, ctx: any);
    engineOption: any;
    constructor: typeof ShowEngineContext;
    SHOW(): any;
    ENGINE(): any;
    engineName(): any;
    STATUS(): any;
    MUTEX(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowSchemaFilterContext(parser: any, ctx: any): this;
declare class ShowSchemaFilterContext {
    constructor(parser: any, ctx: any);
    schemaFormat: any;
    constructor: typeof ShowSchemaFilterContext;
    SHOW(): any;
    showSchemaEntity(): any;
    uid(): any;
    showFilter(): any;
    FROM(): any;
    IN(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowIndexesContext(parser: any, ctx: any): this;
declare class ShowIndexesContext {
    constructor(parser: any, ctx: any);
    indexFormat: any;
    tableFormat: any;
    schemaFormat: any;
    constructor: typeof ShowIndexesContext;
    SHOW(): any;
    tableName(): any;
    INDEX(): any;
    INDEXES(): any;
    KEYS(): any;
    FROM(i: any): any;
    IN(i: any): any;
    uid(): any;
    WHERE(): any;
    expression(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowLogEventsContext(parser: any, ctx: any): this;
declare class ShowLogEventsContext {
    constructor(parser: any, ctx: any);
    logFormat: any;
    filename: any;
    fromPosition: any;
    offset: any;
    rowCount: any;
    constructor: typeof ShowLogEventsContext;
    SHOW(): any;
    EVENTS(): any;
    BINLOG(): any;
    RELAYLOG(): any;
    IN(): any;
    FROM(): any;
    LIMIT(): any;
    STRING_LITERAL(): any;
    decimalLiteral(i: any): any;
    COMMA(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowMasterLogsContext(parser: any, ctx: any): this;
declare class ShowMasterLogsContext {
    constructor(parser: any, ctx: any);
    logFormat: any;
    constructor: typeof ShowMasterLogsContext;
    SHOW(): any;
    LOGS(): any;
    BINARY(): any;
    MASTER(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowGrantsContext(parser: any, ctx: any): this;
declare class ShowGrantsContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ShowGrantsContext;
    SHOW(): any;
    GRANTS(): any;
    FOR(): any;
    userName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowSlaveStatusContext(parser: any, ctx: any): this;
declare class ShowSlaveStatusContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ShowSlaveStatusContext;
    SHOW(): any;
    SLAVE(): any;
    STATUS(): any;
    FOR(): any;
    CHANNEL(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowRoutineContext(parser: any, ctx: any): this;
declare class ShowRoutineContext {
    constructor(parser: any, ctx: any);
    routine: any;
    constructor: typeof ShowRoutineContext;
    SHOW(): any;
    CODE(): any;
    fullId(): any;
    FUNCTION(): any;
    PROCEDURE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowProfileContext(parser: any, ctx: any): this;
declare class ShowProfileContext {
    constructor(parser: any, ctx: any);
    queryCount: any;
    offset: any;
    rowCount: any;
    constructor: typeof ShowProfileContext;
    SHOW(): any;
    PROFILE(): any;
    showProfileType(i: any): any;
    LIMIT(): any;
    COMMA(i: any): any;
    FOR(): any;
    QUERY(): any;
    decimalLiteral(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ShowColumnsContext(parser: any, ctx: any): this;
declare class ShowColumnsContext {
    constructor(parser: any, ctx: any);
    columnsFormat: any;
    tableFormat: any;
    schemaFormat: any;
    constructor: typeof ShowColumnsContext;
    SHOW(): any;
    tableName(): any;
    COLUMNS(): any;
    FIELDS(): any;
    FROM(i: any): any;
    IN(i: any): any;
    FULL(): any;
    uid(): any;
    showFilter(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TableFlushOptionContext(parser: any, ctx: any): this;
declare class TableFlushOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof TableFlushOptionContext;
    TABLES(): any;
    tables(): any;
    flushTableOption(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ChannelFlushOptionContext(parser: any, ctx: any): this;
declare class ChannelFlushOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ChannelFlushOptionContext;
    RELAY(): any;
    LOGS(): any;
    channelOption(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SimpleFlushOptionContext(parser: any, ctx: any): this;
declare class SimpleFlushOptionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SimpleFlushOptionContext;
    DES_KEY_FILE(): any;
    HOSTS(): any;
    LOGS(): any;
    OPTIMIZER_COSTS(): any;
    PRIVILEGES(): any;
    QUERY(): any;
    CACHE(): any;
    STATUS(): any;
    USER_RESOURCES(): any;
    TABLES(): any;
    WITH(): any;
    READ(): any;
    LOCK(): any;
    BINARY(): any;
    ENGINE(): any;
    ERROR(): any;
    GENERAL(): any;
    RELAY(): any;
    SLOW(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DescribeStatementsContext(parser: any, ctx: any): this;
declare class DescribeStatementsContext {
    constructor(parser: any, ctx: any);
    constructor: typeof DescribeStatementsContext;
    selectStatement(): any;
    deleteStatement(): any;
    insertStatement(): any;
    replaceStatement(): any;
    updateStatement(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DescribeConnectionContext(parser: any, ctx: any): this;
declare class DescribeConnectionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof DescribeConnectionContext;
    FOR(): any;
    CONNECTION(): any;
    uid(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SpatialDataTypeContext(parser: any, ctx: any): this;
declare class SpatialDataTypeContext {
    constructor(parser: any, ctx: any);
    typeName: any;
    constructor: typeof SpatialDataTypeContext;
    GEOMETRYCOLLECTION(): any;
    GEOMCOLLECTION(): any;
    LINESTRING(): any;
    MULTILINESTRING(): any;
    MULTIPOINT(): any;
    MULTIPOLYGON(): any;
    POINT(): any;
    POLYGON(): any;
    JSON(): any;
    GEOMETRY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LongVarbinaryDataTypeContext(parser: any, ctx: any): this;
declare class LongVarbinaryDataTypeContext {
    constructor(parser: any, ctx: any);
    constructor: typeof LongVarbinaryDataTypeContext;
    LONG(): any;
    VARBINARY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CollectionDataTypeContext(parser: any, ctx: any): this;
declare class CollectionDataTypeContext {
    constructor(parser: any, ctx: any);
    typeName: any;
    constructor: typeof CollectionDataTypeContext;
    collectionOptions(): any;
    ENUM(): any;
    SET(i: any): any;
    BINARY(): any;
    charsetName(): any;
    CHARACTER(): any;
    CHARSET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function NationalVaryingStringDataTypeContext(parser: any, ctx: any): this;
declare class NationalVaryingStringDataTypeContext {
    constructor(parser: any, ctx: any);
    typeName: any;
    constructor: typeof NationalVaryingStringDataTypeContext;
    NATIONAL(): any;
    VARYING(): any;
    CHAR(): any;
    CHARACTER(): any;
    lengthOneDimension(): any;
    BINARY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DimensionDataTypeContext(parser: any, ctx: any): this;
declare class DimensionDataTypeContext {
    constructor(parser: any, ctx: any);
    typeName: any;
    constructor: typeof DimensionDataTypeContext;
    TINYINT(): any;
    SMALLINT(): any;
    MEDIUMINT(): any;
    INT(): any;
    INTEGER(): any;
    BIGINT(): any;
    MIDDLEINT(): any;
    INT1(): any;
    INT2(): any;
    INT3(): any;
    INT4(): any;
    INT8(): any;
    lengthOneDimension(): any;
    ZEROFILL(): any;
    SIGNED(): any;
    UNSIGNED(): any;
    REAL(): any;
    lengthTwoDimension(): any;
    DOUBLE(): any;
    PRECISION(): any;
    DECIMAL(): any;
    DEC(): any;
    FIXED(): any;
    NUMERIC(): any;
    FLOAT(): any;
    FLOAT4(): any;
    FLOAT8(): any;
    lengthTwoOptionalDimension(): any;
    BIT(): any;
    TIME(): any;
    TIMESTAMP(): any;
    DATETIME(): any;
    BINARY(): any;
    VARBINARY(): any;
    BLOB(): any;
    YEAR(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StringDataTypeContext(parser: any, ctx: any): this;
declare class StringDataTypeContext {
    constructor(parser: any, ctx: any);
    typeName: any;
    constructor: typeof StringDataTypeContext;
    CHAR(): any;
    CHARACTER(i: any): any;
    VARCHAR(): any;
    TINYTEXT(): any;
    TEXT(): any;
    MEDIUMTEXT(): any;
    LONGTEXT(): any;
    NCHAR(): any;
    NVARCHAR(): any;
    LONG(): any;
    VARYING(): any;
    lengthOneDimension(): any;
    BINARY(i: any): any;
    charsetName(): any;
    COLLATE(): any;
    collationName(): any;
    SET(): any;
    CHARSET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LongVarcharDataTypeContext(parser: any, ctx: any): this;
declare class LongVarcharDataTypeContext {
    constructor(parser: any, ctx: any);
    typeName: any;
    constructor: typeof LongVarcharDataTypeContext;
    LONG(): any;
    VARCHAR(): any;
    BINARY(): any;
    charsetName(): any;
    COLLATE(): any;
    collationName(): any;
    CHARACTER(): any;
    SET(): any;
    CHARSET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function NationalStringDataTypeContext(parser: any, ctx: any): this;
declare class NationalStringDataTypeContext {
    constructor(parser: any, ctx: any);
    typeName: any;
    constructor: typeof NationalStringDataTypeContext;
    NATIONAL(): any;
    VARCHAR(): any;
    CHARACTER(): any;
    lengthOneDimension(): any;
    BINARY(): any;
    NCHAR(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SimpleDataTypeContext(parser: any, ctx: any): this;
declare class SimpleDataTypeContext {
    constructor(parser: any, ctx: any);
    typeName: any;
    constructor: typeof SimpleDataTypeContext;
    DATE(): any;
    TINYBLOB(): any;
    MEDIUMBLOB(): any;
    LONGBLOB(): any;
    BOOL(): any;
    BOOLEAN(): any;
    SERIAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SpecificFunctionCallContext(parser: any, ctx: any): this;
declare class SpecificFunctionCallContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SpecificFunctionCallContext;
    specificFunction(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PasswordFunctionCallContext(parser: any, ctx: any): this;
declare class PasswordFunctionCallContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PasswordFunctionCallContext;
    passwordFunctionClause(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UdfFunctionCallContext(parser: any, ctx: any): this;
declare class UdfFunctionCallContext {
    constructor(parser: any, ctx: any);
    constructor: typeof UdfFunctionCallContext;
    fullId(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    functionArgs(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AggregateFunctionCallContext(parser: any, ctx: any): this;
declare class AggregateFunctionCallContext {
    constructor(parser: any, ctx: any);
    constructor: typeof AggregateFunctionCallContext;
    aggregateWindowedFunction(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ScalarFunctionCallContext(parser: any, ctx: any): this;
declare class ScalarFunctionCallContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ScalarFunctionCallContext;
    scalarFunctionName(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    functionArgs(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PositionFunctionCallContext(parser: any, ctx: any): this;
declare class PositionFunctionCallContext {
    constructor(parser: any, ctx: any);
    positionString: any;
    positionExpression: any;
    inString: any;
    inExpression: any;
    constructor: typeof PositionFunctionCallContext;
    POSITION(): any;
    LR_BRACKET(): any;
    IN(): any;
    RR_BRACKET(): any;
    stringLiteral(i: any): any;
    expression(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TrimFunctionCallContext(parser: any, ctx: any): this;
declare class TrimFunctionCallContext {
    constructor(parser: any, ctx: any);
    positioinForm: any;
    sourceString: any;
    sourceExpression: any;
    fromString: any;
    fromExpression: any;
    constructor: typeof TrimFunctionCallContext;
    TRIM(): any;
    LR_BRACKET(): any;
    FROM(): any;
    RR_BRACKET(): any;
    BOTH(): any;
    LEADING(): any;
    TRAILING(): any;
    stringLiteral(i: any): any;
    expression(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SimpleFunctionCallContext(parser: any, ctx: any): this;
declare class SimpleFunctionCallContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SimpleFunctionCallContext;
    CURRENT_DATE(): any;
    CURRENT_TIME(): any;
    CURRENT_TIMESTAMP(): any;
    CURRENT_USER(): any;
    LOCALTIME(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CharFunctionCallContext(parser: any, ctx: any): this;
declare class CharFunctionCallContext {
    constructor(parser: any, ctx: any);
    constructor: typeof CharFunctionCallContext;
    CHAR(): any;
    LR_BRACKET(): any;
    functionArgs(): any;
    RR_BRACKET(): any;
    USING(): any;
    charsetName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function WeightFunctionCallContext(parser: any, ctx: any): this;
declare class WeightFunctionCallContext {
    constructor(parser: any, ctx: any);
    stringFormat: any;
    constructor: typeof WeightFunctionCallContext;
    WEIGHT_STRING(): any;
    LR_BRACKET(i: any): any;
    RR_BRACKET(i: any): any;
    stringLiteral(): any;
    expression(): any;
    AS(): any;
    decimalLiteral(): any;
    levelsInWeightString(): any;
    CHAR(): any;
    BINARY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function GetFormatFunctionCallContext(parser: any, ctx: any): this;
declare class GetFormatFunctionCallContext {
    constructor(parser: any, ctx: any);
    datetimeFormat: any;
    constructor: typeof GetFormatFunctionCallContext;
    GET_FORMAT(): any;
    LR_BRACKET(): any;
    COMMA(): any;
    stringLiteral(): any;
    RR_BRACKET(): any;
    DATE(): any;
    TIME(): any;
    DATETIME(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CaseFunctionCallContext(parser: any, ctx: any): this;
declare class CaseFunctionCallContext {
    constructor(parser: any, ctx: any);
    elseArg: any;
    constructor: typeof CaseFunctionCallContext;
    CASE(): any;
    expression(): any;
    END(): any;
    caseFuncAlternative(i: any): any;
    ELSE(): any;
    functionArg(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ExtractFunctionCallContext(parser: any, ctx: any): this;
declare class ExtractFunctionCallContext {
    constructor(parser: any, ctx: any);
    sourceString: any;
    sourceExpression: any;
    constructor: typeof ExtractFunctionCallContext;
    EXTRACT(): any;
    LR_BRACKET(): any;
    intervalType(): any;
    FROM(): any;
    RR_BRACKET(): any;
    stringLiteral(): any;
    expression(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DataTypeFunctionCallContext(parser: any, ctx: any): this;
declare class DataTypeFunctionCallContext {
    constructor(parser: any, ctx: any);
    separator: any;
    constructor: typeof DataTypeFunctionCallContext;
    CONVERT(): any;
    LR_BRACKET(): any;
    expression(): any;
    convertedDataType(): any;
    RR_BRACKET(): any;
    COMMA(): any;
    USING(): any;
    charsetName(): any;
    CAST(): any;
    AS(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ValuesFunctionCallContext(parser: any, ctx: any): this;
declare class ValuesFunctionCallContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ValuesFunctionCallContext;
    VALUES(): any;
    LR_BRACKET(): any;
    fullColumnName(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SubstrFunctionCallContext(parser: any, ctx: any): this;
declare class SubstrFunctionCallContext {
    constructor(parser: any, ctx: any);
    sourceString: any;
    sourceExpression: any;
    fromDecimal: any;
    fromExpression: any;
    forDecimal: any;
    forExpression: any;
    constructor: typeof SubstrFunctionCallContext;
    LR_BRACKET(): any;
    FROM(): any;
    RR_BRACKET(): any;
    SUBSTR(): any;
    SUBSTRING(): any;
    stringLiteral(): any;
    expression(i: any): any;
    decimalLiteral(i: any): any;
    FOR(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LevelWeightRangeContext(parser: any, ctx: any): this;
declare class LevelWeightRangeContext {
    constructor(parser: any, ctx: any);
    firstLevel: any;
    lastLevel: any;
    constructor: typeof LevelWeightRangeContext;
    LEVEL(): any;
    MINUS(): any;
    decimalLiteral(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LevelWeightListContext(parser: any, ctx: any): this;
declare class LevelWeightListContext {
    constructor(parser: any, ctx: any);
    constructor: typeof LevelWeightListContext;
    LEVEL(): any;
    levelInWeightListElement(i: any): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IsExpressionContext(parser: any, ctx: any): this;
declare class IsExpressionContext {
    constructor(parser: any, ctx: any);
    testValue: any;
    constructor: typeof IsExpressionContext;
    predicate(): any;
    IS(): any;
    TRUE(): any;
    FALSE(): any;
    UNKNOWN(): any;
    NOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function NotExpressionContext(parser: any, ctx: any): this;
declare class NotExpressionContext {
    constructor(parser: any, ctx: any);
    notOperator: any;
    constructor: typeof NotExpressionContext;
    expression(): any;
    NOT(): any;
    EXCLAMATION_SYMBOL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LogicalExpressionContext(parser: any, ctx: any): this;
declare class LogicalExpressionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof LogicalExpressionContext;
    expression(i: any): any;
    logicalOperator(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PredicateExpressionContext(parser: any, ctx: any): this;
declare class PredicateExpressionContext {
    constructor(parser: any, ctx: any);
    constructor: typeof PredicateExpressionContext;
    predicate(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SoundsLikePredicateContext(parser: any, ctx: any): this;
declare class SoundsLikePredicateContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SoundsLikePredicateContext;
    predicate(i: any): any;
    SOUNDS(): any;
    LIKE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ExpressionAtomPredicateContext(parser: any, ctx: any): this;
declare class ExpressionAtomPredicateContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ExpressionAtomPredicateContext;
    expressionAtom(): any;
    LOCAL_ID(): any;
    VAR_ASSIGN(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function JsonMemberOfPredicateContext(parser: any, ctx: any): this;
declare class JsonMemberOfPredicateContext {
    constructor(parser: any, ctx: any);
    constructor: typeof JsonMemberOfPredicateContext;
    predicate(i: any): any;
    MEMBER(): any;
    OF(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InPredicateContext(parser: any, ctx: any): this;
declare class InPredicateContext {
    constructor(parser: any, ctx: any);
    constructor: typeof InPredicateContext;
    predicate(): any;
    IN(): any;
    LR_BRACKET(): any;
    RR_BRACKET(): any;
    selectStatement(): any;
    expressions(): any;
    NOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SubqueryComparasionPredicateContext(parser: any, ctx: any): this;
declare class SubqueryComparasionPredicateContext {
    constructor(parser: any, ctx: any);
    quantifier: any;
    constructor: typeof SubqueryComparasionPredicateContext;
    predicate(): any;
    comparisonOperator(): any;
    LR_BRACKET(): any;
    selectStatement(): any;
    RR_BRACKET(): any;
    ALL(): any;
    ANY(): any;
    SOME(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BetweenPredicateContext(parser: any, ctx: any): this;
declare class BetweenPredicateContext {
    constructor(parser: any, ctx: any);
    constructor: typeof BetweenPredicateContext;
    predicate(i: any): any;
    BETWEEN(): any;
    AND(): any;
    NOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BinaryComparasionPredicateContext(parser: any, ctx: any): this;
declare class BinaryComparasionPredicateContext {
    constructor(parser: any, ctx: any);
    left: any;
    right: any;
    constructor: typeof BinaryComparasionPredicateContext;
    comparisonOperator(): any;
    predicate(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IsNullPredicateContext(parser: any, ctx: any): this;
declare class IsNullPredicateContext {
    constructor(parser: any, ctx: any);
    constructor: typeof IsNullPredicateContext;
    predicate(): any;
    IS(): any;
    nullNotnull(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function LikePredicateContext(parser: any, ctx: any): this;
declare class LikePredicateContext {
    constructor(parser: any, ctx: any);
    constructor: typeof LikePredicateContext;
    predicate(i: any): any;
    LIKE(): any;
    NOT(): any;
    ESCAPE(): any;
    STRING_LITERAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RegexpPredicateContext(parser: any, ctx: any): this;
declare class RegexpPredicateContext {
    constructor(parser: any, ctx: any);
    regex: any;
    constructor: typeof RegexpPredicateContext;
    predicate(i: any): any;
    REGEXP(): any;
    RLIKE(): any;
    NOT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UnaryExpressionAtomContext(parser: any, ctx: any): this;
declare class UnaryExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof UnaryExpressionAtomContext;
    unaryOperator(): any;
    expressionAtom(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CollateExpressionAtomContext(parser: any, ctx: any): this;
declare class CollateExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof CollateExpressionAtomContext;
    expressionAtom(): any;
    COLLATE(): any;
    collationName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MysqlVariableExpressionAtomContext(parser: any, ctx: any): this;
declare class MysqlVariableExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof MysqlVariableExpressionAtomContext;
    mysqlVariable(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function NestedExpressionAtomContext(parser: any, ctx: any): this;
declare class NestedExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof NestedExpressionAtomContext;
    LR_BRACKET(): any;
    expression(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function NestedRowExpressionAtomContext(parser: any, ctx: any): this;
declare class NestedRowExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof NestedRowExpressionAtomContext;
    ROW(): any;
    LR_BRACKET(): any;
    expression(i: any): any;
    RR_BRACKET(): any;
    COMMA(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MathExpressionAtomContext(parser: any, ctx: any): this;
declare class MathExpressionAtomContext {
    constructor(parser: any, ctx: any);
    left: any;
    right: any;
    constructor: typeof MathExpressionAtomContext;
    mathOperator(): any;
    expressionAtom(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ExistsExpressionAtomContext(parser: any, ctx: any): this;
declare class ExistsExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ExistsExpressionAtomContext;
    EXISTS(): any;
    LR_BRACKET(): any;
    selectStatement(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IntervalExpressionAtomContext(parser: any, ctx: any): this;
declare class IntervalExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof IntervalExpressionAtomContext;
    INTERVAL(): any;
    expression(): any;
    intervalType(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function JsonExpressionAtomContext(parser: any, ctx: any): this;
declare class JsonExpressionAtomContext {
    constructor(parser: any, ctx: any);
    left: any;
    right: any;
    constructor: typeof JsonExpressionAtomContext;
    jsonOperator(): any;
    expressionAtom(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SubqueryExpressionAtomContext(parser: any, ctx: any): this;
declare class SubqueryExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof SubqueryExpressionAtomContext;
    LR_BRACKET(): any;
    selectStatement(): any;
    RR_BRACKET(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ConstantExpressionAtomContext(parser: any, ctx: any): this;
declare class ConstantExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof ConstantExpressionAtomContext;
    constant(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FunctionCallExpressionAtomContext(parser: any, ctx: any): this;
declare class FunctionCallExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof FunctionCallExpressionAtomContext;
    functionCall(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BinaryExpressionAtomContext(parser: any, ctx: any): this;
declare class BinaryExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof BinaryExpressionAtomContext;
    BINARY(): any;
    expressionAtom(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FullColumnNameExpressionAtomContext(parser: any, ctx: any): this;
declare class FullColumnNameExpressionAtomContext {
    constructor(parser: any, ctx: any);
    constructor: typeof FullColumnNameExpressionAtomContext;
    fullColumnName(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BitExpressionAtomContext(parser: any, ctx: any): this;
declare class BitExpressionAtomContext {
    constructor(parser: any, ctx: any);
    left: any;
    right: any;
    constructor: typeof BitExpressionAtomContext;
    bitOperator(): any;
    expressionAtom(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
export {};
//# sourceMappingURL=MySqlParser.d.ts.map