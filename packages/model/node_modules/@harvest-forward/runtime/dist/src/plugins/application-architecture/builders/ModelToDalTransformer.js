"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelToDalTransformer = void 0;
const pluralize_1 = __importDefault(require("pluralize"));
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const ComponentOrigin_1 = require("../../../system/ComponentOrigin");
const Permanence_1 = require("../../../system/Permanence");
const SystemComponentArtifact_1 = require("../../../system/SystemComponentArtifact");
const SystemComponentType_1 = require("../../../system/SystemComponentType");
const ValueType_1 = require("../../../system/ValueType");
const information_architecture_1 = require("../../information-architecture");
const DataAccessLayer_1 = require("../DataAccessLayer");
class ModelToDalTransformer extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'Class',
            permanence: 'persistent',
            componentType: 'informationModel',
        });
        super('ModelToDalTransformer', 'A transformer that creates a data access layer based on the information model', {
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(system, component) {
        const dal = DataAccessLayer_1.DataAccessLayer.fromSystem(system);
        const informationClass = component;
        const dalName = `${informationClass.name}Dal`;
        const dalDescription = `A class to access and manipulate data saved in a persistent store for the informational class ${informationClass.name}`;
        const dalClass = new information_architecture_1.Class(dal.fullConstantCaseName, dalName, dalDescription, SystemComponentType_1.SystemComponentType.dataAccess);
        dalClass.singularName = dalName;
        dalClass.pluralName = pluralize_1.default.plural(dalName);
        dalClass.operatesOnBehalfOf = informationClass;
        dalClass.permanence = Permanence_1.Permanence.constant;
        dalClass.informational = false;
        dalClass.functional = true;
        dalClass.origin = ComponentOrigin_1.ComponentOrigin.manufactured;
        dal.addChild(dalClass);
        return [new SystemComponentArtifact_1.SystemComponentArtifact(dalClass)];
    }
}
exports.ModelToDalTransformer = ModelToDalTransformer;
