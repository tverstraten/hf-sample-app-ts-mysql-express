"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptClassToModelHarvester = void 0;
const typescript_1 = __importStar(require("typescript"));
const ComponentOrigin_1 = require("../../system/ComponentOrigin");
const Permanence_1 = require("../../system/Permanence");
const SystemComponent_1 = require("../../system/SystemComponent");
const SystemComponentArtifact_1 = require("../../system/SystemComponentArtifact");
const SystemComponentType_1 = require("../../system/SystemComponentType");
const information_architecture_1 = require("../information-architecture");
const AbstractTypeScriptAstHarvester_1 = require("./AbstractTypeScriptAstHarvester");
class TypeScriptClassToModelHarvester extends AbstractTypeScriptAstHarvester_1.AbstractTypeScriptAstHarvester {
    constructor(configurationValues) {
        super('TypeScriptClassToModelHarvester', 'A harvester that infers the data model from typescript classes', {}, configurationValues);
    }
    async harvestFromAst(system, ast) {
        let representedClass;
        const _thisThis = this;
        const results = [];
        const model = information_architecture_1.InformationModel.fromSystem(system);
        try {
            typescript_1.default.forEachChild(ast, function visit(node) {
                switch (node.kind) {
                    case typescript_1.SyntaxKind.ClassDeclaration:
                        const classDeclaration = node;
                        const name = classDeclaration.name?.getText(ast);
                        if (name != null && _thisThis.validClass(name)) {
                            const fullName = SystemComponent_1.SystemComponent.fullConstantCase(model.fullConstantCaseName, name);
                            const valueClass = system.descendants[fullName];
                            if (valueClass == null) {
                                const memberJsDoc = node.jsDoc;
                                let memberDocumentationText = '';
                                if (memberJsDoc != null) {
                                    memberJsDoc.forEach((jsDocItem) => {
                                        memberDocumentationText += jsDocItem.comment;
                                    });
                                }
                                representedClass = new information_architecture_1.Class(model.fullConstantCaseName, name, memberDocumentationText, SystemComponentType_1.SystemComponentType.informationModel);
                                representedClass.permanence = Permanence_1.Permanence.persistent;
                                representedClass.informational = true;
                                representedClass.functional = false;
                                representedClass.origin = ComponentOrigin_1.ComponentOrigin.harvested;
                                model.addChild(representedClass);
                                results.push(new SystemComponentArtifact_1.SystemComponentArtifact(representedClass));
                                typescript_1.default.forEachChild(node, visit);
                            }
                        }
                        break;
                    default:
                        break;
                }
            });
            return results;
        }
        catch (problem) {
            this.logger.error(`harvestFromAst(failed) ${problem}`);
            throw problem;
        }
    }
}
exports.TypeScriptClassToModelHarvester = TypeScriptClassToModelHarvester;
