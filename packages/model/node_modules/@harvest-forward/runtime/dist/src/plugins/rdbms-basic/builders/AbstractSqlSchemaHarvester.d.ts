import { AbstractSingularBuilder } from '../../../runtime/AbstractSingularBuilder';
import { Artifact } from '../../../system/Artifact';
import { System } from '../../../system/System';
import { SystemComponent } from '../../../system/SystemComponent';
import { Column } from '../Column';
import { Constraint } from '../Constraint';
import { Domain } from '../Domain';
import { ForeignKey } from '../ForeignKey';
import { PrimaryKey } from '../PrimaryKey';
import { Schema } from '../Schema';
import { Table } from '../Table';
import { View } from '../View';
export declare abstract class AbstractSqlSchemaHarvester extends AbstractSingularBuilder {
    protected schemaRegex: RegExp;
    protected tableRegex: RegExp;
    protected columnRegex: RegExp;
    private regexSet;
    constructor(name: string, description: string, configurationValues?: {
        [key: string]: any;
    });
    _doesConfigurationWork(): Promise<boolean>;
    protected ensureRegexes(): void;
    protected validSchema(schema: Schema): boolean;
    protected validTable(table: Table): boolean;
    protected validView(view: View): boolean;
    protected validColumn(column: Column): boolean;
    protected validDomain(domain: Domain): boolean;
    protected validForeignKey(fk: ForeignKey): boolean;
    protected validPrimaryKey(pk: PrimaryKey): boolean;
    protected validConstraint(constraint: Constraint): boolean;
    buildInternal(system: System, __component: SystemComponent): Promise<Artifact[]>;
    protected abstract connect(): void;
    protected abstract performQuery(system: System): Promise<Artifact[]>;
    protected abstract disconnect(): void;
}
//# sourceMappingURL=AbstractSqlSchemaHarvester.d.ts.map