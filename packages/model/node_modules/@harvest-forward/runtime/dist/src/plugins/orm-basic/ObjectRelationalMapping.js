"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectRelationalMapping = void 0;
const SystemComponentComparator_1 = require("../../system/SystemComponentComparator");
const SystemComponentType_1 = require("../../system/SystemComponentType");
const SystemDescendantComponent_1 = require("../../system/SystemDescendantComponent");
const ObjectTypeTableMapping_1 = require("./ObjectTypeTableMapping");
class ObjectRelationalMapping extends SystemDescendantComponent_1.SystemDescendantComponent {
    constructor(nameSpace, name, description) {
        super('ObjectRelationalMapping', nameSpace, name, SystemComponentType_1.SystemComponentType.informationModel, description);
        this._tableNameToMapping = {};
        this._typeNameToMapping = {};
    }
    addChild(child) {
        super.addChild(child);
        if (child instanceof ObjectTypeTableMapping_1.ObjectTypeTableMapping) {
            this._tableNameToMapping[child.fullTableName] = child;
            this._typeNameToMapping[child.fullTypeName] = child;
        }
        this.addDescendant(child);
    }
    removeChild(child) {
        this.removeDescendant(child);
        return super.removeChild(child);
    }
    get dataAccessMappings() {
        const mappings = Object.values(this._tableNameToMapping);
        mappings.sort(SystemComponentComparator_1.SystemComponentComparator);
        return mappings;
    }
    get tableNameToMapping() {
        return this._tableNameToMapping;
    }
    updateTableNameToMapping(oldName, newName) {
        const mapping = this._tableNameToMapping[oldName];
        delete this._tableNameToMapping[oldName];
        this._tableNameToMapping[newName] = mapping;
    }
    get typeNameToMapping() {
        return this._typeNameToMapping;
    }
    updateTypeNameToMapping(mapping, oldName, newName) {
        delete this._typeNameToMapping[oldName];
        this._typeNameToMapping[newName] = mapping;
    }
}
exports.ObjectRelationalMapping = ObjectRelationalMapping;
