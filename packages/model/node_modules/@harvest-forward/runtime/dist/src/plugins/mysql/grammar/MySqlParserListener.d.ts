export function MySqlParserListener(): this;
export class MySqlParserListener {
    constructor: typeof MySqlParserListener;
    enterRoot(ctx: any): void;
    exitRoot(ctx: any): void;
    enterSqlStatements(ctx: any): void;
    exitSqlStatements(ctx: any): void;
    enterSqlStatement(ctx: any): void;
    exitSqlStatement(ctx: any): void;
    enterEmptyStatement(ctx: any): void;
    exitEmptyStatement(ctx: any): void;
    enterDdlStatement(ctx: any): void;
    exitDdlStatement(ctx: any): void;
    enterDmlStatement(ctx: any): void;
    exitDmlStatement(ctx: any): void;
    enterTransactionStatement(ctx: any): void;
    exitTransactionStatement(ctx: any): void;
    enterReplicationStatement(ctx: any): void;
    exitReplicationStatement(ctx: any): void;
    enterPreparedStatement(ctx: any): void;
    exitPreparedStatement(ctx: any): void;
    enterCompoundStatement(ctx: any): void;
    exitCompoundStatement(ctx: any): void;
    enterAdministrationStatement(ctx: any): void;
    exitAdministrationStatement(ctx: any): void;
    enterUtilityStatement(ctx: any): void;
    exitUtilityStatement(ctx: any): void;
    enterCreateDatabase(ctx: any): void;
    exitCreateDatabase(ctx: any): void;
    enterCreateEvent(ctx: any): void;
    exitCreateEvent(ctx: any): void;
    enterCreateIndex(ctx: any): void;
    exitCreateIndex(ctx: any): void;
    enterCreateLogfileGroup(ctx: any): void;
    exitCreateLogfileGroup(ctx: any): void;
    enterCreateProcedure(ctx: any): void;
    exitCreateProcedure(ctx: any): void;
    enterCreateFunction(ctx: any): void;
    exitCreateFunction(ctx: any): void;
    enterCreateServer(ctx: any): void;
    exitCreateServer(ctx: any): void;
    enterCopyCreateTable(ctx: any): void;
    exitCopyCreateTable(ctx: any): void;
    enterQueryCreateTable(ctx: any): void;
    exitQueryCreateTable(ctx: any): void;
    enterColumnCreateTable(ctx: any): void;
    exitColumnCreateTable(ctx: any): void;
    enterCreateTablespaceInnodb(ctx: any): void;
    exitCreateTablespaceInnodb(ctx: any): void;
    enterCreateTablespaceNdb(ctx: any): void;
    exitCreateTablespaceNdb(ctx: any): void;
    enterCreateTrigger(ctx: any): void;
    exitCreateTrigger(ctx: any): void;
    enterCreateView(ctx: any): void;
    exitCreateView(ctx: any): void;
    enterCreateDatabaseOption(ctx: any): void;
    exitCreateDatabaseOption(ctx: any): void;
    enterOwnerStatement(ctx: any): void;
    exitOwnerStatement(ctx: any): void;
    enterPreciseSchedule(ctx: any): void;
    exitPreciseSchedule(ctx: any): void;
    enterIntervalSchedule(ctx: any): void;
    exitIntervalSchedule(ctx: any): void;
    enterTimestampValue(ctx: any): void;
    exitTimestampValue(ctx: any): void;
    enterIntervalExpr(ctx: any): void;
    exitIntervalExpr(ctx: any): void;
    enterIntervalType(ctx: any): void;
    exitIntervalType(ctx: any): void;
    enterEnableType(ctx: any): void;
    exitEnableType(ctx: any): void;
    enterIndexType(ctx: any): void;
    exitIndexType(ctx: any): void;
    enterIndexOption(ctx: any): void;
    exitIndexOption(ctx: any): void;
    enterProcedureParameter(ctx: any): void;
    exitProcedureParameter(ctx: any): void;
    enterFunctionParameter(ctx: any): void;
    exitFunctionParameter(ctx: any): void;
    enterRoutineComment(ctx: any): void;
    exitRoutineComment(ctx: any): void;
    enterRoutineLanguage(ctx: any): void;
    exitRoutineLanguage(ctx: any): void;
    enterRoutineBehavior(ctx: any): void;
    exitRoutineBehavior(ctx: any): void;
    enterRoutineData(ctx: any): void;
    exitRoutineData(ctx: any): void;
    enterRoutineSecurity(ctx: any): void;
    exitRoutineSecurity(ctx: any): void;
    enterServerOption(ctx: any): void;
    exitServerOption(ctx: any): void;
    enterCreateDefinitions(ctx: any): void;
    exitCreateDefinitions(ctx: any): void;
    enterColumnDeclaration(ctx: any): void;
    exitColumnDeclaration(ctx: any): void;
    enterConstraintDeclaration(ctx: any): void;
    exitConstraintDeclaration(ctx: any): void;
    enterIndexDeclaration(ctx: any): void;
    exitIndexDeclaration(ctx: any): void;
    enterColumnDefinition(ctx: any): void;
    exitColumnDefinition(ctx: any): void;
    enterNullColumnConstraint(ctx: any): void;
    exitNullColumnConstraint(ctx: any): void;
    enterDefaultColumnConstraint(ctx: any): void;
    exitDefaultColumnConstraint(ctx: any): void;
    enterAutoIncrementColumnConstraint(ctx: any): void;
    exitAutoIncrementColumnConstraint(ctx: any): void;
    enterPrimaryKeyColumnConstraint(ctx: any): void;
    exitPrimaryKeyColumnConstraint(ctx: any): void;
    enterUniqueKeyColumnConstraint(ctx: any): void;
    exitUniqueKeyColumnConstraint(ctx: any): void;
    enterCommentColumnConstraint(ctx: any): void;
    exitCommentColumnConstraint(ctx: any): void;
    enterFormatColumnConstraint(ctx: any): void;
    exitFormatColumnConstraint(ctx: any): void;
    enterStorageColumnConstraint(ctx: any): void;
    exitStorageColumnConstraint(ctx: any): void;
    enterReferenceColumnConstraint(ctx: any): void;
    exitReferenceColumnConstraint(ctx: any): void;
    enterCollateColumnConstraint(ctx: any): void;
    exitCollateColumnConstraint(ctx: any): void;
    enterGeneratedColumnConstraint(ctx: any): void;
    exitGeneratedColumnConstraint(ctx: any): void;
    enterSerialDefaultColumnConstraint(ctx: any): void;
    exitSerialDefaultColumnConstraint(ctx: any): void;
    enterCheckColumnConstraint(ctx: any): void;
    exitCheckColumnConstraint(ctx: any): void;
    enterPrimaryKeyTableConstraint(ctx: any): void;
    exitPrimaryKeyTableConstraint(ctx: any): void;
    enterUniqueKeyTableConstraint(ctx: any): void;
    exitUniqueKeyTableConstraint(ctx: any): void;
    enterForeignKeyTableConstraint(ctx: any): void;
    exitForeignKeyTableConstraint(ctx: any): void;
    enterCheckTableConstraint(ctx: any): void;
    exitCheckTableConstraint(ctx: any): void;
    enterReferenceDefinition(ctx: any): void;
    exitReferenceDefinition(ctx: any): void;
    enterReferenceAction(ctx: any): void;
    exitReferenceAction(ctx: any): void;
    enterReferenceControlType(ctx: any): void;
    exitReferenceControlType(ctx: any): void;
    enterSimpleIndexDeclaration(ctx: any): void;
    exitSimpleIndexDeclaration(ctx: any): void;
    enterSpecialIndexDeclaration(ctx: any): void;
    exitSpecialIndexDeclaration(ctx: any): void;
    enterTableOptionEngine(ctx: any): void;
    exitTableOptionEngine(ctx: any): void;
    enterTableOptionAutoIncrement(ctx: any): void;
    exitTableOptionAutoIncrement(ctx: any): void;
    enterTableOptionAverage(ctx: any): void;
    exitTableOptionAverage(ctx: any): void;
    enterTableOptionCharset(ctx: any): void;
    exitTableOptionCharset(ctx: any): void;
    enterTableOptionChecksum(ctx: any): void;
    exitTableOptionChecksum(ctx: any): void;
    enterTableOptionCollate(ctx: any): void;
    exitTableOptionCollate(ctx: any): void;
    enterTableOptionComment(ctx: any): void;
    exitTableOptionComment(ctx: any): void;
    enterTableOptionCompression(ctx: any): void;
    exitTableOptionCompression(ctx: any): void;
    enterTableOptionConnection(ctx: any): void;
    exitTableOptionConnection(ctx: any): void;
    enterTableOptionDataDirectory(ctx: any): void;
    exitTableOptionDataDirectory(ctx: any): void;
    enterTableOptionDelay(ctx: any): void;
    exitTableOptionDelay(ctx: any): void;
    enterTableOptionEncryption(ctx: any): void;
    exitTableOptionEncryption(ctx: any): void;
    enterTableOptionIndexDirectory(ctx: any): void;
    exitTableOptionIndexDirectory(ctx: any): void;
    enterTableOptionInsertMethod(ctx: any): void;
    exitTableOptionInsertMethod(ctx: any): void;
    enterTableOptionKeyBlockSize(ctx: any): void;
    exitTableOptionKeyBlockSize(ctx: any): void;
    enterTableOptionMaxRows(ctx: any): void;
    exitTableOptionMaxRows(ctx: any): void;
    enterTableOptionMinRows(ctx: any): void;
    exitTableOptionMinRows(ctx: any): void;
    enterTableOptionPackKeys(ctx: any): void;
    exitTableOptionPackKeys(ctx: any): void;
    enterTableOptionPassword(ctx: any): void;
    exitTableOptionPassword(ctx: any): void;
    enterTableOptionRowFormat(ctx: any): void;
    exitTableOptionRowFormat(ctx: any): void;
    enterTableOptionRecalculation(ctx: any): void;
    exitTableOptionRecalculation(ctx: any): void;
    enterTableOptionPersistent(ctx: any): void;
    exitTableOptionPersistent(ctx: any): void;
    enterTableOptionSamplePage(ctx: any): void;
    exitTableOptionSamplePage(ctx: any): void;
    enterTableOptionTablespace(ctx: any): void;
    exitTableOptionTablespace(ctx: any): void;
    enterTableOptionUnion(ctx: any): void;
    exitTableOptionUnion(ctx: any): void;
    enterTablespaceStorage(ctx: any): void;
    exitTablespaceStorage(ctx: any): void;
    enterPartitionDefinitions(ctx: any): void;
    exitPartitionDefinitions(ctx: any): void;
    enterPartitionFunctionHash(ctx: any): void;
    exitPartitionFunctionHash(ctx: any): void;
    enterPartitionFunctionKey(ctx: any): void;
    exitPartitionFunctionKey(ctx: any): void;
    enterPartitionFunctionRange(ctx: any): void;
    exitPartitionFunctionRange(ctx: any): void;
    enterPartitionFunctionList(ctx: any): void;
    exitPartitionFunctionList(ctx: any): void;
    enterSubPartitionFunctionHash(ctx: any): void;
    exitSubPartitionFunctionHash(ctx: any): void;
    enterSubPartitionFunctionKey(ctx: any): void;
    exitSubPartitionFunctionKey(ctx: any): void;
    enterPartitionComparision(ctx: any): void;
    exitPartitionComparision(ctx: any): void;
    enterPartitionListAtom(ctx: any): void;
    exitPartitionListAtom(ctx: any): void;
    enterPartitionListVector(ctx: any): void;
    exitPartitionListVector(ctx: any): void;
    enterPartitionSimple(ctx: any): void;
    exitPartitionSimple(ctx: any): void;
    enterPartitionDefinerAtom(ctx: any): void;
    exitPartitionDefinerAtom(ctx: any): void;
    enterPartitionDefinerVector(ctx: any): void;
    exitPartitionDefinerVector(ctx: any): void;
    enterSubpartitionDefinition(ctx: any): void;
    exitSubpartitionDefinition(ctx: any): void;
    enterPartitionOptionEngine(ctx: any): void;
    exitPartitionOptionEngine(ctx: any): void;
    enterPartitionOptionComment(ctx: any): void;
    exitPartitionOptionComment(ctx: any): void;
    enterPartitionOptionDataDirectory(ctx: any): void;
    exitPartitionOptionDataDirectory(ctx: any): void;
    enterPartitionOptionIndexDirectory(ctx: any): void;
    exitPartitionOptionIndexDirectory(ctx: any): void;
    enterPartitionOptionMaxRows(ctx: any): void;
    exitPartitionOptionMaxRows(ctx: any): void;
    enterPartitionOptionMinRows(ctx: any): void;
    exitPartitionOptionMinRows(ctx: any): void;
    enterPartitionOptionTablespace(ctx: any): void;
    exitPartitionOptionTablespace(ctx: any): void;
    enterPartitionOptionNodeGroup(ctx: any): void;
    exitPartitionOptionNodeGroup(ctx: any): void;
    enterAlterSimpleDatabase(ctx: any): void;
    exitAlterSimpleDatabase(ctx: any): void;
    enterAlterUpgradeName(ctx: any): void;
    exitAlterUpgradeName(ctx: any): void;
    enterAlterEvent(ctx: any): void;
    exitAlterEvent(ctx: any): void;
    enterAlterFunction(ctx: any): void;
    exitAlterFunction(ctx: any): void;
    enterAlterInstance(ctx: any): void;
    exitAlterInstance(ctx: any): void;
    enterAlterLogfileGroup(ctx: any): void;
    exitAlterLogfileGroup(ctx: any): void;
    enterAlterProcedure(ctx: any): void;
    exitAlterProcedure(ctx: any): void;
    enterAlterServer(ctx: any): void;
    exitAlterServer(ctx: any): void;
    enterAlterTable(ctx: any): void;
    exitAlterTable(ctx: any): void;
    enterAlterTablespace(ctx: any): void;
    exitAlterTablespace(ctx: any): void;
    enterAlterView(ctx: any): void;
    exitAlterView(ctx: any): void;
    enterAlterByTableOption(ctx: any): void;
    exitAlterByTableOption(ctx: any): void;
    enterAlterByAddColumn(ctx: any): void;
    exitAlterByAddColumn(ctx: any): void;
    enterAlterByAddColumns(ctx: any): void;
    exitAlterByAddColumns(ctx: any): void;
    enterAlterByAddIndex(ctx: any): void;
    exitAlterByAddIndex(ctx: any): void;
    enterAlterByAddPrimaryKey(ctx: any): void;
    exitAlterByAddPrimaryKey(ctx: any): void;
    enterAlterByAddUniqueKey(ctx: any): void;
    exitAlterByAddUniqueKey(ctx: any): void;
    enterAlterByAddSpecialIndex(ctx: any): void;
    exitAlterByAddSpecialIndex(ctx: any): void;
    enterAlterByAddForeignKey(ctx: any): void;
    exitAlterByAddForeignKey(ctx: any): void;
    enterAlterByAddCheckTableConstraint(ctx: any): void;
    exitAlterByAddCheckTableConstraint(ctx: any): void;
    enterAlterBySetAlgorithm(ctx: any): void;
    exitAlterBySetAlgorithm(ctx: any): void;
    enterAlterByChangeDefault(ctx: any): void;
    exitAlterByChangeDefault(ctx: any): void;
    enterAlterByChangeColumn(ctx: any): void;
    exitAlterByChangeColumn(ctx: any): void;
    enterAlterByRenameColumn(ctx: any): void;
    exitAlterByRenameColumn(ctx: any): void;
    enterAlterByLock(ctx: any): void;
    exitAlterByLock(ctx: any): void;
    enterAlterByModifyColumn(ctx: any): void;
    exitAlterByModifyColumn(ctx: any): void;
    enterAlterByDropColumn(ctx: any): void;
    exitAlterByDropColumn(ctx: any): void;
    enterAlterByDropConstraintCheck(ctx: any): void;
    exitAlterByDropConstraintCheck(ctx: any): void;
    enterAlterByDropPrimaryKey(ctx: any): void;
    exitAlterByDropPrimaryKey(ctx: any): void;
    enterAlterByRenameIndex(ctx: any): void;
    exitAlterByRenameIndex(ctx: any): void;
    enterAlterByAlterIndexVisibility(ctx: any): void;
    exitAlterByAlterIndexVisibility(ctx: any): void;
    enterAlterByDropIndex(ctx: any): void;
    exitAlterByDropIndex(ctx: any): void;
    enterAlterByDropForeignKey(ctx: any): void;
    exitAlterByDropForeignKey(ctx: any): void;
    enterAlterByDisableKeys(ctx: any): void;
    exitAlterByDisableKeys(ctx: any): void;
    enterAlterByEnableKeys(ctx: any): void;
    exitAlterByEnableKeys(ctx: any): void;
    enterAlterByRename(ctx: any): void;
    exitAlterByRename(ctx: any): void;
    enterAlterByOrder(ctx: any): void;
    exitAlterByOrder(ctx: any): void;
    enterAlterByConvertCharset(ctx: any): void;
    exitAlterByConvertCharset(ctx: any): void;
    enterAlterByDefaultCharset(ctx: any): void;
    exitAlterByDefaultCharset(ctx: any): void;
    enterAlterByDiscardTablespace(ctx: any): void;
    exitAlterByDiscardTablespace(ctx: any): void;
    enterAlterByImportTablespace(ctx: any): void;
    exitAlterByImportTablespace(ctx: any): void;
    enterAlterByForce(ctx: any): void;
    exitAlterByForce(ctx: any): void;
    enterAlterByValidate(ctx: any): void;
    exitAlterByValidate(ctx: any): void;
    enterAlterByAddPartition(ctx: any): void;
    exitAlterByAddPartition(ctx: any): void;
    enterAlterByDropPartition(ctx: any): void;
    exitAlterByDropPartition(ctx: any): void;
    enterAlterByDiscardPartition(ctx: any): void;
    exitAlterByDiscardPartition(ctx: any): void;
    enterAlterByImportPartition(ctx: any): void;
    exitAlterByImportPartition(ctx: any): void;
    enterAlterByTruncatePartition(ctx: any): void;
    exitAlterByTruncatePartition(ctx: any): void;
    enterAlterByCoalescePartition(ctx: any): void;
    exitAlterByCoalescePartition(ctx: any): void;
    enterAlterByReorganizePartition(ctx: any): void;
    exitAlterByReorganizePartition(ctx: any): void;
    enterAlterByExchangePartition(ctx: any): void;
    exitAlterByExchangePartition(ctx: any): void;
    enterAlterByAnalyzePartition(ctx: any): void;
    exitAlterByAnalyzePartition(ctx: any): void;
    enterAlterByCheckPartition(ctx: any): void;
    exitAlterByCheckPartition(ctx: any): void;
    enterAlterByOptimizePartition(ctx: any): void;
    exitAlterByOptimizePartition(ctx: any): void;
    enterAlterByRebuildPartition(ctx: any): void;
    exitAlterByRebuildPartition(ctx: any): void;
    enterAlterByRepairPartition(ctx: any): void;
    exitAlterByRepairPartition(ctx: any): void;
    enterAlterByRemovePartitioning(ctx: any): void;
    exitAlterByRemovePartitioning(ctx: any): void;
    enterAlterByUpgradePartitioning(ctx: any): void;
    exitAlterByUpgradePartitioning(ctx: any): void;
    enterDropDatabase(ctx: any): void;
    exitDropDatabase(ctx: any): void;
    enterDropEvent(ctx: any): void;
    exitDropEvent(ctx: any): void;
    enterDropIndex(ctx: any): void;
    exitDropIndex(ctx: any): void;
    enterDropLogfileGroup(ctx: any): void;
    exitDropLogfileGroup(ctx: any): void;
    enterDropProcedure(ctx: any): void;
    exitDropProcedure(ctx: any): void;
    enterDropFunction(ctx: any): void;
    exitDropFunction(ctx: any): void;
    enterDropServer(ctx: any): void;
    exitDropServer(ctx: any): void;
    enterDropTable(ctx: any): void;
    exitDropTable(ctx: any): void;
    enterDropTablespace(ctx: any): void;
    exitDropTablespace(ctx: any): void;
    enterDropTrigger(ctx: any): void;
    exitDropTrigger(ctx: any): void;
    enterDropView(ctx: any): void;
    exitDropView(ctx: any): void;
    enterRenameTable(ctx: any): void;
    exitRenameTable(ctx: any): void;
    enterRenameTableClause(ctx: any): void;
    exitRenameTableClause(ctx: any): void;
    enterTruncateTable(ctx: any): void;
    exitTruncateTable(ctx: any): void;
    enterCallStatement(ctx: any): void;
    exitCallStatement(ctx: any): void;
    enterDeleteStatement(ctx: any): void;
    exitDeleteStatement(ctx: any): void;
    enterDoStatement(ctx: any): void;
    exitDoStatement(ctx: any): void;
    enterHandlerStatement(ctx: any): void;
    exitHandlerStatement(ctx: any): void;
    enterInsertStatement(ctx: any): void;
    exitInsertStatement(ctx: any): void;
    enterLoadDataStatement(ctx: any): void;
    exitLoadDataStatement(ctx: any): void;
    enterLoadXmlStatement(ctx: any): void;
    exitLoadXmlStatement(ctx: any): void;
    enterReplaceStatement(ctx: any): void;
    exitReplaceStatement(ctx: any): void;
    enterSimpleSelect(ctx: any): void;
    exitSimpleSelect(ctx: any): void;
    enterParenthesisSelect(ctx: any): void;
    exitParenthesisSelect(ctx: any): void;
    enterUnionSelect(ctx: any): void;
    exitUnionSelect(ctx: any): void;
    enterUnionParenthesisSelect(ctx: any): void;
    exitUnionParenthesisSelect(ctx: any): void;
    enterUpdateStatement(ctx: any): void;
    exitUpdateStatement(ctx: any): void;
    enterInsertStatementValue(ctx: any): void;
    exitInsertStatementValue(ctx: any): void;
    enterUpdatedElement(ctx: any): void;
    exitUpdatedElement(ctx: any): void;
    enterAssignmentField(ctx: any): void;
    exitAssignmentField(ctx: any): void;
    enterLockClause(ctx: any): void;
    exitLockClause(ctx: any): void;
    enterSingleDeleteStatement(ctx: any): void;
    exitSingleDeleteStatement(ctx: any): void;
    enterMultipleDeleteStatement(ctx: any): void;
    exitMultipleDeleteStatement(ctx: any): void;
    enterHandlerOpenStatement(ctx: any): void;
    exitHandlerOpenStatement(ctx: any): void;
    enterHandlerReadIndexStatement(ctx: any): void;
    exitHandlerReadIndexStatement(ctx: any): void;
    enterHandlerReadStatement(ctx: any): void;
    exitHandlerReadStatement(ctx: any): void;
    enterHandlerCloseStatement(ctx: any): void;
    exitHandlerCloseStatement(ctx: any): void;
    enterSingleUpdateStatement(ctx: any): void;
    exitSingleUpdateStatement(ctx: any): void;
    enterMultipleUpdateStatement(ctx: any): void;
    exitMultipleUpdateStatement(ctx: any): void;
    enterOrderByClause(ctx: any): void;
    exitOrderByClause(ctx: any): void;
    enterOrderByExpression(ctx: any): void;
    exitOrderByExpression(ctx: any): void;
    enterTableSources(ctx: any): void;
    exitTableSources(ctx: any): void;
    enterTableSourceBase(ctx: any): void;
    exitTableSourceBase(ctx: any): void;
    enterTableSourceNested(ctx: any): void;
    exitTableSourceNested(ctx: any): void;
    enterAtomTableItem(ctx: any): void;
    exitAtomTableItem(ctx: any): void;
    enterSubqueryTableItem(ctx: any): void;
    exitSubqueryTableItem(ctx: any): void;
    enterTableSourcesItem(ctx: any): void;
    exitTableSourcesItem(ctx: any): void;
    enterIndexHint(ctx: any): void;
    exitIndexHint(ctx: any): void;
    enterIndexHintType(ctx: any): void;
    exitIndexHintType(ctx: any): void;
    enterInnerJoin(ctx: any): void;
    exitInnerJoin(ctx: any): void;
    enterStraightJoin(ctx: any): void;
    exitStraightJoin(ctx: any): void;
    enterOuterJoin(ctx: any): void;
    exitOuterJoin(ctx: any): void;
    enterNaturalJoin(ctx: any): void;
    exitNaturalJoin(ctx: any): void;
    enterQueryExpression(ctx: any): void;
    exitQueryExpression(ctx: any): void;
    enterQueryExpressionNointo(ctx: any): void;
    exitQueryExpressionNointo(ctx: any): void;
    enterQuerySpecification(ctx: any): void;
    exitQuerySpecification(ctx: any): void;
    enterQuerySpecificationNointo(ctx: any): void;
    exitQuerySpecificationNointo(ctx: any): void;
    enterUnionParenthesis(ctx: any): void;
    exitUnionParenthesis(ctx: any): void;
    enterUnionStatement(ctx: any): void;
    exitUnionStatement(ctx: any): void;
    enterSelectSpec(ctx: any): void;
    exitSelectSpec(ctx: any): void;
    enterSelectElements(ctx: any): void;
    exitSelectElements(ctx: any): void;
    enterSelectStarElement(ctx: any): void;
    exitSelectStarElement(ctx: any): void;
    enterSelectColumnElement(ctx: any): void;
    exitSelectColumnElement(ctx: any): void;
    enterSelectFunctionElement(ctx: any): void;
    exitSelectFunctionElement(ctx: any): void;
    enterSelectExpressionElement(ctx: any): void;
    exitSelectExpressionElement(ctx: any): void;
    enterSelectIntoVariables(ctx: any): void;
    exitSelectIntoVariables(ctx: any): void;
    enterSelectIntoDumpFile(ctx: any): void;
    exitSelectIntoDumpFile(ctx: any): void;
    enterSelectIntoTextFile(ctx: any): void;
    exitSelectIntoTextFile(ctx: any): void;
    enterSelectFieldsInto(ctx: any): void;
    exitSelectFieldsInto(ctx: any): void;
    enterSelectLinesInto(ctx: any): void;
    exitSelectLinesInto(ctx: any): void;
    enterFromClause(ctx: any): void;
    exitFromClause(ctx: any): void;
    enterGroupByItem(ctx: any): void;
    exitGroupByItem(ctx: any): void;
    enterLimitClause(ctx: any): void;
    exitLimitClause(ctx: any): void;
    enterLimitClauseAtom(ctx: any): void;
    exitLimitClauseAtom(ctx: any): void;
    enterStartTransaction(ctx: any): void;
    exitStartTransaction(ctx: any): void;
    enterBeginWork(ctx: any): void;
    exitBeginWork(ctx: any): void;
    enterCommitWork(ctx: any): void;
    exitCommitWork(ctx: any): void;
    enterRollbackWork(ctx: any): void;
    exitRollbackWork(ctx: any): void;
    enterSavepointStatement(ctx: any): void;
    exitSavepointStatement(ctx: any): void;
    enterRollbackStatement(ctx: any): void;
    exitRollbackStatement(ctx: any): void;
    enterReleaseStatement(ctx: any): void;
    exitReleaseStatement(ctx: any): void;
    enterLockTables(ctx: any): void;
    exitLockTables(ctx: any): void;
    enterUnlockTables(ctx: any): void;
    exitUnlockTables(ctx: any): void;
    enterSetAutocommitStatement(ctx: any): void;
    exitSetAutocommitStatement(ctx: any): void;
    enterSetTransactionStatement(ctx: any): void;
    exitSetTransactionStatement(ctx: any): void;
    enterTransactionMode(ctx: any): void;
    exitTransactionMode(ctx: any): void;
    enterLockTableElement(ctx: any): void;
    exitLockTableElement(ctx: any): void;
    enterLockAction(ctx: any): void;
    exitLockAction(ctx: any): void;
    enterTransactionOption(ctx: any): void;
    exitTransactionOption(ctx: any): void;
    enterTransactionLevel(ctx: any): void;
    exitTransactionLevel(ctx: any): void;
    enterChangeMaster(ctx: any): void;
    exitChangeMaster(ctx: any): void;
    enterChangeReplicationFilter(ctx: any): void;
    exitChangeReplicationFilter(ctx: any): void;
    enterPurgeBinaryLogs(ctx: any): void;
    exitPurgeBinaryLogs(ctx: any): void;
    enterResetMaster(ctx: any): void;
    exitResetMaster(ctx: any): void;
    enterResetSlave(ctx: any): void;
    exitResetSlave(ctx: any): void;
    enterStartSlave(ctx: any): void;
    exitStartSlave(ctx: any): void;
    enterStopSlave(ctx: any): void;
    exitStopSlave(ctx: any): void;
    enterStartGroupReplication(ctx: any): void;
    exitStartGroupReplication(ctx: any): void;
    enterStopGroupReplication(ctx: any): void;
    exitStopGroupReplication(ctx: any): void;
    enterMasterStringOption(ctx: any): void;
    exitMasterStringOption(ctx: any): void;
    enterMasterDecimalOption(ctx: any): void;
    exitMasterDecimalOption(ctx: any): void;
    enterMasterBoolOption(ctx: any): void;
    exitMasterBoolOption(ctx: any): void;
    enterMasterRealOption(ctx: any): void;
    exitMasterRealOption(ctx: any): void;
    enterMasterUidListOption(ctx: any): void;
    exitMasterUidListOption(ctx: any): void;
    enterStringMasterOption(ctx: any): void;
    exitStringMasterOption(ctx: any): void;
    enterDecimalMasterOption(ctx: any): void;
    exitDecimalMasterOption(ctx: any): void;
    enterBoolMasterOption(ctx: any): void;
    exitBoolMasterOption(ctx: any): void;
    enterChannelOption(ctx: any): void;
    exitChannelOption(ctx: any): void;
    enterDoDbReplication(ctx: any): void;
    exitDoDbReplication(ctx: any): void;
    enterIgnoreDbReplication(ctx: any): void;
    exitIgnoreDbReplication(ctx: any): void;
    enterDoTableReplication(ctx: any): void;
    exitDoTableReplication(ctx: any): void;
    enterIgnoreTableReplication(ctx: any): void;
    exitIgnoreTableReplication(ctx: any): void;
    enterWildDoTableReplication(ctx: any): void;
    exitWildDoTableReplication(ctx: any): void;
    enterWildIgnoreTableReplication(ctx: any): void;
    exitWildIgnoreTableReplication(ctx: any): void;
    enterRewriteDbReplication(ctx: any): void;
    exitRewriteDbReplication(ctx: any): void;
    enterTablePair(ctx: any): void;
    exitTablePair(ctx: any): void;
    enterThreadType(ctx: any): void;
    exitThreadType(ctx: any): void;
    enterGtidsUntilOption(ctx: any): void;
    exitGtidsUntilOption(ctx: any): void;
    enterMasterLogUntilOption(ctx: any): void;
    exitMasterLogUntilOption(ctx: any): void;
    enterRelayLogUntilOption(ctx: any): void;
    exitRelayLogUntilOption(ctx: any): void;
    enterSqlGapsUntilOption(ctx: any): void;
    exitSqlGapsUntilOption(ctx: any): void;
    enterUserConnectionOption(ctx: any): void;
    exitUserConnectionOption(ctx: any): void;
    enterPasswordConnectionOption(ctx: any): void;
    exitPasswordConnectionOption(ctx: any): void;
    enterDefaultAuthConnectionOption(ctx: any): void;
    exitDefaultAuthConnectionOption(ctx: any): void;
    enterPluginDirConnectionOption(ctx: any): void;
    exitPluginDirConnectionOption(ctx: any): void;
    enterGtuidSet(ctx: any): void;
    exitGtuidSet(ctx: any): void;
    enterXaStartTransaction(ctx: any): void;
    exitXaStartTransaction(ctx: any): void;
    enterXaEndTransaction(ctx: any): void;
    exitXaEndTransaction(ctx: any): void;
    enterXaPrepareStatement(ctx: any): void;
    exitXaPrepareStatement(ctx: any): void;
    enterXaCommitWork(ctx: any): void;
    exitXaCommitWork(ctx: any): void;
    enterXaRollbackWork(ctx: any): void;
    exitXaRollbackWork(ctx: any): void;
    enterXaRecoverWork(ctx: any): void;
    exitXaRecoverWork(ctx: any): void;
    enterPrepareStatement(ctx: any): void;
    exitPrepareStatement(ctx: any): void;
    enterExecuteStatement(ctx: any): void;
    exitExecuteStatement(ctx: any): void;
    enterDeallocatePrepare(ctx: any): void;
    exitDeallocatePrepare(ctx: any): void;
    enterRoutineBody(ctx: any): void;
    exitRoutineBody(ctx: any): void;
    enterBlockStatement(ctx: any): void;
    exitBlockStatement(ctx: any): void;
    enterCaseStatement(ctx: any): void;
    exitCaseStatement(ctx: any): void;
    enterIfStatement(ctx: any): void;
    exitIfStatement(ctx: any): void;
    enterIterateStatement(ctx: any): void;
    exitIterateStatement(ctx: any): void;
    enterLeaveStatement(ctx: any): void;
    exitLeaveStatement(ctx: any): void;
    enterLoopStatement(ctx: any): void;
    exitLoopStatement(ctx: any): void;
    enterRepeatStatement(ctx: any): void;
    exitRepeatStatement(ctx: any): void;
    enterReturnStatement(ctx: any): void;
    exitReturnStatement(ctx: any): void;
    enterWhileStatement(ctx: any): void;
    exitWhileStatement(ctx: any): void;
    enterCloseCursor(ctx: any): void;
    exitCloseCursor(ctx: any): void;
    enterFetchCursor(ctx: any): void;
    exitFetchCursor(ctx: any): void;
    enterOpenCursor(ctx: any): void;
    exitOpenCursor(ctx: any): void;
    enterDeclareVariable(ctx: any): void;
    exitDeclareVariable(ctx: any): void;
    enterDeclareCondition(ctx: any): void;
    exitDeclareCondition(ctx: any): void;
    enterDeclareCursor(ctx: any): void;
    exitDeclareCursor(ctx: any): void;
    enterDeclareHandler(ctx: any): void;
    exitDeclareHandler(ctx: any): void;
    enterHandlerConditionCode(ctx: any): void;
    exitHandlerConditionCode(ctx: any): void;
    enterHandlerConditionState(ctx: any): void;
    exitHandlerConditionState(ctx: any): void;
    enterHandlerConditionName(ctx: any): void;
    exitHandlerConditionName(ctx: any): void;
    enterHandlerConditionWarning(ctx: any): void;
    exitHandlerConditionWarning(ctx: any): void;
    enterHandlerConditionNotfound(ctx: any): void;
    exitHandlerConditionNotfound(ctx: any): void;
    enterHandlerConditionException(ctx: any): void;
    exitHandlerConditionException(ctx: any): void;
    enterProcedureSqlStatement(ctx: any): void;
    exitProcedureSqlStatement(ctx: any): void;
    enterCaseAlternative(ctx: any): void;
    exitCaseAlternative(ctx: any): void;
    enterElifAlternative(ctx: any): void;
    exitElifAlternative(ctx: any): void;
    enterAlterUserMysqlV56(ctx: any): void;
    exitAlterUserMysqlV56(ctx: any): void;
    enterAlterUserMysqlV57(ctx: any): void;
    exitAlterUserMysqlV57(ctx: any): void;
    enterCreateUserMysqlV56(ctx: any): void;
    exitCreateUserMysqlV56(ctx: any): void;
    enterCreateUserMysqlV57(ctx: any): void;
    exitCreateUserMysqlV57(ctx: any): void;
    enterDropUser(ctx: any): void;
    exitDropUser(ctx: any): void;
    enterGrantStatement(ctx: any): void;
    exitGrantStatement(ctx: any): void;
    enterGrantProxy(ctx: any): void;
    exitGrantProxy(ctx: any): void;
    enterRenameUser(ctx: any): void;
    exitRenameUser(ctx: any): void;
    enterDetailRevoke(ctx: any): void;
    exitDetailRevoke(ctx: any): void;
    enterShortRevoke(ctx: any): void;
    exitShortRevoke(ctx: any): void;
    enterRevokeProxy(ctx: any): void;
    exitRevokeProxy(ctx: any): void;
    enterSetPasswordStatement(ctx: any): void;
    exitSetPasswordStatement(ctx: any): void;
    enterUserSpecification(ctx: any): void;
    exitUserSpecification(ctx: any): void;
    enterPasswordAuthOption(ctx: any): void;
    exitPasswordAuthOption(ctx: any): void;
    enterStringAuthOption(ctx: any): void;
    exitStringAuthOption(ctx: any): void;
    enterHashAuthOption(ctx: any): void;
    exitHashAuthOption(ctx: any): void;
    enterSimpleAuthOption(ctx: any): void;
    exitSimpleAuthOption(ctx: any): void;
    enterTlsOption(ctx: any): void;
    exitTlsOption(ctx: any): void;
    enterUserResourceOption(ctx: any): void;
    exitUserResourceOption(ctx: any): void;
    enterUserPasswordOption(ctx: any): void;
    exitUserPasswordOption(ctx: any): void;
    enterUserLockOption(ctx: any): void;
    exitUserLockOption(ctx: any): void;
    enterPrivelegeClause(ctx: any): void;
    exitPrivelegeClause(ctx: any): void;
    enterPrivilege(ctx: any): void;
    exitPrivilege(ctx: any): void;
    enterCurrentSchemaPriviLevel(ctx: any): void;
    exitCurrentSchemaPriviLevel(ctx: any): void;
    enterGlobalPrivLevel(ctx: any): void;
    exitGlobalPrivLevel(ctx: any): void;
    enterDefiniteSchemaPrivLevel(ctx: any): void;
    exitDefiniteSchemaPrivLevel(ctx: any): void;
    enterDefiniteFullTablePrivLevel(ctx: any): void;
    exitDefiniteFullTablePrivLevel(ctx: any): void;
    enterDefiniteFullTablePrivLevel2(ctx: any): void;
    exitDefiniteFullTablePrivLevel2(ctx: any): void;
    enterDefiniteTablePrivLevel(ctx: any): void;
    exitDefiniteTablePrivLevel(ctx: any): void;
    enterRenameUserClause(ctx: any): void;
    exitRenameUserClause(ctx: any): void;
    enterAnalyzeTable(ctx: any): void;
    exitAnalyzeTable(ctx: any): void;
    enterCheckTable(ctx: any): void;
    exitCheckTable(ctx: any): void;
    enterChecksumTable(ctx: any): void;
    exitChecksumTable(ctx: any): void;
    enterOptimizeTable(ctx: any): void;
    exitOptimizeTable(ctx: any): void;
    enterRepairTable(ctx: any): void;
    exitRepairTable(ctx: any): void;
    enterCheckTableOption(ctx: any): void;
    exitCheckTableOption(ctx: any): void;
    enterCreateUdfunction(ctx: any): void;
    exitCreateUdfunction(ctx: any): void;
    enterInstallPlugin(ctx: any): void;
    exitInstallPlugin(ctx: any): void;
    enterUninstallPlugin(ctx: any): void;
    exitUninstallPlugin(ctx: any): void;
    enterSetVariable(ctx: any): void;
    exitSetVariable(ctx: any): void;
    enterSetCharset(ctx: any): void;
    exitSetCharset(ctx: any): void;
    enterSetNames(ctx: any): void;
    exitSetNames(ctx: any): void;
    enterSetPassword(ctx: any): void;
    exitSetPassword(ctx: any): void;
    enterSetTransaction(ctx: any): void;
    exitSetTransaction(ctx: any): void;
    enterSetAutocommit(ctx: any): void;
    exitSetAutocommit(ctx: any): void;
    enterSetNewValueInsideTrigger(ctx: any): void;
    exitSetNewValueInsideTrigger(ctx: any): void;
    enterShowMasterLogs(ctx: any): void;
    exitShowMasterLogs(ctx: any): void;
    enterShowLogEvents(ctx: any): void;
    exitShowLogEvents(ctx: any): void;
    enterShowObjectFilter(ctx: any): void;
    exitShowObjectFilter(ctx: any): void;
    enterShowColumns(ctx: any): void;
    exitShowColumns(ctx: any): void;
    enterShowCreateDb(ctx: any): void;
    exitShowCreateDb(ctx: any): void;
    enterShowCreateFullIdObject(ctx: any): void;
    exitShowCreateFullIdObject(ctx: any): void;
    enterShowCreateUser(ctx: any): void;
    exitShowCreateUser(ctx: any): void;
    enterShowEngine(ctx: any): void;
    exitShowEngine(ctx: any): void;
    enterShowGlobalInfo(ctx: any): void;
    exitShowGlobalInfo(ctx: any): void;
    enterShowErrors(ctx: any): void;
    exitShowErrors(ctx: any): void;
    enterShowCountErrors(ctx: any): void;
    exitShowCountErrors(ctx: any): void;
    enterShowSchemaFilter(ctx: any): void;
    exitShowSchemaFilter(ctx: any): void;
    enterShowRoutine(ctx: any): void;
    exitShowRoutine(ctx: any): void;
    enterShowGrants(ctx: any): void;
    exitShowGrants(ctx: any): void;
    enterShowIndexes(ctx: any): void;
    exitShowIndexes(ctx: any): void;
    enterShowOpenTables(ctx: any): void;
    exitShowOpenTables(ctx: any): void;
    enterShowProfile(ctx: any): void;
    exitShowProfile(ctx: any): void;
    enterShowSlaveStatus(ctx: any): void;
    exitShowSlaveStatus(ctx: any): void;
    enterVariableClause(ctx: any): void;
    exitVariableClause(ctx: any): void;
    enterShowCommonEntity(ctx: any): void;
    exitShowCommonEntity(ctx: any): void;
    enterShowFilter(ctx: any): void;
    exitShowFilter(ctx: any): void;
    enterShowGlobalInfoClause(ctx: any): void;
    exitShowGlobalInfoClause(ctx: any): void;
    enterShowSchemaEntity(ctx: any): void;
    exitShowSchemaEntity(ctx: any): void;
    enterShowProfileType(ctx: any): void;
    exitShowProfileType(ctx: any): void;
    enterBinlogStatement(ctx: any): void;
    exitBinlogStatement(ctx: any): void;
    enterCacheIndexStatement(ctx: any): void;
    exitCacheIndexStatement(ctx: any): void;
    enterFlushStatement(ctx: any): void;
    exitFlushStatement(ctx: any): void;
    enterKillStatement(ctx: any): void;
    exitKillStatement(ctx: any): void;
    enterLoadIndexIntoCache(ctx: any): void;
    exitLoadIndexIntoCache(ctx: any): void;
    enterResetStatement(ctx: any): void;
    exitResetStatement(ctx: any): void;
    enterShutdownStatement(ctx: any): void;
    exitShutdownStatement(ctx: any): void;
    enterTableIndexes(ctx: any): void;
    exitTableIndexes(ctx: any): void;
    enterSimpleFlushOption(ctx: any): void;
    exitSimpleFlushOption(ctx: any): void;
    enterChannelFlushOption(ctx: any): void;
    exitChannelFlushOption(ctx: any): void;
    enterTableFlushOption(ctx: any): void;
    exitTableFlushOption(ctx: any): void;
    enterFlushTableOption(ctx: any): void;
    exitFlushTableOption(ctx: any): void;
    enterLoadedTableIndexes(ctx: any): void;
    exitLoadedTableIndexes(ctx: any): void;
    enterSimpleDescribeStatement(ctx: any): void;
    exitSimpleDescribeStatement(ctx: any): void;
    enterFullDescribeStatement(ctx: any): void;
    exitFullDescribeStatement(ctx: any): void;
    enterHelpStatement(ctx: any): void;
    exitHelpStatement(ctx: any): void;
    enterUseStatement(ctx: any): void;
    exitUseStatement(ctx: any): void;
    enterSignalStatement(ctx: any): void;
    exitSignalStatement(ctx: any): void;
    enterResignalStatement(ctx: any): void;
    exitResignalStatement(ctx: any): void;
    enterSignalConditionInformation(ctx: any): void;
    exitSignalConditionInformation(ctx: any): void;
    enterDiagnosticsStatement(ctx: any): void;
    exitDiagnosticsStatement(ctx: any): void;
    enterDiagnosticsConditionInformationName(ctx: any): void;
    exitDiagnosticsConditionInformationName(ctx: any): void;
    enterDescribeStatements(ctx: any): void;
    exitDescribeStatements(ctx: any): void;
    enterDescribeConnection(ctx: any): void;
    exitDescribeConnection(ctx: any): void;
    enterFullId(ctx: any): void;
    exitFullId(ctx: any): void;
    enterTableName(ctx: any): void;
    exitTableName(ctx: any): void;
    enterFullColumnName(ctx: any): void;
    exitFullColumnName(ctx: any): void;
    enterIndexColumnName(ctx: any): void;
    exitIndexColumnName(ctx: any): void;
    enterUserName(ctx: any): void;
    exitUserName(ctx: any): void;
    enterMysqlVariable(ctx: any): void;
    exitMysqlVariable(ctx: any): void;
    enterCharsetName(ctx: any): void;
    exitCharsetName(ctx: any): void;
    enterCollationName(ctx: any): void;
    exitCollationName(ctx: any): void;
    enterEngineName(ctx: any): void;
    exitEngineName(ctx: any): void;
    enterUuidSet(ctx: any): void;
    exitUuidSet(ctx: any): void;
    enterXid(ctx: any): void;
    exitXid(ctx: any): void;
    enterXuidStringId(ctx: any): void;
    exitXuidStringId(ctx: any): void;
    enterAuthPlugin(ctx: any): void;
    exitAuthPlugin(ctx: any): void;
    enterUid(ctx: any): void;
    exitUid(ctx: any): void;
    enterSimpleId(ctx: any): void;
    exitSimpleId(ctx: any): void;
    enterDottedId(ctx: any): void;
    exitDottedId(ctx: any): void;
    enterDecimalLiteral(ctx: any): void;
    exitDecimalLiteral(ctx: any): void;
    enterFileSizeLiteral(ctx: any): void;
    exitFileSizeLiteral(ctx: any): void;
    enterStringLiteral(ctx: any): void;
    exitStringLiteral(ctx: any): void;
    enterBooleanLiteral(ctx: any): void;
    exitBooleanLiteral(ctx: any): void;
    enterHexadecimalLiteral(ctx: any): void;
    exitHexadecimalLiteral(ctx: any): void;
    enterNullNotnull(ctx: any): void;
    exitNullNotnull(ctx: any): void;
    enterConstant(ctx: any): void;
    exitConstant(ctx: any): void;
    enterStringDataType(ctx: any): void;
    exitStringDataType(ctx: any): void;
    enterNationalStringDataType(ctx: any): void;
    exitNationalStringDataType(ctx: any): void;
    enterNationalVaryingStringDataType(ctx: any): void;
    exitNationalVaryingStringDataType(ctx: any): void;
    enterDimensionDataType(ctx: any): void;
    exitDimensionDataType(ctx: any): void;
    enterSimpleDataType(ctx: any): void;
    exitSimpleDataType(ctx: any): void;
    enterCollectionDataType(ctx: any): void;
    exitCollectionDataType(ctx: any): void;
    enterSpatialDataType(ctx: any): void;
    exitSpatialDataType(ctx: any): void;
    enterLongVarcharDataType(ctx: any): void;
    exitLongVarcharDataType(ctx: any): void;
    enterLongVarbinaryDataType(ctx: any): void;
    exitLongVarbinaryDataType(ctx: any): void;
    enterCollectionOptions(ctx: any): void;
    exitCollectionOptions(ctx: any): void;
    enterConvertedDataType(ctx: any): void;
    exitConvertedDataType(ctx: any): void;
    enterLengthOneDimension(ctx: any): void;
    exitLengthOneDimension(ctx: any): void;
    enterLengthTwoDimension(ctx: any): void;
    exitLengthTwoDimension(ctx: any): void;
    enterLengthTwoOptionalDimension(ctx: any): void;
    exitLengthTwoOptionalDimension(ctx: any): void;
    enterUidList(ctx: any): void;
    exitUidList(ctx: any): void;
    enterTables(ctx: any): void;
    exitTables(ctx: any): void;
    enterIndexColumnNames(ctx: any): void;
    exitIndexColumnNames(ctx: any): void;
    enterExpressions(ctx: any): void;
    exitExpressions(ctx: any): void;
    enterExpressionsWithDefaults(ctx: any): void;
    exitExpressionsWithDefaults(ctx: any): void;
    enterConstants(ctx: any): void;
    exitConstants(ctx: any): void;
    enterSimpleStrings(ctx: any): void;
    exitSimpleStrings(ctx: any): void;
    enterUserVariables(ctx: any): void;
    exitUserVariables(ctx: any): void;
    enterDefaultValue(ctx: any): void;
    exitDefaultValue(ctx: any): void;
    enterCurrentTimestamp(ctx: any): void;
    exitCurrentTimestamp(ctx: any): void;
    enterExpressionOrDefault(ctx: any): void;
    exitExpressionOrDefault(ctx: any): void;
    enterIfExists(ctx: any): void;
    exitIfExists(ctx: any): void;
    enterIfNotExists(ctx: any): void;
    exitIfNotExists(ctx: any): void;
    enterSpecificFunctionCall(ctx: any): void;
    exitSpecificFunctionCall(ctx: any): void;
    enterAggregateFunctionCall(ctx: any): void;
    exitAggregateFunctionCall(ctx: any): void;
    enterScalarFunctionCall(ctx: any): void;
    exitScalarFunctionCall(ctx: any): void;
    enterUdfFunctionCall(ctx: any): void;
    exitUdfFunctionCall(ctx: any): void;
    enterPasswordFunctionCall(ctx: any): void;
    exitPasswordFunctionCall(ctx: any): void;
    enterSimpleFunctionCall(ctx: any): void;
    exitSimpleFunctionCall(ctx: any): void;
    enterDataTypeFunctionCall(ctx: any): void;
    exitDataTypeFunctionCall(ctx: any): void;
    enterValuesFunctionCall(ctx: any): void;
    exitValuesFunctionCall(ctx: any): void;
    enterCaseFunctionCall(ctx: any): void;
    exitCaseFunctionCall(ctx: any): void;
    enterCharFunctionCall(ctx: any): void;
    exitCharFunctionCall(ctx: any): void;
    enterPositionFunctionCall(ctx: any): void;
    exitPositionFunctionCall(ctx: any): void;
    enterSubstrFunctionCall(ctx: any): void;
    exitSubstrFunctionCall(ctx: any): void;
    enterTrimFunctionCall(ctx: any): void;
    exitTrimFunctionCall(ctx: any): void;
    enterWeightFunctionCall(ctx: any): void;
    exitWeightFunctionCall(ctx: any): void;
    enterExtractFunctionCall(ctx: any): void;
    exitExtractFunctionCall(ctx: any): void;
    enterGetFormatFunctionCall(ctx: any): void;
    exitGetFormatFunctionCall(ctx: any): void;
    enterCaseFuncAlternative(ctx: any): void;
    exitCaseFuncAlternative(ctx: any): void;
    enterLevelWeightList(ctx: any): void;
    exitLevelWeightList(ctx: any): void;
    enterLevelWeightRange(ctx: any): void;
    exitLevelWeightRange(ctx: any): void;
    enterLevelInWeightListElement(ctx: any): void;
    exitLevelInWeightListElement(ctx: any): void;
    enterAggregateWindowedFunction(ctx: any): void;
    exitAggregateWindowedFunction(ctx: any): void;
    enterScalarFunctionName(ctx: any): void;
    exitScalarFunctionName(ctx: any): void;
    enterPasswordFunctionClause(ctx: any): void;
    exitPasswordFunctionClause(ctx: any): void;
    enterFunctionArgs(ctx: any): void;
    exitFunctionArgs(ctx: any): void;
    enterFunctionArg(ctx: any): void;
    exitFunctionArg(ctx: any): void;
    enterIsExpression(ctx: any): void;
    exitIsExpression(ctx: any): void;
    enterNotExpression(ctx: any): void;
    exitNotExpression(ctx: any): void;
    enterLogicalExpression(ctx: any): void;
    exitLogicalExpression(ctx: any): void;
    enterPredicateExpression(ctx: any): void;
    exitPredicateExpression(ctx: any): void;
    enterSoundsLikePredicate(ctx: any): void;
    exitSoundsLikePredicate(ctx: any): void;
    enterExpressionAtomPredicate(ctx: any): void;
    exitExpressionAtomPredicate(ctx: any): void;
    enterJsonMemberOfPredicate(ctx: any): void;
    exitJsonMemberOfPredicate(ctx: any): void;
    enterInPredicate(ctx: any): void;
    exitInPredicate(ctx: any): void;
    enterSubqueryComparasionPredicate(ctx: any): void;
    exitSubqueryComparasionPredicate(ctx: any): void;
    enterBetweenPredicate(ctx: any): void;
    exitBetweenPredicate(ctx: any): void;
    enterBinaryComparasionPredicate(ctx: any): void;
    exitBinaryComparasionPredicate(ctx: any): void;
    enterIsNullPredicate(ctx: any): void;
    exitIsNullPredicate(ctx: any): void;
    enterLikePredicate(ctx: any): void;
    exitLikePredicate(ctx: any): void;
    enterRegexpPredicate(ctx: any): void;
    exitRegexpPredicate(ctx: any): void;
    enterUnaryExpressionAtom(ctx: any): void;
    exitUnaryExpressionAtom(ctx: any): void;
    enterCollateExpressionAtom(ctx: any): void;
    exitCollateExpressionAtom(ctx: any): void;
    enterMysqlVariableExpressionAtom(ctx: any): void;
    exitMysqlVariableExpressionAtom(ctx: any): void;
    enterNestedExpressionAtom(ctx: any): void;
    exitNestedExpressionAtom(ctx: any): void;
    enterNestedRowExpressionAtom(ctx: any): void;
    exitNestedRowExpressionAtom(ctx: any): void;
    enterMathExpressionAtom(ctx: any): void;
    exitMathExpressionAtom(ctx: any): void;
    enterExistsExpressionAtom(ctx: any): void;
    exitExistsExpressionAtom(ctx: any): void;
    enterIntervalExpressionAtom(ctx: any): void;
    exitIntervalExpressionAtom(ctx: any): void;
    enterJsonExpressionAtom(ctx: any): void;
    exitJsonExpressionAtom(ctx: any): void;
    enterSubqueryExpressionAtom(ctx: any): void;
    exitSubqueryExpressionAtom(ctx: any): void;
    enterConstantExpressionAtom(ctx: any): void;
    exitConstantExpressionAtom(ctx: any): void;
    enterFunctionCallExpressionAtom(ctx: any): void;
    exitFunctionCallExpressionAtom(ctx: any): void;
    enterBinaryExpressionAtom(ctx: any): void;
    exitBinaryExpressionAtom(ctx: any): void;
    enterFullColumnNameExpressionAtom(ctx: any): void;
    exitFullColumnNameExpressionAtom(ctx: any): void;
    enterBitExpressionAtom(ctx: any): void;
    exitBitExpressionAtom(ctx: any): void;
    enterUnaryOperator(ctx: any): void;
    exitUnaryOperator(ctx: any): void;
    enterComparisonOperator(ctx: any): void;
    exitComparisonOperator(ctx: any): void;
    enterLogicalOperator(ctx: any): void;
    exitLogicalOperator(ctx: any): void;
    enterBitOperator(ctx: any): void;
    exitBitOperator(ctx: any): void;
    enterMathOperator(ctx: any): void;
    exitMathOperator(ctx: any): void;
    enterJsonOperator(ctx: any): void;
    exitJsonOperator(ctx: any): void;
    enterCharsetNameBase(ctx: any): void;
    exitCharsetNameBase(ctx: any): void;
    enterTransactionLevelBase(ctx: any): void;
    exitTransactionLevelBase(ctx: any): void;
    enterPrivilegesBase(ctx: any): void;
    exitPrivilegesBase(ctx: any): void;
    enterIntervalTypeBase(ctx: any): void;
    exitIntervalTypeBase(ctx: any): void;
    enterDataTypeBase(ctx: any): void;
    exitDataTypeBase(ctx: any): void;
    enterKeywordsCanBeId(ctx: any): void;
    exitKeywordsCanBeId(ctx: any): void;
    enterFunctionNameBase(ctx: any): void;
    exitFunctionNameBase(ctx: any): void;
}
//# sourceMappingURL=MySqlParserListener.d.ts.map