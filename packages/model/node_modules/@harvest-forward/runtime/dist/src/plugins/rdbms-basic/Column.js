"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Column = void 0;
const System_1 = require("../../system/System");
const SystemComponentType_1 = require("../../system/SystemComponentType");
const RelationalComponent_1 = require("./RelationalComponent");
class Column extends RelationalComponent_1.RelationalComponent {
    constructor(schemaName, tableName, name, description, dataType, valueType, characterMaximumLength, ansiTypeDeclaration) {
        super('Column', System_1.System.fullConstantCase(schemaName, tableName), schemaName, name, SystemComponentType_1.SystemComponentType.storage, description);
        this.dataType = dataType;
        this._tableName = tableName;
        this.valueType = valueType;
        this.characterMaximumLength = characterMaximumLength;
        this.ansiTypeDeclaration = ansiTypeDeclaration;
        this.ordinalPosition = 0;
        this.isNullable = true;
        this.isIdentity = false;
    }
    static computeFullName(schemaName, tableName) {
        return System_1.System.fullConstantCase(schemaName, tableName);
    }
    get tableName() {
        return this._tableName;
    }
    set tableName(value) {
        this._tableName = value;
        this.setNames(System_1.System.fullConstantCase(this.schemaName, this._tableName), this.name);
    }
    set nameSpace(value) {
        super.nameSpace = value;
        const lastSlash = value.lastIndexOf('/');
        this._tableName = value.substring(lastSlash + 1);
        this.schemaName = value.substring(0, lastSlash);
    }
    get storage() {
        return this._storage;
    }
    set storage(value) {
        this._storage = value;
        if (value != null) {
            this.tableName = value.name;
            this.schemaName = value.schemaName;
        }
    }
    get discriminator() {
        return this.storage?.orMapping?.discriminatorColumn == this;
    }
}
exports.Column = Column;
