"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdbmsRuleHarvester = void 0;
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const ComponentOrigin_1 = require("../../../system/ComponentOrigin");
const Permanence_1 = require("../../../system/Permanence");
const ValueType_1 = require("../../../system/ValueType");
const validation_1 = require("../../validation");
class RdbmsRuleHarvester extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'Column',
        });
        super('RdbmsRuleHarvester', 'A harvester that takes details from an rdbms and turns them into model rules', {
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(__system, component) {
        const column = component;
        const mappable = column;
        if (mappable.orMapping?.property) {
            const property = mappable.orMapping.property;
            if (!column.isNullable) {
                const notNullRule = new validation_1.NotNullRule(property.fullConstantCaseName, `NotNullRule`, `the value cannot be null`);
                notNullRule.permanence = Permanence_1.Permanence.constant;
                notNullRule.informational = true;
                notNullRule.functional = false;
                notNullRule.origin = ComponentOrigin_1.ComponentOrigin.harvested;
                property.addChild(notNullRule);
            }
            if (column.characterMaximumLength > 0) {
                const rule = new validation_1.LengthRule(property.fullConstantCaseName, `LengthRule`, `the value cannot be null`);
                rule.minimum = 0;
                rule.maximum = column.characterMaximumLength;
                rule.permanence = Permanence_1.Permanence.constant;
                rule.informational = true;
                rule.functional = false;
                rule.origin = ComponentOrigin_1.ComponentOrigin.harvested;
                property.addChild(rule);
            }
        }
        return [];
    }
}
exports.RdbmsRuleHarvester = RdbmsRuleHarvester;
