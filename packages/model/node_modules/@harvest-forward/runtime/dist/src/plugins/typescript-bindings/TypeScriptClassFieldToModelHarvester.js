"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptClassFieldToModelHarvester = void 0;
const typescript_1 = __importStar(require("typescript"));
const ComponentOrigin_1 = require("../../system/ComponentOrigin");
const Permanence_1 = require("../../system/Permanence");
const ProgrammingLanguage_1 = require("../../system/ProgrammingLanguage");
const SystemComponent_1 = require("../../system/SystemComponent");
const SystemComponentArtifact_1 = require("../../system/SystemComponentArtifact");
const ValueType_1 = require("../../system/ValueType");
const information_architecture_1 = require("../information-architecture");
const AbstractTypeScriptAstHarvester_1 = require("./AbstractTypeScriptAstHarvester");
class TypeScriptClassFieldToModelHarvester extends AbstractTypeScriptAstHarvester_1.AbstractTypeScriptAstHarvester {
    constructor(configurationValues) {
        super('TypeScriptClassFieldToModelHarvester', 'A harvester that infers the data model from typescript classes', {}, configurationValues);
    }
    async harvestFromAst(system, ast) {
        let representedClass;
        const results = [];
        const _thisThis = this;
        const model = information_architecture_1.InformationModel.fromSystem(system);
        try {
            this.ensureRegexes();
            typescript_1.default.forEachChild(ast, function visit(node) {
                switch (node.kind) {
                    case typescript_1.SyntaxKind.ClassDeclaration:
                        const classDeclaration = node;
                        const name = classDeclaration.name?.getText(ast);
                        if (name != null && _thisThis.validClass(name)) {
                            const fullName = SystemComponent_1.SystemComponent.fullConstantCase(model.fullConstantCaseName, name);
                            representedClass = system.descendants[fullName];
                            typescript_1.default.forEachChild(node, visit);
                        }
                        break;
                    case typescript_1.SyntaxKind.VariableDeclaration:
                        const member = node;
                        const memberIdentifier = member.name;
                        const memberName = memberIdentifier.getText(ast);
                        if (representedClass != null && representedClass.propertiesMap[memberName] == null) {
                            const memberJsDoc = node.jsDoc;
                            let memberDocumentationText = '';
                            if (memberJsDoc != null) {
                                memberJsDoc.forEach((jsDocItem) => {
                                    memberDocumentationText += jsDocItem.comment;
                                });
                            }
                            const typeNode = member.type;
                            let typeName = typeNode.getText(ast);
                            if (typeName.indexOf('|') >= 0) {
                                typeName = typeName.substr(0, typeName.indexOf('|')).trim();
                            }
                            let isArray;
                            if (typeName.indexOf('[]') >= 0) {
                                typeName = typeName.replace('[]', '');
                                isArray = true;
                            }
                            else
                                isArray = false;
                            const fullName = SystemComponent_1.SystemComponent.fullConstantCase(model.fullConstantCaseName, typeName);
                            let propertyType = system.descendants[fullName];
                            if (propertyType == null)
                                propertyType = ValueType_1.ValueType.fromNameInType(ProgrammingLanguage_1.ProgrammingLanguage.typeScript, typeName);
                            if (isArray)
                                propertyType = propertyType.asCollection;
                            const newProperty = new information_architecture_1.Property(representedClass.constantCaseFullName, memberName, memberDocumentationText, propertyType, 0);
                            newProperty.permanence = Permanence_1.Permanence.persistent;
                            newProperty.informational = true;
                            newProperty.functional = false;
                            newProperty.origin = ComponentOrigin_1.ComponentOrigin.harvested;
                            representedClass.addChild(newProperty);
                            results.push(new SystemComponentArtifact_1.SystemComponentArtifact(newProperty));
                        }
                        break;
                    default:
                        break;
                }
            });
            return results;
        }
        catch (problem) {
            this.logger.error(`harvestFromAst(failed) ${problem}`);
            throw problem;
        }
    }
}
exports.TypeScriptClassFieldToModelHarvester = TypeScriptClassFieldToModelHarvester;
