"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InformationModel = void 0;
const Permanence_1 = require("../../../system/Permanence");
const SystemComponentComparator_1 = require("../../../system/SystemComponentComparator");
const SystemComponentType_1 = require("../../../system/SystemComponentType");
const SystemDescendantComponent_1 = require("../../../system/SystemDescendantComponent");
const Enumeration_1 = require("./Enumeration");
const ObjectType_1 = require("./ObjectType");
const Projection_1 = require("./Projection");
class InformationModel extends SystemDescendantComponent_1.SystemDescendantComponent {
    constructor(nameSpace, name, description) {
        super('InformationModel', nameSpace, name, SystemComponentType_1.SystemComponentType.informationModel, description);
        this._persistentTypes = [];
        this._fixedTypes = [];
        this._projections = [];
        this._enumerations = [];
    }
    static fromSystem(system) {
        let model = system.findOneComponent({
            objectTypeName: 'InformationModel',
        });
        if (model == null) {
            model = new InformationModel('', 'InformationModel', 'The  data that describe the information that will be tracked and used in the system');
            system.addChild(model);
        }
        return model;
    }
    addDescendant(descendant) {
        super.addDescendant(descendant);
        if (descendant instanceof Enumeration_1.Enumeration) {
            if (!this._enumerations.includes(descendant)) {
                this._enumerations.push(descendant);
                this._enumerations.sort(SystemComponentComparator_1.SystemComponentComparator);
            }
        }
        else {
            if (descendant instanceof ObjectType_1.ObjectType && descendant.permanence === Permanence_1.Permanence.persistent) {
                if (!this._persistentTypes.includes(descendant)) {
                    this._persistentTypes.push(descendant);
                    this._persistentTypes.sort(SystemComponentComparator_1.SystemComponentComparator);
                }
            }
            if (descendant instanceof Projection_1.Projection) {
                if (!this._projections.includes(descendant)) {
                    this._projections.push(descendant);
                    this._projections.sort(SystemComponentComparator_1.SystemComponentComparator);
                }
            }
            else if (descendant instanceof ObjectType_1.ObjectType) {
                if (!this._fixedTypes.includes(descendant)) {
                    this._fixedTypes.push(descendant);
                    this._fixedTypes.sort(SystemComponentComparator_1.SystemComponentComparator);
                }
            }
        }
    }
    removeChild(child) {
        const result = super.removeChild(child);
        this.removeDescendant(child);
        return result;
    }
    removeDescendant(descendant) {
        let index;
        if (descendant instanceof Enumeration_1.Enumeration) {
            index = this._enumerations.indexOf(descendant, 0);
            if (index > -1)
                this._enumerations.splice(index, 1);
        }
        else {
            if (descendant instanceof ObjectType_1.ObjectType && descendant.permanence === Permanence_1.Permanence.persistent) {
                index = this._persistentTypes.indexOf(descendant, 0);
                if (index > -1)
                    this._persistentTypes.splice(index, 1);
            }
            if (descendant instanceof Projection_1.Projection) {
                index = this._projections.indexOf(descendant, 0);
                if (index > -1)
                    this._projections.splice(index, 1);
            }
            else if (descendant instanceof ObjectType_1.ObjectType) {
                index = this._fixedTypes.indexOf(descendant, 0);
                if (index > -1)
                    this._fixedTypes.splice(index, 1);
            }
        }
    }
    get persistentTypes() {
        return this._persistentTypes;
    }
    get fixedTypes() {
        return this._fixedTypes;
    }
    get projections() {
        return this._projections;
    }
    get enumerations() {
        return this._enumerations;
    }
}
exports.InformationModel = InformationModel;
