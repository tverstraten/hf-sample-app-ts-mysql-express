"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationalDatabase = void 0;
const SystemComponentComparator_1 = require("../../system/SystemComponentComparator");
const SystemComponentType_1 = require("../../system/SystemComponentType");
const SystemDescendantComponent_1 = require("../../system/SystemDescendantComponent");
const Column_1 = require("./Column");
const Constraint_1 = require("./Constraint");
const Domain_1 = require("./Domain");
const ForeignKey_1 = require("./ForeignKey");
const PrimaryKey_1 = require("./PrimaryKey");
const Table_1 = require("./Table");
const View_1 = require("./View");
class RelationalDatabase extends SystemDescendantComponent_1.SystemDescendantComponent {
    constructor(nameSpace, name, description) {
        super('RelationalDatabase', nameSpace, name, SystemComponentType_1.SystemComponentType.storage, description);
        this._tables = [];
        this._views = [];
        this._columns = [];
        this._domains = [];
        this._foreignKeys = [];
        this._primaryKeys = [];
        this._constraints = [];
    }
    addChild(child) {
        super.addChild(child);
        this.addDescendant(child);
    }
    addDescendant(descendant) {
        super.addDescendant(descendant);
        if (descendant instanceof Table_1.Table && !this._tables.includes(descendant)) {
            this._tables.push(descendant);
            this._tables.sort(SystemComponentComparator_1.SystemComponentComparator);
        }
        else if (descendant instanceof View_1.View && !this._views.includes(descendant)) {
            this._views.push(descendant);
            this._views.sort(SystemComponentComparator_1.SystemComponentComparator);
        }
        else if (descendant instanceof Column_1.Column && !this._columns.includes(descendant)) {
            this._columns.push(descendant);
            this._columns.sort(SystemComponentComparator_1.SystemComponentComparator);
        }
        else if (descendant instanceof Domain_1.Domain && !this._domains.includes(descendant)) {
            this._domains.push(descendant);
            this._domains.sort(SystemComponentComparator_1.SystemComponentComparator);
        }
        else if (descendant instanceof ForeignKey_1.ForeignKey && !this._foreignKeys.includes(descendant)) {
            this._foreignKeys.push(descendant);
            this._foreignKeys.sort(SystemComponentComparator_1.SystemComponentComparator);
        }
        else if (descendant instanceof PrimaryKey_1.PrimaryKey && !this._primaryKeys.includes(descendant)) {
            this._primaryKeys.push(descendant);
            this._primaryKeys.sort(SystemComponentComparator_1.SystemComponentComparator);
        }
        else if (descendant instanceof Constraint_1.Constraint && !this._constraints.includes(descendant)) {
            this._constraints.push(descendant);
            this._constraints.sort(SystemComponentComparator_1.SystemComponentComparator);
        }
    }
    removeChild(child) {
        this.removeDescendant(child);
        return super.removeChild(child);
    }
    removeDescendant(descendant) {
        super.removeDescendant(descendant);
        let index;
        if (descendant instanceof Table_1.Table) {
            index = this._tables.indexOf(descendant, 0);
            if (index > -1)
                this._tables.splice(index, 1);
        }
        else if (descendant instanceof View_1.View) {
            index = this._views.indexOf(descendant, 0);
            if (index > -1)
                this._views.splice(index, 1);
        }
        else if (descendant instanceof Column_1.Column) {
            index = this._columns.indexOf(descendant, 0);
            if (index > -1)
                this._columns.splice(index, 1);
        }
        else if (descendant instanceof Domain_1.Domain) {
            index = this._domains.indexOf(descendant, 0);
            if (index > -1)
                this._domains.splice(index, 1);
        }
        else if (descendant instanceof ForeignKey_1.ForeignKey) {
            index = this._foreignKeys.indexOf(descendant, 0);
            if (index > -1)
                this._foreignKeys.splice(index, 1);
        }
        else if (descendant instanceof PrimaryKey_1.PrimaryKey) {
            index = this._primaryKeys.indexOf(descendant, 0);
            if (index > -1)
                this._primaryKeys.splice(index, 1);
        }
        else if (descendant instanceof Constraint_1.Constraint) {
            index = this._constraints.indexOf(descendant, 0);
            if (index > -1)
                this._constraints.splice(index, 1);
        }
    }
    get tables() {
        return this._tables;
    }
    get views() {
        return this._views;
    }
    get columns() {
        return this._columns;
    }
    get domains() {
        return this._domains;
    }
    get foreignKeys() {
        return this._foreignKeys;
    }
    get primaryKeys() {
        return this._primaryKeys;
    }
    get constraints() {
        return this._constraints;
    }
}
exports.RelationalDatabase = RelationalDatabase;
