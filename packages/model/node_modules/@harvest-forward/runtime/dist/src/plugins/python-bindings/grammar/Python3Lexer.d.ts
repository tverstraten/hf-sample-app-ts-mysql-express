export function Python3Lexer(input: any): this;
export class Python3Lexer {
    constructor(input: any);
    _interp: any;
    constructor: typeof Python3Lexer;
    get atn(): any;
    channelNames: string[];
    modeNames: string[];
    literalNames: (string | null)[];
    symbolicNames: (string | null)[];
    ruleNames: string[];
    grammarFileName: string;
    action(localctx: any, ruleIndex: any, actionIndex: any): void;
    NEWLINE_action(localctx: any, actionIndex: any): void;
    OPEN_PAREN_action(localctx: any, actionIndex: any): void;
    CLOSE_PAREN_action(localctx: any, actionIndex: any): void;
    OPEN_BRACK_action(localctx: any, actionIndex: any): void;
    CLOSE_BRACK_action(localctx: any, actionIndex: any): void;
    OPEN_BRACE_action(localctx: any, actionIndex: any): void;
    CLOSE_BRACE_action(localctx: any, actionIndex: any): void;
    sempred(localctx: any, ruleIndex: any, predIndex: any): any;
    NEWLINE_sempred(localctx: any, predIndex: any): any;
}
export namespace Python3Lexer {
    const EOF: any;
    const INDENT: number;
    const DEDENT: number;
    const STRING: number;
    const NUMBER: number;
    const INTEGER: number;
    const DEF: number;
    const RETURN: number;
    const RAISE: number;
    const FROM: number;
    const IMPORT: number;
    const AS: number;
    const GLOBAL: number;
    const NONLOCAL: number;
    const ASSERT: number;
    const IF: number;
    const ELIF: number;
    const ELSE: number;
    const WHILE: number;
    const FOR: number;
    const IN: number;
    const TRY: number;
    const FINALLY: number;
    const WITH: number;
    const EXCEPT: number;
    const LAMBDA: number;
    const OR: number;
    const AND: number;
    const NOT: number;
    const IS: number;
    const NONE: number;
    const TRUE: number;
    const FALSE: number;
    const CLASS: number;
    const YIELD: number;
    const DEL: number;
    const PASS: number;
    const CONTINUE: number;
    const BREAK: number;
    const ASYNC: number;
    const AWAIT: number;
    const NEWLINE: number;
    const NAME: number;
    const STRING_LITERAL: number;
    const BYTES_LITERAL: number;
    const DECIMAL_INTEGER: number;
    const OCT_INTEGER: number;
    const HEX_INTEGER: number;
    const BIN_INTEGER: number;
    const FLOAT_NUMBER: number;
    const IMAG_NUMBER: number;
    const DOT: number;
    const ELLIPSIS: number;
    const STAR: number;
    const OPEN_PAREN: number;
    const CLOSE_PAREN: number;
    const COMMA: number;
    const COLON: number;
    const SEMI_COLON: number;
    const POWER: number;
    const ASSIGN: number;
    const OPEN_BRACK: number;
    const CLOSE_BRACK: number;
    const OR_OP: number;
    const XOR: number;
    const AND_OP: number;
    const LEFT_SHIFT: number;
    const RIGHT_SHIFT: number;
    const ADD: number;
    const MINUS: number;
    const DIV: number;
    const MOD: number;
    const IDIV: number;
    const NOT_OP: number;
    const OPEN_BRACE: number;
    const CLOSE_BRACE: number;
    const LESS_THAN: number;
    const GREATER_THAN: number;
    const EQUALS: number;
    const GT_EQ: number;
    const LT_EQ: number;
    const NOT_EQ_1: number;
    const NOT_EQ_2: number;
    const AT: number;
    const ARROW: number;
    const ADD_ASSIGN: number;
    const SUB_ASSIGN: number;
    const MULT_ASSIGN: number;
    const AT_ASSIGN: number;
    const DIV_ASSIGN: number;
    const MOD_ASSIGN: number;
    const AND_ASSIGN: number;
    const OR_ASSIGN: number;
    const XOR_ASSIGN: number;
    const LEFT_SHIFT_ASSIGN: number;
    const RIGHT_SHIFT_ASSIGN: number;
    const POWER_ASSIGN: number;
    const IDIV_ASSIGN: number;
    const SKIP_: number;
    const UNKNOWN_CHAR: number;
}
//# sourceMappingURL=Python3Lexer.d.ts.map