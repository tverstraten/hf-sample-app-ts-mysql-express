declare class Java9Lexer {
    static grammarFileName: string;
    static channelNames: string[];
    static modeNames: string[];
    static literalNames: (string | null)[];
    static symbolicNames: (string | null)[];
    static ruleNames: string[];
    constructor(input: any);
    _interp: any;
    get atn(): any;
    sempred(localctx: any, ruleIndex: any, predIndex: any): any;
    JavaLetter_sempred(localctx: any, predIndex: any): any;
    JavaLetterOrDigit_sempred(localctx: any, predIndex: any): any;
}
declare namespace Java9Lexer {
    const EOF: any;
    const ABSTRACT: number;
    const ASSERT: number;
    const BOOLEAN: number;
    const BREAK: number;
    const BYTE: number;
    const CASE: number;
    const CATCH: number;
    const CHAR: number;
    const CLASS: number;
    const CONST: number;
    const CONTINUE: number;
    const DEFAULT: number;
    const DO: number;
    const DOUBLE: number;
    const ELSE: number;
    const ENUM: number;
    const EXPORTS: number;
    const EXTENDS: number;
    const FINAL: number;
    const FINALLY: number;
    const FLOAT: number;
    const FOR: number;
    const IF: number;
    const GOTO: number;
    const IMPLEMENTS: number;
    const IMPORT: number;
    const INSTANCEOF: number;
    const INT: number;
    const INTERFACE: number;
    const LONG: number;
    const MODULE: number;
    const NATIVE: number;
    const NEW: number;
    const OPEN: number;
    const OPERNS: number;
    const PACKAGE: number;
    const PRIVATE: number;
    const PROTECTED: number;
    const PROVIDES: number;
    const PUBLIC: number;
    const REQUIRES: number;
    const RETURN: number;
    const SHORT: number;
    const STATIC: number;
    const STRICTFP: number;
    const SUPER: number;
    const SWITCH: number;
    const SYNCHRONIZED: number;
    const THIS: number;
    const THROW: number;
    const THROWS: number;
    const TO: number;
    const TRANSIENT: number;
    const TRANSITIVE: number;
    const TRY: number;
    const USES: number;
    const VOID: number;
    const VOLATILE: number;
    const WHILE: number;
    const WITH: number;
    const UNDER_SCORE: number;
    const IntegerLiteral: number;
    const FloatingPointLiteral: number;
    const BooleanLiteral: number;
    const CharacterLiteral: number;
    const StringLiteral: number;
    const NullLiteral: number;
    const LPAREN: number;
    const RPAREN: number;
    const LBRACE: number;
    const RBRACE: number;
    const LBRACK: number;
    const RBRACK: number;
    const SEMI: number;
    const COMMA: number;
    const DOT: number;
    const ELLIPSIS: number;
    const AT: number;
    const COLONCOLON: number;
    const ASSIGN: number;
    const GT: number;
    const LT: number;
    const BANG: number;
    const TILDE: number;
    const QUESTION: number;
    const COLON: number;
    const ARROW: number;
    const EQUAL: number;
    const LE: number;
    const GE: number;
    const NOTEQUAL: number;
    const AND: number;
    const OR: number;
    const INC: number;
    const DEC: number;
    const ADD: number;
    const SUB: number;
    const MUL: number;
    const DIV: number;
    const BITAND: number;
    const BITOR: number;
    const CARET: number;
    const MOD: number;
    const ADD_ASSIGN: number;
    const SUB_ASSIGN: number;
    const MUL_ASSIGN: number;
    const DIV_ASSIGN: number;
    const AND_ASSIGN: number;
    const OR_ASSIGN: number;
    const XOR_ASSIGN: number;
    const MOD_ASSIGN: number;
    const LSHIFT_ASSIGN: number;
    const RSHIFT_ASSIGN: number;
    const URSHIFT_ASSIGN: number;
    const Identifier: number;
    const WS: number;
    const COMMENT: number;
    const LINE_COMMENT: number;
}
export default Java9Lexer;
//# sourceMappingURL=Java9Lexer.d.ts.map