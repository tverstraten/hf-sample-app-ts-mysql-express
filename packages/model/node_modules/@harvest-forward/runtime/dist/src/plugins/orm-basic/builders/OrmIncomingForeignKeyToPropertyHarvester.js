"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrmIncomingForeignKeyToPropertyHarvester = void 0;
const changeCase = __importStar(require("change-case"));
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const ComponentOrigin_1 = require("../../../system/ComponentOrigin");
const Permanence_1 = require("../../../system/Permanence");
const System_1 = require("../../../system/System");
const SystemComponent_1 = require("../../../system/SystemComponent");
const SystemComponentArtifact_1 = require("../../../system/SystemComponentArtifact");
const ValueType_1 = require("../../../system/ValueType");
const information_architecture_1 = require("../../information-architecture");
const DataMemberColumnMapping_1 = require("../DataMemberColumnMapping");
class OrmIncomingForeignKeyToPropertyHarvester extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'ForeignKey',
        });
        super('OrmIncomingForeignKeyToPropertyHarvester', 'A harvester that takes incoming foreign keys in a sql schema and creates properties in an information model', {
            collectedFkRegex: {
                name: 'Foreign Key Regex for collections',
                required: true,
                description: 'The text to use for altering name of foreign keys into the properties representing the many side of the relationship. It is a pipe (|) separated value with the first portion being a string or a regex to match and the second portion the text to use to replace matches with',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: '',
            },
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(system, component) {
        const results = [];
        const fk = component;
        const targetTable = fk.targetTable;
        const targetClass = targetTable?.orMapping?.type;
        if (targetClass != null) {
            let propertyName = fk.name;
            const model = information_architecture_1.InformationModel.fromSystem(system);
            const collectedFkRegex = this.getConfiguredValue('collectedFkRegex');
            if (collectedFkRegex == '') {
                propertyName = propertyName.replace(/^.*FK_/, '');
                propertyName = propertyName.replace(`${fk.sourceTableName}_${fk.sourceColumnName}`, '');
            }
            else {
                const lastPipe = collectedFkRegex.lastIndexOf('|');
                if (lastPipe != -1) {
                    const regexPattern = collectedFkRegex.substr(0, lastPipe);
                    const replacement = collectedFkRegex.substr(lastPipe + 1);
                    const regex = new RegExp(regexPattern);
                    propertyName = propertyName.replace(regex, replacement);
                }
                else
                    this.logger.warn(`translateIncomingForeignKeyToProperty(${fk.name}) invalid regex provided, no pipe separator found in pattern`);
            }
            propertyName = changeCase.snakeCase(propertyName);
            if (propertyName.length != 0) {
                const sourceTable = system.descendants[fk.sourceTableFullName];
                const singularPropertyTypeName = sourceTable.orMapping?.typeName;
                let singularPropertyType;
                if (singularPropertyTypeName == null)
                    singularPropertyType = ValueType_1.ValueType.INT;
                else {
                    const fullName = SystemComponent_1.SystemComponent.fullConstantCase(model.fullConstantCaseName, singularPropertyTypeName);
                    singularPropertyType = system.descendants[fullName];
                }
                const propertyType = singularPropertyType.asCollection;
                let property;
                if (targetClass.dataMembersMap[propertyName] == null) {
                    property = new information_architecture_1.Property(targetClass.constantCaseFullName, propertyName, `This was created from the details of the foreign key ${fk.name} and described as: ${fk.description}`.trim(), propertyType, 0);
                    property.permanence = Permanence_1.Permanence.constant;
                    property.informational = true;
                    property.functional = false;
                    property.origin = ComponentOrigin_1.ComponentOrigin.manufactured;
                    const fkColumn = sourceTable.columns[System_1.System.constantCase(fk.sourceColumnName)];
                    const mapping = new DataMemberColumnMapping_1.DataMemberColumnMapping(propertyName, fkColumn.name, ValueType_1.ValueType.INT.name, ValueType_1.ValueType.INT);
                    mapping.column = fkColumn;
                    mapping.property = property;
                    mapping.permanence = Permanence_1.Permanence.constant;
                    mapping.informational = true;
                    mapping.functional = false;
                    mapping.origin = ComponentOrigin_1.ComponentOrigin.harvested;
                    const dataMember = property;
                    dataMember.orMapping = mapping;
                    targetClass.addChild(property);
                    targetClass.orMapping?.addChild(mapping);
                    results.push(new SystemComponentArtifact_1.SystemComponentArtifact(property));
                    results.push(new SystemComponentArtifact_1.SystemComponentArtifact(mapping));
                }
                else {
                    property = targetClass.dataMembersMap[propertyName];
                    property.description = `This was created from the details of the foreign key ${fk.name} and described as: ${fk.description}`.trim();
                    property.type = propertyType;
                    property.length = 0;
                    const dataMember = property;
                    if (dataMember.orMapping != null) {
                        dataMember.orMapping.dataType = propertyType;
                        targetClass.orMapping?.addChild(dataMember.orMapping);
                    }
                }
            }
        }
        return results;
    }
}
exports.OrmIncomingForeignKeyToPropertyHarvester = OrmIncomingForeignKeyToPropertyHarvester;
