"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrmDerivedClassPropertyConsolidator = void 0;
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const ValueType_1 = require("../../../system/ValueType");
const information_architecture_1 = require("../../information-architecture");
class OrmDerivedClassPropertyConsolidator extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'Class',
            permanence: 'persistent',
            componentType: 'informationModel',
        });
        super('OrmDerivedClassPropertyConsolidator', 'An transformer that takes derived classes and consolidates common properties into the base class', {
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    consolidateInheritedProperties(__system, baseClass) {
        let commonPropertyNames = Object.keys(baseClass.propertiesMap);
        baseClass.derivations.forEach((derivedClass) => {
            const derivedClassPropertyNames = Object.keys(derivedClass.dataMembersMap);
            const intersection = commonPropertyNames.filter((value) => derivedClassPropertyNames.includes(value));
            commonPropertyNames = intersection;
        });
        Object.keys(baseClass.propertiesMap).forEach((propertyName) => {
            const property = baseClass.propertiesMap[propertyName];
            let referent = property.type;
            while (referent.isCollection && referent.collectedType != null)
                referent = referent.collectedType;
            let commonFk = false;
            if (referent instanceof information_architecture_1.Class)
                commonFk = !referent.isExternal;
            if (!commonPropertyNames.includes(propertyName) && !commonFk) {
                const mapping = baseClass.orMapping;
                if (mapping != null) {
                    const dataMember = property;
                    const propertyMapping = dataMember.orMapping;
                    if (propertyMapping != null)
                        mapping.removeChild(propertyMapping);
                }
                baseClass.removeChild(property);
            }
        });
        baseClass.derivations.forEach((derivedClass) => {
            Object.keys(derivedClass.dataMembersMap).forEach((propertyName) => {
                if (commonPropertyNames.includes(propertyName)) {
                    const mapping = derivedClass.orMapping;
                    const property = derivedClass.dataMembersMap[propertyName];
                    if (mapping != null) {
                        const dataMember = property;
                        const propertyMapping = dataMember.orMapping;
                        if (propertyMapping != null)
                            mapping.removeChild(propertyMapping);
                    }
                    derivedClass.removeChild(property);
                }
            });
        });
    }
    async buildInternal(system, component) {
        const informationalClass = component;
        if (informationalClass.derivations.length > 0) {
            this.consolidateInheritedProperties(system, informationalClass);
        }
        return [];
    }
}
exports.OrmDerivedClassPropertyConsolidator = OrmDerivedClassPropertyConsolidator;
