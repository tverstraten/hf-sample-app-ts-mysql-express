"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Method = void 0;
const SystemComponentComparator_1 = require("../../../system/SystemComponentComparator");
const SystemComponentType_1 = require("../../../system/SystemComponentType");
const ObjectTypeMember_1 = require("../information/ObjectTypeMember");
const Parameter_1 = require("./Parameter");
class Method extends ObjectTypeMember_1.ObjectTypeMember {
    constructor(nameSpace, name, description) {
        super('Method', nameSpace, name, description, SystemComponentType_1.SystemComponentType.informationModel);
        this._parameters = {};
    }
    addChild(child) {
        super.addChild(child);
        if (child instanceof Parameter_1.Parameter) {
            this._parameters[child.name] = child;
        }
    }
    removeChild(child) {
        if (child instanceof Parameter_1.Parameter) {
            delete this._parameters[child.name];
        }
        return super.removeChild(child);
    }
    get allReferences() {
        const result = this.returns && this.returns.type ? [this.returns.type] : [];
        Object.keys(this._parameters).forEach((parameterName) => {
            const parameter = this._parameters[parameterName];
            let referent = parameter.type;
            while (referent.isCollection && referent.collectedType != null) {
                referent = referent.collectedType;
            }
            if (!result.includes(referent))
                result.push(referent);
        });
        return result.sort(SystemComponentComparator_1.SystemComponentComparator);
    }
    get primitiveReferences() {
        return this.allReferences.filter((parameter) => parameter.primitive);
    }
    get nonPrimitiveReferences() {
        return this.allReferences.filter((parameter) => !parameter.primitive);
    }
    get parameters() {
        return this._parameters;
    }
}
exports.Method = Method;
