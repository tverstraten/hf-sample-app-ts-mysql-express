import ts from 'typescript';
import { AbstractSingularBuilder } from '../../runtime/AbstractSingularBuilder';
import { ConfigurationParameter } from '../../runtime/ConfigurationParameter';
import { Artifact } from '../../system/Artifact';
import { System } from '../../system/System';
import { SystemComponent } from '../../system/SystemComponent';
export declare abstract class AbstractTypeScriptAstHarvester extends AbstractSingularBuilder {
    protected fileNameRegex: RegExp;
    protected classNameRegex: RegExp;
    private regexSet;
    constructor(className: string, description: string, configurationParameters: {
        [key: string]: ConfigurationParameter;
    }, configurationValues?: {
        [key: string]: any;
    });
    protected ensureRegexes(): void;
    protected validFile(fileName: string): boolean;
    protected validClass(className: string): boolean;
    abstract harvestFromAst(system: System, ast: ts.SourceFile): Promise<Artifact[]>;
    harvestFromFile(system: System, filePath: string, fileName: string): Promise<Artifact[]>;
    _doesConfigurationWork(): Promise<boolean>;
    buildInternal(system: System, __component: SystemComponent): Promise<Artifact[]>;
}
//# sourceMappingURL=AbstractTypeScriptAstHarvester.d.ts.map