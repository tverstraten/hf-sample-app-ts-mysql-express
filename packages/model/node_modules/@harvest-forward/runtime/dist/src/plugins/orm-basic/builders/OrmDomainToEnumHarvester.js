"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrmDomainToEnumHarvester = void 0;
const changeCase = __importStar(require("change-case"));
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const ComponentOrigin_1 = require("../../../system/ComponentOrigin");
const Permanence_1 = require("../../../system/Permanence");
const SystemComponent_1 = require("../../../system/SystemComponent");
const SystemComponentArtifact_1 = require("../../../system/SystemComponentArtifact");
const ValueType_1 = require("../../../system/ValueType");
const information_architecture_1 = require("../../information-architecture");
class OrmDomainToEnumHarvester extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'Domain',
        });
        super('OrmDomainToEnumHarvester', 'A harvester that takes a domain from a sql schema and creates an enumeration in an information model', {
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(system, component) {
        const results = [];
        const domain = component;
        const enumName = changeCase.pascalCase(domain.name);
        const model = information_architecture_1.InformationModel.fromSystem(system);
        const fullName = SystemComponent_1.SystemComponent.fullConstantCase(model.fullConstantCaseName, enumName);
        let informationalClass = system.descendants[fullName];
        if (informationalClass == null) {
            informationalClass = new information_architecture_1.Enumeration(model.fullConstantCaseName, enumName, domain.description, domain.values);
            informationalClass.permanence = Permanence_1.Permanence.constant;
            informationalClass.informational = true;
            informationalClass.functional = false;
            informationalClass.origin = ComponentOrigin_1.ComponentOrigin.manufactured;
            model.addChild(informationalClass);
            results.push(new SystemComponentArtifact_1.SystemComponentArtifact(informationalClass));
        }
        return results;
    }
}
exports.OrmDomainToEnumHarvester = OrmDomainToEnumHarvester;
