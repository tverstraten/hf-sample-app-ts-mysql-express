"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const antlr4_1 = __importDefault(require("antlr4"));
const PhpParserListener_js_1 = __importDefault(require("./PhpParserListener.js"));
const PhpParserVisitor_js_1 = __importDefault(require("./PhpParserVisitor.js"));
const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u00f1\u06f5\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0003\u0002\u0005",
    "\u0002\u010a\n\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u010e\n\u0002",
    "\f\u0002\u000e\u0002\u0111\u000b\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0003\u0006\u0003\u0116\n\u0003\r\u0003\u000e\u0003\u0117\u0003\u0003",
    "\u0005\u0003\u011b\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0007\u0004\u0133\n\u0004\f\u0004\u000e\u0004\u0136\u000b\u0004",
    "\u0003\u0004\u0005\u0004\u0139\n\u0004\u0003\u0005\u0006\u0005\u013c",
    "\n\u0005\r\u0005\u000e\u0005\u013d\u0003\u0006\u0007\u0006\u0141\n\u0006",
    "\f\u0006\u000e\u0006\u0144\u000b\u0006\u0003\u0006\u0006\u0006\u0147",
    "\n\u0006\r\u0006\u000e\u0006\u0148\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0005\b\u0156\n\b\u0003\t\u0003\t\u0005\t\u015a\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\n\u0005\n\u0160\n\n\u0003\n\u0003\n\u0003\n\u0005\n",
    "\u0165\n\n\u0003\n\u0007\n\u0168\n\n\f\n\u000e\n\u016b\u000b\n\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0005\f\u0171\n\f\u0003\f\u0003\f",
    "\u0007\f\u0175\n\f\f\f\u000e\f\u0178\u000b\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0005\f\u017e\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005",
    "\r\u0185\n\r\u0003\u000e\u0005\u000e\u0188\n\u000e\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u018c\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u0190\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0005\u000e\u0197\n\u000e\u0003\u000e\u0005\u000e\u019a\n\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000f\u0005\u000f\u019f\n\u000f\u0003",
    "\u000f\u0005\u000f\u01a2\n\u000f\u0003\u000f\u0005\u000f\u01a5\n\u000f",
    "\u0003\u000f\u0005\u000f\u01a8\n\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0005\u000f\u01ad\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u01b1\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u01b5\n\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u01ba\n\u000f\u0003\u000f",
    "\u0003\u000f\u0005\u000f\u01be\n\u000f\u0005\u000f\u01c0\n\u000f\u0003",
    "\u000f\u0003\u000f\u0007\u000f\u01c4\n\u000f\f\u000f\u000e\u000f\u01c7",
    "\u000b\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0007\u0011\u01d0\n\u0011\f\u0011\u000e\u0011",
    "\u01d3\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u01e3\n\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u01e8\n\u0013\f\u0013",
    "\u000e\u0013\u01eb\u000b\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0007",
    "\u0014\u01f0\n\u0014\f\u0014\u000e\u0014\u01f3\u000b\u0014\u0003\u0015",
    "\u0005\u0015\u01f6\n\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0005",
    "\u0016\u01fb\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0005\u0016\u0201\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0007\u0017\u0207\n\u0017\f\u0017\u000e\u0017\u020a\u000b\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0018\u0006\u0018\u020f\n\u0018\r\u0018",
    "\u000e\u0018\u0210\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u0217\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019",
    "\u021c\n\u0019\f\u0019\u000e\u0019\u021f\u000b\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u001a\u0003\u001a\u0005\u001a\u0225\n\u001a\u0003\u001b",
    "\u0007\u001b\u0228\n\u001b\f\u001b\u000e\u001b\u022b\u000b\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0230\n\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u024d\n\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003",
    " \u0003 \u0003 \u0007 \u0259\n \f \u000e \u025c\u000b \u0003 \u0005",
    " \u025f\n \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u0266\n \f \u000e",
    " \u0269\u000b \u0003 \u0005 \u026c\n \u0003 \u0003 \u0003 \u0005 \u0271",
    "\n \u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u028b\n%\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0005\'\u0296\n\'\u0003",
    "\'\u0003\'\u0005\'\u029a\n\'\u0003\'\u0003\'\u0005\'\u029e\n\'\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u02a7\n\'",
    "\u0003(\u0003(\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0005*\u02b1",
    "\n*\u0003*\u0007*\u02b4\n*\f*\u000e*\u02b7\u000b*\u0003*\u0003*\u0003",
    "*\u0005*\u02bc\n*\u0003*\u0007*\u02bf\n*\f*\u000e*\u02c2\u000b*\u0003",
    "*\u0003*\u0005*\u02c6\n*\u0003+\u0003+\u0003+\u0005+\u02cb\n+\u0003",
    "+\u0006+\u02ce\n+\r+\u000e+\u02cf\u0003+\u0003+\u0003,\u0003,\u0005",
    ",\u02d6\n,\u0003,\u0003,\u0003-\u0003-\u0005-\u02dc\n-\u0003-\u0003",
    "-\u0003.\u0003.\u0005.\u02e2\n.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003",
    "0\u00030\u00030\u00030\u00030\u00030\u00031\u00031\u00031\u00031\u0003",
    "1\u00051\u02f4\n1\u00031\u00031\u00031\u00051\u02f9\n1\u00031\u0005",
    "1\u02fc\n1\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0005",
    "1\u0306\n1\u00031\u00051\u0309\n1\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00031\u00051\u0316\n1\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00051\u031e\n1\u00032\u00032\u00032\u0006",
    "2\u0323\n2\r2\u000e2\u0324\u00032\u00052\u0328\n2\u00032\u00072\u032b",
    "\n2\f2\u000e2\u032e\u000b2\u00032\u00052\u0331\n2\u00033\u00033\u0003",
    "3\u00033\u00033\u00073\u0338\n3\f3\u000e3\u033b\u000b3\u00033\u0003",
    "3\u00033\u00033\u00034\u00034\u00034\u00035\u00035\u00035\u00035\u0003",
    "6\u00036\u00036\u00036\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00057\u0356\n7\u00038\u00068\u0359\n8\r8\u000e",
    "8\u035a\u00039\u00039\u00039\u00079\u0360\n9\f9\u000e9\u0363\u000b9",
    "\u0003:\u0005:\u0366\n:\u0003:\u0003:\u0007:\u036a\n:\f:\u000e:\u036d",
    "\u000b:\u0003:\u0005:\u0370\n:\u0003;\u0005;\u0373\n;\u0003;\u0005;",
    "\u0376\n;\u0003;\u0005;\u0379\n;\u0003;\u0005;\u037c\n;\u0003;\u0005",
    ";\u037f\n;\u0003;\u0005;\u0382\n;\u0003;\u0003;\u0003<\u0003<\u0003",
    "<\u0003<\u0005<\u038a\n<\u0003<\u0003<\u0003<\u0007<\u038f\n<\f<\u000e",
    "<\u0392\u000b<\u0003=\u0003=\u0003=\u0003=\u0007=\u0398\n=\f=\u000e",
    "=\u039b\u000b=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003>\u0003>\u0005>\u03a7\n>\u0003?\u0003?\u0003?\u0003?\u0003@\u0003",
    "@\u0003@\u0003@\u0007@\u03b1\n@\f@\u000e@\u03b4\u000b@\u0003@\u0003",
    "@\u0003A\u0005A\u03b9\nA\u0003A\u0003A\u0005A\u03bd\nA\u0003A\u0003",
    "A\u0003A\u0007A\u03c2\nA\fA\u000eA\u03c5\u000bA\u0003A\u0003A\u0003",
    "A\u0005A\u03ca\nA\u0003A\u0003A\u0005A\u03ce\nA\u0003A\u0003A\u0003",
    "A\u0007A\u03d3\nA\fA\u000eA\u03d6\u000bA\u0003A\u0003A\u0003A\u0003",
    "A\u0005A\u03dc\nA\u0003A\u0003A\u0005A\u03e0\nA\u0003A\u0003A\u0003",
    "A\u0003A\u0005A\u03e6\nA\u0003A\u0003A\u0005A\u03ea\nA\u0005A\u03ec",
    "\nA\u0003A\u0003A\u0003A\u0003A\u0005A\u03f2\nA\u0003B\u0003B\u0003",
    "B\u0007B\u03f7\nB\fB\u000eB\u03fa\u000bB\u0003B\u0005B\u03fd\nB\u0003",
    "C\u0003C\u0005C\u0401\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003E\u0003E\u0003E\u0003E\u0005E\u040e\nE\u0003E\u0005E\u0411\n",
    "E\u0003E\u0003E\u0003F\u0003F\u0003F\u0005F\u0418\nF\u0003F\u0003F\u0003",
    "G\u0003G\u0003G\u0005G\u041f\nG\u0003H\u0003H\u0005H\u0423\nH\u0003",
    "I\u0003I\u0005I\u0427\nI\u0003J\u0006J\u042a\nJ\rJ\u000eJ\u042b\u0003",
    "K\u0003K\u0003K\u0005K\u0431\nK\u0003L\u0003L\u0003L\u0003L\u0003M\u0005",
    "M\u0438\nM\u0003M\u0003M\u0003M\u0003M\u0007M\u043e\nM\fM\u000eM\u0441",
    "\u000bM\u0003M\u0003M\u0003N\u0003N\u0003N\u0007N\u0448\nN\fN\u000e",
    "N\u044b\u000bN\u0003O\u0003O\u0003O\u0005O\u0450\nO\u0003O\u0003O\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u048f",
    "\nP\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0005P\u049c\nP\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u04a3",
    "\nP\u0003P\u0003P\u0003P\u0005P\u04a8\nP\u0005P\u04aa\nP\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0005P\u04d0\nP\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0007P\u04e6\nP\fP\u000e",
    "P\u04e9\u000bP\u0003Q\u0003Q\u0005Q\u04ed\nQ\u0003R\u0003R\u0003R\u0005",
    "R\u04f2\nR\u0003R\u0003R\u0003R\u0005R\u04f7\nR\u0003R\u0005R\u04fa",
    "\nR\u0003R\u0003R\u0003R\u0003R\u0005R\u0500\nR\u0003S\u0005S\u0503",
    "\nS\u0003S\u0003S\u0005S\u0507\nS\u0003S\u0003S\u0003S\u0003S\u0005",
    "S\u050d\nS\u0003S\u0003S\u0005S\u0511\nS\u0003S\u0003S\u0003S\u0003",
    "S\u0003S\u0003S\u0003S\u0003S\u0003S\u0005S\u051c\nS\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0007T\u0526\nT\fT\u000eT\u0529",
    "\u000bT\u0003T\u0005T\u052c\nT\u0003T\u0003T\u0003U\u0003U\u0003U\u0007",
    "U\u0533\nU\fU\u000eU\u0536\u000bU\u0003U\u0003U\u0003U\u0003V\u0003",
    "V\u0003V\u0005V\u053e\nV\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0005",
    "X\u0546\nX\u0003X\u0003X\u0005X\u054a\nX\u0003Y\u0003Y\u0003Y\u0007",
    "Y\u054f\nY\fY\u000eY\u0552\u000bY\u0003Y\u0005Y\u0555\nY\u0003Z\u0003",
    "Z\u0003Z\u0005Z\u055a\nZ\u0003Z\u0003Z\u0003Z\u0005Z\u055f\nZ\u0003",
    "Z\u0003Z\u0005Z\u0563\nZ\u0003[\u0003[\u0003[\u0003[\u0003[\u0007[\u056a",
    "\n[\f[\u000e[\u056d\u000b[\u0003[\u0003[\u0003\\\u0005\\\u0572\n\\\u0003",
    "\\\u0003\\\u0003]\u0003]\u0005]\u0578\n]\u0003]\u0005]\u057b\n]\u0003",
    "^\u0003^\u0005^\u057f\n^\u0003^\u0005^\u0582\n^\u0003^\u0003^\u0003",
    "^\u0005^\u0587\n^\u0003_\u0005_\u058a\n_\u0003_\u0005_\u058d\n_\u0003",
    "_\u0005_\u0590\n_\u0003_\u0005_\u0593\n_\u0003_\u0003_\u0005_\u0597",
    "\n_\u0003_\u0003_\u0005_\u059b\n_\u0003_\u0003_\u0005_\u059f\n_\u0003",
    "_\u0003_\u0003_\u0005_\u05a4\n_\u0003_\u0003_\u0005_\u05a8\n_\u0005",
    "_\u05aa\n_\u0003_\u0003_\u0007_\u05ae\n_\f_\u000e_\u05b1\u000b_\u0003",
    "_\u0003_\u0003`\u0003`\u0003`\u0007`\u05b8\n`\f`\u000e`\u05bb\u000b",
    "`\u0003a\u0005a\u05be\na\u0003a\u0005a\u05c1\na\u0003a\u0003a\u0003",
    "b\u0003b\u0003b\u0003b\u0007b\u05c9\nb\fb\u000eb\u05cc\u000bb\u0003",
    "b\u0003b\u0005b\u05d0\nb\u0005b\u05d2\nb\u0003c\u0003c\u0003c\u0005",
    "c\u05d7\nc\u0003c\u0003c\u0003c\u0003c\u0007c\u05dd\nc\fc\u000ec\u05e0",
    "\u000bc\u0003c\u0005c\u05e3\nc\u0003c\u0003c\u0005c\u05e7\nc\u0003d",
    "\u0003d\u0003d\u0007d\u05ec\nd\fd\u000ed\u05ef\u000bd\u0003e\u0003e",
    "\u0003e\u0003e\u0007e\u05f5\ne\fe\u000ee\u05f8\u000be\u0003e\u0005e",
    "\u05fb\ne\u0003e\u0005e\u05fe\ne\u0003e\u0003e\u0003f\u0005f\u0603\n",
    "f\u0003f\u0005f\u0606\nf\u0003f\u0003f\u0003f\u0005f\u060b\nf\u0003",
    "g\u0003g\u0003g\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0005h\u0616",
    "\nh\u0005h\u0618\nh\u0003h\u0003h\u0003h\u0003h\u0005h\u061e\nh\u0005",
    "h\u0620\nh\u0003h\u0003h\u0003h\u0005h\u0625\nh\u0003i\u0003i\u0003",
    "i\u0003i\u0003i\u0005i\u062c\ni\u0003j\u0003j\u0003j\u0003j\u0005j\u0632",
    "\nj\u0003k\u0003k\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0005l\u063c",
    "\nl\u0003l\u0003l\u0003l\u0005l\u0641\nl\u0003l\u0003l\u0003l\u0005",
    "l\u0646\nl\u0005l\u0648\nl\u0003m\u0003m\u0003n\u0003n\u0006n\u064e",
    "\nn\rn\u000en\u064f\u0003n\u0003n\u0006n\u0654\nn\rn\u000en\u0655\u0003",
    "n\u0003n\u0003n\u0007n\u065b\nn\fn\u000en\u065e\u000bn\u0003n\u0005",
    "n\u0661\nn\u0003o\u0003o\u0003o\u0005o\u0666\no\u0003p\u0003p\u0003",
    "p\u0007p\u066b\np\fp\u000ep\u066e\u000bp\u0003q\u0003q\u0007q\u0672",
    "\nq\fq\u000eq\u0675\u000bq\u0003r\u0003r\u0003r\u0003r\u0003r\u0003",
    "r\u0005r\u067d\nr\u0003s\u0003s\u0003s\u0005s\u0682\ns\u0003t\u0003",
    "t\u0003t\u0003u\u0003u\u0003u\u0003u\u0005u\u068b\nu\u0003v\u0005v\u068e",
    "\nv\u0003v\u0003v\u0007v\u0692\nv\fv\u000ev\u0695\u000bv\u0003w\u0003",
    "w\u0003w\u0005w\u069a\nw\u0003w\u0003w\u0003w\u0003w\u0005w\u06a0\n",
    "w\u0003x\u0003x\u0005x\u06a4\nx\u0003y\u0003y\u0003y\u0003y\u0003y\u0005",
    "y\u06ab\ny\u0003y\u0007y\u06ae\ny\fy\u000ey\u06b1\u000by\u0003z\u0007",
    "z\u06b4\nz\fz\u000ez\u06b7\u000bz\u0003z\u0003z\u0003z\u0003z\u0003",
    "z\u0003z\u0005z\u06bf\nz\u0003z\u0007z\u06c2\nz\fz\u000ez\u06c5\u000b",
    "z\u0003{\u0003{\u0005{\u06c9\n{\u0003{\u0003{\u0003{\u0003{\u0003{\u0005",
    "{\u06d0\n{\u0003|\u0005|\u06d3\n|\u0003|\u0003|\u0005|\u06d7\n|\u0007",
    "|\u06d9\n|\f|\u000e|\u06dc\u000b|\u0003}\u0003}\u0003}\u0003}\u0003",
    "}\u0003}\u0003}\u0005}\u06e5\n}\u0003~\u0003~\u0003\u007f\u0003\u007f",
    "\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0082\u0003\u0082",
    "\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084\u0003\u0084\u0002\u0004",
    "v\u009e\u0085\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnp",
    "rtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa",
    "\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2",
    "\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da",
    "\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2",
    "\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0002\u001a",
    "\u0004\u0002::SS\u0004\u000288zz\u0003\u0002\u00d8\u00d9\u0003\u0002",
    "\u00cc\u00cd\u0004\u0002\u00c5\u00c5\u00c7\u00c8\u0003\u0002\u00a2\u00a3",
    "\u0003\u0002YZ\u0003\u0002rs\u0003\u0002\u00c9\u00cb\u0004\u0002\u00c7",
    "\u00c8\u00cf\u00cf\u0003\u0002\u00bb\u00bc\u0004\u0002\u00a8\u00a9\u00c1",
    "\u00c2\u0003\u0002\u00a4\u00a7\u0006\u0002\u00aa\u00ac\u00ae\u00b6\u00ba",
    "\u00ba\u00da\u00da\u0003\u0002\u00c7\u00c8\u0004\u0002\u00df\u00e0\u00e2",
    "\u00e3\u0004\u000288ll\u0004\u0002..NN\u0006\u0002.fh\u0084\u0086\u009d",
    "\u00de\u00de\u0006\u0002..NNoqvv\u0003\u0002\u0096\u009d\u0003\u0002",
    "\u0086\u0095\t\u0002//22@@_`kkttww\u000b\u0002//12?@PP]`kkttww}\u007f",
    "\u0002\u07c9\u0002\u0109\u0003\u0002\u0002\u0002\u0004\u011a\u0003\u0002",
    "\u0002\u0002\u0006\u0138\u0003\u0002\u0002\u0002\b\u013b\u0003\u0002",
    "\u0002\u0002\n\u0142\u0003\u0002\u0002\u0002\f\u014a\u0003\u0002\u0002",
    "\u0002\u000e\u0155\u0003\u0002\u0002\u0002\u0010\u0157\u0003\u0002\u0002",
    "\u0002\u0012\u015f\u0003\u0002\u0002\u0002\u0014\u016c\u0003\u0002\u0002",
    "\u0002\u0016\u016e\u0003\u0002\u0002\u0002\u0018\u0184\u0003\u0002\u0002",
    "\u0002\u001a\u0187\u0003\u0002\u0002\u0002\u001c\u019e\u0003\u0002\u0002",
    "\u0002\u001e\u01ca\u0003\u0002\u0002\u0002 \u01cc\u0003\u0002\u0002",
    "\u0002\"\u01e2\u0003\u0002\u0002\u0002$\u01e4\u0003\u0002\u0002\u0002",
    "&\u01ec\u0003\u0002\u0002\u0002(\u01f5\u0003\u0002\u0002\u0002*\u01fa",
    "\u0003\u0002\u0002\u0002,\u0202\u0003\u0002\u0002\u0002.\u020e\u0003",
    "\u0002\u0002\u00020\u0212\u0003\u0002\u0002\u00022\u0222\u0003\u0002",
    "\u0002\u00024\u0229\u0003\u0002\u0002\u00026\u022f\u0003\u0002\u0002",
    "\u00028\u024c\u0003\u0002\u0002\u0002:\u024e\u0003\u0002\u0002\u0002",
    "<\u0250\u0003\u0002\u0002\u0002>\u0270\u0003\u0002\u0002\u0002@\u0272",
    "\u0003\u0002\u0002\u0002B\u0276\u0003\u0002\u0002\u0002D\u027b\u0003",
    "\u0002\u0002\u0002F\u027e\u0003\u0002\u0002\u0002H\u0282\u0003\u0002",
    "\u0002\u0002J\u028c\u0003\u0002\u0002\u0002L\u0292\u0003\u0002\u0002",
    "\u0002N\u02a8\u0003\u0002\u0002\u0002P\u02aa\u0003\u0002\u0002\u0002",
    "R\u02ac\u0003\u0002\u0002\u0002T\u02cd\u0003\u0002\u0002\u0002V\u02d3",
    "\u0003\u0002\u0002\u0002X\u02d9\u0003\u0002\u0002\u0002Z\u02df\u0003",
    "\u0002\u0002\u0002\\\u02e5\u0003\u0002\u0002\u0002^\u02e8\u0003\u0002",
    "\u0002\u0002`\u02ee\u0003\u0002\u0002\u0002b\u031f\u0003\u0002\u0002",
    "\u0002d\u0332\u0003\u0002\u0002\u0002f\u0340\u0003\u0002\u0002\u0002",
    "h\u0343\u0003\u0002\u0002\u0002j\u0347\u0003\u0002\u0002\u0002l\u034b",
    "\u0003\u0002\u0002\u0002n\u0358\u0003\u0002\u0002\u0002p\u035c\u0003",
    "\u0002\u0002\u0002r\u0365\u0003\u0002\u0002\u0002t\u0372\u0003\u0002",
    "\u0002\u0002v\u0389\u0003\u0002\u0002\u0002x\u0393\u0003\u0002\u0002",
    "\u0002z\u03a6\u0003\u0002\u0002\u0002|\u03a8\u0003\u0002\u0002\u0002",
    "~\u03ac\u0003\u0002\u0002\u0002\u0080\u03f1\u0003\u0002\u0002\u0002",
    "\u0082\u03fc\u0003\u0002\u0002\u0002\u0084\u0400\u0003\u0002\u0002\u0002",
    "\u0086\u0402\u0003\u0002\u0002\u0002\u0088\u0409\u0003\u0002\u0002\u0002",
    "\u008a\u0417\u0003\u0002\u0002\u0002\u008c\u041b\u0003\u0002\u0002\u0002",
    "\u008e\u0422\u0003\u0002\u0002\u0002\u0090\u0426\u0003\u0002\u0002\u0002",
    "\u0092\u0429\u0003\u0002\u0002\u0002\u0094\u042d\u0003\u0002\u0002\u0002",
    "\u0096\u0432\u0003\u0002\u0002\u0002\u0098\u0437\u0003\u0002\u0002\u0002",
    "\u009a\u0444\u0003\u0002\u0002\u0002\u009c\u044c\u0003\u0002\u0002\u0002",
    "\u009e\u04a9\u0003\u0002\u0002\u0002\u00a0\u04ec\u0003\u0002\u0002\u0002",
    "\u00a2\u04f9\u0003\u0002\u0002\u0002\u00a4\u051b\u0003\u0002\u0002\u0002",
    "\u00a6\u051d\u0003\u0002\u0002\u0002\u00a8\u052f\u0003\u0002\u0002\u0002",
    "\u00aa\u053a\u0003\u0002\u0002\u0002\u00ac\u053f\u0003\u0002\u0002\u0002",
    "\u00ae\u0541\u0003\u0002\u0002\u0002\u00b0\u054b\u0003\u0002\u0002\u0002",
    "\u00b2\u0562\u0003\u0002\u0002\u0002\u00b4\u0564\u0003\u0002\u0002\u0002",
    "\u00b6\u0571\u0003\u0002\u0002\u0002\u00b8\u057a\u0003\u0002\u0002\u0002",
    "\u00ba\u0586\u0003\u0002\u0002\u0002\u00bc\u0589\u0003\u0002\u0002\u0002",
    "\u00be\u05b4\u0003\u0002\u0002\u0002\u00c0\u05bd\u0003\u0002\u0002\u0002",
    "\u00c2\u05d1\u0003\u0002\u0002\u0002\u00c4\u05e6\u0003\u0002\u0002\u0002",
    "\u00c6\u05e8\u0003\u0002\u0002\u0002\u00c8\u05f0\u0003\u0002\u0002\u0002",
    "\u00ca\u060a\u0003\u0002\u0002\u0002\u00cc\u060c\u0003\u0002\u0002\u0002",
    "\u00ce\u0624\u0003\u0002\u0002\u0002\u00d0\u062b\u0003\u0002\u0002\u0002",
    "\u00d2\u0631\u0003\u0002\u0002\u0002\u00d4\u0633\u0003\u0002\u0002\u0002",
    "\u00d6\u0647\u0003\u0002\u0002\u0002\u00d8\u0649\u0003\u0002\u0002\u0002",
    "\u00da\u0660\u0003\u0002\u0002\u0002\u00dc\u0665\u0003\u0002\u0002\u0002",
    "\u00de\u0667\u0003\u0002\u0002\u0002\u00e0\u066f\u0003\u0002\u0002\u0002",
    "\u00e2\u067c\u0003\u0002\u0002\u0002\u00e4\u067e\u0003\u0002\u0002\u0002",
    "\u00e6\u0683\u0003\u0002\u0002\u0002\u00e8\u068a\u0003\u0002\u0002\u0002",
    "\u00ea\u068d\u0003\u0002\u0002\u0002\u00ec\u069f\u0003\u0002\u0002\u0002",
    "\u00ee\u06a3\u0003\u0002\u0002\u0002\u00f0\u06aa\u0003\u0002\u0002\u0002",
    "\u00f2\u06b5\u0003\u0002\u0002\u0002\u00f4\u06cf\u0003\u0002\u0002\u0002",
    "\u00f6\u06d2\u0003\u0002\u0002\u0002\u00f8\u06e4\u0003\u0002\u0002\u0002",
    "\u00fa\u06e6\u0003\u0002\u0002\u0002\u00fc\u06e8\u0003\u0002\u0002\u0002",
    "\u00fe\u06ea\u0003\u0002\u0002\u0002\u0100\u06ec\u0003\u0002\u0002\u0002",
    "\u0102\u06ee\u0003\u0002\u0002\u0002\u0104\u06f0\u0003\u0002\u0002\u0002",
    "\u0106\u06f2\u0003\u0002\u0002\u0002\u0108\u010a\u0007\f\u0002\u0002",
    "\u0109\u0108\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002\u0002\u0002",
    "\u010a\u010f\u0003\u0002\u0002\u0002\u010b\u010e\u0005\u0004\u0003\u0002",
    "\u010c\u010e\u0005\n\u0006\u0002\u010d\u010b\u0003\u0002\u0002\u0002",
    "\u010d\u010c\u0003\u0002\u0002\u0002\u010e\u0111\u0003\u0002\u0002\u0002",
    "\u010f\u010d\u0003\u0002\u0002\u0002\u010f\u0110\u0003\u0002\u0002\u0002",
    "\u0110\u0112\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002",
    "\u0112\u0113\u0007\u0002\u0002\u0003\u0113\u0003\u0003\u0002\u0002\u0002",
    "\u0114\u0116\u0005\u0006\u0004\u0002\u0115\u0114\u0003\u0002\u0002\u0002",
    "\u0116\u0117\u0003\u0002\u0002\u0002\u0117\u0115\u0003\u0002\u0002\u0002",
    "\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u011b\u0003\u0002\u0002\u0002",
    "\u0119\u011b\u0005\b\u0005\u0002\u011a\u0115\u0003\u0002\u0002\u0002",
    "\u011a\u0119\u0003\u0002\u0002\u0002\u011b\u0005\u0003\u0002\u0002\u0002",
    "\u011c\u0139\u0007\n\u0002\u0002\u011d\u0139\u0007\u0011\u0002\u0002",
    "\u011e\u0139\u0007\b\u0002\u0002\u011f\u0139\u0007\u000b\u0002\u0002",
    "\u0120\u0139\u0007\u001a\u0002\u0002\u0121\u0139\u0007\u0012\u0002\u0002",
    "\u0122\u0139\u0007\u0013\u0002\u0002\u0123\u0139\u0007\u0004\u0002\u0002",
    "\u0124\u0139\u0007\u0014\u0002\u0002\u0125\u0139\u0007\u0015\u0002\u0002",
    "\u0126\u0139\u0007\u001d\u0002\u0002\u0127\u0139\u0007\u0016\u0002\u0002",
    "\u0128\u0139\u0007!\u0002\u0002\u0129\u0139\u0007\u0017\u0002\u0002",
    "\u012a\u0139\u0007\u0018\u0002\u0002\u012b\u0139\u0007\u001e\u0002\u0002",
    "\u012c\u0139\u0007\"\u0002\u0002\u012d\u0139\u0007\'\u0002\u0002\u012e",
    "\u0139\u0007\u0007\u0002\u0002\u012f\u0139\u0007%\u0002\u0002\u0130",
    "\u0134\u0007\u0005\u0002\u0002\u0131\u0133\u0007\u000e\u0002\u0002\u0132",
    "\u0131\u0003\u0002\u0002\u0002\u0133\u0136\u0003\u0002\u0002\u0002\u0134",
    "\u0132\u0003\u0002\u0002\u0002\u0134\u0135\u0003\u0002\u0002\u0002\u0135",
    "\u0137\u0003\u0002\u0002\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0137",
    "\u0139\u0007\u000f\u0002\u0002\u0138\u011c\u0003\u0002\u0002\u0002\u0138",
    "\u011d\u0003\u0002\u0002\u0002\u0138\u011e\u0003\u0002\u0002\u0002\u0138",
    "\u011f\u0003\u0002\u0002\u0002\u0138\u0120\u0003\u0002\u0002\u0002\u0138",
    "\u0121\u0003\u0002\u0002\u0002\u0138\u0122\u0003\u0002\u0002\u0002\u0138",
    "\u0123\u0003\u0002\u0002\u0002\u0138\u0124\u0003\u0002\u0002\u0002\u0138",
    "\u0125\u0003\u0002\u0002\u0002\u0138\u0126\u0003\u0002\u0002\u0002\u0138",
    "\u0127\u0003\u0002\u0002\u0002\u0138\u0128\u0003\u0002\u0002\u0002\u0138",
    "\u0129\u0003\u0002\u0002\u0002\u0138\u012a\u0003\u0002\u0002\u0002\u0138",
    "\u012b\u0003\u0002\u0002\u0002\u0138\u012c\u0003\u0002\u0002\u0002\u0138",
    "\u012d\u0003\u0002\u0002\u0002\u0138\u012e\u0003\u0002\u0002\u0002\u0138",
    "\u012f\u0003\u0002\u0002\u0002\u0138\u0130\u0003\u0002\u0002\u0002\u0139",
    "\u0007\u0003\u0002\u0002\u0002\u013a\u013c\u0007$\u0002\u0002\u013b",
    "\u013a\u0003\u0002\u0002\u0002\u013c\u013d\u0003\u0002\u0002\u0002\u013d",
    "\u013b\u0003\u0002\u0002\u0002\u013d\u013e\u0003\u0002\u0002\u0002\u013e",
    "\t\u0003\u0002\u0002\u0002\u013f\u0141\u0005\f\u0007\u0002\u0140\u013f",
    "\u0003\u0002\u0002\u0002\u0141\u0144\u0003\u0002\u0002\u0002\u0142\u0140",
    "\u0003\u0002\u0002\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143\u0146",
    "\u0003\u0002\u0002\u0002\u0144\u0142\u0003\u0002\u0002\u0002\u0145\u0147",
    "\u0005\u000e\b\u0002\u0146\u0145\u0003\u0002\u0002\u0002\u0147\u0148",
    "\u0003\u0002\u0002\u0002\u0148\u0146\u0003\u0002\u0002\u0002\u0148\u0149",
    "\u0003\u0002\u0002\u0002\u0149\u000b\u0003\u0002\u0002\u0002\u014a\u014b",
    "\u0007X\u0002\u0002\u014b\u014c\u0007h\u0002\u0002\u014c\u014d\u0005",
    "\u00c2b\u0002\u014d\u014e\u0007\u00d9\u0002\u0002\u014e\r\u0003\u0002",
    "\u0002\u0002\u014f\u0156\u00058\u001d\u0002\u0150\u0156\u0005\u0010",
    "\t\u0002\u0151\u0156\u0005\u0016\f\u0002\u0152\u0156\u0005\u001a\u000e",
    "\u0002\u0153\u0156\u0005\u001c\u000f\u0002\u0154\u0156\u0005\u0098M",
    "\u0002\u0155\u014f\u0003\u0002\u0002\u0002\u0155\u0150\u0003\u0002\u0002",
    "\u0002\u0155\u0151\u0003\u0002\u0002\u0002\u0155\u0152\u0003\u0002\u0002",
    "\u0002\u0155\u0153\u0003\u0002\u0002\u0002\u0155\u0154\u0003\u0002\u0002",
    "\u0002\u0156\u000f\u0003\u0002\u0002\u0002\u0157\u0159\u0007\u0080\u0002",
    "\u0002\u0158\u015a\t\u0002\u0002\u0002\u0159\u0158\u0003\u0002\u0002",
    "\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u015b\u0003\u0002\u0002",
    "\u0002\u015b\u015c\u0005\u0012\n\u0002\u015c\u015d\u0007\u00d9\u0002",
    "\u0002\u015d\u0011\u0003\u0002\u0002\u0002\u015e\u0160\u0007\u00bf\u0002",
    "\u0002\u015f\u015e\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002",
    "\u0002\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u0169\u0005\u0014\u000b",
    "\u0002\u0162\u0164\u0007\u00d7\u0002\u0002\u0163\u0165\u0007\u00bf\u0002",
    "\u0002\u0164\u0163\u0003\u0002\u0002\u0002\u0164\u0165\u0003\u0002\u0002",
    "\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0168\u0005\u0014\u000b",
    "\u0002\u0167\u0162\u0003\u0002\u0002\u0002\u0168\u016b\u0003\u0002\u0002",
    "\u0002\u0169\u0167\u0003\u0002\u0002\u0002\u0169\u016a\u0003\u0002\u0002",
    "\u0002\u016a\u0013\u0003\u0002\u0002\u0002\u016b\u0169\u0003\u0002\u0002",
    "\u0002\u016c\u016d\u0005\u00c2b\u0002\u016d\u0015\u0003\u0002\u0002",
    "\u0002\u016e\u017d\u0007h\u0002\u0002\u016f\u0171\u0005\u00c2b\u0002",
    "\u0170\u016f\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002",
    "\u0171\u0172\u0003\u0002\u0002\u0002\u0172\u0176\u0007\u00d5\u0002\u0002",
    "\u0173\u0175\u0005\u0018\r\u0002\u0174\u0173\u0003\u0002\u0002\u0002",
    "\u0175\u0178\u0003\u0002\u0002\u0002\u0176\u0174\u0003\u0002\u0002\u0002",
    "\u0176\u0177\u0003\u0002\u0002\u0002\u0177\u0179\u0003\u0002\u0002\u0002",
    "\u0178\u0176\u0003\u0002\u0002\u0002\u0179\u017e\u0007\u00d6\u0002\u0002",
    "\u017a\u017b\u0005\u00c2b\u0002\u017b\u017c\u0007\u00d9\u0002\u0002",
    "\u017c\u017e\u0003\u0002\u0002\u0002\u017d\u0170\u0003\u0002\u0002\u0002",
    "\u017d\u017a\u0003\u0002\u0002\u0002\u017e\u0017\u0003\u0002\u0002\u0002",
    "\u017f\u0185\u00058\u001d\u0002\u0180\u0185\u0005\u0010\t\u0002\u0181",
    "\u0185\u0005\u001a\u000e\u0002\u0182\u0185\u0005\u001c\u000f\u0002\u0183",
    "\u0185\u0005\u0098M\u0002\u0184\u017f\u0003\u0002\u0002\u0002\u0184",
    "\u0180\u0003\u0002\u0002\u0002\u0184\u0181\u0003\u0002\u0002\u0002\u0184",
    "\u0182\u0003\u0002\u0002\u0002\u0184\u0183\u0003\u0002\u0002\u0002\u0185",
    "\u0019\u0003\u0002\u0002\u0002\u0186\u0188\u0005.\u0018\u0002\u0187",
    "\u0186\u0003\u0002\u0002\u0002\u0187\u0188\u0003\u0002\u0002\u0002\u0188",
    "\u0189\u0003\u0002\u0002\u0002\u0189\u018b\u0007S\u0002\u0002\u018a",
    "\u018c\u0007\u00c3\u0002\u0002\u018b\u018a\u0003\u0002\u0002\u0002\u018b",
    "\u018c\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d",
    "\u018f\u0005\u00fc\u007f\u0002\u018e\u0190\u0005\"\u0012\u0002\u018f",
    "\u018e\u0003\u0002\u0002\u0002\u018f\u0190\u0003\u0002\u0002\u0002\u0190",
    "\u0191\u0003\u0002\u0002\u0002\u0191\u0192\u0007\u00d1\u0002\u0002\u0192",
    "\u0193\u0005r:\u0002\u0193\u0199\u0007\u00d2\u0002\u0002\u0194\u0196",
    "\u0007\u00d8\u0002\u0002\u0195\u0197\u0007\u00d0\u0002\u0002\u0196\u0195",
    "\u0003\u0002\u0002\u0002\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u0198",
    "\u0003\u0002\u0002\u0002\u0198\u019a\u0005v<\u0002\u0199\u0194\u0003",
    "\u0002\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a\u019b\u0003",
    "\u0002\u0002\u0002\u019b\u019c\u0005<\u001f\u0002\u019c\u001b\u0003",
    "\u0002\u0002\u0002\u019d\u019f\u0005.\u0018\u0002\u019e\u019d\u0003",
    "\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f\u01a1\u0003",
    "\u0002\u0002\u0002\u01a0\u01a2\u0007o\u0002\u0002\u01a1\u01a0\u0003",
    "\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2\u01a4\u0003",
    "\u0002\u0002\u0002\u01a3\u01a5\u0005\u00fa~\u0002\u01a4\u01a3\u0003",
    "\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a7\u0003",
    "\u0002\u0002\u0002\u01a6\u01a8\u0007m\u0002\u0002\u01a7\u01a6\u0003",
    "\u0002\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8\u01bf\u0003",
    "\u0002\u0002\u0002\u01a9\u01aa\u0005\u001e\u0010\u0002\u01aa\u01ac\u0005",
    "\u00fc\u007f\u0002\u01ab\u01ad\u0005\"\u0012\u0002\u01ac\u01ab\u0003",
    "\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01b0\u0003",
    "\u0002\u0002\u0002\u01ae\u01af\u0007M\u0002\u0002\u01af\u01b1\u0005",
    "\u00b8]\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003",
    "\u0002\u0002\u0002\u01b1\u01b4\u0003\u0002\u0002\u0002\u01b2\u01b3\u0007",
    "W\u0002\u0002\u01b3\u01b5\u0005 \u0011\u0002\u01b4\u01b2\u0003\u0002",
    "\u0002\u0002\u01b4\u01b5\u0003\u0002\u0002\u0002\u01b5\u01c0\u0003\u0002",
    "\u0002\u0002\u01b6\u01b7\u0007a\u0002\u0002\u01b7\u01b9\u0005\u00fc",
    "\u007f\u0002\u01b8\u01ba\u0005\"\u0012\u0002\u01b9\u01b8\u0003\u0002",
    "\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002\u01ba\u01bd\u0003\u0002",
    "\u0002\u0002\u01bb\u01bc\u0007M\u0002\u0002\u01bc\u01be\u0005 \u0011",
    "\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002\u0002",
    "\u0002\u01be\u01c0\u0003\u0002\u0002\u0002\u01bf\u01a9\u0003\u0002\u0002",
    "\u0002\u01bf\u01b6\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002",
    "\u0002\u01c1\u01c5\u0007\u00d5\u0002\u0002\u01c2\u01c4\u0005\u0080A",
    "\u0002\u01c3\u01c2\u0003\u0002\u0002\u0002\u01c4\u01c7\u0003\u0002\u0002",
    "\u0002\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c5\u01c6\u0003\u0002\u0002",
    "\u0002\u01c6\u01c8\u0003\u0002\u0002\u0002\u01c7\u01c5\u0003\u0002\u0002",
    "\u0002\u01c8\u01c9\u0007\u00d6\u0002\u0002\u01c9\u001d\u0003\u0002\u0002",
    "\u0002\u01ca\u01cb\t\u0003\u0002\u0002\u01cb\u001f\u0003\u0002\u0002",
    "\u0002\u01cc\u01d1\u0005\u00b8]\u0002\u01cd\u01ce\u0007\u00d7\u0002",
    "\u0002\u01ce\u01d0\u0005\u00b8]\u0002\u01cf\u01cd\u0003\u0002\u0002",
    "\u0002\u01d0\u01d3\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003\u0002\u0002",
    "\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2!\u0003\u0002\u0002",
    "\u0002\u01d3\u01d1\u0003\u0002\u0002\u0002\u01d4\u01d5\u0007\u009f\u0002",
    "\u0002\u01d5\u01d6\u0005$\u0013\u0002\u01d6\u01d7\u0007\u00a0\u0002",
    "\u0002\u01d7\u01e3\u0003\u0002\u0002\u0002\u01d8\u01d9\u0007\u009f\u0002",
    "\u0002\u01d9\u01da\u0005&\u0014\u0002\u01da\u01db\u0007\u00a0\u0002",
    "\u0002\u01db\u01e3\u0003\u0002\u0002\u0002\u01dc\u01dd\u0007\u009f\u0002",
    "\u0002\u01dd\u01de\u0005$\u0013\u0002\u01de\u01df\u0007\u00d7\u0002",
    "\u0002\u01df\u01e0\u0005&\u0014\u0002\u01e0\u01e1\u0007\u00a0\u0002",
    "\u0002\u01e1\u01e3\u0003\u0002\u0002\u0002\u01e2\u01d4\u0003\u0002\u0002",
    "\u0002\u01e2\u01d8\u0003\u0002\u0002\u0002\u01e2\u01dc\u0003\u0002\u0002",
    "\u0002\u01e3#\u0003\u0002\u0002\u0002\u01e4\u01e9\u0005(\u0015\u0002",
    "\u01e5\u01e6\u0007\u00d7\u0002\u0002\u01e6\u01e8\u0005(\u0015\u0002",
    "\u01e7\u01e5\u0003\u0002\u0002\u0002\u01e8\u01eb\u0003\u0002\u0002\u0002",
    "\u01e9\u01e7\u0003\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002",
    "\u01ea%\u0003\u0002\u0002\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002",
    "\u01ec\u01f1\u0005*\u0016\u0002\u01ed\u01ee\u0007\u00d7\u0002\u0002",
    "\u01ee\u01f0\u0005*\u0016\u0002\u01ef\u01ed\u0003\u0002\u0002\u0002",
    "\u01f0\u01f3\u0003\u0002\u0002\u0002\u01f1\u01ef\u0003\u0002\u0002\u0002",
    "\u01f1\u01f2\u0003\u0002\u0002\u0002\u01f2\'\u0003\u0002\u0002\u0002",
    "\u01f3\u01f1\u0003\u0002\u0002\u0002\u01f4\u01f6\u0005.\u0018\u0002",
    "\u01f5\u01f4\u0003\u0002\u0002\u0002\u01f5\u01f6\u0003\u0002\u0002\u0002",
    "\u01f6\u01f7\u0003\u0002\u0002\u0002\u01f7\u01f8\u0005\u00fc\u007f\u0002",
    "\u01f8)\u0003\u0002\u0002\u0002\u01f9\u01fb\u0005.\u0018\u0002\u01fa",
    "\u01f9\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002\u0002\u01fb",
    "\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fd\u0005\u00fc\u007f\u0002\u01fd",
    "\u0200\u0007\u00da\u0002\u0002\u01fe\u0201\u0005\u00b8]\u0002\u01ff",
    "\u0201\u0005\u0104\u0083\u0002\u0200\u01fe\u0003\u0002\u0002\u0002\u0200",
    "\u01ff\u0003\u0002\u0002\u0002\u0201+\u0003\u0002\u0002\u0002\u0202",
    "\u0203\u0007\u009f\u0002\u0002\u0203\u0208\u0005\u00ba^\u0002\u0204",
    "\u0205\u0007\u00d7\u0002\u0002\u0205\u0207\u0005\u00ba^\u0002\u0206",
    "\u0204\u0003\u0002\u0002\u0002\u0207\u020a\u0003\u0002\u0002\u0002\u0208",
    "\u0206\u0003\u0002\u0002\u0002\u0208\u0209\u0003\u0002\u0002\u0002\u0209",
    "\u020b\u0003\u0002\u0002\u0002\u020a\u0208\u0003\u0002\u0002\u0002\u020b",
    "\u020c\u0007\u00a0\u0002\u0002\u020c-\u0003\u0002\u0002\u0002\u020d",
    "\u020f\u00050\u0019\u0002\u020e\u020d\u0003\u0002\u0002\u0002\u020f",
    "\u0210\u0003\u0002\u0002\u0002\u0210\u020e\u0003\u0002\u0002\u0002\u0210",
    "\u0211\u0003\u0002\u0002\u0002\u0211/\u0003\u0002\u0002\u0002\u0212",
    "\u0216\u0007-\u0002\u0002\u0213\u0214\u0005\u00fc\u007f\u0002\u0214",
    "\u0215\u0007\u00d8\u0002\u0002\u0215\u0217\u0003\u0002\u0002\u0002\u0216",
    "\u0213\u0003\u0002\u0002\u0002\u0216\u0217\u0003\u0002\u0002\u0002\u0217",
    "\u0218\u0003\u0002\u0002\u0002\u0218\u021d\u00052\u001a\u0002\u0219",
    "\u021a\u0007\u00d7\u0002\u0002\u021a\u021c\u00052\u001a\u0002\u021b",
    "\u0219\u0003\u0002\u0002\u0002\u021c\u021f\u0003\u0002\u0002\u0002\u021d",
    "\u021b\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002\u021e",
    "\u0220\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002\u0002\u0220",
    "\u0221\u0007\u00d4\u0002\u0002\u02211\u0003\u0002\u0002\u0002\u0222",
    "\u0224\u0005\u00c0a\u0002\u0223\u0225\u0005\u00c8e\u0002\u0224\u0223",
    "\u0003\u0002\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002\u02253",
    "\u0003\u0002\u0002\u0002\u0226\u0228\u00056\u001c\u0002\u0227\u0226",
    "\u0003\u0002\u0002\u0002\u0228\u022b\u0003\u0002\u0002\u0002\u0229\u0227",
    "\u0003\u0002\u0002\u0002\u0229\u022a\u0003\u0002\u0002\u0002\u022a5",
    "\u0003\u0002\u0002\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022c\u0230",
    "\u00058\u001d\u0002\u022d\u0230\u0005\u001a\u000e\u0002\u022e\u0230",
    "\u0005\u001c\u000f\u0002\u022f\u022c\u0003\u0002\u0002\u0002\u022f\u022d",
    "\u0003\u0002\u0002\u0002\u022f\u022e\u0003\u0002\u0002\u0002\u02307",
    "\u0003\u0002\u0002\u0002\u0231\u0232\u0005\u00fc\u007f\u0002\u0232\u0233",
    "\u0007\u00d8\u0002\u0002\u0233\u024d\u0003\u0002\u0002\u0002\u0234\u024d",
    "\u0005<\u001f\u0002\u0235\u024d\u0005> \u0002\u0236\u024d\u0005H%\u0002",
    "\u0237\u024d\u0005J&\u0002\u0238\u024d\u0005L\'\u0002\u0239\u024d\u0005",
    "R*\u0002\u023a\u024d\u0005V,\u0002\u023b\u024d\u0005X-\u0002\u023c\u024d",
    "\u0005Z.\u0002\u023d\u023e\u0005\u00aeX\u0002\u023e\u023f\u0007\u00d9",
    "\u0002\u0002\u023f\u024d\u0003\u0002\u0002\u0002\u0240\u024d\u0005x",
    "=\u0002\u0241\u024d\u0005~@\u0002\u0242\u024d\u0005|?\u0002\u0243\u024d",
    "\u0005\\/\u0002\u0244\u024d\u0005^0\u0002\u0245\u024d\u0005`1\u0002",
    "\u0246\u024d\u0005b2\u0002\u0247\u024d\u0005h5\u0002\u0248\u024d\u0005",
    "j6\u0002\u0249\u024d\u0005l7\u0002\u024a\u024d\u0005:\u001e\u0002\u024b",
    "\u024d\u0005n8\u0002\u024c\u0231\u0003\u0002\u0002\u0002\u024c\u0234",
    "\u0003\u0002\u0002\u0002\u024c\u0235\u0003\u0002\u0002\u0002\u024c\u0236",
    "\u0003\u0002\u0002\u0002\u024c\u0237\u0003\u0002\u0002\u0002\u024c\u0238",
    "\u0003\u0002\u0002\u0002\u024c\u0239\u0003\u0002\u0002\u0002\u024c\u023a",
    "\u0003\u0002\u0002\u0002\u024c\u023b\u0003\u0002\u0002\u0002\u024c\u023c",
    "\u0003\u0002\u0002\u0002\u024c\u023d\u0003\u0002\u0002\u0002\u024c\u0240",
    "\u0003\u0002\u0002\u0002\u024c\u0241\u0003\u0002\u0002\u0002\u024c\u0242",
    "\u0003\u0002\u0002\u0002\u024c\u0243\u0003\u0002\u0002\u0002\u024c\u0244",
    "\u0003\u0002\u0002\u0002\u024c\u0245\u0003\u0002\u0002\u0002\u024c\u0246",
    "\u0003\u0002\u0002\u0002\u024c\u0247\u0003\u0002\u0002\u0002\u024c\u0248",
    "\u0003\u0002\u0002\u0002\u024c\u0249\u0003\u0002\u0002\u0002\u024c\u024a",
    "\u0003\u0002\u0002\u0002\u024c\u024b\u0003\u0002\u0002\u0002\u024d9",
    "\u0003\u0002\u0002\u0002\u024e\u024f\u0007\u00d9\u0002\u0002\u024f;",
    "\u0003\u0002\u0002\u0002\u0250\u0251\u0007\u00d5\u0002\u0002\u0251\u0252",
    "\u00054\u001b\u0002\u0252\u0253\u0007\u00d6\u0002\u0002\u0253=\u0003",
    "\u0002\u0002\u0002\u0254\u0255\u0007V\u0002\u0002\u0255\u0256\u0005",
    "\u009cO\u0002\u0256\u025a\u00058\u001d\u0002\u0257\u0259\u0005@!\u0002",
    "\u0258\u0257\u0003\u0002\u0002\u0002\u0259\u025c\u0003\u0002\u0002\u0002",
    "\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002\u0002\u0002",
    "\u025b\u025e\u0003\u0002\u0002\u0002\u025c\u025a\u0003\u0002\u0002\u0002",
    "\u025d\u025f\u0005D#\u0002\u025e\u025d\u0003\u0002\u0002\u0002\u025e",
    "\u025f\u0003\u0002\u0002\u0002\u025f\u0271\u0003\u0002\u0002\u0002\u0260",
    "\u0261\u0007V\u0002\u0002\u0261\u0262\u0005\u009cO\u0002\u0262\u0263",
    "\u0007\u00d8\u0002\u0002\u0263\u0267\u00054\u001b\u0002\u0264\u0266",
    "\u0005B\"\u0002\u0265\u0264\u0003\u0002\u0002\u0002\u0266\u0269\u0003",
    "\u0002\u0002\u0002\u0267\u0265\u0003\u0002\u0002\u0002\u0267\u0268\u0003",
    "\u0002\u0002\u0002\u0268\u026b\u0003\u0002\u0002\u0002\u0269\u0267\u0003",
    "\u0002\u0002\u0002\u026a\u026c\u0005F$\u0002\u026b\u026a\u0003\u0002",
    "\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c\u026d\u0003\u0002",
    "\u0002\u0002\u026d\u026e\u0007H\u0002\u0002\u026e\u026f\u0007\u00d9",
    "\u0002\u0002\u026f\u0271\u0003\u0002\u0002\u0002\u0270\u0254\u0003\u0002",
    "\u0002\u0002\u0270\u0260\u0003\u0002\u0002\u0002\u0271?\u0003\u0002",
    "\u0002\u0002\u0272\u0273\u0007C\u0002\u0002\u0273\u0274\u0005\u009c",
    "O\u0002\u0274\u0275\u00058\u001d\u0002\u0275A\u0003\u0002\u0002\u0002",
    "\u0276\u0277\u0007C\u0002\u0002\u0277\u0278\u0005\u009cO\u0002\u0278",
    "\u0279\u0007\u00d8\u0002\u0002\u0279\u027a\u00054\u001b\u0002\u027a",
    "C\u0003\u0002\u0002\u0002\u027b\u027c\u0007B\u0002\u0002\u027c\u027d",
    "\u00058\u001d\u0002\u027dE\u0003\u0002\u0002\u0002\u027e\u027f\u0007",
    "B\u0002\u0002\u027f\u0280\u0007\u00d8\u0002\u0002\u0280\u0281\u0005",
    "4\u001b\u0002\u0281G\u0003\u0002\u0002\u0002\u0282\u0283\u0007\u0082",
    "\u0002\u0002\u0283\u028a\u0005\u009cO\u0002\u0284\u028b\u00058\u001d",
    "\u0002\u0285\u0286\u0007\u00d8\u0002\u0002\u0286\u0287\u00054\u001b",
    "\u0002\u0287\u0288\u0007J\u0002\u0002\u0288\u0289\u0007\u00d9\u0002",
    "\u0002\u0289\u028b\u0003\u0002\u0002\u0002\u028a\u0284\u0003\u0002\u0002",
    "\u0002\u028a\u0285\u0003\u0002\u0002\u0002\u028bI\u0003\u0002\u0002",
    "\u0002\u028c\u028d\u0007>\u0002\u0002\u028d\u028e\u00058\u001d\u0002",
    "\u028e\u028f\u0007\u0082\u0002\u0002\u028f\u0290\u0005\u009cO\u0002",
    "\u0290\u0291\u0007\u00d9\u0002\u0002\u0291K\u0003\u0002\u0002\u0002",
    "\u0292\u0293\u0007Q\u0002\u0002\u0293\u0295\u0007\u00d1\u0002\u0002",
    "\u0294\u0296\u0005N(\u0002\u0295\u0294\u0003\u0002\u0002\u0002\u0295",
    "\u0296\u0003\u0002\u0002\u0002\u0296\u0297\u0003\u0002\u0002\u0002\u0297",
    "\u0299\u0007\u00d9\u0002\u0002\u0298\u029a\u0005\u009aN\u0002\u0299",
    "\u0298\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002\u0002\u029a",
    "\u029b\u0003\u0002\u0002\u0002\u029b\u029d\u0007\u00d9\u0002\u0002\u029c",
    "\u029e\u0005P)\u0002\u029d\u029c\u0003\u0002\u0002\u0002\u029d\u029e",
    "\u0003\u0002\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002\u029f\u02a6",
    "\u0007\u00d2\u0002\u0002\u02a0\u02a7\u00058\u001d\u0002\u02a1\u02a2",
    "\u0007\u00d8\u0002\u0002\u02a2\u02a3\u00054\u001b\u0002\u02a3\u02a4",
    "\u0007F\u0002\u0002\u02a4\u02a5\u0007\u00d9\u0002\u0002\u02a5\u02a7",
    "\u0003\u0002\u0002\u0002\u02a6\u02a0\u0003\u0002\u0002\u0002\u02a6\u02a1",
    "\u0003\u0002\u0002\u0002\u02a7M\u0003\u0002\u0002\u0002\u02a8\u02a9",
    "\u0005\u009aN\u0002\u02a9O\u0003\u0002\u0002\u0002\u02aa\u02ab\u0005",
    "\u009aN\u0002\u02abQ\u0003\u0002\u0002\u0002\u02ac\u02ad\u0007x\u0002",
    "\u0002\u02ad\u02c5\u0005\u009cO\u0002\u02ae\u02b0\u0007\u00d5\u0002",
    "\u0002\u02af\u02b1\u0007\u00d9\u0002\u0002\u02b0\u02af\u0003\u0002\u0002",
    "\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002\u02b1\u02b5\u0003\u0002\u0002",
    "\u0002\u02b2\u02b4\u0005T+\u0002\u02b3\u02b2\u0003\u0002\u0002\u0002",
    "\u02b4\u02b7\u0003\u0002\u0002\u0002\u02b5\u02b3\u0003\u0002\u0002\u0002",
    "\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6\u02b8\u0003\u0002\u0002\u0002",
    "\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b8\u02c6\u0007\u00d6\u0002\u0002",
    "\u02b9\u02bb\u0007\u00d8\u0002\u0002\u02ba\u02bc\u0007\u00d9\u0002\u0002",
    "\u02bb\u02ba\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002",
    "\u02bc\u02c0\u0003\u0002\u0002\u0002\u02bd\u02bf\u0005T+\u0002\u02be",
    "\u02bd\u0003\u0002\u0002\u0002\u02bf\u02c2\u0003\u0002\u0002\u0002\u02c0",
    "\u02be\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1",
    "\u02c3\u0003\u0002\u0002\u0002\u02c2\u02c0\u0003\u0002\u0002\u0002\u02c3",
    "\u02c4\u0007I\u0002\u0002\u02c4\u02c6\u0007\u00d9\u0002\u0002\u02c5",
    "\u02ae\u0003\u0002\u0002\u0002\u02c5\u02b9\u0003\u0002\u0002\u0002\u02c6",
    "S\u0003\u0002\u0002\u0002\u02c7\u02c8\u00076\u0002\u0002\u02c8\u02cb",
    "\u0005\u009eP\u0002\u02c9\u02cb\u0007=\u0002\u0002\u02ca\u02c7\u0003",
    "\u0002\u0002\u0002\u02ca\u02c9\u0003\u0002\u0002\u0002\u02cb\u02cc\u0003",
    "\u0002\u0002\u0002\u02cc\u02ce\t\u0004\u0002\u0002\u02cd\u02ca\u0003",
    "\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cf\u02cd\u0003",
    "\u0002\u0002\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003",
    "\u0002\u0002\u0002\u02d1\u02d2\u00054\u001b\u0002\u02d2U\u0003\u0002",
    "\u0002\u0002\u02d3\u02d5\u00074\u0002\u0002\u02d4\u02d6\u0005\u009e",
    "P\u0002\u02d5\u02d4\u0003\u0002\u0002\u0002\u02d5\u02d6\u0003\u0002",
    "\u0002\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002\u02d7\u02d8\u0007\u00d9",
    "\u0002\u0002\u02d8W\u0003\u0002\u0002\u0002\u02d9\u02db\u0007;\u0002",
    "\u0002\u02da\u02dc\u0005\u009eP\u0002\u02db\u02da\u0003\u0002\u0002",
    "\u0002\u02db\u02dc\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003\u0002\u0002",
    "\u0002\u02dd\u02de\u0007\u00d9\u0002\u0002\u02deY\u0003\u0002\u0002",
    "\u0002\u02df\u02e1\u0007u\u0002\u0002\u02e0\u02e2\u0005\u009eP\u0002",
    "\u02e1\u02e0\u0003\u0002\u0002\u0002\u02e1\u02e2\u0003\u0002\u0002\u0002",
    "\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u02e4\u0007\u00d9\u0002\u0002",
    "\u02e4[\u0003\u0002\u0002\u0002\u02e5\u02e6\u0005\u009eP\u0002\u02e6",
    "\u02e7\u0007\u00d9\u0002\u0002\u02e7]\u0003\u0002\u0002\u0002\u02e8",
    "\u02e9\u0007\u007f\u0002\u0002\u02e9\u02ea\u0007\u00d1\u0002\u0002\u02ea",
    "\u02eb\u0005\u00dep\u0002\u02eb\u02ec\u0007\u00d2\u0002\u0002\u02ec",
    "\u02ed\u0007\u00d9\u0002\u0002\u02ed_\u0003\u0002\u0002\u0002\u02ee",
    "\u0315\u0007R\u0002\u0002\u02ef\u02f0\u0007\u00d1\u0002\u0002\u02f0",
    "\u02f1\u0005\u00e0q\u0002\u02f1\u02f3\u00070\u0002\u0002\u02f2\u02f4",
    "\u0007\u00c3\u0002\u0002\u02f3\u02f2\u0003\u0002\u0002\u0002\u02f3\u02f4",
    "\u0003\u0002\u0002\u0002\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5\u02fb",
    "\u0005\u00a0Q\u0002\u02f6\u02f8\u0007\u00a1\u0002\u0002\u02f7\u02f9",
    "\u0007\u00c3\u0002\u0002\u02f8\u02f7\u0003\u0002\u0002\u0002\u02f8\u02f9",
    "\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa\u02fc",
    "\u0005\u00e0q\u0002\u02fb\u02f6\u0003\u0002\u0002\u0002\u02fb\u02fc",
    "\u0003\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002\u0002\u0002\u02fd\u02fe",
    "\u0007\u00d2\u0002\u0002\u02fe\u0316\u0003\u0002\u0002\u0002\u02ff\u0300",
    "\u0007\u00d1\u0002\u0002\u0300\u0301\u0005\u009eP\u0002\u0301\u0302",
    "\u00070\u0002\u0002\u0302\u0308\u0005\u00a0Q\u0002\u0303\u0305\u0007",
    "\u00a1\u0002\u0002\u0304\u0306\u0007\u00c3\u0002\u0002\u0305\u0304\u0003",
    "\u0002\u0002\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306\u0307\u0003",
    "\u0002\u0002\u0002\u0307\u0309\u0005\u00e0q\u0002\u0308\u0303\u0003",
    "\u0002\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002\u0309\u030a\u0003",
    "\u0002\u0002\u0002\u030a\u030b\u0007\u00d2\u0002\u0002\u030b\u0316\u0003",
    "\u0002\u0002\u0002\u030c\u030d\u0007\u00d1\u0002\u0002\u030d\u030e\u0005",
    "\u00e0q\u0002\u030e\u030f\u00070\u0002\u0002\u030f\u0310\u0007c\u0002",
    "\u0002\u0310\u0311\u0007\u00d1\u0002\u0002\u0311\u0312\u0005\u00f6|",
    "\u0002\u0312\u0313\u0007\u00d2\u0002\u0002\u0313\u0314\u0007\u00d2\u0002",
    "\u0002\u0314\u0316\u0003\u0002\u0002\u0002\u0315\u02ef\u0003\u0002\u0002",
    "\u0002\u0315\u02ff\u0003\u0002\u0002\u0002\u0315\u030c\u0003\u0002\u0002",
    "\u0002\u0316\u031d\u0003\u0002\u0002\u0002\u0317\u031e\u00058\u001d",
    "\u0002\u0318\u0319\u0007\u00d8\u0002\u0002\u0319\u031a\u00054\u001b",
    "\u0002\u031a\u031b\u0007G\u0002\u0002\u031b\u031c\u0007\u00d9\u0002",
    "\u0002\u031c\u031e\u0003\u0002\u0002\u0002\u031d\u0317\u0003\u0002\u0002",
    "\u0002\u031d\u0318\u0003\u0002\u0002\u0002\u031ea\u0003\u0002\u0002",
    "\u0002\u031f\u0320\u0007{\u0002\u0002\u0320\u0330\u0005<\u001f\u0002",
    "\u0321\u0323\u0005d3\u0002\u0322\u0321\u0003\u0002\u0002\u0002\u0323",
    "\u0324\u0003\u0002\u0002\u0002\u0324\u0322\u0003\u0002\u0002\u0002\u0324",
    "\u0325\u0003\u0002\u0002\u0002\u0325\u0327\u0003\u0002\u0002\u0002\u0326",
    "\u0328\u0005f4\u0002\u0327\u0326\u0003\u0002\u0002\u0002\u0327\u0328",
    "\u0003\u0002\u0002\u0002\u0328\u0331\u0003\u0002\u0002\u0002\u0329\u032b",
    "\u0005d3\u0002\u032a\u0329\u0003\u0002\u0002\u0002\u032b\u032e\u0003",
    "\u0002\u0002\u0002\u032c\u032a\u0003\u0002\u0002\u0002\u032c\u032d\u0003",
    "\u0002\u0002\u0002\u032d\u032f\u0003\u0002\u0002\u0002\u032e\u032c\u0003",
    "\u0002\u0002\u0002\u032f\u0331\u0005f4\u0002\u0330\u0322\u0003\u0002",
    "\u0002\u0002\u0330\u032c\u0003\u0002\u0002\u0002\u0331c\u0003\u0002",
    "\u0002\u0002\u0332\u0333\u00077\u0002\u0002\u0333\u0334\u0007\u00d1",
    "\u0002\u0002\u0334\u0339\u0005\u00b8]\u0002\u0335\u0336\u0007\u00c4",
    "\u0002\u0002\u0336\u0338\u0005\u00b8]\u0002\u0337\u0335\u0003\u0002",
    "\u0002\u0002\u0338\u033b\u0003\u0002\u0002\u0002\u0339\u0337\u0003\u0002",
    "\u0002\u0002\u0339\u033a\u0003\u0002\u0002\u0002\u033a\u033c\u0003\u0002",
    "\u0002\u0002\u033b\u0339\u0003\u0002\u0002\u0002\u033c\u033d\u0007\u00dd",
    "\u0002\u0002\u033d\u033e\u0007\u00d2\u0002\u0002\u033e\u033f\u0005<",
    "\u001f\u0002\u033fe\u0003\u0002\u0002\u0002\u0340\u0341\u0007O\u0002",
    "\u0002\u0341\u0342\u0005<\u001f\u0002\u0342g\u0003\u0002\u0002\u0002",
    "\u0343\u0344\u0007y\u0002\u0002\u0344\u0345\u0005\u009eP\u0002\u0345",
    "\u0346\u0007\u00d9\u0002\u0002\u0346i\u0003\u0002\u0002\u0002\u0347",
    "\u0348\u0007U\u0002\u0002\u0348\u0349\u0005\u00fc\u007f\u0002\u0349",
    "\u034a\u0007\u00d9\u0002\u0002\u034ak\u0003\u0002\u0002\u0002\u034b",
    "\u034c\u0007<\u0002\u0002\u034c\u034d\u0007\u00d1\u0002\u0002\u034d",
    "\u034e\u0005p9\u0002\u034e\u0355\u0007\u00d2\u0002\u0002\u034f\u0356",
    "\u00058\u001d\u0002\u0350\u0351\u0007\u00d8\u0002\u0002\u0351\u0352",
    "\u00054\u001b\u0002\u0352\u0353\u0007E\u0002\u0002\u0353\u0354\u0007",
    "\u00d9\u0002\u0002\u0354\u0356\u0003\u0002\u0002\u0002\u0355\u034f\u0003",
    "\u0002\u0002\u0002\u0355\u0350\u0003\u0002\u0002\u0002\u0356m\u0003",
    "\u0002\u0002\u0002\u0357\u0359\u0005\u0004\u0003\u0002\u0358\u0357\u0003",
    "\u0002\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002\u035a\u0358\u0003",
    "\u0002\u0002\u0002\u035a\u035b\u0003\u0002\u0002\u0002\u035bo\u0003",
    "\u0002\u0002\u0002\u035c\u0361\u0005\u0096L\u0002\u035d\u035e\u0007",
    "\u00d7\u0002\u0002\u035e\u0360\u0005\u0096L\u0002\u035f\u035d\u0003",
    "\u0002\u0002\u0002\u0360\u0363\u0003\u0002\u0002\u0002\u0361\u035f\u0003",
    "\u0002\u0002\u0002\u0361\u0362\u0003\u0002\u0002\u0002\u0362q\u0003",
    "\u0002\u0002\u0002\u0363\u0361\u0003\u0002\u0002\u0002\u0364\u0366\u0005",
    "t;\u0002\u0365\u0364\u0003\u0002\u0002\u0002\u0365\u0366\u0003\u0002",
    "\u0002\u0002\u0366\u036b\u0003\u0002\u0002\u0002\u0367\u0368\u0007\u00d7",
    "\u0002\u0002\u0368\u036a\u0005t;\u0002\u0369\u0367\u0003\u0002\u0002",
    "\u0002\u036a\u036d\u0003\u0002\u0002\u0002\u036b\u0369\u0003\u0002\u0002",
    "\u0002\u036b\u036c\u0003\u0002\u0002\u0002\u036c\u036f\u0003\u0002\u0002",
    "\u0002\u036d\u036b\u0003\u0002\u0002\u0002\u036e\u0370\u0007\u00d7\u0002",
    "\u0002\u036f\u036e\u0003\u0002\u0002\u0002\u036f\u0370\u0003\u0002\u0002",
    "\u0002\u0370s\u0003\u0002\u0002\u0002\u0371\u0373\u0005.\u0018\u0002",
    "\u0372\u0371\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002\u0002",
    "\u0373\u0375\u0003\u0002\u0002\u0002\u0374\u0376\u0005\u00fe\u0080\u0002",
    "\u0375\u0374\u0003\u0002\u0002\u0002\u0375\u0376\u0003\u0002\u0002\u0002",
    "\u0376\u0378\u0003\u0002\u0002\u0002\u0377\u0379\u0007\u00d0\u0002\u0002",
    "\u0378\u0377\u0003\u0002\u0002\u0002\u0378\u0379\u0003\u0002\u0002\u0002",
    "\u0379\u037b\u0003\u0002\u0002\u0002\u037a\u037c\u0005v<\u0002\u037b",
    "\u037a\u0003\u0002\u0002\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037c",
    "\u037e\u0003\u0002\u0002\u0002\u037d\u037f\u0007\u00c3\u0002\u0002\u037e",
    "\u037d\u0003\u0002\u0002\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f",
    "\u0381\u0003\u0002\u0002\u0002\u0380\u0382\u0007\u00c0\u0002\u0002\u0381",
    "\u0380\u0003\u0002\u0002\u0002\u0381\u0382\u0003\u0002\u0002\u0002\u0382",
    "\u0383\u0003\u0002\u0002\u0002\u0383\u0384\u0005\u0094K\u0002\u0384",
    "u\u0003\u0002\u0002\u0002\u0385\u0386\b<\u0001\u0002\u0386\u038a\u0005",
    "\u00b8]\u0002\u0387\u038a\u00075\u0002\u0002\u0388\u038a\u0005\u0104",
    "\u0083\u0002\u0389\u0385\u0003\u0002\u0002\u0002\u0389\u0387\u0003\u0002",
    "\u0002\u0002\u0389\u0388\u0003\u0002\u0002\u0002\u038a\u0390\u0003\u0002",
    "\u0002\u0002\u038b\u038c\f\u0003\u0002\u0002\u038c\u038d\u0007\u00c4",
    "\u0002\u0002\u038d\u038f\u0005v<\u0004\u038e\u038b\u0003\u0002\u0002",
    "\u0002\u038f\u0392\u0003\u0002\u0002\u0002\u0390\u038e\u0003\u0002\u0002",
    "\u0002\u0390\u0391\u0003\u0002\u0002\u0002\u0391w\u0003\u0002\u0002",
    "\u0002\u0392\u0390\u0003\u0002\u0002\u0002\u0393\u0394\u0007T\u0002",
    "\u0002\u0394\u0399\u0005z>\u0002\u0395\u0396\u0007\u00d7\u0002\u0002",
    "\u0396\u0398\u0005z>\u0002\u0397\u0395\u0003\u0002\u0002\u0002\u0398",
    "\u039b\u0003\u0002\u0002\u0002\u0399\u0397\u0003\u0002\u0002\u0002\u0399",
    "\u039a\u0003\u0002\u0002\u0002\u039a\u039c\u0003\u0002\u0002\u0002\u039b",
    "\u0399\u0003\u0002\u0002\u0002\u039c\u039d\u0007\u00d9\u0002\u0002\u039d",
    "y\u0003\u0002\u0002\u0002\u039e\u03a7\u0007\u00dd\u0002\u0002\u039f",
    "\u03a0\u0007\u00ce\u0002\u0002\u03a0\u03a7\u0005\u00e0q\u0002\u03a1",
    "\u03a2\u0007\u00ce\u0002\u0002\u03a2\u03a3\u0007\u00d5\u0002\u0002\u03a3",
    "\u03a4\u0005\u009eP\u0002\u03a4\u03a5\u0007\u00d6\u0002\u0002\u03a5",
    "\u03a7\u0003\u0002\u0002\u0002\u03a6\u039e\u0003\u0002\u0002\u0002\u03a6",
    "\u039f\u0003\u0002\u0002\u0002\u03a6\u03a1\u0003\u0002\u0002\u0002\u03a7",
    "{\u0003\u0002\u0002\u0002\u03a8\u03a9\u0007A\u0002\u0002\u03a9\u03aa",
    "\u0005\u009aN\u0002\u03aa\u03ab\u0007\u00d9\u0002\u0002\u03ab}\u0003",
    "\u0002\u0002\u0002\u03ac\u03ad\u0007v\u0002\u0002\u03ad\u03b2\u0005",
    "\u0094K\u0002\u03ae\u03af\u0007\u00d7\u0002\u0002\u03af\u03b1\u0005",
    "\u0094K\u0002\u03b0\u03ae\u0003\u0002\u0002\u0002\u03b1\u03b4\u0003",
    "\u0002\u0002\u0002\u03b2\u03b0\u0003\u0002\u0002\u0002\u03b2\u03b3\u0003",
    "\u0002\u0002\u0002\u03b3\u03b5\u0003\u0002\u0002\u0002\u03b4\u03b2\u0003",
    "\u0002\u0002\u0002\u03b5\u03b6\u0007\u00d9\u0002\u0002\u03b6\u007f\u0003",
    "\u0002\u0002\u0002\u03b7\u03b9\u0005.\u0018\u0002\u03b8\u03b7\u0003",
    "\u0002\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u03eb\u0003",
    "\u0002\u0002\u0002\u03ba\u03bc\u0005\u0090I\u0002\u03bb\u03bd\u0005",
    "v<\u0002\u03bc\u03bb\u0003\u0002\u0002\u0002\u03bc\u03bd\u0003\u0002",
    "\u0002\u0002\u03bd\u03be\u0003\u0002\u0002\u0002\u03be\u03c3\u0005\u0094",
    "K\u0002\u03bf\u03c0\u0007\u00d7\u0002\u0002\u03c0\u03c2\u0005\u0094",
    "K\u0002\u03c1\u03bf\u0003\u0002\u0002\u0002\u03c2\u03c5\u0003\u0002",
    "\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002\u03c3\u03c4\u0003\u0002",
    "\u0002\u0002\u03c4\u03c6\u0003\u0002\u0002\u0002\u03c5\u03c3\u0003\u0002",
    "\u0002\u0002\u03c6\u03c7\u0007\u00d9\u0002\u0002\u03c7\u03ec\u0003\u0002",
    "\u0002\u0002\u03c8\u03ca\u0005\u0092J\u0002\u03c9\u03c8\u0003\u0002",
    "\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002\u03ca\u03e9\u0003\u0002",
    "\u0002\u0002\u03cb\u03cd\u0007:\u0002\u0002\u03cc\u03ce\u0005v<\u0002",
    "\u03cd\u03cc\u0003\u0002\u0002\u0002\u03cd\u03ce\u0003\u0002\u0002\u0002",
    "\u03ce\u03cf\u0003\u0002\u0002\u0002\u03cf\u03d4\u0005\u0096L\u0002",
    "\u03d0\u03d1\u0007\u00d7\u0002\u0002\u03d1\u03d3\u0005\u0096L\u0002",
    "\u03d2\u03d0\u0003\u0002\u0002\u0002\u03d3\u03d6\u0003\u0002\u0002\u0002",
    "\u03d4\u03d2\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002\u0002\u0002",
    "\u03d5\u03d7\u0003\u0002\u0002\u0002\u03d6\u03d4\u0003\u0002\u0002\u0002",
    "\u03d7\u03d8\u0007\u00d9\u0002\u0002\u03d8\u03ea\u0003\u0002\u0002\u0002",
    "\u03d9\u03db\u0007S\u0002\u0002\u03da\u03dc\u0007\u00c3\u0002\u0002",
    "\u03db\u03da\u0003\u0002\u0002\u0002\u03db\u03dc\u0003\u0002\u0002\u0002",
    "\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03df\u0005\u00fc\u007f\u0002",
    "\u03de\u03e0\u0005\"\u0012\u0002\u03df\u03de\u0003\u0002\u0002\u0002",
    "\u03df\u03e0\u0003\u0002\u0002\u0002\u03e0\u03e1\u0003\u0002\u0002\u0002",
    "\u03e1\u03e2\u0007\u00d1\u0002\u0002\u03e2\u03e3\u0005r:\u0002\u03e3",
    "\u03e5\u0007\u00d2\u0002\u0002\u03e4\u03e6\u0005\u008cG\u0002\u03e5",
    "\u03e4\u0003\u0002\u0002\u0002\u03e5\u03e6\u0003\u0002\u0002\u0002\u03e6",
    "\u03e7\u0003\u0002\u0002\u0002\u03e7\u03e8\u0005\u008eH\u0002\u03e8",
    "\u03ea\u0003\u0002\u0002\u0002\u03e9\u03cb\u0003\u0002\u0002\u0002\u03e9",
    "\u03d9\u0003\u0002\u0002\u0002\u03ea\u03ec\u0003\u0002\u0002\u0002\u03eb",
    "\u03ba\u0003\u0002\u0002\u0002\u03eb\u03c9\u0003\u0002\u0002\u0002\u03ec",
    "\u03f2\u0003\u0002\u0002\u0002\u03ed\u03ee\u0007\u0080\u0002\u0002\u03ee",
    "\u03ef\u0005\u00c6d\u0002\u03ef\u03f0\u0005\u0082B\u0002\u03f0\u03f2",
    "\u0003\u0002\u0002\u0002\u03f1\u03b8\u0003\u0002\u0002\u0002\u03f1\u03ed",
    "\u0003\u0002\u0002\u0002\u03f2\u0081\u0003\u0002\u0002\u0002\u03f3\u03fd",
    "\u0007\u00d9\u0002\u0002\u03f4\u03f8\u0007\u00d5\u0002\u0002\u03f5\u03f7",
    "\u0005\u0084C\u0002\u03f6\u03f5\u0003\u0002\u0002\u0002\u03f7\u03fa",
    "\u0003\u0002\u0002\u0002\u03f8\u03f6\u0003\u0002\u0002\u0002\u03f8\u03f9",
    "\u0003\u0002\u0002\u0002\u03f9\u03fb\u0003\u0002\u0002\u0002\u03fa\u03f8",
    "\u0003\u0002\u0002\u0002\u03fb\u03fd\u0007\u00d6\u0002\u0002\u03fc\u03f3",
    "\u0003\u0002\u0002\u0002\u03fc\u03f4\u0003\u0002\u0002\u0002\u03fd\u0083",
    "\u0003\u0002\u0002\u0002\u03fe\u0401\u0005\u0086D\u0002\u03ff\u0401",
    "\u0005\u0088E\u0002\u0400\u03fe\u0003\u0002\u0002\u0002\u0400\u03ff",
    "\u0003\u0002\u0002\u0002\u0401\u0085\u0003\u0002\u0002\u0002\u0402\u0403",
    "\u0005\u00c0a\u0002\u0403\u0404\u0007\u00bd\u0002\u0002\u0404\u0405",
    "\u0005\u00fc\u007f\u0002\u0405\u0406\u0007\\\u0002\u0002\u0406\u0407",
    "\u0005\u00c6d\u0002\u0407\u0408\u0007\u00d9\u0002\u0002\u0408\u0087",
    "\u0003\u0002\u0002\u0002\u0409\u040a\u0005\u008aF\u0002\u040a\u0410",
    "\u00070\u0002\u0002\u040b\u0411\u0005\u00fe\u0080\u0002\u040c\u040e",
    "\u0005\u00fe\u0080\u0002\u040d\u040c\u0003\u0002\u0002\u0002\u040d\u040e",
    "\u0003\u0002\u0002\u0002\u040e\u040f\u0003\u0002\u0002\u0002\u040f\u0411",
    "\u0005\u00fc\u007f\u0002\u0410\u040b\u0003\u0002\u0002\u0002\u0410\u040d",
    "\u0003\u0002\u0002\u0002\u0411\u0412\u0003\u0002\u0002\u0002\u0412\u0413",
    "\u0007\u00d9\u0002\u0002\u0413\u0089\u0003\u0002\u0002\u0002\u0414\u0415",
    "\u0005\u00c0a\u0002\u0415\u0416\u0007\u00bd\u0002\u0002\u0416\u0418",
    "\u0003\u0002\u0002\u0002\u0417\u0414\u0003\u0002\u0002\u0002\u0417\u0418",
    "\u0003\u0002\u0002\u0002\u0418\u0419\u0003\u0002\u0002\u0002\u0419\u041a",
    "\u0005\u00fc\u007f\u0002\u041a\u008b\u0003\u0002\u0002\u0002\u041b\u041c",
    "\u0007\u00d8\u0002\u0002\u041c\u041e\u0005\u00fc\u007f\u0002\u041d\u041f",
    "\u0005\u00c8e\u0002\u041e\u041d\u0003\u0002\u0002\u0002\u041e\u041f",
    "\u0003\u0002\u0002\u0002\u041f\u008d\u0003\u0002\u0002\u0002\u0420\u0423",
    "\u0007\u00d9\u0002\u0002\u0421\u0423\u0005<\u001f\u0002\u0422\u0420",
    "\u0003\u0002\u0002\u0002\u0422\u0421\u0003\u0002\u0002\u0002\u0423\u008f",
    "\u0003\u0002\u0002\u0002\u0424\u0427\u0005\u0092J\u0002\u0425\u0427",
    "\u0007\u0081\u0002\u0002\u0426\u0424\u0003\u0002\u0002\u0002\u0426\u0425",
    "\u0003\u0002\u0002\u0002\u0427\u0091\u0003\u0002\u0002\u0002\u0428\u042a",
    "\u0005\u00fe\u0080\u0002\u0429\u0428\u0003\u0002\u0002\u0002\u042a\u042b",
    "\u0003\u0002\u0002\u0002\u042b\u0429\u0003\u0002\u0002\u0002\u042b\u042c",
    "\u0003\u0002\u0002\u0002\u042c\u0093\u0003\u0002\u0002\u0002\u042d\u0430",
    "\u0007\u00dd\u0002\u0002\u042e\u042f\u0007\u00da\u0002\u0002\u042f\u0431",
    "\u0005\u00ceh\u0002\u0430\u042e\u0003\u0002\u0002\u0002\u0430\u0431",
    "\u0003\u0002\u0002\u0002\u0431\u0095\u0003\u0002\u0002\u0002\u0432\u0433",
    "\u0005\u00fc\u007f\u0002\u0433\u0434\u0007\u00da\u0002\u0002\u0434\u0435",
    "\u0005\u00ceh\u0002\u0435\u0097\u0003\u0002\u0002\u0002\u0436\u0438",
    "\u0005.\u0018\u0002\u0437\u0436\u0003\u0002\u0002\u0002\u0437\u0438",
    "\u0003\u0002\u0002\u0002\u0438\u0439\u0003\u0002\u0002\u0002\u0439\u043a",
    "\u0007:\u0002\u0002\u043a\u043f\u0005\u0096L\u0002\u043b\u043c\u0007",
    "\u00d7\u0002\u0002\u043c\u043e\u0005\u0096L\u0002\u043d\u043b\u0003",
    "\u0002\u0002\u0002\u043e\u0441\u0003\u0002\u0002\u0002\u043f\u043d\u0003",
    "\u0002\u0002\u0002\u043f\u0440\u0003\u0002\u0002\u0002\u0440\u0442\u0003",
    "\u0002\u0002\u0002\u0441\u043f\u0003\u0002\u0002\u0002\u0442\u0443\u0007",
    "\u00d9\u0002\u0002\u0443\u0099\u0003\u0002\u0002\u0002\u0444\u0449\u0005",
    "\u009eP\u0002\u0445\u0446\u0007\u00d7\u0002\u0002\u0446\u0448\u0005",
    "\u009eP\u0002\u0447\u0445\u0003\u0002\u0002\u0002\u0448\u044b\u0003",
    "\u0002\u0002\u0002\u0449\u0447\u0003\u0002\u0002\u0002\u0449\u044a\u0003",
    "\u0002\u0002\u0002\u044a\u009b\u0003\u0002\u0002\u0002\u044b\u0449\u0003",
    "\u0002\u0002\u0002\u044c\u044f\u0007\u00d1\u0002\u0002\u044d\u0450\u0005",
    "\u009eP\u0002\u044e\u0450\u0005\u00aeX\u0002\u044f\u044d\u0003\u0002",
    "\u0002\u0002\u044f\u044e\u0003\u0002\u0002\u0002\u0450\u0451\u0003\u0002",
    "\u0002\u0002\u0451\u0452\u0007\u00d2\u0002\u0002\u0452\u009d\u0003\u0002",
    "\u0002\u0002\u0453\u0454\bP\u0001\u0002\u0454\u0455\u00079\u0002\u0002",
    "\u0455\u04aa\u0005\u009eP1\u0456\u04aa\u0005\u00aaV\u0002\u0457\u0458",
    "\u0005\u00d8m\u0002\u0458\u0459\u0007\u00d3\u0002\u0002\u0459\u045a",
    "\u0005\u009eP\u0002\u045a\u045b\u0007\u00d4\u0002\u0002\u045b\u04aa",
    "\u0003\u0002\u0002\u0002\u045c\u045d\u0007\u00d1\u0002\u0002\u045d\u045e",
    "\u0005\u0106\u0084\u0002\u045e\u045f\u0007\u00d2\u0002\u0002\u045f\u0460",
    "\u0005\u009eP.\u0460\u04aa\u0003\u0002\u0002\u0002\u0461\u0462\t\u0005",
    "\u0002\u0002\u0462\u04aa\u0005\u009eP-\u0463\u0464\t\u0006\u0002\u0002",
    "\u0464\u04aa\u0005\u009eP,\u0465\u0466\t\u0007\u0002\u0002\u0466\u04aa",
    "\u0005\u00e0q\u0002\u0467\u0468\u0005\u00e0q\u0002\u0468\u0469\t\u0007",
    "\u0002\u0002\u0469\u04aa\u0003\u0002\u0002\u0002\u046a\u046b\u0007n",
    "\u0002\u0002\u046b\u04aa\u0005\u009eP)\u046c\u04aa\u0005\u00e0q\u0002",
    "\u046d\u04aa\u0005\u00d0i\u0002\u046e\u04aa\u0005\u00dan\u0002\u046f",
    "\u04aa\u0007\u00de\u0002\u0002\u0470\u04aa\u0007\u00e4\u0002\u0002\u0471",
    "\u04aa\u0005\u009cO\u0002\u0472\u04aa\u0005\u00a2R\u0002\u0473\u04aa",
    "\u0007\u0083\u0002\u0002\u0474\u0475\u0007c\u0002\u0002\u0475\u0476",
    "\u0007\u00d1\u0002\u0002\u0476\u0477\u0005\u00f6|\u0002\u0477\u0478",
    "\u0007\u00d2\u0002\u0002\u0478\u0479\u0007\u00da\u0002\u0002\u0479\u047a",
    "\u0005\u009eP \u047a\u04aa\u0003\u0002\u0002\u0002\u047b\u047c\u0007",
    "b\u0002\u0002\u047c\u047d\u0007\u00d1\u0002\u0002\u047d\u047e\u0005",
    "\u00dep\u0002\u047e\u047f\u0007\u00d2\u0002\u0002\u047f\u04aa\u0003",
    "\u0002\u0002\u0002\u0480\u0481\u0007D\u0002\u0002\u0481\u0482\u0007",
    "\u00d1\u0002\u0002\u0482\u0483\u0005\u00e0q\u0002\u0483\u0484\u0007",
    "\u00d2\u0002\u0002\u0484\u04aa\u0003\u0002\u0002\u0002\u0485\u0486\u0007",
    "K\u0002\u0002\u0486\u0487\u0007\u00d1\u0002\u0002\u0487\u0488\u0005",
    "\u009eP\u0002\u0488\u0489\u0007\u00d2\u0002\u0002\u0489\u04aa\u0003",
    "\u0002\u0002\u0002\u048a\u048e\u0007L\u0002\u0002\u048b\u048c\u0007",
    "\u00d1\u0002\u0002\u048c\u048f\u0007\u00d2\u0002\u0002\u048d\u048f\u0005",
    "\u009cO\u0002\u048e\u048b\u0003\u0002\u0002\u0002\u048e\u048d\u0003",
    "\u0002\u0002\u0002\u048e\u048f\u0003\u0002\u0002\u0002\u048f\u04aa\u0003",
    "\u0002\u0002\u0002\u0490\u0491\t\b\u0002\u0002\u0491\u04aa\u0005\u009e",
    "P\u001b\u0492\u0493\t\t\u0002\u0002\u0493\u04aa\u0005\u009eP\u001a\u0494",
    "\u04aa\u0005\u00a4S\u0002\u0495\u04aa\u0005\u00a6T\u0002\u0496\u0497",
    "\u0007y\u0002\u0002\u0497\u04aa\u0005\u009eP\b\u0498\u0499\u0005\u00a0",
    "Q\u0002\u0499\u049b\u0005\u00acW\u0002\u049a\u049c\u0005.\u0018\u0002",
    "\u049b\u049a\u0003\u0002\u0002\u0002\u049b\u049c\u0003\u0002\u0002\u0002",
    "\u049c\u049d\u0003\u0002\u0002\u0002\u049d\u049e\u0005\u009eP\u0007",
    "\u049e\u04aa\u0003\u0002\u0002\u0002\u049f\u04a0\u0005\u00a0Q\u0002",
    "\u04a0\u04a2\u0007\u00da\u0002\u0002\u04a1\u04a3\u0005.\u0018\u0002",
    "\u04a2\u04a1\u0003\u0002\u0002\u0002\u04a2\u04a3\u0003\u0002\u0002\u0002",
    "\u04a3\u04a4\u0003\u0002\u0002\u0002\u04a4\u04a7\u0007\u00c3\u0002\u0002",
    "\u04a5\u04a8\u0005\u00e0q\u0002\u04a6\u04a8\u0005\u00aaV\u0002\u04a7",
    "\u04a5\u0003\u0002\u0002\u0002\u04a7\u04a6\u0003\u0002\u0002\u0002\u04a8",
    "\u04aa\u0003\u0002\u0002\u0002\u04a9\u0453\u0003\u0002\u0002\u0002\u04a9",
    "\u0456\u0003\u0002\u0002\u0002\u04a9\u0457\u0003\u0002\u0002\u0002\u04a9",
    "\u045c\u0003\u0002\u0002\u0002\u04a9\u0461\u0003\u0002\u0002\u0002\u04a9",
    "\u0463\u0003\u0002\u0002\u0002\u04a9\u0465\u0003\u0002\u0002\u0002\u04a9",
    "\u0467\u0003\u0002\u0002\u0002\u04a9\u046a\u0003\u0002\u0002\u0002\u04a9",
    "\u046c\u0003\u0002\u0002\u0002\u04a9\u046d\u0003\u0002\u0002\u0002\u04a9",
    "\u046e\u0003\u0002\u0002\u0002\u04a9\u046f\u0003\u0002\u0002\u0002\u04a9",
    "\u0470\u0003\u0002\u0002\u0002\u04a9\u0471\u0003\u0002\u0002\u0002\u04a9",
    "\u0472\u0003\u0002\u0002\u0002\u04a9\u0473\u0003\u0002\u0002\u0002\u04a9",
    "\u0474\u0003\u0002\u0002\u0002\u04a9\u047b\u0003\u0002\u0002\u0002\u04a9",
    "\u0480\u0003\u0002\u0002\u0002\u04a9\u0485\u0003\u0002\u0002\u0002\u04a9",
    "\u048a\u0003\u0002\u0002\u0002\u04a9\u0490\u0003\u0002\u0002\u0002\u04a9",
    "\u0492\u0003\u0002\u0002\u0002\u04a9\u0494\u0003\u0002\u0002\u0002\u04a9",
    "\u0495\u0003\u0002\u0002\u0002\u04a9\u0496\u0003\u0002\u0002\u0002\u04a9",
    "\u0498\u0003\u0002\u0002\u0002\u04a9\u049f\u0003\u0002\u0002\u0002\u04aa",
    "\u04e7\u0003\u0002\u0002\u0002\u04ab\u04ac\f\u0017\u0002\u0002\u04ac",
    "\u04ad\u0007\u00ad\u0002\u0002\u04ad\u04e6\u0005\u009eP\u0017\u04ae",
    "\u04af\f\u0015\u0002\u0002\u04af\u04b0\t\n\u0002\u0002\u04b0\u04e6\u0005",
    "\u009eP\u0016\u04b1\u04b2\f\u0014\u0002\u0002\u04b2\u04b3\t\u000b\u0002",
    "\u0002\u04b3\u04e6\u0005\u009eP\u0015\u04b4\u04b5\f\u0013\u0002\u0002",
    "\u04b5\u04b6\t\f\u0002\u0002\u04b6\u04e6\u0005\u009eP\u0014\u04b7\u04b8",
    "\f\u0012\u0002\u0002\u04b8\u04b9\t\r\u0002\u0002\u04b9\u04e6\u0005\u009e",
    "P\u0013\u04ba\u04bb\f\u0011\u0002\u0002\u04bb\u04bc\t\u000e\u0002\u0002",
    "\u04bc\u04e6\u0005\u009eP\u0012\u04bd\u04be\f\u0010\u0002\u0002\u04be",
    "\u04bf\u0007\u00c3\u0002\u0002\u04bf\u04e6\u0005\u009eP\u0011\u04c0",
    "\u04c1\f\u000f\u0002\u0002\u04c1\u04c2\u0007\u00c6\u0002\u0002\u04c2",
    "\u04e6\u0005\u009eP\u0010\u04c3\u04c4\f\u000e\u0002\u0002\u04c4\u04c5",
    "\u0007\u00c4\u0002\u0002\u04c5\u04e6\u0005\u009eP\u000f\u04c6\u04c7",
    "\f\r\u0002\u0002\u04c7\u04c8\u0007\u00b8\u0002\u0002\u04c8\u04e6\u0005",
    "\u009eP\u000e\u04c9\u04ca\f\f\u0002\u0002\u04ca\u04cb\u0007\u00b7\u0002",
    "\u0002\u04cb\u04e6\u0005\u009eP\r\u04cc\u04cd\f\u000b\u0002\u0002\u04cd",
    "\u04cf\u0007\u00d0\u0002\u0002\u04ce\u04d0\u0005\u009eP\u0002\u04cf",
    "\u04ce\u0003\u0002\u0002\u0002\u04cf\u04d0\u0003\u0002\u0002\u0002\u04d0",
    "\u04d1\u0003\u0002\u0002\u0002\u04d1\u04d2\u0007\u00d8\u0002\u0002\u04d2",
    "\u04e6\u0005\u009eP\f\u04d3\u04d4\f\n\u0002\u0002\u04d4\u04d5\u0007",
    "\u00b9\u0002\u0002\u04d5\u04e6\u0005\u009eP\u000b\u04d6\u04d7\f\t\u0002",
    "\u0002\u04d7\u04d8\u0007\u009e\u0002\u0002\u04d8\u04e6\u0005\u009eP",
    "\n\u04d9\u04da\f\u0005\u0002\u0002\u04da\u04db\u0007d\u0002\u0002\u04db",
    "\u04e6\u0005\u009eP\u0006\u04dc\u04dd\f\u0004\u0002\u0002\u04dd\u04de",
    "\u0007f\u0002\u0002\u04de\u04e6\u0005\u009eP\u0005\u04df\u04e0\f\u0003",
    "\u0002\u0002\u04e0\u04e1\u0007e\u0002\u0002\u04e1\u04e6\u0005\u009e",
    "P\u0004\u04e2\u04e3\f\u0016\u0002\u0002\u04e3\u04e4\u0007[\u0002\u0002",
    "\u04e4\u04e6\u0005\u00ba^\u0002\u04e5\u04ab\u0003\u0002\u0002\u0002",
    "\u04e5\u04ae\u0003\u0002\u0002\u0002\u04e5\u04b1\u0003\u0002\u0002\u0002",
    "\u04e5\u04b4\u0003\u0002\u0002\u0002\u04e5\u04b7\u0003\u0002\u0002\u0002",
    "\u04e5\u04ba\u0003\u0002\u0002\u0002\u04e5\u04bd\u0003\u0002\u0002\u0002",
    "\u04e5\u04c0\u0003\u0002\u0002\u0002\u04e5\u04c3\u0003\u0002\u0002\u0002",
    "\u04e5\u04c6\u0003\u0002\u0002\u0002\u04e5\u04c9\u0003\u0002\u0002\u0002",
    "\u04e5\u04cc\u0003\u0002\u0002\u0002\u04e5\u04d3\u0003\u0002\u0002\u0002",
    "\u04e5\u04d6\u0003\u0002\u0002\u0002\u04e5\u04d9\u0003\u0002\u0002\u0002",
    "\u04e5\u04dc\u0003\u0002\u0002\u0002\u04e5\u04df\u0003\u0002\u0002\u0002",
    "\u04e5\u04e2\u0003\u0002\u0002\u0002\u04e6\u04e9\u0003\u0002\u0002\u0002",
    "\u04e7\u04e5\u0003\u0002\u0002\u0002\u04e7\u04e8\u0003\u0002\u0002\u0002",
    "\u04e8\u009f\u0003\u0002\u0002\u0002\u04e9\u04e7\u0003\u0002\u0002\u0002",
    "\u04ea\u04ed\u0005\u00e0q\u0002\u04eb\u04ed\u0005\u00a2R\u0002\u04ec",
    "\u04ea\u0003\u0002\u0002\u0002\u04ec\u04eb\u0003\u0002\u0002\u0002\u04ed",
    "\u00a1\u0003\u0002\u0002\u0002\u04ee\u04ef\u0007/\u0002\u0002\u04ef",
    "\u04f1\u0007\u00d1\u0002\u0002\u04f0\u04f2\u0005\u00b0Y\u0002\u04f1",
    "\u04f0\u0003\u0002\u0002\u0002\u04f1\u04f2\u0003\u0002\u0002\u0002\u04f2",
    "\u04f3\u0003\u0002\u0002\u0002\u04f3\u04fa\u0007\u00d2\u0002\u0002\u04f4",
    "\u04f6\u0007\u00d3\u0002\u0002\u04f5\u04f7\u0005\u00b0Y\u0002\u04f6",
    "\u04f5\u0003\u0002\u0002\u0002\u04f6\u04f7\u0003\u0002\u0002\u0002\u04f7",
    "\u04f8\u0003\u0002\u0002\u0002\u04f8\u04fa\u0007\u00d4\u0002\u0002\u04f9",
    "\u04ee\u0003\u0002\u0002\u0002\u04f9\u04f4\u0003\u0002\u0002\u0002\u04fa",
    "\u04ff\u0003\u0002\u0002\u0002\u04fb\u04fc\u0007\u00d3\u0002\u0002\u04fc",
    "\u04fd\u0005\u009eP\u0002\u04fd\u04fe\u0007\u00d4\u0002\u0002\u04fe",
    "\u0500\u0003\u0002\u0002\u0002\u04ff\u04fb\u0003\u0002\u0002\u0002\u04ff",
    "\u0500\u0003\u0002\u0002\u0002\u0500\u00a3\u0003\u0002\u0002\u0002\u0501",
    "\u0503\u0007v\u0002\u0002\u0502\u0501\u0003\u0002\u0002\u0002\u0502",
    "\u0503\u0003\u0002\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504",
    "\u0506\u0007S\u0002\u0002\u0505\u0507\u0007\u00c3\u0002\u0002\u0506",
    "\u0505\u0003\u0002\u0002\u0002\u0506\u0507\u0003\u0002\u0002\u0002\u0507",
    "\u0508\u0003\u0002\u0002\u0002\u0508\u0509\u0007\u00d1\u0002\u0002\u0509",
    "\u050a\u0005r:\u0002\u050a\u050c\u0007\u00d2\u0002\u0002\u050b\u050d",
    "\u0005\u00b4[\u0002\u050c\u050b\u0003\u0002\u0002\u0002\u050c\u050d",
    "\u0003\u0002\u0002\u0002\u050d\u0510\u0003\u0002\u0002\u0002\u050e\u050f",
    "\u0007\u00d8\u0002\u0002\u050f\u0511\u0005v<\u0002\u0510\u050e\u0003",
    "\u0002\u0002\u0002\u0510\u0511\u0003\u0002\u0002\u0002\u0511\u0512\u0003",
    "\u0002\u0002\u0002\u0512\u0513\u0005<\u001f\u0002\u0513\u051c\u0003",
    "\u0002\u0002\u0002\u0514\u0515\u0007\u0085\u0002\u0002\u0515\u0516\u0007",
    "\u00d1\u0002\u0002\u0516\u0517\u0005r:\u0002\u0517\u0518\u0007\u00d2",
    "\u0002\u0002\u0518\u0519\u0007\u00a1\u0002\u0002\u0519\u051a\u0005\u009e",
    "P\u0002\u051a\u051c\u0003\u0002\u0002\u0002\u051b\u0502\u0003\u0002",
    "\u0002\u0002\u051b\u0514\u0003\u0002\u0002\u0002\u051c\u00a5\u0003\u0002",
    "\u0002\u0002\u051d\u051e\u0007g\u0002\u0002\u051e\u051f\u0007\u00d1",
    "\u0002\u0002\u051f\u0520\u0005\u009eP\u0002\u0520\u0521\u0007\u00d2",
    "\u0002\u0002\u0521\u0522\u0007\u00d5\u0002\u0002\u0522\u0527\u0005\u00a8",
    "U\u0002\u0523\u0524\u0007\u00d7\u0002\u0002\u0524\u0526\u0005\u00a8",
    "U\u0002\u0525\u0523\u0003\u0002\u0002\u0002\u0526\u0529\u0003\u0002",
    "\u0002\u0002\u0527\u0525\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002",
    "\u0002\u0002\u0528\u052b\u0003\u0002\u0002\u0002\u0529\u0527\u0003\u0002",
    "\u0002\u0002\u052a\u052c\u0007\u00d7\u0002\u0002\u052b\u052a\u0003\u0002",
    "\u0002\u0002\u052b\u052c\u0003\u0002\u0002\u0002\u052c\u052d\u0003\u0002",
    "\u0002\u0002\u052d\u052e\u0007\u00d6\u0002\u0002\u052e\u00a7\u0003\u0002",
    "\u0002\u0002\u052f\u0534\u0005\u009eP\u0002\u0530\u0531\u0007\u00d7",
    "\u0002\u0002\u0531\u0533\u0005\u009eP\u0002\u0532\u0530\u0003\u0002",
    "\u0002\u0002\u0533\u0536\u0003\u0002\u0002\u0002\u0534\u0532\u0003\u0002",
    "\u0002\u0002\u0534\u0535\u0003\u0002\u0002\u0002\u0535\u0537\u0003\u0002",
    "\u0002\u0002\u0536\u0534\u0003\u0002\u0002\u0002\u0537\u0538\u0007\u00a1",
    "\u0002\u0002\u0538\u0539\u0005\u009eP\u0002\u0539\u00a9\u0003\u0002",
    "\u0002\u0002\u053a\u053b\u0007i\u0002\u0002\u053b\u053d\u0005\u00ba",
    "^\u0002\u053c\u053e\u0005\u00c8e\u0002\u053d\u053c\u0003\u0002\u0002",
    "\u0002\u053d\u053e\u0003\u0002\u0002\u0002\u053e\u00ab\u0003\u0002\u0002",
    "\u0002\u053f\u0540\t\u000f\u0002\u0002\u0540\u00ad\u0003\u0002\u0002",
    "\u0002\u0541\u0549\u0007\u0083\u0002\u0002\u0542\u0545\u0005\u009eP",
    "\u0002\u0543\u0544\u0007\u00a1\u0002\u0002\u0544\u0546\u0005\u009eP",
    "\u0002\u0545\u0543\u0003\u0002\u0002\u0002\u0545\u0546\u0003\u0002\u0002",
    "\u0002\u0546\u054a\u0003\u0002\u0002\u0002\u0547\u0548\u0007\u0084\u0002",
    "\u0002\u0548\u054a\u0005\u009eP\u0002\u0549\u0542\u0003\u0002\u0002",
    "\u0002\u0549\u0547\u0003\u0002\u0002\u0002\u054a\u00af\u0003\u0002\u0002",
    "\u0002\u054b\u0550\u0005\u00b2Z\u0002\u054c\u054d\u0007\u00d7\u0002",
    "\u0002\u054d\u054f\u0005\u00b2Z\u0002\u054e\u054c\u0003\u0002\u0002",
    "\u0002\u054f\u0552\u0003\u0002\u0002\u0002\u0550\u054e\u0003\u0002\u0002",
    "\u0002\u0550\u0551\u0003\u0002\u0002\u0002\u0551\u0554\u0003\u0002\u0002",
    "\u0002\u0552\u0550\u0003\u0002\u0002\u0002\u0553\u0555\u0007\u00d7\u0002",
    "\u0002\u0554\u0553\u0003\u0002\u0002\u0002\u0554\u0555\u0003\u0002\u0002",
    "\u0002\u0555\u00b1\u0003\u0002\u0002\u0002\u0556\u0559\u0005\u009eP",
    "\u0002\u0557\u0558\u0007\u00a1\u0002\u0002\u0558\u055a\u0005\u009eP",
    "\u0002\u0559\u0557\u0003\u0002\u0002\u0002\u0559\u055a\u0003\u0002\u0002",
    "\u0002\u055a\u0563\u0003\u0002\u0002\u0002\u055b\u055c\u0005\u009eP",
    "\u0002\u055c\u055d\u0007\u00a1\u0002\u0002\u055d\u055f\u0003\u0002\u0002",
    "\u0002\u055e\u055b\u0003\u0002\u0002\u0002\u055e\u055f\u0003\u0002\u0002",
    "\u0002\u055f\u0560\u0003\u0002\u0002\u0002\u0560\u0561\u0007\u00c3\u0002",
    "\u0002\u0561\u0563\u0005\u00e0q\u0002\u0562\u0556\u0003\u0002\u0002",
    "\u0002\u0562\u055e\u0003\u0002\u0002\u0002\u0563\u00b3\u0003\u0002\u0002",
    "\u0002\u0564\u0565\u0007\u0080\u0002\u0002\u0565\u0566\u0007\u00d1\u0002",
    "\u0002\u0566\u056b\u0005\u00b6\\\u0002\u0567\u0568\u0007\u00d7\u0002",
    "\u0002\u0568\u056a\u0005\u00b6\\\u0002\u0569\u0567\u0003\u0002\u0002",
    "\u0002\u056a\u056d\u0003\u0002\u0002\u0002\u056b\u0569\u0003\u0002\u0002",
    "\u0002\u056b\u056c\u0003\u0002\u0002\u0002\u056c\u056e\u0003\u0002\u0002",
    "\u0002\u056d\u056b\u0003\u0002\u0002\u0002\u056e\u056f\u0007\u00d2\u0002",
    "\u0002\u056f\u00b5\u0003\u0002\u0002\u0002\u0570\u0572\u0007\u00c3\u0002",
    "\u0002\u0571\u0570\u0003\u0002\u0002\u0002\u0571\u0572\u0003\u0002\u0002",
    "\u0002\u0572\u0573\u0003\u0002\u0002\u0002\u0573\u0574\u0007\u00dd\u0002",
    "\u0002\u0574\u00b7\u0003\u0002\u0002\u0002\u0575\u0577\u0005\u00c0a",
    "\u0002\u0576\u0578\u0005,\u0017\u0002\u0577\u0576\u0003\u0002\u0002",
    "\u0002\u0577\u0578\u0003\u0002\u0002\u0002\u0578\u057b\u0003\u0002\u0002",
    "\u0002\u0579\u057b\u0007v\u0002\u0002\u057a\u0575\u0003\u0002\u0002",
    "\u0002\u057a\u0579\u0003\u0002\u0002\u0002\u057b\u00b9\u0003\u0002\u0002",
    "\u0002\u057c\u057f\u0005\u00c0a\u0002\u057d\u057f\u0005\u00be`\u0002",
    "\u057e\u057c\u0003\u0002\u0002\u0002\u057e\u057d\u0003\u0002\u0002\u0002",
    "\u057f\u0581\u0003\u0002\u0002\u0002\u0580\u0582\u0005,\u0017\u0002",
    "\u0581\u0580\u0003\u0002\u0002\u0002\u0581\u0582\u0003\u0002\u0002\u0002",
    "\u0582\u0587\u0003\u0002\u0002\u0002\u0583\u0587\u0005\u0104\u0083\u0002",
    "\u0584\u0587\u0007v\u0002\u0002\u0585\u0587\u0005\u00bc_\u0002\u0586",
    "\u057e\u0003\u0002\u0002\u0002\u0586\u0583\u0003\u0002\u0002\u0002\u0586",
    "\u0584\u0003\u0002\u0002\u0002\u0586\u0585\u0003\u0002\u0002\u0002\u0587",
    "\u00bb\u0003\u0002\u0002\u0002\u0588\u058a\u0005.\u0018\u0002\u0589",
    "\u0588\u0003\u0002\u0002\u0002\u0589\u058a\u0003\u0002\u0002\u0002\u058a",
    "\u058c\u0003\u0002\u0002\u0002\u058b\u058d\u0007o\u0002\u0002\u058c",
    "\u058b\u0003\u0002\u0002\u0002\u058c\u058d\u0003\u0002\u0002\u0002\u058d",
    "\u058f\u0003\u0002\u0002\u0002\u058e\u0590\u0005\u00fa~\u0002\u058f",
    "\u058e\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002\u0590",
    "\u0592\u0003\u0002\u0002\u0002\u0591\u0593\u0007m\u0002\u0002\u0592",
    "\u0591\u0003\u0002\u0002\u0002\u0592\u0593\u0003\u0002\u0002\u0002\u0593",
    "\u05a9\u0003\u0002\u0002\u0002\u0594\u0596\u0005\u001e\u0010\u0002\u0595",
    "\u0597\u0005\"\u0012\u0002\u0596\u0595\u0003\u0002\u0002\u0002\u0596",
    "\u0597\u0003\u0002\u0002\u0002\u0597\u059a\u0003\u0002\u0002\u0002\u0598",
    "\u0599\u0007M\u0002\u0002\u0599\u059b\u0005\u00b8]\u0002\u059a\u0598",
    "\u0003\u0002\u0002\u0002\u059a\u059b\u0003\u0002\u0002\u0002\u059b\u059e",
    "\u0003\u0002\u0002\u0002\u059c\u059d\u0007W\u0002\u0002\u059d\u059f",
    "\u0005 \u0011\u0002\u059e\u059c\u0003\u0002\u0002\u0002\u059e\u059f",
    "\u0003\u0002\u0002\u0002\u059f\u05aa\u0003\u0002\u0002\u0002\u05a0\u05a1",
    "\u0007a\u0002\u0002\u05a1\u05a3\u0005\u00fc\u007f\u0002\u05a2\u05a4",
    "\u0005\"\u0012\u0002\u05a3\u05a2\u0003\u0002\u0002\u0002\u05a3\u05a4",
    "\u0003\u0002\u0002\u0002\u05a4\u05a7\u0003\u0002\u0002\u0002\u05a5\u05a6",
    "\u0007M\u0002\u0002\u05a6\u05a8\u0005 \u0011\u0002\u05a7\u05a5\u0003",
    "\u0002\u0002\u0002\u05a7\u05a8\u0003\u0002\u0002\u0002\u05a8\u05aa\u0003",
    "\u0002\u0002\u0002\u05a9\u0594\u0003\u0002\u0002\u0002\u05a9\u05a0\u0003",
    "\u0002\u0002\u0002\u05aa\u05ab\u0003\u0002\u0002\u0002\u05ab\u05af\u0007",
    "\u00d5\u0002\u0002\u05ac\u05ae\u0005\u0080A\u0002\u05ad\u05ac\u0003",
    "\u0002\u0002\u0002\u05ae\u05b1\u0003\u0002\u0002\u0002\u05af\u05ad\u0003",
    "\u0002\u0002\u0002\u05af\u05b0\u0003\u0002\u0002\u0002\u05b0\u05b2\u0003",
    "\u0002\u0002\u0002\u05b1\u05af\u0003\u0002\u0002\u0002\u05b2\u05b3\u0007",
    "\u00d6\u0002\u0002\u05b3\u00bd\u0003\u0002\u0002\u0002\u05b4\u05b9\u0005",
    "\u00ecw\u0002\u05b5\u05b6\u0007\u00be\u0002\u0002\u05b6\u05b8\u0005",
    "\u00eex\u0002\u05b7\u05b5\u0003\u0002\u0002\u0002\u05b8\u05bb\u0003",
    "\u0002\u0002\u0002\u05b9\u05b7\u0003\u0002\u0002\u0002\u05b9\u05ba\u0003",
    "\u0002\u0002\u0002\u05ba\u00bf\u0003\u0002\u0002\u0002\u05bb\u05b9\u0003",
    "\u0002\u0002\u0002\u05bc\u05be\u0007h\u0002\u0002\u05bd\u05bc\u0003",
    "\u0002\u0002\u0002\u05bd\u05be\u0003\u0002\u0002\u0002\u05be\u05c0\u0003",
    "\u0002\u0002\u0002\u05bf\u05c1\u0007\u00bf\u0002\u0002\u05c0\u05bf\u0003",
    "\u0002\u0002\u0002\u05c0\u05c1\u0003\u0002\u0002\u0002\u05c1\u05c2\u0003",
    "\u0002\u0002\u0002\u05c2\u05c3\u0005\u00c2b\u0002\u05c3\u00c1\u0003",
    "\u0002\u0002\u0002\u05c4\u05d2\u0005\u00fc\u007f\u0002\u05c5\u05ca\u0005",
    "\u00fc\u007f\u0002\u05c6\u05c7\u0007\u00bf\u0002\u0002\u05c7\u05c9\u0005",
    "\u00fc\u007f\u0002\u05c8\u05c6\u0003\u0002\u0002\u0002\u05c9\u05cc\u0003",
    "\u0002\u0002\u0002\u05ca\u05c8\u0003\u0002\u0002\u0002\u05ca\u05cb\u0003",
    "\u0002\u0002\u0002\u05cb\u05cf\u0003\u0002\u0002\u0002\u05cc\u05ca\u0003",
    "\u0002\u0002\u0002\u05cd\u05ce\u0007\u00bf\u0002\u0002\u05ce\u05d0\u0005",
    "\u00c4c\u0002\u05cf\u05cd\u0003\u0002\u0002\u0002\u05cf\u05d0\u0003",
    "\u0002\u0002\u0002\u05d0\u05d2\u0003\u0002\u0002\u0002\u05d1\u05c4\u0003",
    "\u0002\u0002\u0002\u05d1\u05c5\u0003\u0002\u0002\u0002\u05d2\u00c3\u0003",
    "\u0002\u0002\u0002\u05d3\u05d6\u0005\u00fc\u007f\u0002\u05d4\u05d5\u0007",
    "0\u0002\u0002\u05d5\u05d7\u0005\u00fc\u007f\u0002\u05d6\u05d4\u0003",
    "\u0002\u0002\u0002\u05d6\u05d7\u0003\u0002\u0002\u0002\u05d7\u05e7\u0003",
    "\u0002\u0002\u0002\u05d8\u05d9\u0007\u00d5\u0002\u0002\u05d9\u05de\u0005",
    "\u00c4c\u0002\u05da\u05db\u0007\u00d7\u0002\u0002\u05db\u05dd\u0005",
    "\u00c4c\u0002\u05dc\u05da\u0003\u0002\u0002\u0002\u05dd\u05e0\u0003",
    "\u0002\u0002\u0002\u05de\u05dc\u0003\u0002\u0002\u0002\u05de\u05df\u0003",
    "\u0002\u0002\u0002\u05df\u05e2\u0003\u0002\u0002\u0002\u05e0\u05de\u0003",
    "\u0002\u0002\u0002\u05e1\u05e3\u0007\u00d7\u0002\u0002\u05e2\u05e1\u0003",
    "\u0002\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3\u05e4\u0003",
    "\u0002\u0002\u0002\u05e4\u05e5\u0007\u00d6\u0002\u0002\u05e5\u05e7\u0003",
    "\u0002\u0002\u0002\u05e6\u05d3\u0003\u0002\u0002\u0002\u05e6\u05d8\u0003",
    "\u0002\u0002\u0002\u05e7\u00c5\u0003\u0002\u0002\u0002\u05e8\u05ed\u0005",
    "\u00c0a\u0002\u05e9\u05ea\u0007\u00d7\u0002\u0002\u05ea\u05ec\u0005",
    "\u00c0a\u0002\u05eb\u05e9\u0003\u0002\u0002\u0002\u05ec\u05ef\u0003",
    "\u0002\u0002\u0002\u05ed\u05eb\u0003\u0002\u0002\u0002\u05ed\u05ee\u0003",
    "\u0002\u0002\u0002\u05ee\u00c7\u0003\u0002\u0002\u0002\u05ef\u05ed\u0003",
    "\u0002\u0002\u0002\u05f0\u05fa\u0007\u00d1\u0002\u0002\u05f1\u05f6\u0005",
    "\u00caf\u0002\u05f2\u05f3\u0007\u00d7\u0002\u0002\u05f3\u05f5\u0005",
    "\u00caf\u0002\u05f4\u05f2\u0003\u0002\u0002\u0002\u05f5\u05f8\u0003",
    "\u0002\u0002\u0002\u05f6\u05f4\u0003\u0002\u0002\u0002\u05f6\u05f7\u0003",
    "\u0002\u0002\u0002\u05f7\u05fb\u0003\u0002\u0002\u0002\u05f8\u05f6\u0003",
    "\u0002\u0002\u0002\u05f9\u05fb\u0005\u00aeX\u0002\u05fa\u05f1\u0003",
    "\u0002\u0002\u0002\u05fa\u05f9\u0003\u0002\u0002\u0002\u05fa\u05fb\u0003",
    "\u0002\u0002\u0002\u05fb\u05fd\u0003\u0002\u0002\u0002\u05fc\u05fe\u0007",
    "\u00d7\u0002\u0002\u05fd\u05fc\u0003\u0002\u0002\u0002\u05fd\u05fe\u0003",
    "\u0002\u0002\u0002\u05fe\u05ff\u0003\u0002\u0002\u0002\u05ff\u0600\u0007",
    "\u00d2\u0002\u0002\u0600\u00c9\u0003\u0002\u0002\u0002\u0601\u0603\u0005",
    "\u00ccg\u0002\u0602\u0601\u0003\u0002\u0002\u0002\u0602\u0603\u0003",
    "\u0002\u0002\u0002\u0603\u0605\u0003\u0002\u0002\u0002\u0604\u0606\u0007",
    "\u00c0\u0002\u0002\u0605\u0604\u0003\u0002\u0002\u0002\u0605\u0606\u0003",
    "\u0002\u0002\u0002\u0606\u0607\u0003\u0002\u0002\u0002\u0607\u060b\u0005",
    "\u009eP\u0002\u0608\u0609\u0007\u00c3\u0002\u0002\u0609\u060b\u0005",
    "\u00e0q\u0002\u060a\u0602\u0003\u0002\u0002\u0002\u060a\u0608\u0003",
    "\u0002\u0002\u0002\u060b\u00cb\u0003\u0002\u0002\u0002\u060c\u060d\u0005",
    "\u00fc\u007f\u0002\u060d\u060e\u0007\u00d8\u0002\u0002\u060e\u00cd\u0003",
    "\u0002\u0002\u0002\u060f\u0625\u0005\u00d0i\u0002\u0610\u0625\u0005",
    "\u00dan\u0002\u0611\u0612\u0007/\u0002\u0002\u0612\u0617\u0007\u00d1",
    "\u0002\u0002\u0613\u0615\u0005\u00b0Y\u0002\u0614\u0616\u0007\u00d7",
    "\u0002\u0002\u0615\u0614\u0003\u0002\u0002\u0002\u0615\u0616\u0003\u0002",
    "\u0002\u0002\u0616\u0618\u0003\u0002\u0002\u0002\u0617\u0613\u0003\u0002",
    "\u0002\u0002\u0617\u0618\u0003\u0002\u0002\u0002\u0618\u0619\u0003\u0002",
    "\u0002\u0002\u0619\u0625\u0007\u00d2\u0002\u0002\u061a\u061f\u0007\u00d3",
    "\u0002\u0002\u061b\u061d\u0005\u00b0Y\u0002\u061c\u061e\u0007\u00d7",
    "\u0002\u0002\u061d\u061c\u0003\u0002\u0002\u0002\u061d\u061e\u0003\u0002",
    "\u0002\u0002\u061e\u0620\u0003\u0002\u0002\u0002\u061f\u061b\u0003\u0002",
    "\u0002\u0002\u061f\u0620\u0003\u0002\u0002\u0002\u0620\u0621\u0003\u0002",
    "\u0002\u0002\u0621\u0625\u0007\u00d4\u0002\u0002\u0622\u0623\t\u0010",
    "\u0002\u0002\u0623\u0625\u0005\u00ceh\u0002\u0624\u060f\u0003\u0002",
    "\u0002\u0002\u0624\u0610\u0003\u0002\u0002\u0002\u0624\u0611\u0003\u0002",
    "\u0002\u0002\u0624\u061a\u0003\u0002\u0002\u0002\u0624\u0622\u0003\u0002",
    "\u0002\u0002\u0625\u00cf\u0003\u0002\u0002\u0002\u0626\u062c\u0007j",
    "\u0002\u0002\u0627\u062c\u0005\u00d2j\u0002\u0628\u062c\u0005\u0100",
    "\u0081\u0002\u0629\u062c\u0005\u00d6l\u0002\u062a\u062c\u0005\u00c0",
    "a\u0002\u062b\u0626\u0003\u0002\u0002\u0002\u062b\u0627\u0003\u0002",
    "\u0002\u0002\u062b\u0628\u0003\u0002\u0002\u0002\u062b\u0629\u0003\u0002",
    "\u0002\u0002\u062b\u062a\u0003\u0002\u0002\u0002\u062c\u00d1\u0003\u0002",
    "\u0002\u0002\u062d\u0632\u0007\u00e1\u0002\u0002\u062e\u0632\u00073",
    "\u0002\u0002\u062f\u0632\u0005\u00d4k\u0002\u0630\u0632\u0005\u00d8",
    "m\u0002\u0631\u062d\u0003\u0002\u0002\u0002\u0631\u062e\u0003\u0002",
    "\u0002\u0002\u0631\u062f\u0003\u0002\u0002\u0002\u0631\u0630\u0003\u0002",
    "\u0002\u0002\u0632\u00d3\u0003\u0002\u0002\u0002\u0633\u0634\t\u0011",
    "\u0002\u0002\u0634\u00d5\u0003\u0002\u0002\u0002\u0635\u0636\t\u0012",
    "\u0002\u0002\u0636\u063b\u0007\u00bd\u0002\u0002\u0637\u063c\u0005\u00fc",
    "\u007f\u0002\u0638\u063c\u0007\u008a\u0002\u0002\u0639\u063c\u0007\u0086",
    "\u0002\u0002\u063a\u063c\u0007\u0087\u0002\u0002\u063b\u0637\u0003\u0002",
    "\u0002\u0002\u063b\u0638\u0003\u0002\u0002\u0002\u063b\u0639\u0003\u0002",
    "\u0002\u0002\u063b\u063a\u0003\u0002\u0002\u0002\u063c\u0648\u0003\u0002",
    "\u0002\u0002\u063d\u0641\u0005\u00b8]\u0002\u063e\u0641\u0005\u00f2",
    "z\u0002\u063f\u0641\u0005\u00dan\u0002\u0640\u063d\u0003\u0002\u0002",
    "\u0002\u0640\u063e\u0003\u0002\u0002\u0002\u0640\u063f\u0003\u0002\u0002",
    "\u0002\u0641\u0642\u0003\u0002\u0002\u0002\u0642\u0645\u0007\u00bd\u0002",
    "\u0002\u0643\u0646\u0005\u00fc\u007f\u0002\u0644\u0646\u0005\u00f2z",
    "\u0002\u0645\u0643\u0003\u0002\u0002\u0002\u0645\u0644\u0003\u0002\u0002",
    "\u0002\u0646\u0648\u0003\u0002\u0002\u0002\u0647\u0635\u0003\u0002\u0002",
    "\u0002\u0647\u0640\u0003\u0002\u0002\u0002\u0648\u00d7\u0003\u0002\u0002",
    "\u0002\u0649\u064a\u0007\u00de\u0002\u0002\u064a\u00d9\u0003\u0002\u0002",
    "\u0002\u064b\u064d\u0007\u00e8\u0002\u0002\u064c\u064e\u0007\u00f0\u0002",
    "\u0002\u064d\u064c\u0003\u0002\u0002\u0002\u064e\u064f\u0003\u0002\u0002",
    "\u0002\u064f\u064d\u0003\u0002\u0002\u0002\u064f\u0650\u0003\u0002\u0002",
    "\u0002\u0650\u0661\u0003\u0002\u0002\u0002\u0651\u0653\u0007\u00e7\u0002",
    "\u0002\u0652\u0654\u0007\u00f0\u0002\u0002\u0653\u0652\u0003\u0002\u0002",
    "\u0002\u0654\u0655\u0003\u0002\u0002\u0002\u0655\u0653\u0003\u0002\u0002",
    "\u0002\u0655\u0656\u0003\u0002\u0002\u0002\u0656\u0661\u0003\u0002\u0002",
    "\u0002\u0657\u0661\u0007\u00e5\u0002\u0002\u0658\u065c\u0007\u00e6\u0002",
    "\u0002\u0659\u065b\u0005\u00dco\u0002\u065a\u0659\u0003\u0002\u0002",
    "\u0002\u065b\u065e\u0003\u0002\u0002\u0002\u065c\u065a\u0003\u0002\u0002",
    "\u0002\u065c\u065d\u0003\u0002\u0002\u0002\u065d\u065f\u0003\u0002\u0002",
    "\u0002\u065e\u065c\u0003\u0002\u0002\u0002\u065f\u0661\u0007\u00e6\u0002",
    "\u0002\u0660\u064b\u0003\u0002\u0002\u0002\u0660\u0651\u0003\u0002\u0002",
    "\u0002\u0660\u0657\u0003\u0002\u0002\u0002\u0660\u0658\u0003\u0002\u0002",
    "\u0002\u0661\u00db\u0003\u0002\u0002\u0002\u0662\u0666\u0007\u00ec\u0002",
    "\u0002\u0663\u0666\u0007\u00eb\u0002\u0002\u0664\u0666\u0005\u00e0q",
    "\u0002\u0665\u0662\u0003\u0002\u0002\u0002\u0665\u0663\u0003\u0002\u0002",
    "\u0002\u0665\u0664\u0003\u0002\u0002\u0002\u0666\u00dd\u0003\u0002\u0002",
    "\u0002\u0667\u066c\u0005\u00e0q\u0002\u0668\u0669\u0007\u00d7\u0002",
    "\u0002\u0669\u066b\u0005\u00e0q\u0002\u066a\u0668\u0003\u0002\u0002",
    "\u0002\u066b\u066e\u0003\u0002\u0002\u0002\u066c\u066a\u0003\u0002\u0002",
    "\u0002\u066c\u066d\u0003\u0002\u0002\u0002\u066d\u00df\u0003\u0002\u0002",
    "\u0002\u066e\u066c\u0003\u0002\u0002\u0002\u066f\u0673\u0005\u00e2r",
    "\u0002\u0670\u0672\u0005\u00e4s\u0002\u0671\u0670\u0003\u0002\u0002",
    "\u0002\u0672\u0675\u0003\u0002\u0002\u0002\u0673\u0671\u0003\u0002\u0002",
    "\u0002\u0673\u0674\u0003\u0002\u0002\u0002\u0674\u00e1\u0003\u0002\u0002",
    "\u0002\u0675\u0673\u0003\u0002\u0002\u0002\u0676\u067d\u0005\u00ecw",
    "\u0002\u0677\u067d\u0005\u00e6t\u0002\u0678\u0679\u0007\u00d1\u0002",
    "\u0002\u0679\u067a\u0005\u00aaV\u0002\u067a\u067b\u0007\u00d2\u0002",
    "\u0002\u067b\u067d\u0003\u0002\u0002\u0002\u067c\u0676\u0003\u0002\u0002",
    "\u0002\u067c\u0677\u0003\u0002\u0002\u0002\u067c\u0678\u0003\u0002\u0002",
    "\u0002\u067d\u00e3\u0003\u0002\u0002\u0002\u067e\u067f\u0007\u00be\u0002",
    "\u0002\u067f\u0681\u0005\u00eex\u0002\u0680\u0682\u0005\u00eav\u0002",
    "\u0681\u0680\u0003\u0002\u0002\u0002\u0681\u0682\u0003\u0002\u0002\u0002",
    "\u0682\u00e5\u0003\u0002\u0002\u0002\u0683\u0684\u0005\u00e8u\u0002",
    "\u0684\u0685\u0005\u00eav\u0002\u0685\u00e7\u0003\u0002\u0002\u0002",
    "\u0686\u068b\u0005\u00c0a\u0002\u0687\u068b\u0005\u00d6l\u0002\u0688",
    "\u068b\u0005\u00ecw\u0002\u0689\u068b\u0005\u009cO\u0002\u068a\u0686",
    "\u0003\u0002\u0002\u0002\u068a\u0687\u0003\u0002\u0002\u0002\u068a\u0688",
    "\u0003\u0002\u0002\u0002\u068a\u0689\u0003\u0002\u0002\u0002\u068b\u00e9",
    "\u0003\u0002\u0002\u0002\u068c\u068e\u0005,\u0017\u0002\u068d\u068c",
    "\u0003\u0002\u0002\u0002\u068d\u068e\u0003\u0002\u0002\u0002\u068e\u068f",
    "\u0003\u0002\u0002\u0002\u068f\u0693\u0005\u00c8e\u0002\u0690\u0692",
    "\u0005\u00f4{\u0002\u0691\u0690\u0003\u0002\u0002\u0002\u0692\u0695",
    "\u0003\u0002\u0002\u0002\u0693\u0691\u0003\u0002\u0002\u0002\u0693\u0694",
    "\u0003\u0002\u0002\u0002\u0694\u00eb\u0003\u0002\u0002\u0002\u0695\u0693",
    "\u0003\u0002\u0002\u0002\u0696\u0699\u0005\u00f2z\u0002\u0697\u0698",
    "\u0007\u00bd\u0002\u0002\u0698\u069a\u0005\u00f2z\u0002\u0699\u0697",
    "\u0003\u0002\u0002\u0002\u0699\u069a\u0003\u0002\u0002\u0002\u069a\u06a0",
    "\u0003\u0002\u0002\u0002\u069b\u069c\u0005\u00b8]\u0002\u069c\u069d",
    "\u0007\u00bd\u0002\u0002\u069d\u069e\u0005\u00f2z\u0002\u069e\u06a0",
    "\u0003\u0002\u0002\u0002\u069f\u0696\u0003\u0002\u0002\u0002\u069f\u069b",
    "\u0003\u0002\u0002\u0002\u06a0\u00ed\u0003\u0002\u0002\u0002\u06a1\u06a4",
    "\u0005\u00f0y\u0002\u06a2\u06a4\u0005\u00f2z\u0002\u06a3\u06a1\u0003",
    "\u0002\u0002\u0002\u06a3\u06a2\u0003\u0002\u0002\u0002\u06a4\u00ef\u0003",
    "\u0002\u0002\u0002\u06a5\u06ab\u0005\u00fc\u007f\u0002\u06a6\u06a7\u0007",
    "\u00d5\u0002\u0002\u06a7\u06a8\u0005\u009eP\u0002\u06a8\u06a9\u0007",
    "\u00d6\u0002\u0002\u06a9\u06ab\u0003\u0002\u0002\u0002\u06aa\u06a5\u0003",
    "\u0002\u0002\u0002\u06aa\u06a6\u0003\u0002\u0002\u0002\u06ab\u06af\u0003",
    "\u0002\u0002\u0002\u06ac\u06ae\u0005\u00f4{\u0002\u06ad\u06ac\u0003",
    "\u0002\u0002\u0002\u06ae\u06b1\u0003\u0002\u0002\u0002\u06af\u06ad\u0003",
    "\u0002\u0002\u0002\u06af\u06b0\u0003\u0002\u0002\u0002\u06b0\u00f1\u0003",
    "\u0002\u0002\u0002\u06b1\u06af\u0003\u0002\u0002\u0002\u06b2\u06b4\u0007",
    "\u00ce\u0002\u0002\u06b3\u06b2\u0003\u0002\u0002\u0002\u06b4\u06b7\u0003",
    "\u0002\u0002\u0002\u06b5\u06b3\u0003\u0002\u0002\u0002\u06b5\u06b6\u0003",
    "\u0002\u0002\u0002\u06b6\u06be\u0003\u0002\u0002\u0002\u06b7\u06b5\u0003",
    "\u0002\u0002\u0002\u06b8\u06bf\u0007\u00dd\u0002\u0002\u06b9\u06ba\u0007",
    "\u00ce\u0002\u0002\u06ba\u06bb\u0007\u00d5\u0002\u0002\u06bb\u06bc\u0005",
    "\u009eP\u0002\u06bc\u06bd\u0007\u00d6\u0002\u0002\u06bd\u06bf\u0003",
    "\u0002\u0002\u0002\u06be\u06b8\u0003\u0002\u0002\u0002\u06be\u06b9\u0003",
    "\u0002\u0002\u0002\u06bf\u06c3\u0003\u0002\u0002\u0002\u06c0\u06c2\u0005",
    "\u00f4{\u0002\u06c1\u06c0\u0003\u0002\u0002\u0002\u06c2\u06c5\u0003",
    "\u0002\u0002\u0002\u06c3\u06c1\u0003\u0002\u0002\u0002\u06c3\u06c4\u0003",
    "\u0002\u0002\u0002\u06c4\u00f3\u0003\u0002\u0002\u0002\u06c5\u06c3\u0003",
    "\u0002\u0002\u0002\u06c6\u06c8\u0007\u00d3\u0002\u0002\u06c7\u06c9\u0005",
    "\u009eP\u0002\u06c8\u06c7\u0003\u0002\u0002\u0002\u06c8\u06c9\u0003",
    "\u0002\u0002\u0002\u06c9\u06ca\u0003\u0002\u0002\u0002\u06ca\u06d0\u0007",
    "\u00d4\u0002\u0002\u06cb\u06cc\u0007\u00d5\u0002\u0002\u06cc\u06cd\u0005",
    "\u009eP\u0002\u06cd\u06ce\u0007\u00d6\u0002\u0002\u06ce\u06d0\u0003",
    "\u0002\u0002\u0002\u06cf\u06c6\u0003\u0002\u0002\u0002\u06cf\u06cb\u0003",
    "\u0002\u0002\u0002\u06d0\u00f5\u0003\u0002\u0002\u0002\u06d1\u06d3\u0005",
    "\u00f8}\u0002\u06d2\u06d1\u0003\u0002\u0002\u0002\u06d2\u06d3\u0003",
    "\u0002\u0002\u0002\u06d3\u06da\u0003\u0002\u0002\u0002\u06d4\u06d6\u0007",
    "\u00d7\u0002\u0002\u06d5\u06d7\u0005\u00f8}\u0002\u06d6\u06d5\u0003",
    "\u0002\u0002\u0002\u06d6\u06d7\u0003\u0002\u0002\u0002\u06d7\u06d9\u0003",
    "\u0002\u0002\u0002\u06d8\u06d4\u0003\u0002\u0002\u0002\u06d9\u06dc\u0003",
    "\u0002\u0002\u0002\u06da\u06d8\u0003\u0002\u0002\u0002\u06da\u06db\u0003",
    "\u0002\u0002\u0002\u06db\u00f7\u0003\u0002\u0002\u0002\u06dc\u06da\u0003",
    "\u0002\u0002\u0002\u06dd\u06e5\u0005\u00e0q\u0002\u06de\u06df\u0007",
    "c\u0002\u0002\u06df\u06e0\u0007\u00d1\u0002\u0002\u06e0\u06e1\u0005",
    "\u00f6|\u0002\u06e1\u06e2\u0007\u00d2\u0002\u0002\u06e2\u06e5\u0003",
    "\u0002\u0002\u0002\u06e3\u06e5\u0005\u00b2Z\u0002\u06e4\u06dd\u0003",
    "\u0002\u0002\u0002\u06e4\u06de\u0003\u0002\u0002\u0002\u06e4\u06e3\u0003",
    "\u0002\u0002\u0002\u06e5\u00f9\u0003\u0002\u0002\u0002\u06e6\u06e7\t",
    "\u0013\u0002\u0002\u06e7\u00fb\u0003\u0002\u0002\u0002\u06e8\u06e9\t",
    "\u0014\u0002\u0002\u06e9\u00fd\u0003\u0002\u0002\u0002\u06ea\u06eb\t",
    "\u0015\u0002\u0002\u06eb\u00ff\u0003\u0002\u0002\u0002\u06ec\u06ed\t",
    "\u0016\u0002\u0002\u06ed\u0101\u0003\u0002\u0002\u0002\u06ee\u06ef\t",
    "\u0017\u0002\u0002\u06ef\u0103\u0003\u0002\u0002\u0002\u06f0\u06f1\t",
    "\u0018\u0002\u0002\u06f1\u0105\u0003\u0002\u0002\u0002\u06f2\u06f3\t",
    "\u0019\u0002\u0002\u06f3\u0107\u0003\u0002\u0002\u0002\u00e5\u0109\u010d",
    "\u010f\u0117\u011a\u0134\u0138\u013d\u0142\u0148\u0155\u0159\u015f\u0164",
    "\u0169\u0170\u0176\u017d\u0184\u0187\u018b\u018f\u0196\u0199\u019e\u01a1",
    "\u01a4\u01a7\u01ac\u01b0\u01b4\u01b9\u01bd\u01bf\u01c5\u01d1\u01e2\u01e9",
    "\u01f1\u01f5\u01fa\u0200\u0208\u0210\u0216\u021d\u0224\u0229\u022f\u024c",
    "\u025a\u025e\u0267\u026b\u0270\u028a\u0295\u0299\u029d\u02a6\u02b0\u02b5",
    "\u02bb\u02c0\u02c5\u02ca\u02cf\u02d5\u02db\u02e1\u02f3\u02f8\u02fb\u0305",
    "\u0308\u0315\u031d\u0324\u0327\u032c\u0330\u0339\u0355\u035a\u0361\u0365",
    "\u036b\u036f\u0372\u0375\u0378\u037b\u037e\u0381\u0389\u0390\u0399\u03a6",
    "\u03b2\u03b8\u03bc\u03c3\u03c9\u03cd\u03d4\u03db\u03df\u03e5\u03e9\u03eb",
    "\u03f1\u03f8\u03fc\u0400\u040d\u0410\u0417\u041e\u0422\u0426\u042b\u0430",
    "\u0437\u043f\u0449\u044f\u048e\u049b\u04a2\u04a7\u04a9\u04cf\u04e5\u04e7",
    "\u04ec\u04f1\u04f6\u04f9\u04ff\u0502\u0506\u050c\u0510\u051b\u0527\u052b",
    "\u0534\u053d\u0545\u0549\u0550\u0554\u0559\u055e\u0562\u056b\u0571\u0577",
    "\u057a\u057e\u0581\u0586\u0589\u058c\u058f\u0592\u0596\u059a\u059e\u05a3",
    "\u05a7\u05a9\u05af\u05b9\u05bd\u05c0\u05ca\u05cf\u05d1\u05d6\u05de\u05e2",
    "\u05e6\u05ed\u05f6\u05fa\u05fd\u0602\u0605\u060a\u0615\u0617\u061d\u061f",
    "\u0624\u062b\u0631\u063b\u0640\u0645\u0647\u064f\u0655\u065c\u0660\u0665",
    "\u066c\u0673\u067c\u0681\u068a\u068d\u0693\u0699\u069f\u06a3\u06aa\u06af",
    "\u06b5\u06be\u06c3\u06c8\u06cf\u06d2\u06d6\u06da\u06e4"].join("");
const atn = new antlr4_1.default.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4_1.default.dfa.DFA(ds, index));
const sharedContextCache = new antlr4_1.default.PredictionContextCache();
class PhpParser extends antlr4_1.default.Parser {
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.default.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = PhpParser.ruleNames;
        this.literalNames = PhpParser.literalNames;
        this.symbolicNames = PhpParser.symbolicNames;
    }
    get atn() {
        return atn;
    }
    sempred(localctx, ruleIndex, predIndex) {
        switch (ruleIndex) {
            case 58:
                return this.typeHint_sempred(localctx, predIndex);
            case 78:
                return this.expression_sempred(localctx, predIndex);
            default:
                throw "No predicate with index:" + ruleIndex;
        }
    }
    typeHint_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 0:
                return this.precpred(this._ctx, 1);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    expression_sempred(localctx, predIndex) {
        switch (predIndex) {
            case 1:
                return this.precpred(this._ctx, 21);
            case 2:
                return this.precpred(this._ctx, 19);
            case 3:
                return this.precpred(this._ctx, 18);
            case 4:
                return this.precpred(this._ctx, 17);
            case 5:
                return this.precpred(this._ctx, 16);
            case 6:
                return this.precpred(this._ctx, 15);
            case 7:
                return this.precpred(this._ctx, 14);
            case 8:
                return this.precpred(this._ctx, 13);
            case 9:
                return this.precpred(this._ctx, 12);
            case 10:
                return this.precpred(this._ctx, 11);
            case 11:
                return this.precpred(this._ctx, 10);
            case 12:
                return this.precpred(this._ctx, 9);
            case 13:
                return this.precpred(this._ctx, 8);
            case 14:
                return this.precpred(this._ctx, 7);
            case 15:
                return this.precpred(this._ctx, 3);
            case 16:
                return this.precpred(this._ctx, 2);
            case 17:
                return this.precpred(this._ctx, 1);
            case 18:
                return this.precpred(this._ctx, 20);
            default:
                throw "No predicate with index:" + predIndex;
        }
    }
    ;
    htmlDocument() {
        let localctx = new HtmlDocumentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, PhpParser.RULE_htmlDocument);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 263;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Shebang) {
                this.state = 262;
                this.match(PhpParser.Shebang);
            }
            this.state = 269;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PhpParser.HtmlText - 2)) | (1 << (PhpParser.XmlStart - 2)) | (1 << (PhpParser.HtmlScriptOpen - 2)) | (1 << (PhpParser.HtmlStyleOpen - 2)) | (1 << (PhpParser.HtmlDtd - 2)) | (1 << (PhpParser.HtmlOpen - 2)) | (1 << (PhpParser.HtmlClose - 2)) | (1 << (PhpParser.HtmlSlashClose - 2)) | (1 << (PhpParser.HtmlSlash - 2)) | (1 << (PhpParser.HtmlEquals - 2)) | (1 << (PhpParser.HtmlStartQuoteString - 2)) | (1 << (PhpParser.HtmlStartDoubleQuoteString - 2)) | (1 << (PhpParser.HtmlHex - 2)) | (1 << (PhpParser.HtmlDecimal - 2)) | (1 << (PhpParser.HtmlName - 2)) | (1 << (PhpParser.HtmlEndQuoteString - 2)) | (1 << (PhpParser.HtmlQuoteString - 2)) | (1 << (PhpParser.HtmlEndDoubleQuoteString - 2)) | (1 << (PhpParser.HtmlDoubleQuoteString - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PhpParser.ScriptText - 34)) | (1 << (PhpParser.HtmlScriptClose - 34)) | (1 << (PhpParser.StyleBody - 34)) | (1 << (PhpParser.AttributeStart - 34)) | (1 << (PhpParser.Abstract - 34)) | (1 << (PhpParser.Array - 34)) | (1 << (PhpParser.As - 34)) | (1 << (PhpParser.BinaryCast - 34)) | (1 << (PhpParser.BoolType - 34)) | (1 << (PhpParser.BooleanConstant - 34)) | (1 << (PhpParser.Break - 34)) | (1 << (PhpParser.Callable - 34)) | (1 << (PhpParser.Case - 34)) | (1 << (PhpParser.Catch - 34)) | (1 << (PhpParser.Class - 34)) | (1 << (PhpParser.Clone - 34)) | (1 << (PhpParser.Const - 34)) | (1 << (PhpParser.Continue - 34)) | (1 << (PhpParser.Declare - 34)) | (1 << (PhpParser.Default - 34)) | (1 << (PhpParser.Do - 34)) | (1 << (PhpParser.DoubleCast - 34)) | (1 << (PhpParser.DoubleType - 34)) | (1 << (PhpParser.Echo - 34)) | (1 << (PhpParser.Else - 34)) | (1 << (PhpParser.ElseIf - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PhpParser.Empty - 66)) | (1 << (PhpParser.EndDeclare - 66)) | (1 << (PhpParser.EndFor - 66)) | (1 << (PhpParser.EndForeach - 66)) | (1 << (PhpParser.EndIf - 66)) | (1 << (PhpParser.EndSwitch - 66)) | (1 << (PhpParser.EndWhile - 66)) | (1 << (PhpParser.Eval - 66)) | (1 << (PhpParser.Exit - 66)) | (1 << (PhpParser.Extends - 66)) | (1 << (PhpParser.Final - 66)) | (1 << (PhpParser.Finally - 66)) | (1 << (PhpParser.FloatCast - 66)) | (1 << (PhpParser.For - 66)) | (1 << (PhpParser.Foreach - 66)) | (1 << (PhpParser.Function - 66)) | (1 << (PhpParser.Global - 66)) | (1 << (PhpParser.Goto - 66)) | (1 << (PhpParser.If - 66)) | (1 << (PhpParser.Implements - 66)) | (1 << (PhpParser.Import - 66)) | (1 << (PhpParser.Include - 66)) | (1 << (PhpParser.IncludeOnce - 66)) | (1 << (PhpParser.InstanceOf - 66)) | (1 << (PhpParser.InsteadOf - 66)) | (1 << (PhpParser.Int8Cast - 66)) | (1 << (PhpParser.Int16Cast - 66)) | (1 << (PhpParser.Int64Type - 66)) | (1 << (PhpParser.IntType - 66)) | (1 << (PhpParser.Interface - 66)) | (1 << (PhpParser.IsSet - 66)) | (1 << (PhpParser.List - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (PhpParser.LogicalAnd - 98)) | (1 << (PhpParser.LogicalOr - 98)) | (1 << (PhpParser.LogicalXor - 98)) | (1 << (PhpParser.Match - 98)) | (1 << (PhpParser.Namespace - 98)) | (1 << (PhpParser.New - 98)) | (1 << (PhpParser.Null - 98)) | (1 << (PhpParser.ObjectType - 98)) | (1 << (PhpParser.Parent_ - 98)) | (1 << (PhpParser.Partial - 98)) | (1 << (PhpParser.Print - 98)) | (1 << (PhpParser.Private - 98)) | (1 << (PhpParser.Protected - 98)) | (1 << (PhpParser.Public - 98)) | (1 << (PhpParser.Require - 98)) | (1 << (PhpParser.RequireOnce - 98)) | (1 << (PhpParser.Resource - 98)) | (1 << (PhpParser.Return - 98)) | (1 << (PhpParser.Static - 98)) | (1 << (PhpParser.StringType - 98)) | (1 << (PhpParser.Switch - 98)) | (1 << (PhpParser.Throw - 98)) | (1 << (PhpParser.Trait - 98)) | (1 << (PhpParser.Try - 98)) | (1 << (PhpParser.Typeof - 98)) | (1 << (PhpParser.UintCast - 98)) | (1 << (PhpParser.UnicodeCast - 98)) | (1 << (PhpParser.Unset - 98)) | (1 << (PhpParser.Use - 98)) | (1 << (PhpParser.Var - 98)) | (1 << (PhpParser.While - 98)) | (1 << (PhpParser.Yield - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PhpParser.From - 130)) | (1 << (PhpParser.LambdaFn - 130)) | (1 << (PhpParser.Get - 130)) | (1 << (PhpParser.Set - 130)) | (1 << (PhpParser.Call - 130)) | (1 << (PhpParser.CallStatic - 130)) | (1 << (PhpParser.Constructor - 130)) | (1 << (PhpParser.Destruct - 130)) | (1 << (PhpParser.Wakeup - 130)) | (1 << (PhpParser.Sleep - 130)) | (1 << (PhpParser.Autoload - 130)) | (1 << (PhpParser.IsSet__ - 130)) | (1 << (PhpParser.Unset__ - 130)) | (1 << (PhpParser.ToString__ - 130)) | (1 << (PhpParser.Invoke - 130)) | (1 << (PhpParser.SetState - 130)) | (1 << (PhpParser.Clone__ - 130)) | (1 << (PhpParser.DebugInfo - 130)) | (1 << (PhpParser.Namespace__ - 130)) | (1 << (PhpParser.Class__ - 130)) | (1 << (PhpParser.Traic__ - 130)) | (1 << (PhpParser.Function__ - 130)) | (1 << (PhpParser.Method__ - 130)) | (1 << (PhpParser.Line__ - 130)) | (1 << (PhpParser.File__ - 130)) | (1 << (PhpParser.Dir__ - 130)) | (1 << (PhpParser.Inc - 130)) | (1 << (PhpParser.Dec - 130)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.OpenCurlyBracket - 189)) | (1 << (PhpParser.SemiColon - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                this.state = 267;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
                switch (la_) {
                    case 1:
                        this.state = 265;
                        this.inlineHtml();
                        break;
                    case 2:
                        this.state = 266;
                        this.phpBlock();
                        break;
                }
                this.state = 271;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 272;
            this.match(PhpParser.EOF);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    inlineHtml() {
        let localctx = new InlineHtmlContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, PhpParser.RULE_inlineHtml);
        try {
            this.state = 280;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.HtmlText:
                case PhpParser.XmlStart:
                case PhpParser.HtmlScriptOpen:
                case PhpParser.HtmlStyleOpen:
                case PhpParser.HtmlDtd:
                case PhpParser.HtmlOpen:
                case PhpParser.HtmlClose:
                case PhpParser.HtmlSlashClose:
                case PhpParser.HtmlSlash:
                case PhpParser.HtmlEquals:
                case PhpParser.HtmlStartQuoteString:
                case PhpParser.HtmlStartDoubleQuoteString:
                case PhpParser.HtmlHex:
                case PhpParser.HtmlDecimal:
                case PhpParser.HtmlName:
                case PhpParser.HtmlEndQuoteString:
                case PhpParser.HtmlQuoteString:
                case PhpParser.HtmlEndDoubleQuoteString:
                case PhpParser.HtmlDoubleQuoteString:
                case PhpParser.HtmlScriptClose:
                case PhpParser.StyleBody:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 275;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 274;
                                this.htmlElement();
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 277;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    break;
                case PhpParser.ScriptText:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 279;
                    this.scriptText();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    htmlElement() {
        let localctx = new HtmlElementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, PhpParser.RULE_htmlElement);
        var _la = 0;
        try {
            this.state = 310;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.HtmlDtd:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 282;
                    this.match(PhpParser.HtmlDtd);
                    break;
                case PhpParser.HtmlClose:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 283;
                    this.match(PhpParser.HtmlClose);
                    break;
                case PhpParser.HtmlStyleOpen:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 284;
                    this.match(PhpParser.HtmlStyleOpen);
                    break;
                case PhpParser.HtmlOpen:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 285;
                    this.match(PhpParser.HtmlOpen);
                    break;
                case PhpParser.HtmlName:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 286;
                    this.match(PhpParser.HtmlName);
                    break;
                case PhpParser.HtmlSlashClose:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 287;
                    this.match(PhpParser.HtmlSlashClose);
                    break;
                case PhpParser.HtmlSlash:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 288;
                    this.match(PhpParser.HtmlSlash);
                    break;
                case PhpParser.HtmlText:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 289;
                    this.match(PhpParser.HtmlText);
                    break;
                case PhpParser.HtmlEquals:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 290;
                    this.match(PhpParser.HtmlEquals);
                    break;
                case PhpParser.HtmlStartQuoteString:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 291;
                    this.match(PhpParser.HtmlStartQuoteString);
                    break;
                case PhpParser.HtmlEndQuoteString:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 292;
                    this.match(PhpParser.HtmlEndQuoteString);
                    break;
                case PhpParser.HtmlStartDoubleQuoteString:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 293;
                    this.match(PhpParser.HtmlStartDoubleQuoteString);
                    break;
                case PhpParser.HtmlEndDoubleQuoteString:
                    this.enterOuterAlt(localctx, 13);
                    this.state = 294;
                    this.match(PhpParser.HtmlEndDoubleQuoteString);
                    break;
                case PhpParser.HtmlHex:
                    this.enterOuterAlt(localctx, 14);
                    this.state = 295;
                    this.match(PhpParser.HtmlHex);
                    break;
                case PhpParser.HtmlDecimal:
                    this.enterOuterAlt(localctx, 15);
                    this.state = 296;
                    this.match(PhpParser.HtmlDecimal);
                    break;
                case PhpParser.HtmlQuoteString:
                    this.enterOuterAlt(localctx, 16);
                    this.state = 297;
                    this.match(PhpParser.HtmlQuoteString);
                    break;
                case PhpParser.HtmlDoubleQuoteString:
                    this.enterOuterAlt(localctx, 17);
                    this.state = 298;
                    this.match(PhpParser.HtmlDoubleQuoteString);
                    break;
                case PhpParser.StyleBody:
                    this.enterOuterAlt(localctx, 18);
                    this.state = 299;
                    this.match(PhpParser.StyleBody);
                    break;
                case PhpParser.HtmlScriptOpen:
                    this.enterOuterAlt(localctx, 19);
                    this.state = 300;
                    this.match(PhpParser.HtmlScriptOpen);
                    break;
                case PhpParser.HtmlScriptClose:
                    this.enterOuterAlt(localctx, 20);
                    this.state = 301;
                    this.match(PhpParser.HtmlScriptClose);
                    break;
                case PhpParser.XmlStart:
                    this.enterOuterAlt(localctx, 21);
                    this.state = 302;
                    this.match(PhpParser.XmlStart);
                    this.state = 306;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === PhpParser.XmlText) {
                        this.state = 303;
                        this.match(PhpParser.XmlText);
                        this.state = 308;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 309;
                    this.match(PhpParser.XmlClose);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    scriptText() {
        let localctx = new ScriptTextContext(this, this._ctx, this.state);
        this.enterRule(localctx, 6, PhpParser.RULE_scriptText);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 313;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 312;
                        this.match(PhpParser.ScriptText);
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 315;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 7, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    phpBlock() {
        let localctx = new PhpBlockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 8, PhpParser.RULE_phpBlock);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 320;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 317;
                    this.importStatement();
                }
                this.state = 322;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
            }
            this.state = 324;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 323;
                        this.topStatement();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 326;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 9, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    importStatement() {
        let localctx = new ImportStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, PhpParser.RULE_importStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 328;
            this.match(PhpParser.Import);
            this.state = 329;
            this.match(PhpParser.Namespace);
            this.state = 330;
            this.namespaceNameList();
            this.state = 331;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    topStatement() {
        let localctx = new TopStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, PhpParser.RULE_topStatement);
        try {
            this.state = 339;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 333;
                    this.statement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 334;
                    this.useDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 335;
                    this.namespaceDeclaration();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 336;
                    this.functionDeclaration();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 337;
                    this.classDeclaration();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 338;
                    this.globalConstantDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    useDeclaration() {
        let localctx = new UseDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 14, PhpParser.RULE_useDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 341;
            this.match(PhpParser.Use);
            this.state = 343;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 11, this._ctx);
            if (la_ === 1) {
                this.state = 342;
                _la = this._input.LA(1);
                if (!(_la === PhpParser.Const || _la === PhpParser.Function)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
            this.state = 345;
            this.useDeclarationContentList();
            this.state = 346;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    useDeclarationContentList() {
        let localctx = new UseDeclarationContentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 16, PhpParser.RULE_useDeclarationContentList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.NamespaceSeparator) {
                this.state = 348;
                this.match(PhpParser.NamespaceSeparator);
            }
            this.state = 351;
            this.useDeclarationContent();
            this.state = 359;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 352;
                this.match(PhpParser.Comma);
                this.state = 354;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === PhpParser.NamespaceSeparator) {
                    this.state = 353;
                    this.match(PhpParser.NamespaceSeparator);
                }
                this.state = 356;
                this.useDeclarationContent();
                this.state = 361;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    useDeclarationContent() {
        let localctx = new UseDeclarationContentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 18, PhpParser.RULE_useDeclarationContent);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 362;
            this.namespaceNameList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namespaceDeclaration() {
        let localctx = new NamespaceDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 20, PhpParser.RULE_namespaceDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 364;
            this.match(PhpParser.Namespace);
            this.state = 379;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 17, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 366;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)))) !== 0) || _la === PhpParser.Label) {
                        this.state = 365;
                        this.namespaceNameList();
                    }
                    this.state = 368;
                    this.match(PhpParser.OpenCurlyBracket);
                    this.state = 372;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (PhpParser.HtmlText - 2)) | (1 << (PhpParser.XmlStart - 2)) | (1 << (PhpParser.HtmlScriptOpen - 2)) | (1 << (PhpParser.HtmlStyleOpen - 2)) | (1 << (PhpParser.HtmlDtd - 2)) | (1 << (PhpParser.HtmlOpen - 2)) | (1 << (PhpParser.HtmlClose - 2)) | (1 << (PhpParser.HtmlSlashClose - 2)) | (1 << (PhpParser.HtmlSlash - 2)) | (1 << (PhpParser.HtmlEquals - 2)) | (1 << (PhpParser.HtmlStartQuoteString - 2)) | (1 << (PhpParser.HtmlStartDoubleQuoteString - 2)) | (1 << (PhpParser.HtmlHex - 2)) | (1 << (PhpParser.HtmlDecimal - 2)) | (1 << (PhpParser.HtmlName - 2)) | (1 << (PhpParser.HtmlEndQuoteString - 2)) | (1 << (PhpParser.HtmlQuoteString - 2)) | (1 << (PhpParser.HtmlEndDoubleQuoteString - 2)) | (1 << (PhpParser.HtmlDoubleQuoteString - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (PhpParser.ScriptText - 34)) | (1 << (PhpParser.HtmlScriptClose - 34)) | (1 << (PhpParser.StyleBody - 34)) | (1 << (PhpParser.AttributeStart - 34)) | (1 << (PhpParser.Abstract - 34)) | (1 << (PhpParser.Array - 34)) | (1 << (PhpParser.As - 34)) | (1 << (PhpParser.BinaryCast - 34)) | (1 << (PhpParser.BoolType - 34)) | (1 << (PhpParser.BooleanConstant - 34)) | (1 << (PhpParser.Break - 34)) | (1 << (PhpParser.Callable - 34)) | (1 << (PhpParser.Case - 34)) | (1 << (PhpParser.Catch - 34)) | (1 << (PhpParser.Class - 34)) | (1 << (PhpParser.Clone - 34)) | (1 << (PhpParser.Const - 34)) | (1 << (PhpParser.Continue - 34)) | (1 << (PhpParser.Declare - 34)) | (1 << (PhpParser.Default - 34)) | (1 << (PhpParser.Do - 34)) | (1 << (PhpParser.DoubleCast - 34)) | (1 << (PhpParser.DoubleType - 34)) | (1 << (PhpParser.Echo - 34)) | (1 << (PhpParser.Else - 34)) | (1 << (PhpParser.ElseIf - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PhpParser.Empty - 66)) | (1 << (PhpParser.EndDeclare - 66)) | (1 << (PhpParser.EndFor - 66)) | (1 << (PhpParser.EndForeach - 66)) | (1 << (PhpParser.EndIf - 66)) | (1 << (PhpParser.EndSwitch - 66)) | (1 << (PhpParser.EndWhile - 66)) | (1 << (PhpParser.Eval - 66)) | (1 << (PhpParser.Exit - 66)) | (1 << (PhpParser.Extends - 66)) | (1 << (PhpParser.Final - 66)) | (1 << (PhpParser.Finally - 66)) | (1 << (PhpParser.FloatCast - 66)) | (1 << (PhpParser.For - 66)) | (1 << (PhpParser.Foreach - 66)) | (1 << (PhpParser.Function - 66)) | (1 << (PhpParser.Global - 66)) | (1 << (PhpParser.Goto - 66)) | (1 << (PhpParser.If - 66)) | (1 << (PhpParser.Implements - 66)) | (1 << (PhpParser.Import - 66)) | (1 << (PhpParser.Include - 66)) | (1 << (PhpParser.IncludeOnce - 66)) | (1 << (PhpParser.InstanceOf - 66)) | (1 << (PhpParser.InsteadOf - 66)) | (1 << (PhpParser.Int8Cast - 66)) | (1 << (PhpParser.Int16Cast - 66)) | (1 << (PhpParser.Int64Type - 66)) | (1 << (PhpParser.IntType - 66)) | (1 << (PhpParser.Interface - 66)) | (1 << (PhpParser.IsSet - 66)) | (1 << (PhpParser.List - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (PhpParser.LogicalAnd - 98)) | (1 << (PhpParser.LogicalOr - 98)) | (1 << (PhpParser.LogicalXor - 98)) | (1 << (PhpParser.Match - 98)) | (1 << (PhpParser.Namespace - 98)) | (1 << (PhpParser.New - 98)) | (1 << (PhpParser.Null - 98)) | (1 << (PhpParser.ObjectType - 98)) | (1 << (PhpParser.Parent_ - 98)) | (1 << (PhpParser.Partial - 98)) | (1 << (PhpParser.Print - 98)) | (1 << (PhpParser.Private - 98)) | (1 << (PhpParser.Protected - 98)) | (1 << (PhpParser.Public - 98)) | (1 << (PhpParser.Require - 98)) | (1 << (PhpParser.RequireOnce - 98)) | (1 << (PhpParser.Resource - 98)) | (1 << (PhpParser.Return - 98)) | (1 << (PhpParser.Static - 98)) | (1 << (PhpParser.StringType - 98)) | (1 << (PhpParser.Switch - 98)) | (1 << (PhpParser.Throw - 98)) | (1 << (PhpParser.Trait - 98)) | (1 << (PhpParser.Try - 98)) | (1 << (PhpParser.Typeof - 98)) | (1 << (PhpParser.UintCast - 98)) | (1 << (PhpParser.UnicodeCast - 98)) | (1 << (PhpParser.Unset - 98)) | (1 << (PhpParser.Use - 98)) | (1 << (PhpParser.Var - 98)) | (1 << (PhpParser.While - 98)) | (1 << (PhpParser.Yield - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (PhpParser.From - 130)) | (1 << (PhpParser.LambdaFn - 130)) | (1 << (PhpParser.Get - 130)) | (1 << (PhpParser.Set - 130)) | (1 << (PhpParser.Call - 130)) | (1 << (PhpParser.CallStatic - 130)) | (1 << (PhpParser.Constructor - 130)) | (1 << (PhpParser.Destruct - 130)) | (1 << (PhpParser.Wakeup - 130)) | (1 << (PhpParser.Sleep - 130)) | (1 << (PhpParser.Autoload - 130)) | (1 << (PhpParser.IsSet__ - 130)) | (1 << (PhpParser.Unset__ - 130)) | (1 << (PhpParser.ToString__ - 130)) | (1 << (PhpParser.Invoke - 130)) | (1 << (PhpParser.SetState - 130)) | (1 << (PhpParser.Clone__ - 130)) | (1 << (PhpParser.DebugInfo - 130)) | (1 << (PhpParser.Namespace__ - 130)) | (1 << (PhpParser.Class__ - 130)) | (1 << (PhpParser.Traic__ - 130)) | (1 << (PhpParser.Function__ - 130)) | (1 << (PhpParser.Method__ - 130)) | (1 << (PhpParser.Line__ - 130)) | (1 << (PhpParser.File__ - 130)) | (1 << (PhpParser.Dir__ - 130)) | (1 << (PhpParser.Inc - 130)) | (1 << (PhpParser.Dec - 130)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.OpenCurlyBracket - 189)) | (1 << (PhpParser.SemiColon - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                        this.state = 369;
                        this.namespaceStatement();
                        this.state = 374;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 375;
                    this.match(PhpParser.CloseCurlyBracket);
                    break;
                case 2:
                    this.state = 376;
                    this.namespaceNameList();
                    this.state = 377;
                    this.match(PhpParser.SemiColon);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namespaceStatement() {
        let localctx = new NamespaceStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 22, PhpParser.RULE_namespaceStatement);
        try {
            this.state = 386;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 381;
                    this.statement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 382;
                    this.useDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 383;
                    this.functionDeclaration();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 384;
                    this.classDeclaration();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 385;
                    this.globalConstantDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionDeclaration() {
        let localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 24, PhpParser.RULE_functionDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 389;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.AttributeStart) {
                this.state = 388;
                this.attributes();
            }
            this.state = 391;
            this.match(PhpParser.Function);
            this.state = 393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Ampersand) {
                this.state = 392;
                this.match(PhpParser.Ampersand);
            }
            this.state = 395;
            this.identifier();
            this.state = 397;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Lgeneric) {
                this.state = 396;
                this.typeParameterListInBrackets();
            }
            this.state = 399;
            this.match(PhpParser.OpenRoundBracket);
            this.state = 400;
            this.formalParameterList();
            this.state = 401;
            this.match(PhpParser.CloseRoundBracket);
            this.state = 407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Colon) {
                this.state = 402;
                this.match(PhpParser.Colon);
                this.state = 404;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (_la === PhpParser.QuestionMark) {
                    this.state = 403;
                    this.match(PhpParser.QuestionMark);
                }
                this.state = 406;
                this.typeHint(0);
            }
            this.state = 409;
            this.blockStatement();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classDeclaration() {
        let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 26, PhpParser.RULE_classDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 412;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.AttributeStart) {
                this.state = 411;
                this.attributes();
            }
            this.state = 415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Private) {
                this.state = 414;
                this.match(PhpParser.Private);
            }
            this.state = 418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Abstract || _la === PhpParser.Final) {
                this.state = 417;
                this.modifier();
            }
            this.state = 421;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Partial) {
                this.state = 420;
                this.match(PhpParser.Partial);
            }
            this.state = 445;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Class:
                case PhpParser.Trait:
                    this.state = 423;
                    this.classEntryType();
                    this.state = 424;
                    this.identifier();
                    this.state = 426;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Lgeneric) {
                        this.state = 425;
                        this.typeParameterListInBrackets();
                    }
                    this.state = 430;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Extends) {
                        this.state = 428;
                        this.match(PhpParser.Extends);
                        this.state = 429;
                        this.qualifiedStaticTypeRef();
                    }
                    this.state = 434;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Implements) {
                        this.state = 432;
                        this.match(PhpParser.Implements);
                        this.state = 433;
                        this.interfaceList();
                    }
                    break;
                case PhpParser.Interface:
                    this.state = 436;
                    this.match(PhpParser.Interface);
                    this.state = 437;
                    this.identifier();
                    this.state = 439;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Lgeneric) {
                        this.state = 438;
                        this.typeParameterListInBrackets();
                    }
                    this.state = 443;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Extends) {
                        this.state = 441;
                        this.match(PhpParser.Extends);
                        this.state = 442;
                        this.interfaceList();
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 447;
            this.match(PhpParser.OpenCurlyBracket);
            this.state = 451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (PhpParser.AttributeStart - 43)) | (1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Const - 43)))) !== 0) || _la === PhpParser.Final || _la === PhpParser.Function || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (PhpParser.Private - 109)) | (1 << (PhpParser.Protected - 109)) | (1 << (PhpParser.Public - 109)) | (1 << (PhpParser.Static - 109)) | (1 << (PhpParser.Use - 109)) | (1 << (PhpParser.Var - 109)))) !== 0)) {
                this.state = 448;
                this.classStatement();
                this.state = 453;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 454;
            this.match(PhpParser.CloseCurlyBracket);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classEntryType() {
        let localctx = new ClassEntryTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 28, PhpParser.RULE_classEntryType);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 456;
            _la = this._input.LA(1);
            if (!(_la === PhpParser.Class || _la === PhpParser.Trait)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interfaceList() {
        let localctx = new InterfaceListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 30, PhpParser.RULE_interfaceList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 458;
            this.qualifiedStaticTypeRef();
            this.state = 463;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 459;
                this.match(PhpParser.Comma);
                this.state = 460;
                this.qualifiedStaticTypeRef();
                this.state = 465;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameterListInBrackets() {
        let localctx = new TypeParameterListInBracketsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 32, PhpParser.RULE_typeParameterListInBrackets);
        try {
            this.state = 480;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 466;
                    this.match(PhpParser.Lgeneric);
                    this.state = 467;
                    this.typeParameterList();
                    this.state = 468;
                    this.match(PhpParser.Rgeneric);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 470;
                    this.match(PhpParser.Lgeneric);
                    this.state = 471;
                    this.typeParameterWithDefaultsList();
                    this.state = 472;
                    this.match(PhpParser.Rgeneric);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 474;
                    this.match(PhpParser.Lgeneric);
                    this.state = 475;
                    this.typeParameterList();
                    this.state = 476;
                    this.match(PhpParser.Comma);
                    this.state = 477;
                    this.typeParameterWithDefaultsList();
                    this.state = 478;
                    this.match(PhpParser.Rgeneric);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameterList() {
        let localctx = new TypeParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 34, PhpParser.RULE_typeParameterList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 482;
            this.typeParameterDecl();
            this.state = 487;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 37, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 483;
                    this.match(PhpParser.Comma);
                    this.state = 484;
                    this.typeParameterDecl();
                }
                this.state = 489;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 37, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameterWithDefaultsList() {
        let localctx = new TypeParameterWithDefaultsListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 36, PhpParser.RULE_typeParameterWithDefaultsList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 490;
            this.typeParameterWithDefaultDecl();
            this.state = 495;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 491;
                this.match(PhpParser.Comma);
                this.state = 492;
                this.typeParameterWithDefaultDecl();
                this.state = 497;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameterDecl() {
        let localctx = new TypeParameterDeclContext(this, this._ctx, this.state);
        this.enterRule(localctx, 38, PhpParser.RULE_typeParameterDecl);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 499;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.AttributeStart) {
                this.state = 498;
                this.attributes();
            }
            this.state = 501;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeParameterWithDefaultDecl() {
        let localctx = new TypeParameterWithDefaultDeclContext(this, this._ctx, this.state);
        this.enterRule(localctx, 40, PhpParser.RULE_typeParameterWithDefaultDecl);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 504;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.AttributeStart) {
                this.state = 503;
                this.attributes();
            }
            this.state = 506;
            this.identifier();
            this.state = 507;
            this.match(PhpParser.Eq);
            this.state = 510;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 41, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 508;
                    this.qualifiedStaticTypeRef();
                    break;
                case 2:
                    this.state = 509;
                    this.primitiveType();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    genericDynamicArgs() {
        let localctx = new GenericDynamicArgsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 42, PhpParser.RULE_genericDynamicArgs);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 512;
            this.match(PhpParser.Lgeneric);
            this.state = 513;
            this.typeRef();
            this.state = 518;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 514;
                this.match(PhpParser.Comma);
                this.state = 515;
                this.typeRef();
                this.state = 520;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 521;
            this.match(PhpParser.Rgeneric);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributes() {
        let localctx = new AttributesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 44, PhpParser.RULE_attributes);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 523;
                this.attributeGroup();
                this.state = 526;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while (_la === PhpParser.AttributeStart);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attributeGroup() {
        let localctx = new AttributeGroupContext(this, this._ctx, this.state);
        this.enterRule(localctx, 46, PhpParser.RULE_attributeGroup);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 528;
            this.match(PhpParser.AttributeStart);
            this.state = 532;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 44, this._ctx);
            if (la_ === 1) {
                this.state = 529;
                this.identifier();
                this.state = 530;
                this.match(PhpParser.Colon);
            }
            this.state = 534;
            this.attribute();
            this.state = 539;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 535;
                this.match(PhpParser.Comma);
                this.state = 536;
                this.attribute();
                this.state = 541;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 542;
            this.match(PhpParser.CloseSquareBracket);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    attribute() {
        let localctx = new AttributeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 48, PhpParser.RULE_attribute);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 544;
            this.qualifiedNamespaceName();
            this.state = 546;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.OpenRoundBracket) {
                this.state = 545;
                this.arguments();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    innerStatementList() {
        let localctx = new InnerStatementListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 50, PhpParser.RULE_innerStatementList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 551;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 47, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 548;
                    this.innerStatement();
                }
                this.state = 553;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 47, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    innerStatement() {
        let localctx = new InnerStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 52, PhpParser.RULE_innerStatement);
        try {
            this.state = 557;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 48, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 554;
                    this.statement();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 555;
                    this.functionDeclaration();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 556;
                    this.classDeclaration();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    statement() {
        let localctx = new StatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 54, PhpParser.RULE_statement);
        try {
            this.state = 586;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 49, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 559;
                    this.identifier();
                    this.state = 560;
                    this.match(PhpParser.Colon);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 562;
                    this.blockStatement();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 563;
                    this.ifStatement();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 564;
                    this.whileStatement();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 565;
                    this.doWhileStatement();
                    break;
                case 6:
                    this.enterOuterAlt(localctx, 6);
                    this.state = 566;
                    this.forStatement();
                    break;
                case 7:
                    this.enterOuterAlt(localctx, 7);
                    this.state = 567;
                    this.switchStatement();
                    break;
                case 8:
                    this.enterOuterAlt(localctx, 8);
                    this.state = 568;
                    this.breakStatement();
                    break;
                case 9:
                    this.enterOuterAlt(localctx, 9);
                    this.state = 569;
                    this.continueStatement();
                    break;
                case 10:
                    this.enterOuterAlt(localctx, 10);
                    this.state = 570;
                    this.returnStatement();
                    break;
                case 11:
                    this.enterOuterAlt(localctx, 11);
                    this.state = 571;
                    this.yieldExpression();
                    this.state = 572;
                    this.match(PhpParser.SemiColon);
                    break;
                case 12:
                    this.enterOuterAlt(localctx, 12);
                    this.state = 574;
                    this.globalStatement();
                    break;
                case 13:
                    this.enterOuterAlt(localctx, 13);
                    this.state = 575;
                    this.staticVariableStatement();
                    break;
                case 14:
                    this.enterOuterAlt(localctx, 14);
                    this.state = 576;
                    this.echoStatement();
                    break;
                case 15:
                    this.enterOuterAlt(localctx, 15);
                    this.state = 577;
                    this.expressionStatement();
                    break;
                case 16:
                    this.enterOuterAlt(localctx, 16);
                    this.state = 578;
                    this.unsetStatement();
                    break;
                case 17:
                    this.enterOuterAlt(localctx, 17);
                    this.state = 579;
                    this.foreachStatement();
                    break;
                case 18:
                    this.enterOuterAlt(localctx, 18);
                    this.state = 580;
                    this.tryCatchFinally();
                    break;
                case 19:
                    this.enterOuterAlt(localctx, 19);
                    this.state = 581;
                    this.throwStatement();
                    break;
                case 20:
                    this.enterOuterAlt(localctx, 20);
                    this.state = 582;
                    this.gotoStatement();
                    break;
                case 21:
                    this.enterOuterAlt(localctx, 21);
                    this.state = 583;
                    this.declareStatement();
                    break;
                case 22:
                    this.enterOuterAlt(localctx, 22);
                    this.state = 584;
                    this.emptyStatement();
                    break;
                case 23:
                    this.enterOuterAlt(localctx, 23);
                    this.state = 585;
                    this.inlineHtmlStatement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    emptyStatement() {
        let localctx = new EmptyStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 56, PhpParser.RULE_emptyStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 588;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    blockStatement() {
        let localctx = new BlockStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 58, PhpParser.RULE_blockStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 590;
            this.match(PhpParser.OpenCurlyBracket);
            this.state = 591;
            this.innerStatementList();
            this.state = 592;
            this.match(PhpParser.CloseCurlyBracket);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    ifStatement() {
        let localctx = new IfStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 60, PhpParser.RULE_ifStatement);
        var _la = 0;
        try {
            this.state = 622;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 54, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 594;
                    this.match(PhpParser.If);
                    this.state = 595;
                    this.parentheses();
                    this.state = 596;
                    this.statement();
                    this.state = 600;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 50, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 597;
                            this.elseIfStatement();
                        }
                        this.state = 602;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 50, this._ctx);
                    }
                    this.state = 604;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 51, this._ctx);
                    if (la_ === 1) {
                        this.state = 603;
                        this.elseStatement();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 606;
                    this.match(PhpParser.If);
                    this.state = 607;
                    this.parentheses();
                    this.state = 608;
                    this.match(PhpParser.Colon);
                    this.state = 609;
                    this.innerStatementList();
                    this.state = 613;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === PhpParser.ElseIf) {
                        this.state = 610;
                        this.elseIfColonStatement();
                        this.state = 615;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 617;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Else) {
                        this.state = 616;
                        this.elseColonStatement();
                    }
                    this.state = 619;
                    this.match(PhpParser.EndIf);
                    this.state = 620;
                    this.match(PhpParser.SemiColon);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elseIfStatement() {
        let localctx = new ElseIfStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 62, PhpParser.RULE_elseIfStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 624;
            this.match(PhpParser.ElseIf);
            this.state = 625;
            this.parentheses();
            this.state = 626;
            this.statement();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elseIfColonStatement() {
        let localctx = new ElseIfColonStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 64, PhpParser.RULE_elseIfColonStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 628;
            this.match(PhpParser.ElseIf);
            this.state = 629;
            this.parentheses();
            this.state = 630;
            this.match(PhpParser.Colon);
            this.state = 631;
            this.innerStatementList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elseStatement() {
        let localctx = new ElseStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 66, PhpParser.RULE_elseStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 633;
            this.match(PhpParser.Else);
            this.state = 634;
            this.statement();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    elseColonStatement() {
        let localctx = new ElseColonStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 68, PhpParser.RULE_elseColonStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 636;
            this.match(PhpParser.Else);
            this.state = 637;
            this.match(PhpParser.Colon);
            this.state = 638;
            this.innerStatementList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    whileStatement() {
        let localctx = new WhileStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 70, PhpParser.RULE_whileStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 640;
            this.match(PhpParser.While);
            this.state = 641;
            this.parentheses();
            this.state = 648;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.HtmlText:
                case PhpParser.XmlStart:
                case PhpParser.HtmlScriptOpen:
                case PhpParser.HtmlStyleOpen:
                case PhpParser.HtmlDtd:
                case PhpParser.HtmlOpen:
                case PhpParser.HtmlClose:
                case PhpParser.HtmlSlashClose:
                case PhpParser.HtmlSlash:
                case PhpParser.HtmlEquals:
                case PhpParser.HtmlStartQuoteString:
                case PhpParser.HtmlStartDoubleQuoteString:
                case PhpParser.HtmlHex:
                case PhpParser.HtmlDecimal:
                case PhpParser.HtmlName:
                case PhpParser.HtmlEndQuoteString:
                case PhpParser.HtmlQuoteString:
                case PhpParser.HtmlEndDoubleQuoteString:
                case PhpParser.HtmlDoubleQuoteString:
                case PhpParser.ScriptText:
                case PhpParser.HtmlScriptClose:
                case PhpParser.StyleBody:
                case PhpParser.Abstract:
                case PhpParser.Array:
                case PhpParser.As:
                case PhpParser.BinaryCast:
                case PhpParser.BoolType:
                case PhpParser.BooleanConstant:
                case PhpParser.Break:
                case PhpParser.Callable:
                case PhpParser.Case:
                case PhpParser.Catch:
                case PhpParser.Class:
                case PhpParser.Clone:
                case PhpParser.Const:
                case PhpParser.Continue:
                case PhpParser.Declare:
                case PhpParser.Default:
                case PhpParser.Do:
                case PhpParser.DoubleCast:
                case PhpParser.DoubleType:
                case PhpParser.Echo:
                case PhpParser.Else:
                case PhpParser.ElseIf:
                case PhpParser.Empty:
                case PhpParser.EndDeclare:
                case PhpParser.EndFor:
                case PhpParser.EndForeach:
                case PhpParser.EndIf:
                case PhpParser.EndSwitch:
                case PhpParser.EndWhile:
                case PhpParser.Eval:
                case PhpParser.Exit:
                case PhpParser.Extends:
                case PhpParser.Final:
                case PhpParser.Finally:
                case PhpParser.FloatCast:
                case PhpParser.For:
                case PhpParser.Foreach:
                case PhpParser.Function:
                case PhpParser.Global:
                case PhpParser.Goto:
                case PhpParser.If:
                case PhpParser.Implements:
                case PhpParser.Import:
                case PhpParser.Include:
                case PhpParser.IncludeOnce:
                case PhpParser.InstanceOf:
                case PhpParser.InsteadOf:
                case PhpParser.Int8Cast:
                case PhpParser.Int16Cast:
                case PhpParser.Int64Type:
                case PhpParser.IntType:
                case PhpParser.Interface:
                case PhpParser.IsSet:
                case PhpParser.List:
                case PhpParser.LogicalAnd:
                case PhpParser.LogicalOr:
                case PhpParser.LogicalXor:
                case PhpParser.Match:
                case PhpParser.Namespace:
                case PhpParser.New:
                case PhpParser.Null:
                case PhpParser.ObjectType:
                case PhpParser.Parent_:
                case PhpParser.Partial:
                case PhpParser.Print:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Require:
                case PhpParser.RequireOnce:
                case PhpParser.Resource:
                case PhpParser.Return:
                case PhpParser.Static:
                case PhpParser.StringType:
                case PhpParser.Switch:
                case PhpParser.Throw:
                case PhpParser.Trait:
                case PhpParser.Try:
                case PhpParser.Typeof:
                case PhpParser.UintCast:
                case PhpParser.UnicodeCast:
                case PhpParser.Unset:
                case PhpParser.Use:
                case PhpParser.Var:
                case PhpParser.While:
                case PhpParser.Yield:
                case PhpParser.From:
                case PhpParser.LambdaFn:
                case PhpParser.Get:
                case PhpParser.Set:
                case PhpParser.Call:
                case PhpParser.CallStatic:
                case PhpParser.Constructor:
                case PhpParser.Destruct:
                case PhpParser.Wakeup:
                case PhpParser.Sleep:
                case PhpParser.Autoload:
                case PhpParser.IsSet__:
                case PhpParser.Unset__:
                case PhpParser.ToString__:
                case PhpParser.Invoke:
                case PhpParser.SetState:
                case PhpParser.Clone__:
                case PhpParser.DebugInfo:
                case PhpParser.Namespace__:
                case PhpParser.Class__:
                case PhpParser.Traic__:
                case PhpParser.Function__:
                case PhpParser.Method__:
                case PhpParser.Line__:
                case PhpParser.File__:
                case PhpParser.Dir__:
                case PhpParser.Inc:
                case PhpParser.Dec:
                case PhpParser.NamespaceSeparator:
                case PhpParser.Bang:
                case PhpParser.Plus:
                case PhpParser.Minus:
                case PhpParser.Tilde:
                case PhpParser.SuppressWarnings:
                case PhpParser.Dollar:
                case PhpParser.OpenRoundBracket:
                case PhpParser.OpenSquareBracket:
                case PhpParser.OpenCurlyBracket:
                case PhpParser.SemiColon:
                case PhpParser.VarName:
                case PhpParser.Label:
                case PhpParser.Octal:
                case PhpParser.Decimal:
                case PhpParser.Real:
                case PhpParser.Hex:
                case PhpParser.Binary:
                case PhpParser.BackQuoteString:
                case PhpParser.SingleQuoteString:
                case PhpParser.DoubleQuote:
                case PhpParser.StartNowDoc:
                case PhpParser.StartHereDoc:
                    this.state = 642;
                    this.statement();
                    break;
                case PhpParser.Colon:
                    this.state = 643;
                    this.match(PhpParser.Colon);
                    this.state = 644;
                    this.innerStatementList();
                    this.state = 645;
                    this.match(PhpParser.EndWhile);
                    this.state = 646;
                    this.match(PhpParser.SemiColon);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    doWhileStatement() {
        let localctx = new DoWhileStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 72, PhpParser.RULE_doWhileStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 650;
            this.match(PhpParser.Do);
            this.state = 651;
            this.statement();
            this.state = 652;
            this.match(PhpParser.While);
            this.state = 653;
            this.parentheses();
            this.state = 654;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    forStatement() {
        let localctx = new ForStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 74, PhpParser.RULE_forStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 656;
            this.match(PhpParser.For);
            this.state = 657;
            this.match(PhpParser.OpenRoundBracket);
            this.state = 659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                this.state = 658;
                this.forInit();
            }
            this.state = 661;
            this.match(PhpParser.SemiColon);
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                this.state = 662;
                this.expressionList();
            }
            this.state = 665;
            this.match(PhpParser.SemiColon);
            this.state = 667;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                this.state = 666;
                this.forUpdate();
            }
            this.state = 669;
            this.match(PhpParser.CloseRoundBracket);
            this.state = 676;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.HtmlText:
                case PhpParser.XmlStart:
                case PhpParser.HtmlScriptOpen:
                case PhpParser.HtmlStyleOpen:
                case PhpParser.HtmlDtd:
                case PhpParser.HtmlOpen:
                case PhpParser.HtmlClose:
                case PhpParser.HtmlSlashClose:
                case PhpParser.HtmlSlash:
                case PhpParser.HtmlEquals:
                case PhpParser.HtmlStartQuoteString:
                case PhpParser.HtmlStartDoubleQuoteString:
                case PhpParser.HtmlHex:
                case PhpParser.HtmlDecimal:
                case PhpParser.HtmlName:
                case PhpParser.HtmlEndQuoteString:
                case PhpParser.HtmlQuoteString:
                case PhpParser.HtmlEndDoubleQuoteString:
                case PhpParser.HtmlDoubleQuoteString:
                case PhpParser.ScriptText:
                case PhpParser.HtmlScriptClose:
                case PhpParser.StyleBody:
                case PhpParser.Abstract:
                case PhpParser.Array:
                case PhpParser.As:
                case PhpParser.BinaryCast:
                case PhpParser.BoolType:
                case PhpParser.BooleanConstant:
                case PhpParser.Break:
                case PhpParser.Callable:
                case PhpParser.Case:
                case PhpParser.Catch:
                case PhpParser.Class:
                case PhpParser.Clone:
                case PhpParser.Const:
                case PhpParser.Continue:
                case PhpParser.Declare:
                case PhpParser.Default:
                case PhpParser.Do:
                case PhpParser.DoubleCast:
                case PhpParser.DoubleType:
                case PhpParser.Echo:
                case PhpParser.Else:
                case PhpParser.ElseIf:
                case PhpParser.Empty:
                case PhpParser.EndDeclare:
                case PhpParser.EndFor:
                case PhpParser.EndForeach:
                case PhpParser.EndIf:
                case PhpParser.EndSwitch:
                case PhpParser.EndWhile:
                case PhpParser.Eval:
                case PhpParser.Exit:
                case PhpParser.Extends:
                case PhpParser.Final:
                case PhpParser.Finally:
                case PhpParser.FloatCast:
                case PhpParser.For:
                case PhpParser.Foreach:
                case PhpParser.Function:
                case PhpParser.Global:
                case PhpParser.Goto:
                case PhpParser.If:
                case PhpParser.Implements:
                case PhpParser.Import:
                case PhpParser.Include:
                case PhpParser.IncludeOnce:
                case PhpParser.InstanceOf:
                case PhpParser.InsteadOf:
                case PhpParser.Int8Cast:
                case PhpParser.Int16Cast:
                case PhpParser.Int64Type:
                case PhpParser.IntType:
                case PhpParser.Interface:
                case PhpParser.IsSet:
                case PhpParser.List:
                case PhpParser.LogicalAnd:
                case PhpParser.LogicalOr:
                case PhpParser.LogicalXor:
                case PhpParser.Match:
                case PhpParser.Namespace:
                case PhpParser.New:
                case PhpParser.Null:
                case PhpParser.ObjectType:
                case PhpParser.Parent_:
                case PhpParser.Partial:
                case PhpParser.Print:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Require:
                case PhpParser.RequireOnce:
                case PhpParser.Resource:
                case PhpParser.Return:
                case PhpParser.Static:
                case PhpParser.StringType:
                case PhpParser.Switch:
                case PhpParser.Throw:
                case PhpParser.Trait:
                case PhpParser.Try:
                case PhpParser.Typeof:
                case PhpParser.UintCast:
                case PhpParser.UnicodeCast:
                case PhpParser.Unset:
                case PhpParser.Use:
                case PhpParser.Var:
                case PhpParser.While:
                case PhpParser.Yield:
                case PhpParser.From:
                case PhpParser.LambdaFn:
                case PhpParser.Get:
                case PhpParser.Set:
                case PhpParser.Call:
                case PhpParser.CallStatic:
                case PhpParser.Constructor:
                case PhpParser.Destruct:
                case PhpParser.Wakeup:
                case PhpParser.Sleep:
                case PhpParser.Autoload:
                case PhpParser.IsSet__:
                case PhpParser.Unset__:
                case PhpParser.ToString__:
                case PhpParser.Invoke:
                case PhpParser.SetState:
                case PhpParser.Clone__:
                case PhpParser.DebugInfo:
                case PhpParser.Namespace__:
                case PhpParser.Class__:
                case PhpParser.Traic__:
                case PhpParser.Function__:
                case PhpParser.Method__:
                case PhpParser.Line__:
                case PhpParser.File__:
                case PhpParser.Dir__:
                case PhpParser.Inc:
                case PhpParser.Dec:
                case PhpParser.NamespaceSeparator:
                case PhpParser.Bang:
                case PhpParser.Plus:
                case PhpParser.Minus:
                case PhpParser.Tilde:
                case PhpParser.SuppressWarnings:
                case PhpParser.Dollar:
                case PhpParser.OpenRoundBracket:
                case PhpParser.OpenSquareBracket:
                case PhpParser.OpenCurlyBracket:
                case PhpParser.SemiColon:
                case PhpParser.VarName:
                case PhpParser.Label:
                case PhpParser.Octal:
                case PhpParser.Decimal:
                case PhpParser.Real:
                case PhpParser.Hex:
                case PhpParser.Binary:
                case PhpParser.BackQuoteString:
                case PhpParser.SingleQuoteString:
                case PhpParser.DoubleQuote:
                case PhpParser.StartNowDoc:
                case PhpParser.StartHereDoc:
                    this.state = 670;
                    this.statement();
                    break;
                case PhpParser.Colon:
                    this.state = 671;
                    this.match(PhpParser.Colon);
                    this.state = 672;
                    this.innerStatementList();
                    this.state = 673;
                    this.match(PhpParser.EndFor);
                    this.state = 674;
                    this.match(PhpParser.SemiColon);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    forInit() {
        let localctx = new ForInitContext(this, this._ctx, this.state);
        this.enterRule(localctx, 76, PhpParser.RULE_forInit);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 678;
            this.expressionList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    forUpdate() {
        let localctx = new ForUpdateContext(this, this._ctx, this.state);
        this.enterRule(localctx, 78, PhpParser.RULE_forUpdate);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 680;
            this.expressionList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    switchStatement() {
        let localctx = new SwitchStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 80, PhpParser.RULE_switchStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 682;
            this.match(PhpParser.Switch);
            this.state = 683;
            this.parentheses();
            this.state = 707;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.OpenCurlyBracket:
                    this.state = 684;
                    this.match(PhpParser.OpenCurlyBracket);
                    this.state = 686;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.SemiColon) {
                        this.state = 685;
                        this.match(PhpParser.SemiColon);
                    }
                    this.state = 691;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === PhpParser.Case || _la === PhpParser.Default) {
                        this.state = 688;
                        this.switchBlock();
                        this.state = 693;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 694;
                    this.match(PhpParser.CloseCurlyBracket);
                    break;
                case PhpParser.Colon:
                    this.state = 695;
                    this.match(PhpParser.Colon);
                    this.state = 697;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.SemiColon) {
                        this.state = 696;
                        this.match(PhpParser.SemiColon);
                    }
                    this.state = 702;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === PhpParser.Case || _la === PhpParser.Default) {
                        this.state = 699;
                        this.switchBlock();
                        this.state = 704;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 705;
                    this.match(PhpParser.EndSwitch);
                    this.state = 706;
                    this.match(PhpParser.SemiColon);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    switchBlock() {
        let localctx = new SwitchBlockContext(this, this._ctx, this.state);
        this.enterRule(localctx, 82, PhpParser.RULE_switchBlock);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 715;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 712;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                            case PhpParser.Case:
                                this.state = 709;
                                this.match(PhpParser.Case);
                                this.state = 710;
                                this.expression(0);
                                break;
                            case PhpParser.Default:
                                this.state = 711;
                                this.match(PhpParser.Default);
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 714;
                        _la = this._input.LA(1);
                        if (!(_la === PhpParser.Colon || _la === PhpParser.SemiColon)) {
                            this._errHandler.recoverInline(this);
                        }
                        else {
                            this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 717;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 66, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
            this.state = 719;
            this.innerStatementList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    breakStatement() {
        let localctx = new BreakStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 84, PhpParser.RULE_breakStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 721;
            this.match(PhpParser.Break);
            this.state = 723;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                this.state = 722;
                this.expression(0);
            }
            this.state = 725;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    continueStatement() {
        let localctx = new ContinueStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 86, PhpParser.RULE_continueStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 727;
            this.match(PhpParser.Continue);
            this.state = 729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                this.state = 728;
                this.expression(0);
            }
            this.state = 731;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    returnStatement() {
        let localctx = new ReturnStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 88, PhpParser.RULE_returnStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 733;
            this.match(PhpParser.Return);
            this.state = 735;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                this.state = 734;
                this.expression(0);
            }
            this.state = 737;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expressionStatement() {
        let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 90, PhpParser.RULE_expressionStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 739;
            this.expression(0);
            this.state = 740;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    unsetStatement() {
        let localctx = new UnsetStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 92, PhpParser.RULE_unsetStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 742;
            this.match(PhpParser.Unset);
            this.state = 743;
            this.match(PhpParser.OpenRoundBracket);
            this.state = 744;
            this.chainList();
            this.state = 745;
            this.match(PhpParser.CloseRoundBracket);
            this.state = 746;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    foreachStatement() {
        let localctx = new ForeachStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 94, PhpParser.RULE_foreachStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 748;
            this.match(PhpParser.Foreach);
            this.state = 787;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 75, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 749;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 750;
                    this.chain();
                    this.state = 751;
                    this.match(PhpParser.As);
                    this.state = 753;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Ampersand) {
                        this.state = 752;
                        this.match(PhpParser.Ampersand);
                    }
                    this.state = 755;
                    this.assignable();
                    this.state = 761;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.DoubleArrow) {
                        this.state = 756;
                        this.match(PhpParser.DoubleArrow);
                        this.state = 758;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === PhpParser.Ampersand) {
                            this.state = 757;
                            this.match(PhpParser.Ampersand);
                        }
                        this.state = 760;
                        this.chain();
                    }
                    this.state = 763;
                    this.match(PhpParser.CloseRoundBracket);
                    break;
                case 2:
                    this.state = 765;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 766;
                    this.expression(0);
                    this.state = 767;
                    this.match(PhpParser.As);
                    this.state = 768;
                    this.assignable();
                    this.state = 774;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.DoubleArrow) {
                        this.state = 769;
                        this.match(PhpParser.DoubleArrow);
                        this.state = 771;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === PhpParser.Ampersand) {
                            this.state = 770;
                            this.match(PhpParser.Ampersand);
                        }
                        this.state = 773;
                        this.chain();
                    }
                    this.state = 776;
                    this.match(PhpParser.CloseRoundBracket);
                    break;
                case 3:
                    this.state = 778;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 779;
                    this.chain();
                    this.state = 780;
                    this.match(PhpParser.As);
                    this.state = 781;
                    this.match(PhpParser.List);
                    this.state = 782;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 783;
                    this.assignmentList();
                    this.state = 784;
                    this.match(PhpParser.CloseRoundBracket);
                    this.state = 785;
                    this.match(PhpParser.CloseRoundBracket);
                    break;
            }
            this.state = 795;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.HtmlText:
                case PhpParser.XmlStart:
                case PhpParser.HtmlScriptOpen:
                case PhpParser.HtmlStyleOpen:
                case PhpParser.HtmlDtd:
                case PhpParser.HtmlOpen:
                case PhpParser.HtmlClose:
                case PhpParser.HtmlSlashClose:
                case PhpParser.HtmlSlash:
                case PhpParser.HtmlEquals:
                case PhpParser.HtmlStartQuoteString:
                case PhpParser.HtmlStartDoubleQuoteString:
                case PhpParser.HtmlHex:
                case PhpParser.HtmlDecimal:
                case PhpParser.HtmlName:
                case PhpParser.HtmlEndQuoteString:
                case PhpParser.HtmlQuoteString:
                case PhpParser.HtmlEndDoubleQuoteString:
                case PhpParser.HtmlDoubleQuoteString:
                case PhpParser.ScriptText:
                case PhpParser.HtmlScriptClose:
                case PhpParser.StyleBody:
                case PhpParser.Abstract:
                case PhpParser.Array:
                case PhpParser.As:
                case PhpParser.BinaryCast:
                case PhpParser.BoolType:
                case PhpParser.BooleanConstant:
                case PhpParser.Break:
                case PhpParser.Callable:
                case PhpParser.Case:
                case PhpParser.Catch:
                case PhpParser.Class:
                case PhpParser.Clone:
                case PhpParser.Const:
                case PhpParser.Continue:
                case PhpParser.Declare:
                case PhpParser.Default:
                case PhpParser.Do:
                case PhpParser.DoubleCast:
                case PhpParser.DoubleType:
                case PhpParser.Echo:
                case PhpParser.Else:
                case PhpParser.ElseIf:
                case PhpParser.Empty:
                case PhpParser.EndDeclare:
                case PhpParser.EndFor:
                case PhpParser.EndForeach:
                case PhpParser.EndIf:
                case PhpParser.EndSwitch:
                case PhpParser.EndWhile:
                case PhpParser.Eval:
                case PhpParser.Exit:
                case PhpParser.Extends:
                case PhpParser.Final:
                case PhpParser.Finally:
                case PhpParser.FloatCast:
                case PhpParser.For:
                case PhpParser.Foreach:
                case PhpParser.Function:
                case PhpParser.Global:
                case PhpParser.Goto:
                case PhpParser.If:
                case PhpParser.Implements:
                case PhpParser.Import:
                case PhpParser.Include:
                case PhpParser.IncludeOnce:
                case PhpParser.InstanceOf:
                case PhpParser.InsteadOf:
                case PhpParser.Int8Cast:
                case PhpParser.Int16Cast:
                case PhpParser.Int64Type:
                case PhpParser.IntType:
                case PhpParser.Interface:
                case PhpParser.IsSet:
                case PhpParser.List:
                case PhpParser.LogicalAnd:
                case PhpParser.LogicalOr:
                case PhpParser.LogicalXor:
                case PhpParser.Match:
                case PhpParser.Namespace:
                case PhpParser.New:
                case PhpParser.Null:
                case PhpParser.ObjectType:
                case PhpParser.Parent_:
                case PhpParser.Partial:
                case PhpParser.Print:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Require:
                case PhpParser.RequireOnce:
                case PhpParser.Resource:
                case PhpParser.Return:
                case PhpParser.Static:
                case PhpParser.StringType:
                case PhpParser.Switch:
                case PhpParser.Throw:
                case PhpParser.Trait:
                case PhpParser.Try:
                case PhpParser.Typeof:
                case PhpParser.UintCast:
                case PhpParser.UnicodeCast:
                case PhpParser.Unset:
                case PhpParser.Use:
                case PhpParser.Var:
                case PhpParser.While:
                case PhpParser.Yield:
                case PhpParser.From:
                case PhpParser.LambdaFn:
                case PhpParser.Get:
                case PhpParser.Set:
                case PhpParser.Call:
                case PhpParser.CallStatic:
                case PhpParser.Constructor:
                case PhpParser.Destruct:
                case PhpParser.Wakeup:
                case PhpParser.Sleep:
                case PhpParser.Autoload:
                case PhpParser.IsSet__:
                case PhpParser.Unset__:
                case PhpParser.ToString__:
                case PhpParser.Invoke:
                case PhpParser.SetState:
                case PhpParser.Clone__:
                case PhpParser.DebugInfo:
                case PhpParser.Namespace__:
                case PhpParser.Class__:
                case PhpParser.Traic__:
                case PhpParser.Function__:
                case PhpParser.Method__:
                case PhpParser.Line__:
                case PhpParser.File__:
                case PhpParser.Dir__:
                case PhpParser.Inc:
                case PhpParser.Dec:
                case PhpParser.NamespaceSeparator:
                case PhpParser.Bang:
                case PhpParser.Plus:
                case PhpParser.Minus:
                case PhpParser.Tilde:
                case PhpParser.SuppressWarnings:
                case PhpParser.Dollar:
                case PhpParser.OpenRoundBracket:
                case PhpParser.OpenSquareBracket:
                case PhpParser.OpenCurlyBracket:
                case PhpParser.SemiColon:
                case PhpParser.VarName:
                case PhpParser.Label:
                case PhpParser.Octal:
                case PhpParser.Decimal:
                case PhpParser.Real:
                case PhpParser.Hex:
                case PhpParser.Binary:
                case PhpParser.BackQuoteString:
                case PhpParser.SingleQuoteString:
                case PhpParser.DoubleQuote:
                case PhpParser.StartNowDoc:
                case PhpParser.StartHereDoc:
                    this.state = 789;
                    this.statement();
                    break;
                case PhpParser.Colon:
                    this.state = 790;
                    this.match(PhpParser.Colon);
                    this.state = 791;
                    this.innerStatementList();
                    this.state = 792;
                    this.match(PhpParser.EndForeach);
                    this.state = 793;
                    this.match(PhpParser.SemiColon);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    tryCatchFinally() {
        let localctx = new TryCatchFinallyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 96, PhpParser.RULE_tryCatchFinally);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 797;
            this.match(PhpParser.Try);
            this.state = 798;
            this.blockStatement();
            this.state = 814;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 800;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 799;
                                this.catchClause();
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 802;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 77, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    this.state = 805;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 78, this._ctx);
                    if (la_ === 1) {
                        this.state = 804;
                        this.finallyStatement();
                    }
                    break;
                case 2:
                    this.state = 810;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (_la === PhpParser.Catch) {
                        this.state = 807;
                        this.catchClause();
                        this.state = 812;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 813;
                    this.finallyStatement();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    catchClause() {
        let localctx = new CatchClauseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 98, PhpParser.RULE_catchClause);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 816;
            this.match(PhpParser.Catch);
            this.state = 817;
            this.match(PhpParser.OpenRoundBracket);
            this.state = 818;
            this.qualifiedStaticTypeRef();
            this.state = 823;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Pipe) {
                this.state = 819;
                this.match(PhpParser.Pipe);
                this.state = 820;
                this.qualifiedStaticTypeRef();
                this.state = 825;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 826;
            this.match(PhpParser.VarName);
            this.state = 827;
            this.match(PhpParser.CloseRoundBracket);
            this.state = 828;
            this.blockStatement();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    finallyStatement() {
        let localctx = new FinallyStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 100, PhpParser.RULE_finallyStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 830;
            this.match(PhpParser.Finally);
            this.state = 831;
            this.blockStatement();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    throwStatement() {
        let localctx = new ThrowStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 102, PhpParser.RULE_throwStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 833;
            this.match(PhpParser.Throw);
            this.state = 834;
            this.expression(0);
            this.state = 835;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    gotoStatement() {
        let localctx = new GotoStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 104, PhpParser.RULE_gotoStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 837;
            this.match(PhpParser.Goto);
            this.state = 838;
            this.identifier();
            this.state = 839;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    declareStatement() {
        let localctx = new DeclareStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 106, PhpParser.RULE_declareStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 841;
            this.match(PhpParser.Declare);
            this.state = 842;
            this.match(PhpParser.OpenRoundBracket);
            this.state = 843;
            this.declareList();
            this.state = 844;
            this.match(PhpParser.CloseRoundBracket);
            this.state = 851;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.HtmlText:
                case PhpParser.XmlStart:
                case PhpParser.HtmlScriptOpen:
                case PhpParser.HtmlStyleOpen:
                case PhpParser.HtmlDtd:
                case PhpParser.HtmlOpen:
                case PhpParser.HtmlClose:
                case PhpParser.HtmlSlashClose:
                case PhpParser.HtmlSlash:
                case PhpParser.HtmlEquals:
                case PhpParser.HtmlStartQuoteString:
                case PhpParser.HtmlStartDoubleQuoteString:
                case PhpParser.HtmlHex:
                case PhpParser.HtmlDecimal:
                case PhpParser.HtmlName:
                case PhpParser.HtmlEndQuoteString:
                case PhpParser.HtmlQuoteString:
                case PhpParser.HtmlEndDoubleQuoteString:
                case PhpParser.HtmlDoubleQuoteString:
                case PhpParser.ScriptText:
                case PhpParser.HtmlScriptClose:
                case PhpParser.StyleBody:
                case PhpParser.Abstract:
                case PhpParser.Array:
                case PhpParser.As:
                case PhpParser.BinaryCast:
                case PhpParser.BoolType:
                case PhpParser.BooleanConstant:
                case PhpParser.Break:
                case PhpParser.Callable:
                case PhpParser.Case:
                case PhpParser.Catch:
                case PhpParser.Class:
                case PhpParser.Clone:
                case PhpParser.Const:
                case PhpParser.Continue:
                case PhpParser.Declare:
                case PhpParser.Default:
                case PhpParser.Do:
                case PhpParser.DoubleCast:
                case PhpParser.DoubleType:
                case PhpParser.Echo:
                case PhpParser.Else:
                case PhpParser.ElseIf:
                case PhpParser.Empty:
                case PhpParser.EndDeclare:
                case PhpParser.EndFor:
                case PhpParser.EndForeach:
                case PhpParser.EndIf:
                case PhpParser.EndSwitch:
                case PhpParser.EndWhile:
                case PhpParser.Eval:
                case PhpParser.Exit:
                case PhpParser.Extends:
                case PhpParser.Final:
                case PhpParser.Finally:
                case PhpParser.FloatCast:
                case PhpParser.For:
                case PhpParser.Foreach:
                case PhpParser.Function:
                case PhpParser.Global:
                case PhpParser.Goto:
                case PhpParser.If:
                case PhpParser.Implements:
                case PhpParser.Import:
                case PhpParser.Include:
                case PhpParser.IncludeOnce:
                case PhpParser.InstanceOf:
                case PhpParser.InsteadOf:
                case PhpParser.Int8Cast:
                case PhpParser.Int16Cast:
                case PhpParser.Int64Type:
                case PhpParser.IntType:
                case PhpParser.Interface:
                case PhpParser.IsSet:
                case PhpParser.List:
                case PhpParser.LogicalAnd:
                case PhpParser.LogicalOr:
                case PhpParser.LogicalXor:
                case PhpParser.Match:
                case PhpParser.Namespace:
                case PhpParser.New:
                case PhpParser.Null:
                case PhpParser.ObjectType:
                case PhpParser.Parent_:
                case PhpParser.Partial:
                case PhpParser.Print:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Require:
                case PhpParser.RequireOnce:
                case PhpParser.Resource:
                case PhpParser.Return:
                case PhpParser.Static:
                case PhpParser.StringType:
                case PhpParser.Switch:
                case PhpParser.Throw:
                case PhpParser.Trait:
                case PhpParser.Try:
                case PhpParser.Typeof:
                case PhpParser.UintCast:
                case PhpParser.UnicodeCast:
                case PhpParser.Unset:
                case PhpParser.Use:
                case PhpParser.Var:
                case PhpParser.While:
                case PhpParser.Yield:
                case PhpParser.From:
                case PhpParser.LambdaFn:
                case PhpParser.Get:
                case PhpParser.Set:
                case PhpParser.Call:
                case PhpParser.CallStatic:
                case PhpParser.Constructor:
                case PhpParser.Destruct:
                case PhpParser.Wakeup:
                case PhpParser.Sleep:
                case PhpParser.Autoload:
                case PhpParser.IsSet__:
                case PhpParser.Unset__:
                case PhpParser.ToString__:
                case PhpParser.Invoke:
                case PhpParser.SetState:
                case PhpParser.Clone__:
                case PhpParser.DebugInfo:
                case PhpParser.Namespace__:
                case PhpParser.Class__:
                case PhpParser.Traic__:
                case PhpParser.Function__:
                case PhpParser.Method__:
                case PhpParser.Line__:
                case PhpParser.File__:
                case PhpParser.Dir__:
                case PhpParser.Inc:
                case PhpParser.Dec:
                case PhpParser.NamespaceSeparator:
                case PhpParser.Bang:
                case PhpParser.Plus:
                case PhpParser.Minus:
                case PhpParser.Tilde:
                case PhpParser.SuppressWarnings:
                case PhpParser.Dollar:
                case PhpParser.OpenRoundBracket:
                case PhpParser.OpenSquareBracket:
                case PhpParser.OpenCurlyBracket:
                case PhpParser.SemiColon:
                case PhpParser.VarName:
                case PhpParser.Label:
                case PhpParser.Octal:
                case PhpParser.Decimal:
                case PhpParser.Real:
                case PhpParser.Hex:
                case PhpParser.Binary:
                case PhpParser.BackQuoteString:
                case PhpParser.SingleQuoteString:
                case PhpParser.DoubleQuote:
                case PhpParser.StartNowDoc:
                case PhpParser.StartHereDoc:
                    this.state = 845;
                    this.statement();
                    break;
                case PhpParser.Colon:
                    this.state = 846;
                    this.match(PhpParser.Colon);
                    this.state = 847;
                    this.innerStatementList();
                    this.state = 848;
                    this.match(PhpParser.EndDeclare);
                    this.state = 849;
                    this.match(PhpParser.SemiColon);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    inlineHtmlStatement() {
        let localctx = new InlineHtmlStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 108, PhpParser.RULE_inlineHtmlStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 854;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 853;
                        this.inlineHtml();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 856;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 83, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    declareList() {
        let localctx = new DeclareListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 110, PhpParser.RULE_declareList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 858;
            this.identifierInitializer();
            this.state = 863;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 859;
                this.match(PhpParser.Comma);
                this.state = 860;
                this.identifierInitializer();
                this.state = 865;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    formalParameterList() {
        let localctx = new FormalParameterListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 112, PhpParser.RULE_formalParameterList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 867;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (PhpParser.AttributeStart - 43)) | (1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)))) !== 0) || ((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (PhpParser.Extends - 75)) | (1 << (PhpParser.Final - 75)) | (1 << (PhpParser.Finally - 75)) | (1 << (PhpParser.FloatCast - 75)) | (1 << (PhpParser.For - 75)) | (1 << (PhpParser.Foreach - 75)) | (1 << (PhpParser.Function - 75)) | (1 << (PhpParser.Global - 75)) | (1 << (PhpParser.Goto - 75)) | (1 << (PhpParser.If - 75)) | (1 << (PhpParser.Implements - 75)) | (1 << (PhpParser.Import - 75)) | (1 << (PhpParser.Include - 75)) | (1 << (PhpParser.IncludeOnce - 75)) | (1 << (PhpParser.InstanceOf - 75)) | (1 << (PhpParser.InsteadOf - 75)) | (1 << (PhpParser.Int8Cast - 75)) | (1 << (PhpParser.Int16Cast - 75)) | (1 << (PhpParser.Int64Type - 75)) | (1 << (PhpParser.IntType - 75)) | (1 << (PhpParser.Interface - 75)) | (1 << (PhpParser.IsSet - 75)) | (1 << (PhpParser.List - 75)) | (1 << (PhpParser.LogicalAnd - 75)) | (1 << (PhpParser.LogicalOr - 75)) | (1 << (PhpParser.LogicalXor - 75)) | (1 << (PhpParser.Namespace - 75)) | (1 << (PhpParser.New - 75)) | (1 << (PhpParser.Null - 75)) | (1 << (PhpParser.ObjectType - 75)) | (1 << (PhpParser.Parent_ - 75)))) !== 0) || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (PhpParser.Partial - 107)) | (1 << (PhpParser.Print - 107)) | (1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.From - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)))) !== 0) || ((((_la - 139)) & ~0x1f) == 0 && ((1 << (_la - 139)) & ((1 << (PhpParser.Sleep - 139)) | (1 << (PhpParser.Autoload - 139)) | (1 << (PhpParser.IsSet__ - 139)) | (1 << (PhpParser.Unset__ - 139)) | (1 << (PhpParser.ToString__ - 139)) | (1 << (PhpParser.Invoke - 139)) | (1 << (PhpParser.SetState - 139)) | (1 << (PhpParser.Clone__ - 139)) | (1 << (PhpParser.DebugInfo - 139)) | (1 << (PhpParser.Namespace__ - 139)) | (1 << (PhpParser.Class__ - 139)) | (1 << (PhpParser.Traic__ - 139)) | (1 << (PhpParser.Function__ - 139)) | (1 << (PhpParser.Method__ - 139)) | (1 << (PhpParser.Line__ - 139)) | (1 << (PhpParser.File__ - 139)) | (1 << (PhpParser.Dir__ - 139)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ellipsis - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.QuestionMark - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0)) {
                this.state = 866;
                this.formalParameter();
            }
            this.state = 873;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 86, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 869;
                    this.match(PhpParser.Comma);
                    this.state = 870;
                    this.formalParameter();
                }
                this.state = 875;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 86, this._ctx);
            }
            this.state = 877;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Comma) {
                this.state = 876;
                this.match(PhpParser.Comma);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    formalParameter() {
        let localctx = new FormalParameterContext(this, this._ctx, this.state);
        this.enterRule(localctx, 114, PhpParser.RULE_formalParameter);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 880;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.AttributeStart) {
                this.state = 879;
                this.attributes();
            }
            this.state = 883;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 89, this._ctx);
            if (la_ === 1) {
                this.state = 882;
                this.memberModifier();
            }
            this.state = 886;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.QuestionMark) {
                this.state = 885;
                this.match(PhpParser.QuestionMark);
            }
            this.state = 889;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)))) !== 0) || _la === PhpParser.NamespaceSeparator || _la === PhpParser.Label) {
                this.state = 888;
                this.typeHint(0);
            }
            this.state = 892;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Ampersand) {
                this.state = 891;
                this.match(PhpParser.Ampersand);
            }
            this.state = 895;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Ellipsis) {
                this.state = 894;
                this.match(PhpParser.Ellipsis);
            }
            this.state = 897;
            this.variableInitializer();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeHint(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new TypeHintContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 116;
        this.enterRecursionRule(localctx, 116, PhpParser.RULE_typeHint, _p);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 903;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 94, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 900;
                    this.qualifiedStaticTypeRef();
                    break;
                case 2:
                    this.state = 901;
                    this.match(PhpParser.Callable);
                    break;
                case 3:
                    this.state = 902;
                    this.primitiveType();
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            this.state = 910;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 95, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    localctx = new TypeHintContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_typeHint);
                    this.state = 905;
                    if (!(this.precpred(this._ctx, 1))) {
                        throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 906;
                    this.match(PhpParser.Pipe);
                    this.state = 907;
                    this.typeHint(2);
                }
                this.state = 912;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 95, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    globalStatement() {
        let localctx = new GlobalStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 118, PhpParser.RULE_globalStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 913;
            this.match(PhpParser.Global);
            this.state = 914;
            this.globalVar();
            this.state = 919;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 915;
                this.match(PhpParser.Comma);
                this.state = 916;
                this.globalVar();
                this.state = 921;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 922;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    globalVar() {
        let localctx = new GlobalVarContext(this, this._ctx, this.state);
        this.enterRule(localctx, 120, PhpParser.RULE_globalVar);
        try {
            this.state = 932;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 924;
                    this.match(PhpParser.VarName);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 925;
                    this.match(PhpParser.Dollar);
                    this.state = 926;
                    this.chain();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 927;
                    this.match(PhpParser.Dollar);
                    this.state = 928;
                    this.match(PhpParser.OpenCurlyBracket);
                    this.state = 929;
                    this.expression(0);
                    this.state = 930;
                    this.match(PhpParser.CloseCurlyBracket);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    echoStatement() {
        let localctx = new EchoStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 122, PhpParser.RULE_echoStatement);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 934;
            this.match(PhpParser.Echo);
            this.state = 935;
            this.expressionList();
            this.state = 936;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    staticVariableStatement() {
        let localctx = new StaticVariableStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 124, PhpParser.RULE_staticVariableStatement);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 938;
            this.match(PhpParser.Static);
            this.state = 939;
            this.variableInitializer();
            this.state = 944;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 940;
                this.match(PhpParser.Comma);
                this.state = 941;
                this.variableInitializer();
                this.state = 946;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 947;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classStatement() {
        let localctx = new ClassStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 126, PhpParser.RULE_classStatement);
        var _la = 0;
        try {
            this.state = 1007;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.AttributeStart:
                case PhpParser.Abstract:
                case PhpParser.Const:
                case PhpParser.Final:
                case PhpParser.Function:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Static:
                case PhpParser.Var:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 950;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.AttributeStart) {
                        this.state = 949;
                        this.attributes();
                    }
                    this.state = 1001;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 109, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 952;
                            this.propertyModifiers();
                            this.state = 954;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)))) !== 0) || _la === PhpParser.NamespaceSeparator || _la === PhpParser.Label) {
                                this.state = 953;
                                this.typeHint(0);
                            }
                            this.state = 956;
                            this.variableInitializer();
                            this.state = 961;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === PhpParser.Comma) {
                                this.state = 957;
                                this.match(PhpParser.Comma);
                                this.state = 958;
                                this.variableInitializer();
                                this.state = 963;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 964;
                            this.match(PhpParser.SemiColon);
                            break;
                        case 2:
                            this.state = 967;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (_la === PhpParser.Abstract || _la === PhpParser.Final || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (PhpParser.Private - 109)) | (1 << (PhpParser.Protected - 109)) | (1 << (PhpParser.Public - 109)) | (1 << (PhpParser.Static - 109)))) !== 0)) {
                                this.state = 966;
                                this.memberModifiers();
                            }
                            this.state = 999;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                                case PhpParser.Const:
                                    this.state = 969;
                                    this.match(PhpParser.Const);
                                    this.state = 971;
                                    this._errHandler.sync(this);
                                    var la_ = this._interp.adaptivePredict(this._input, 103, this._ctx);
                                    if (la_ === 1) {
                                        this.state = 970;
                                        this.typeHint(0);
                                    }
                                    this.state = 973;
                                    this.identifierInitializer();
                                    this.state = 978;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    while (_la === PhpParser.Comma) {
                                        this.state = 974;
                                        this.match(PhpParser.Comma);
                                        this.state = 975;
                                        this.identifierInitializer();
                                        this.state = 980;
                                        this._errHandler.sync(this);
                                        _la = this._input.LA(1);
                                    }
                                    this.state = 981;
                                    this.match(PhpParser.SemiColon);
                                    break;
                                case PhpParser.Function:
                                    this.state = 983;
                                    this.match(PhpParser.Function);
                                    this.state = 985;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === PhpParser.Ampersand) {
                                        this.state = 984;
                                        this.match(PhpParser.Ampersand);
                                    }
                                    this.state = 987;
                                    this.identifier();
                                    this.state = 989;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === PhpParser.Lgeneric) {
                                        this.state = 988;
                                        this.typeParameterListInBrackets();
                                    }
                                    this.state = 991;
                                    this.match(PhpParser.OpenRoundBracket);
                                    this.state = 992;
                                    this.formalParameterList();
                                    this.state = 993;
                                    this.match(PhpParser.CloseRoundBracket);
                                    this.state = 995;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === PhpParser.Colon) {
                                        this.state = 994;
                                        this.baseCtorCall();
                                    }
                                    this.state = 997;
                                    this.methodBody();
                                    break;
                                default:
                                    throw new antlr4_1.default.error.NoViableAltException(this);
                            }
                            break;
                    }
                    break;
                case PhpParser.Use:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1003;
                    this.match(PhpParser.Use);
                    this.state = 1004;
                    this.qualifiedNamespaceNameList();
                    this.state = 1005;
                    this.traitAdaptations();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    traitAdaptations() {
        let localctx = new TraitAdaptationsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 128, PhpParser.RULE_traitAdaptations);
        var _la = 0;
        try {
            this.state = 1018;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.SemiColon:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1009;
                    this.match(PhpParser.SemiColon);
                    break;
                case PhpParser.OpenCurlyBracket:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1010;
                    this.match(PhpParser.OpenCurlyBracket);
                    this.state = 1014;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)))) !== 0) || _la === PhpParser.NamespaceSeparator || _la === PhpParser.Label) {
                        this.state = 1011;
                        this.traitAdaptationStatement();
                        this.state = 1016;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1017;
                    this.match(PhpParser.CloseCurlyBracket);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    traitAdaptationStatement() {
        let localctx = new TraitAdaptationStatementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 130, PhpParser.RULE_traitAdaptationStatement);
        try {
            this.state = 1022;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 113, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1020;
                    this.traitPrecedence();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1021;
                    this.traitAlias();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    traitPrecedence() {
        let localctx = new TraitPrecedenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 132, PhpParser.RULE_traitPrecedence);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1024;
            this.qualifiedNamespaceName();
            this.state = 1025;
            this.match(PhpParser.DoubleColon);
            this.state = 1026;
            this.identifier();
            this.state = 1027;
            this.match(PhpParser.InsteadOf);
            this.state = 1028;
            this.qualifiedNamespaceNameList();
            this.state = 1029;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    traitAlias() {
        let localctx = new TraitAliasContext(this, this._ctx, this.state);
        this.enterRule(localctx, 134, PhpParser.RULE_traitAlias);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1031;
            this.traitMethodReference();
            this.state = 1032;
            this.match(PhpParser.As);
            this.state = 1038;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 115, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1033;
                    this.memberModifier();
                    break;
                case 2:
                    this.state = 1035;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 114, this._ctx);
                    if (la_ === 1) {
                        this.state = 1034;
                        this.memberModifier();
                    }
                    this.state = 1037;
                    this.identifier();
                    break;
            }
            this.state = 1040;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    traitMethodReference() {
        let localctx = new TraitMethodReferenceContext(this, this._ctx, this.state);
        this.enterRule(localctx, 136, PhpParser.RULE_traitMethodReference);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1045;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 116, this._ctx);
            if (la_ === 1) {
                this.state = 1042;
                this.qualifiedNamespaceName();
                this.state = 1043;
                this.match(PhpParser.DoubleColon);
            }
            this.state = 1047;
            this.identifier();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    baseCtorCall() {
        let localctx = new BaseCtorCallContext(this, this._ctx, this.state);
        this.enterRule(localctx, 138, PhpParser.RULE_baseCtorCall);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1049;
            this.match(PhpParser.Colon);
            this.state = 1050;
            this.identifier();
            this.state = 1052;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.OpenRoundBracket) {
                this.state = 1051;
                this.arguments();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    methodBody() {
        let localctx = new MethodBodyContext(this, this._ctx, this.state);
        this.enterRule(localctx, 140, PhpParser.RULE_methodBody);
        try {
            this.state = 1056;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.SemiColon:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1054;
                    this.match(PhpParser.SemiColon);
                    break;
                case PhpParser.OpenCurlyBracket:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1055;
                    this.blockStatement();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    propertyModifiers() {
        let localctx = new PropertyModifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 142, PhpParser.RULE_propertyModifiers);
        try {
            this.state = 1060;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Abstract:
                case PhpParser.Final:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Static:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1058;
                    this.memberModifiers();
                    break;
                case PhpParser.Var:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1059;
                    this.match(PhpParser.Var);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    memberModifiers() {
        let localctx = new MemberModifiersContext(this, this._ctx, this.state);
        this.enterRule(localctx, 144, PhpParser.RULE_memberModifiers);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1063;
            this._errHandler.sync(this);
            var _alt = 1;
            do {
                switch (_alt) {
                    case 1:
                        this.state = 1062;
                        this.memberModifier();
                        break;
                    default:
                        throw new antlr4_1.default.error.NoViableAltException(this);
                }
                this.state = 1065;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 120, this._ctx);
            } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    variableInitializer() {
        let localctx = new VariableInitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 146, PhpParser.RULE_variableInitializer);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1067;
            this.match(PhpParser.VarName);
            this.state = 1070;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Eq) {
                this.state = 1068;
                this.match(PhpParser.Eq);
                this.state = 1069;
                this.constantInitializer();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifierInitializer() {
        let localctx = new IdentifierInitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 148, PhpParser.RULE_identifierInitializer);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1072;
            this.identifier();
            this.state = 1073;
            this.match(PhpParser.Eq);
            this.state = 1074;
            this.constantInitializer();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    globalConstantDeclaration() {
        let localctx = new GlobalConstantDeclarationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 150, PhpParser.RULE_globalConstantDeclaration);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1077;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.AttributeStart) {
                this.state = 1076;
                this.attributes();
            }
            this.state = 1079;
            this.match(PhpParser.Const);
            this.state = 1080;
            this.identifierInitializer();
            this.state = 1085;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 1081;
                this.match(PhpParser.Comma);
                this.state = 1082;
                this.identifierInitializer();
                this.state = 1087;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1088;
            this.match(PhpParser.SemiColon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expressionList() {
        let localctx = new ExpressionListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 152, PhpParser.RULE_expressionList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1090;
            this.expression(0);
            this.state = 1095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 1091;
                this.match(PhpParser.Comma);
                this.state = 1092;
                this.expression(0);
                this.state = 1097;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    parentheses() {
        let localctx = new ParenthesesContext(this, this._ctx, this.state);
        this.enterRule(localctx, 154, PhpParser.RULE_parentheses);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1098;
            this.match(PhpParser.OpenRoundBracket);
            this.state = 1101;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 125, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1099;
                    this.expression(0);
                    break;
                case 2:
                    this.state = 1100;
                    this.yieldExpression();
                    break;
            }
            this.state = 1103;
            this.match(PhpParser.CloseRoundBracket);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    expression(_p) {
        if (_p === undefined) {
            _p = 0;
        }
        const _parentctx = this._ctx;
        const _parentState = this.state;
        let localctx = new ExpressionContext(this, this._ctx, _parentState);
        let _prevctx = localctx;
        const _startState = 156;
        this.enterRecursionRule(localctx, 156, PhpParser.RULE_expression, _p);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1191;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 130, this._ctx);
            switch (la_) {
                case 1:
                    localctx = new CloneExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1106;
                    this.match(PhpParser.Clone);
                    this.state = 1107;
                    this.expression(47);
                    break;
                case 2:
                    localctx = new NewExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1108;
                    this.newExpr();
                    break;
                case 3:
                    localctx = new IndexerExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1109;
                    this.stringConstant();
                    this.state = 1110;
                    this.match(PhpParser.OpenSquareBracket);
                    this.state = 1111;
                    this.expression(0);
                    this.state = 1112;
                    this.match(PhpParser.CloseSquareBracket);
                    break;
                case 4:
                    localctx = new CastExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1114;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1115;
                    this.castOperation();
                    this.state = 1116;
                    this.match(PhpParser.CloseRoundBracket);
                    this.state = 1117;
                    this.expression(44);
                    break;
                case 5:
                    localctx = new UnaryOperatorExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1119;
                    _la = this._input.LA(1);
                    if (!(_la === PhpParser.Tilde || _la === PhpParser.SuppressWarnings)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1120;
                    this.expression(43);
                    break;
                case 6:
                    localctx = new UnaryOperatorExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1121;
                    _la = this._input.LA(1);
                    if (!(((((_la - 195)) & ~0x1f) == 0 && ((1 << (_la - 195)) & ((1 << (PhpParser.Bang - 195)) | (1 << (PhpParser.Plus - 195)) | (1 << (PhpParser.Minus - 195)))) !== 0))) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1122;
                    this.expression(42);
                    break;
                case 7:
                    localctx = new PrefixIncDecExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1123;
                    _la = this._input.LA(1);
                    if (!(_la === PhpParser.Inc || _la === PhpParser.Dec)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1124;
                    this.chain();
                    break;
                case 8:
                    localctx = new PostfixIncDecExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1125;
                    this.chain();
                    this.state = 1126;
                    _la = this._input.LA(1);
                    if (!(_la === PhpParser.Inc || _la === PhpParser.Dec)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;
                case 9:
                    localctx = new PrintExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1128;
                    this.match(PhpParser.Print);
                    this.state = 1129;
                    this.expression(39);
                    break;
                case 10:
                    localctx = new ChainExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1130;
                    this.chain();
                    break;
                case 11:
                    localctx = new ScalarExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1131;
                    this.constant();
                    break;
                case 12:
                    localctx = new ScalarExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1132;
                    this.string();
                    break;
                case 13:
                    localctx = new ScalarExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1133;
                    this.match(PhpParser.Label);
                    break;
                case 14:
                    localctx = new BackQuoteStringExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1134;
                    this.match(PhpParser.BackQuoteString);
                    break;
                case 15:
                    localctx = new ParenthesisExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1135;
                    this.parentheses();
                    break;
                case 16:
                    localctx = new ArrayCreationExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1136;
                    this.arrayCreation();
                    break;
                case 17:
                    localctx = new SpecialWordExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1137;
                    this.match(PhpParser.Yield);
                    break;
                case 18:
                    localctx = new SpecialWordExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1138;
                    this.match(PhpParser.List);
                    this.state = 1139;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1140;
                    this.assignmentList();
                    this.state = 1141;
                    this.match(PhpParser.CloseRoundBracket);
                    this.state = 1142;
                    this.match(PhpParser.Eq);
                    this.state = 1143;
                    this.expression(30);
                    break;
                case 19:
                    localctx = new SpecialWordExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1145;
                    this.match(PhpParser.IsSet);
                    this.state = 1146;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1147;
                    this.chainList();
                    this.state = 1148;
                    this.match(PhpParser.CloseRoundBracket);
                    break;
                case 20:
                    localctx = new SpecialWordExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1150;
                    this.match(PhpParser.Empty);
                    this.state = 1151;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1152;
                    this.chain();
                    this.state = 1153;
                    this.match(PhpParser.CloseRoundBracket);
                    break;
                case 21:
                    localctx = new SpecialWordExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1155;
                    this.match(PhpParser.Eval);
                    this.state = 1156;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1157;
                    this.expression(0);
                    this.state = 1158;
                    this.match(PhpParser.CloseRoundBracket);
                    break;
                case 22:
                    localctx = new SpecialWordExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1160;
                    this.match(PhpParser.Exit);
                    this.state = 1164;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
                    if (la_ === 1) {
                        this.state = 1161;
                        this.match(PhpParser.OpenRoundBracket);
                        this.state = 1162;
                        this.match(PhpParser.CloseRoundBracket);
                    }
                    else if (la_ === 2) {
                        this.state = 1163;
                        this.parentheses();
                    }
                    break;
                case 23:
                    localctx = new SpecialWordExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1166;
                    _la = this._input.LA(1);
                    if (!(_la === PhpParser.Include || _la === PhpParser.IncludeOnce)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1167;
                    this.expression(25);
                    break;
                case 24:
                    localctx = new SpecialWordExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1168;
                    _la = this._input.LA(1);
                    if (!(_la === PhpParser.Require || _la === PhpParser.RequireOnce)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1169;
                    this.expression(24);
                    break;
                case 25:
                    localctx = new LambdaFunctionExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1170;
                    this.lambdaFunctionExpr();
                    break;
                case 26:
                    localctx = new MatchExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1171;
                    this.matchExpr();
                    break;
                case 27:
                    localctx = new SpecialWordExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1172;
                    this.match(PhpParser.Throw);
                    this.state = 1173;
                    this.expression(6);
                    break;
                case 28:
                    localctx = new AssignmentExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1174;
                    this.assignable();
                    this.state = 1175;
                    this.assignmentOperator();
                    this.state = 1177;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.AttributeStart) {
                        this.state = 1176;
                        this.attributes();
                    }
                    this.state = 1179;
                    this.expression(5);
                    break;
                case 29:
                    localctx = new AssignmentExpressionContext(this, localctx);
                    this._ctx = localctx;
                    _prevctx = localctx;
                    this.state = 1181;
                    this.assignable();
                    this.state = 1182;
                    this.match(PhpParser.Eq);
                    this.state = 1184;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.AttributeStart) {
                        this.state = 1183;
                        this.attributes();
                    }
                    this.state = 1186;
                    this.match(PhpParser.Ampersand);
                    this.state = 1189;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 129, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1187;
                            this.chain();
                            break;
                        case 2:
                            this.state = 1188;
                            this.newExpr();
                            break;
                    }
                    break;
            }
            this._ctx.stop = this._input.LT(-1);
            this.state = 1253;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 133, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    if (this._parseListeners !== null) {
                        this.triggerExitRuleEvent();
                    }
                    _prevctx = localctx;
                    this.state = 1251;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 132, this._ctx);
                    switch (la_) {
                        case 1:
                            localctx = new ArithmeticExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1193;
                            if (!(this.precpred(this._ctx, 21))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                            }
                            this.state = 1194;
                            localctx.op = this.match(PhpParser.Pow);
                            this.state = 1195;
                            this.expression(21);
                            break;
                        case 2:
                            localctx = new ArithmeticExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1196;
                            if (!(this.precpred(this._ctx, 19))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                            }
                            this.state = 1197;
                            localctx.op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (PhpParser.Asterisk - 199)) | (1 << (PhpParser.Percent - 199)) | (1 << (PhpParser.Divide - 199)))) !== 0))) {
                                localctx.op = this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 1198;
                            this.expression(20);
                            break;
                        case 3:
                            localctx = new ArithmeticExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1199;
                            if (!(this.precpred(this._ctx, 18))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                            }
                            this.state = 1200;
                            localctx.op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(((((_la - 197)) & ~0x1f) == 0 && ((1 << (_la - 197)) & ((1 << (PhpParser.Plus - 197)) | (1 << (PhpParser.Minus - 197)) | (1 << (PhpParser.Dot - 197)))) !== 0))) {
                                localctx.op = this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 1201;
                            this.expression(19);
                            break;
                        case 4:
                            localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1202;
                            if (!(this.precpred(this._ctx, 17))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
                            }
                            this.state = 1203;
                            localctx.op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(_la === PhpParser.ShiftLeft || _la === PhpParser.ShiftRight)) {
                                localctx.op = this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 1204;
                            this.expression(18);
                            break;
                        case 5:
                            localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1205;
                            if (!(this.precpred(this._ctx, 16))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                            }
                            this.state = 1206;
                            localctx.op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(((((_la - 166)) & ~0x1f) == 0 && ((1 << (_la - 166)) & ((1 << (PhpParser.IsSmallerOrEqual - 166)) | (1 << (PhpParser.IsGreaterOrEqual - 166)) | (1 << (PhpParser.Less - 166)) | (1 << (PhpParser.Greater - 166)))) !== 0))) {
                                localctx.op = this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 1207;
                            this.expression(17);
                            break;
                        case 6:
                            localctx = new ComparisonExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1208;
                            if (!(this.precpred(this._ctx, 15))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                            }
                            this.state = 1209;
                            localctx.op = this._input.LT(1);
                            _la = this._input.LA(1);
                            if (!(((((_la - 162)) & ~0x1f) == 0 && ((1 << (_la - 162)) & ((1 << (PhpParser.IsIdentical - 162)) | (1 << (PhpParser.IsNoidentical - 162)) | (1 << (PhpParser.IsEqual - 162)) | (1 << (PhpParser.IsNotEq - 162)))) !== 0))) {
                                localctx.op = this._errHandler.recoverInline(this);
                            }
                            else {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            this.state = 1210;
                            this.expression(16);
                            break;
                        case 7:
                            localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1211;
                            if (!(this.precpred(this._ctx, 14))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                            }
                            this.state = 1212;
                            localctx.op = this.match(PhpParser.Ampersand);
                            this.state = 1213;
                            this.expression(15);
                            break;
                        case 8:
                            localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1214;
                            if (!(this.precpred(this._ctx, 13))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                            }
                            this.state = 1215;
                            localctx.op = this.match(PhpParser.Caret);
                            this.state = 1216;
                            this.expression(14);
                            break;
                        case 9:
                            localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1217;
                            if (!(this.precpred(this._ctx, 12))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                            }
                            this.state = 1218;
                            localctx.op = this.match(PhpParser.Pipe);
                            this.state = 1219;
                            this.expression(13);
                            break;
                        case 10:
                            localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1220;
                            if (!(this.precpred(this._ctx, 11))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                            }
                            this.state = 1221;
                            localctx.op = this.match(PhpParser.BooleanAnd);
                            this.state = 1222;
                            this.expression(12);
                            break;
                        case 11:
                            localctx = new BitwiseExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1223;
                            if (!(this.precpred(this._ctx, 10))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                            }
                            this.state = 1224;
                            localctx.op = this.match(PhpParser.BooleanOr);
                            this.state = 1225;
                            this.expression(11);
                            break;
                        case 12:
                            localctx = new ConditionalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1226;
                            if (!(this.precpred(this._ctx, 9))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                            }
                            this.state = 1227;
                            localctx.op = this.match(PhpParser.QuestionMark);
                            this.state = 1229;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                                this.state = 1228;
                                this.expression(0);
                            }
                            this.state = 1231;
                            this.match(PhpParser.Colon);
                            this.state = 1232;
                            this.expression(10);
                            break;
                        case 13:
                            localctx = new NullCoalescingExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1233;
                            if (!(this.precpred(this._ctx, 8))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                            }
                            this.state = 1234;
                            localctx.op = this.match(PhpParser.NullCoalescing);
                            this.state = 1235;
                            this.expression(9);
                            break;
                        case 14:
                            localctx = new SpaceshipExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1236;
                            if (!(this.precpred(this._ctx, 7))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                            }
                            this.state = 1237;
                            localctx.op = this.match(PhpParser.Spaceship);
                            this.state = 1238;
                            this.expression(8);
                            break;
                        case 15:
                            localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1239;
                            if (!(this.precpred(this._ctx, 3))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                            }
                            this.state = 1240;
                            localctx.op = this.match(PhpParser.LogicalAnd);
                            this.state = 1241;
                            this.expression(4);
                            break;
                        case 16:
                            localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1242;
                            if (!(this.precpred(this._ctx, 2))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                            }
                            this.state = 1243;
                            localctx.op = this.match(PhpParser.LogicalXor);
                            this.state = 1244;
                            this.expression(3);
                            break;
                        case 17:
                            localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1245;
                            if (!(this.precpred(this._ctx, 1))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                            }
                            this.state = 1246;
                            localctx.op = this.match(PhpParser.LogicalOr);
                            this.state = 1247;
                            this.expression(2);
                            break;
                        case 18:
                            localctx = new InstanceOfExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                            this.pushNewRecursionContext(localctx, _startState, PhpParser.RULE_expression);
                            this.state = 1248;
                            if (!(this.precpred(this._ctx, 20))) {
                                throw new antlr4_1.default.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                            }
                            this.state = 1249;
                            this.match(PhpParser.InstanceOf);
                            this.state = 1250;
                            this.typeRef();
                            break;
                    }
                }
                this.state = 1255;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 133, this._ctx);
            }
        }
        catch (error) {
            if (error instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = error;
                this._errHandler.reportError(this, error);
                this._errHandler.recover(this, error);
            }
            else {
                throw error;
            }
        }
        finally {
            this.unrollRecursionContexts(_parentctx);
        }
        return localctx;
    }
    assignable() {
        let localctx = new AssignableContext(this, this._ctx, this.state);
        this.enterRule(localctx, 158, PhpParser.RULE_assignable);
        try {
            this.state = 1258;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 134, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1256;
                    this.chain();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1257;
                    this.arrayCreation();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayCreation() {
        let localctx = new ArrayCreationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 160, PhpParser.RULE_arrayCreation);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1271;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Array:
                    this.state = 1260;
                    this.match(PhpParser.Array);
                    this.state = 1261;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1263;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                        this.state = 1262;
                        this.arrayItemList();
                    }
                    this.state = 1265;
                    this.match(PhpParser.CloseRoundBracket);
                    break;
                case PhpParser.OpenSquareBracket:
                    this.state = 1266;
                    this.match(PhpParser.OpenSquareBracket);
                    this.state = 1268;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                        this.state = 1267;
                        this.arrayItemList();
                    }
                    this.state = 1270;
                    this.match(PhpParser.CloseSquareBracket);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 1277;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 138, this._ctx);
            if (la_ === 1) {
                this.state = 1273;
                this.match(PhpParser.OpenSquareBracket);
                this.state = 1274;
                this.expression(0);
                this.state = 1275;
                this.match(PhpParser.CloseSquareBracket);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lambdaFunctionExpr() {
        let localctx = new LambdaFunctionExprContext(this, this._ctx, this.state);
        this.enterRule(localctx, 162, PhpParser.RULE_lambdaFunctionExpr);
        var _la = 0;
        try {
            this.state = 1305;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Function:
                case PhpParser.Static:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1280;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Static) {
                        this.state = 1279;
                        this.match(PhpParser.Static);
                    }
                    this.state = 1282;
                    this.match(PhpParser.Function);
                    this.state = 1284;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Ampersand) {
                        this.state = 1283;
                        this.match(PhpParser.Ampersand);
                    }
                    this.state = 1286;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1287;
                    this.formalParameterList();
                    this.state = 1288;
                    this.match(PhpParser.CloseRoundBracket);
                    this.state = 1290;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Use) {
                        this.state = 1289;
                        this.lambdaFunctionUseVars();
                    }
                    this.state = 1294;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Colon) {
                        this.state = 1292;
                        this.match(PhpParser.Colon);
                        this.state = 1293;
                        this.typeHint(0);
                    }
                    this.state = 1296;
                    this.blockStatement();
                    break;
                case PhpParser.LambdaFn:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1298;
                    this.match(PhpParser.LambdaFn);
                    this.state = 1299;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1300;
                    this.formalParameterList();
                    this.state = 1301;
                    this.match(PhpParser.CloseRoundBracket);
                    this.state = 1302;
                    this.match(PhpParser.DoubleArrow);
                    this.state = 1303;
                    this.expression(0);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    matchExpr() {
        let localctx = new MatchExprContext(this, this._ctx, this.state);
        this.enterRule(localctx, 164, PhpParser.RULE_matchExpr);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1307;
            this.match(PhpParser.Match);
            this.state = 1308;
            this.match(PhpParser.OpenRoundBracket);
            this.state = 1309;
            this.expression(0);
            this.state = 1310;
            this.match(PhpParser.CloseRoundBracket);
            this.state = 1311;
            this.match(PhpParser.OpenCurlyBracket);
            this.state = 1312;
            this.matchItem();
            this.state = 1317;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 144, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1313;
                    this.match(PhpParser.Comma);
                    this.state = 1314;
                    this.matchItem();
                }
                this.state = 1319;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 144, this._ctx);
            }
            this.state = 1321;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Comma) {
                this.state = 1320;
                this.match(PhpParser.Comma);
            }
            this.state = 1323;
            this.match(PhpParser.CloseCurlyBracket);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    matchItem() {
        let localctx = new MatchItemContext(this, this._ctx, this.state);
        this.enterRule(localctx, 166, PhpParser.RULE_matchItem);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1325;
            this.expression(0);
            this.state = 1330;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 1326;
                this.match(PhpParser.Comma);
                this.state = 1327;
                this.expression(0);
                this.state = 1332;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1333;
            this.match(PhpParser.DoubleArrow);
            this.state = 1334;
            this.expression(0);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    newExpr() {
        let localctx = new NewExprContext(this, this._ctx, this.state);
        this.enterRule(localctx, 168, PhpParser.RULE_newExpr);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1336;
            this.match(PhpParser.New);
            this.state = 1337;
            this.typeRef();
            this.state = 1339;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 147, this._ctx);
            if (la_ === 1) {
                this.state = 1338;
                this.arguments();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignmentOperator() {
        let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
        this.enterRule(localctx, 170, PhpParser.RULE_assignmentOperator);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1341;
            _la = this._input.LA(1);
            if (!(((((_la - 168)) & ~0x1f) == 0 && ((1 << (_la - 168)) & ((1 << (PhpParser.PlusEqual - 168)) | (1 << (PhpParser.MinusEqual - 168)) | (1 << (PhpParser.MulEqual - 168)) | (1 << (PhpParser.PowEqual - 168)) | (1 << (PhpParser.DivEqual - 168)) | (1 << (PhpParser.Concaequal - 168)) | (1 << (PhpParser.ModEqual - 168)) | (1 << (PhpParser.ShiftLeftEqual - 168)) | (1 << (PhpParser.ShiftRightEqual - 168)) | (1 << (PhpParser.AndEqual - 168)) | (1 << (PhpParser.OrEqual - 168)) | (1 << (PhpParser.XorEqual - 168)) | (1 << (PhpParser.NullCoalescingEqual - 168)))) !== 0) || _la === PhpParser.Eq)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    yieldExpression() {
        let localctx = new YieldExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 172, PhpParser.RULE_yieldExpression);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1343;
            this.match(PhpParser.Yield);
            this.state = 1351;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 149, this._ctx);
            switch (la_) {
                case 1:
                    this.state = 1344;
                    this.expression(0);
                    this.state = 1347;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.DoubleArrow) {
                        this.state = 1345;
                        this.match(PhpParser.DoubleArrow);
                        this.state = 1346;
                        this.expression(0);
                    }
                    break;
                case 2:
                    this.state = 1349;
                    this.match(PhpParser.From);
                    this.state = 1350;
                    this.expression(0);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayItemList() {
        let localctx = new ArrayItemListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 174, PhpParser.RULE_arrayItemList);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1353;
            this.arrayItem();
            this.state = 1358;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 150, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1354;
                    this.match(PhpParser.Comma);
                    this.state = 1355;
                    this.arrayItem();
                }
                this.state = 1360;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 150, this._ctx);
            }
            this.state = 1362;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 151, this._ctx);
            if (la_ === 1) {
                this.state = 1361;
                this.match(PhpParser.Comma);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arrayItem() {
        let localctx = new ArrayItemContext(this, this._ctx, this.state);
        this.enterRule(localctx, 176, PhpParser.RULE_arrayItem);
        var _la = 0;
        try {
            this.state = 1376;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 154, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1364;
                    this.expression(0);
                    this.state = 1367;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.DoubleArrow) {
                        this.state = 1365;
                        this.match(PhpParser.DoubleArrow);
                        this.state = 1366;
                        this.expression(0);
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1372;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                        this.state = 1369;
                        this.expression(0);
                        this.state = 1370;
                        this.match(PhpParser.DoubleArrow);
                    }
                    this.state = 1374;
                    this.match(PhpParser.Ampersand);
                    this.state = 1375;
                    this.chain();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lambdaFunctionUseVars() {
        let localctx = new LambdaFunctionUseVarsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 178, PhpParser.RULE_lambdaFunctionUseVars);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1378;
            this.match(PhpParser.Use);
            this.state = 1379;
            this.match(PhpParser.OpenRoundBracket);
            this.state = 1380;
            this.lambdaFunctionUseVar();
            this.state = 1385;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 1381;
                this.match(PhpParser.Comma);
                this.state = 1382;
                this.lambdaFunctionUseVar();
                this.state = 1387;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1388;
            this.match(PhpParser.CloseRoundBracket);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    lambdaFunctionUseVar() {
        let localctx = new LambdaFunctionUseVarContext(this, this._ctx, this.state);
        this.enterRule(localctx, 180, PhpParser.RULE_lambdaFunctionUseVar);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Ampersand) {
                this.state = 1390;
                this.match(PhpParser.Ampersand);
            }
            this.state = 1393;
            this.match(PhpParser.VarName);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    qualifiedStaticTypeRef() {
        let localctx = new QualifiedStaticTypeRefContext(this, this._ctx, this.state);
        this.enterRule(localctx, 182, PhpParser.RULE_qualifiedStaticTypeRef);
        try {
            this.state = 1400;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 158, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1395;
                    this.qualifiedNamespaceName();
                    this.state = 1397;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 157, this._ctx);
                    if (la_ === 1) {
                        this.state = 1396;
                        this.genericDynamicArgs();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1399;
                    this.match(PhpParser.Static);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    typeRef() {
        let localctx = new TypeRefContext(this, this._ctx, this.state);
        this.enterRule(localctx, 184, PhpParser.RULE_typeRef);
        try {
            this.state = 1412;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 161, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1404;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 159, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1402;
                            this.qualifiedNamespaceName();
                            break;
                        case 2:
                            this.state = 1403;
                            this.indirectTypeRef();
                            break;
                    }
                    this.state = 1407;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 160, this._ctx);
                    if (la_ === 1) {
                        this.state = 1406;
                        this.genericDynamicArgs();
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1409;
                    this.primitiveType();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1410;
                    this.match(PhpParser.Static);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1411;
                    this.anonymousClass();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    anonymousClass() {
        let localctx = new AnonymousClassContext(this, this._ctx, this.state);
        this.enterRule(localctx, 186, PhpParser.RULE_anonymousClass);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.AttributeStart) {
                this.state = 1414;
                this.attributes();
            }
            this.state = 1418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Private) {
                this.state = 1417;
                this.match(PhpParser.Private);
            }
            this.state = 1421;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Abstract || _la === PhpParser.Final) {
                this.state = 1420;
                this.modifier();
            }
            this.state = 1424;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Partial) {
                this.state = 1423;
                this.match(PhpParser.Partial);
            }
            this.state = 1447;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Class:
                case PhpParser.Trait:
                    this.state = 1426;
                    this.classEntryType();
                    this.state = 1428;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Lgeneric) {
                        this.state = 1427;
                        this.typeParameterListInBrackets();
                    }
                    this.state = 1432;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Extends) {
                        this.state = 1430;
                        this.match(PhpParser.Extends);
                        this.state = 1431;
                        this.qualifiedStaticTypeRef();
                    }
                    this.state = 1436;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Implements) {
                        this.state = 1434;
                        this.match(PhpParser.Implements);
                        this.state = 1435;
                        this.interfaceList();
                    }
                    break;
                case PhpParser.Interface:
                    this.state = 1438;
                    this.match(PhpParser.Interface);
                    this.state = 1439;
                    this.identifier();
                    this.state = 1441;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Lgeneric) {
                        this.state = 1440;
                        this.typeParameterListInBrackets();
                    }
                    this.state = 1445;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Extends) {
                        this.state = 1443;
                        this.match(PhpParser.Extends);
                        this.state = 1444;
                        this.interfaceList();
                    }
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 1449;
            this.match(PhpParser.OpenCurlyBracket);
            this.state = 1453;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (PhpParser.AttributeStart - 43)) | (1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Const - 43)))) !== 0) || _la === PhpParser.Final || _la === PhpParser.Function || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (PhpParser.Private - 109)) | (1 << (PhpParser.Protected - 109)) | (1 << (PhpParser.Public - 109)) | (1 << (PhpParser.Static - 109)) | (1 << (PhpParser.Use - 109)) | (1 << (PhpParser.Var - 109)))) !== 0)) {
                this.state = 1450;
                this.classStatement();
                this.state = 1455;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1456;
            this.match(PhpParser.CloseCurlyBracket);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    indirectTypeRef() {
        let localctx = new IndirectTypeRefContext(this, this._ctx, this.state);
        this.enterRule(localctx, 188, PhpParser.RULE_indirectTypeRef);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1458;
            this.chainBase();
            this.state = 1463;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 173, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1459;
                    this.match(PhpParser.ObjectOperator);
                    this.state = 1460;
                    this.keyedFieldName();
                }
                this.state = 1465;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 173, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    qualifiedNamespaceName() {
        let localctx = new QualifiedNamespaceNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 190, PhpParser.RULE_qualifiedNamespaceName);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1467;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 174, this._ctx);
            if (la_ === 1) {
                this.state = 1466;
                this.match(PhpParser.Namespace);
            }
            this.state = 1470;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.NamespaceSeparator) {
                this.state = 1469;
                this.match(PhpParser.NamespaceSeparator);
            }
            this.state = 1472;
            this.namespaceNameList();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namespaceNameList() {
        let localctx = new NamespaceNameListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 192, PhpParser.RULE_namespaceNameList);
        try {
            this.state = 1487;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 178, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1474;
                    this.identifier();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1475;
                    this.identifier();
                    this.state = 1480;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 176, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1476;
                            this.match(PhpParser.NamespaceSeparator);
                            this.state = 1477;
                            this.identifier();
                        }
                        this.state = 1482;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 176, this._ctx);
                    }
                    this.state = 1485;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 177, this._ctx);
                    if (la_ === 1) {
                        this.state = 1483;
                        this.match(PhpParser.NamespaceSeparator);
                        this.state = 1484;
                        this.namespaceNameTail();
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    namespaceNameTail() {
        let localctx = new NamespaceNameTailContext(this, this._ctx, this.state);
        this.enterRule(localctx, 194, PhpParser.RULE_namespaceNameTail);
        var _la = 0;
        try {
            this.state = 1508;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Abstract:
                case PhpParser.Array:
                case PhpParser.As:
                case PhpParser.BinaryCast:
                case PhpParser.BoolType:
                case PhpParser.BooleanConstant:
                case PhpParser.Break:
                case PhpParser.Callable:
                case PhpParser.Case:
                case PhpParser.Catch:
                case PhpParser.Class:
                case PhpParser.Clone:
                case PhpParser.Const:
                case PhpParser.Continue:
                case PhpParser.Declare:
                case PhpParser.Default:
                case PhpParser.Do:
                case PhpParser.DoubleCast:
                case PhpParser.DoubleType:
                case PhpParser.Echo:
                case PhpParser.Else:
                case PhpParser.ElseIf:
                case PhpParser.Empty:
                case PhpParser.EndDeclare:
                case PhpParser.EndFor:
                case PhpParser.EndForeach:
                case PhpParser.EndIf:
                case PhpParser.EndSwitch:
                case PhpParser.EndWhile:
                case PhpParser.Eval:
                case PhpParser.Exit:
                case PhpParser.Extends:
                case PhpParser.Final:
                case PhpParser.Finally:
                case PhpParser.FloatCast:
                case PhpParser.For:
                case PhpParser.Foreach:
                case PhpParser.Function:
                case PhpParser.Global:
                case PhpParser.Goto:
                case PhpParser.If:
                case PhpParser.Implements:
                case PhpParser.Import:
                case PhpParser.Include:
                case PhpParser.IncludeOnce:
                case PhpParser.InstanceOf:
                case PhpParser.InsteadOf:
                case PhpParser.Int8Cast:
                case PhpParser.Int16Cast:
                case PhpParser.Int64Type:
                case PhpParser.IntType:
                case PhpParser.Interface:
                case PhpParser.IsSet:
                case PhpParser.List:
                case PhpParser.LogicalAnd:
                case PhpParser.LogicalOr:
                case PhpParser.LogicalXor:
                case PhpParser.Namespace:
                case PhpParser.New:
                case PhpParser.Null:
                case PhpParser.ObjectType:
                case PhpParser.Parent_:
                case PhpParser.Partial:
                case PhpParser.Print:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Require:
                case PhpParser.RequireOnce:
                case PhpParser.Resource:
                case PhpParser.Return:
                case PhpParser.Static:
                case PhpParser.StringType:
                case PhpParser.Switch:
                case PhpParser.Throw:
                case PhpParser.Trait:
                case PhpParser.Try:
                case PhpParser.Typeof:
                case PhpParser.UintCast:
                case PhpParser.UnicodeCast:
                case PhpParser.Unset:
                case PhpParser.Use:
                case PhpParser.Var:
                case PhpParser.While:
                case PhpParser.Yield:
                case PhpParser.From:
                case PhpParser.Get:
                case PhpParser.Set:
                case PhpParser.Call:
                case PhpParser.CallStatic:
                case PhpParser.Constructor:
                case PhpParser.Destruct:
                case PhpParser.Wakeup:
                case PhpParser.Sleep:
                case PhpParser.Autoload:
                case PhpParser.IsSet__:
                case PhpParser.Unset__:
                case PhpParser.ToString__:
                case PhpParser.Invoke:
                case PhpParser.SetState:
                case PhpParser.Clone__:
                case PhpParser.DebugInfo:
                case PhpParser.Namespace__:
                case PhpParser.Class__:
                case PhpParser.Traic__:
                case PhpParser.Function__:
                case PhpParser.Method__:
                case PhpParser.Line__:
                case PhpParser.File__:
                case PhpParser.Dir__:
                case PhpParser.Label:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1489;
                    this.identifier();
                    this.state = 1492;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 179, this._ctx);
                    if (la_ === 1) {
                        this.state = 1490;
                        this.match(PhpParser.As);
                        this.state = 1491;
                        this.identifier();
                    }
                    break;
                case PhpParser.OpenCurlyBracket:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1494;
                    this.match(PhpParser.OpenCurlyBracket);
                    this.state = 1495;
                    this.namespaceNameTail();
                    this.state = 1500;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 180, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1496;
                            this.match(PhpParser.Comma);
                            this.state = 1497;
                            this.namespaceNameTail();
                        }
                        this.state = 1502;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 180, this._ctx);
                    }
                    this.state = 1504;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Comma) {
                        this.state = 1503;
                        this.match(PhpParser.Comma);
                    }
                    this.state = 1506;
                    this.match(PhpParser.CloseCurlyBracket);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    qualifiedNamespaceNameList() {
        let localctx = new QualifiedNamespaceNameListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 196, PhpParser.RULE_qualifiedNamespaceNameList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1510;
            this.qualifiedNamespaceName();
            this.state = 1515;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 1511;
                this.match(PhpParser.Comma);
                this.state = 1512;
                this.qualifiedNamespaceName();
                this.state = 1517;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    arguments() {
        let localctx = new ArgumentsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 198, PhpParser.RULE_arguments);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1518;
            this.match(PhpParser.OpenRoundBracket);
            this.state = 1528;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 185, this._ctx);
            if (la_ === 1) {
                this.state = 1519;
                this.actualArgument();
                this.state = 1524;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input, 184, this._ctx);
                while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt === 1) {
                        this.state = 1520;
                        this.match(PhpParser.Comma);
                        this.state = 1521;
                        this.actualArgument();
                    }
                    this.state = 1526;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 184, this._ctx);
                }
            }
            else if (la_ === 2) {
                this.state = 1527;
                this.yieldExpression();
            }
            this.state = 1531;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Comma) {
                this.state = 1530;
                this.match(PhpParser.Comma);
            }
            this.state = 1533;
            this.match(PhpParser.CloseRoundBracket);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    actualArgument() {
        let localctx = new ActualArgumentContext(this, this._ctx, this.state);
        this.enterRule(localctx, 200, PhpParser.RULE_actualArgument);
        var _la = 0;
        try {
            this.state = 1544;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Abstract:
                case PhpParser.Array:
                case PhpParser.As:
                case PhpParser.BinaryCast:
                case PhpParser.BoolType:
                case PhpParser.BooleanConstant:
                case PhpParser.Break:
                case PhpParser.Callable:
                case PhpParser.Case:
                case PhpParser.Catch:
                case PhpParser.Class:
                case PhpParser.Clone:
                case PhpParser.Const:
                case PhpParser.Continue:
                case PhpParser.Declare:
                case PhpParser.Default:
                case PhpParser.Do:
                case PhpParser.DoubleCast:
                case PhpParser.DoubleType:
                case PhpParser.Echo:
                case PhpParser.Else:
                case PhpParser.ElseIf:
                case PhpParser.Empty:
                case PhpParser.EndDeclare:
                case PhpParser.EndFor:
                case PhpParser.EndForeach:
                case PhpParser.EndIf:
                case PhpParser.EndSwitch:
                case PhpParser.EndWhile:
                case PhpParser.Eval:
                case PhpParser.Exit:
                case PhpParser.Extends:
                case PhpParser.Final:
                case PhpParser.Finally:
                case PhpParser.FloatCast:
                case PhpParser.For:
                case PhpParser.Foreach:
                case PhpParser.Function:
                case PhpParser.Global:
                case PhpParser.Goto:
                case PhpParser.If:
                case PhpParser.Implements:
                case PhpParser.Import:
                case PhpParser.Include:
                case PhpParser.IncludeOnce:
                case PhpParser.InstanceOf:
                case PhpParser.InsteadOf:
                case PhpParser.Int8Cast:
                case PhpParser.Int16Cast:
                case PhpParser.Int64Type:
                case PhpParser.IntType:
                case PhpParser.Interface:
                case PhpParser.IsSet:
                case PhpParser.List:
                case PhpParser.LogicalAnd:
                case PhpParser.LogicalOr:
                case PhpParser.LogicalXor:
                case PhpParser.Match:
                case PhpParser.Namespace:
                case PhpParser.New:
                case PhpParser.Null:
                case PhpParser.ObjectType:
                case PhpParser.Parent_:
                case PhpParser.Partial:
                case PhpParser.Print:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Require:
                case PhpParser.RequireOnce:
                case PhpParser.Resource:
                case PhpParser.Return:
                case PhpParser.Static:
                case PhpParser.StringType:
                case PhpParser.Switch:
                case PhpParser.Throw:
                case PhpParser.Trait:
                case PhpParser.Try:
                case PhpParser.Typeof:
                case PhpParser.UintCast:
                case PhpParser.UnicodeCast:
                case PhpParser.Unset:
                case PhpParser.Use:
                case PhpParser.Var:
                case PhpParser.While:
                case PhpParser.Yield:
                case PhpParser.From:
                case PhpParser.LambdaFn:
                case PhpParser.Get:
                case PhpParser.Set:
                case PhpParser.Call:
                case PhpParser.CallStatic:
                case PhpParser.Constructor:
                case PhpParser.Destruct:
                case PhpParser.Wakeup:
                case PhpParser.Sleep:
                case PhpParser.Autoload:
                case PhpParser.IsSet__:
                case PhpParser.Unset__:
                case PhpParser.ToString__:
                case PhpParser.Invoke:
                case PhpParser.SetState:
                case PhpParser.Clone__:
                case PhpParser.DebugInfo:
                case PhpParser.Namespace__:
                case PhpParser.Class__:
                case PhpParser.Traic__:
                case PhpParser.Function__:
                case PhpParser.Method__:
                case PhpParser.Line__:
                case PhpParser.File__:
                case PhpParser.Dir__:
                case PhpParser.Inc:
                case PhpParser.Dec:
                case PhpParser.NamespaceSeparator:
                case PhpParser.Ellipsis:
                case PhpParser.Bang:
                case PhpParser.Plus:
                case PhpParser.Minus:
                case PhpParser.Tilde:
                case PhpParser.SuppressWarnings:
                case PhpParser.Dollar:
                case PhpParser.OpenRoundBracket:
                case PhpParser.OpenSquareBracket:
                case PhpParser.VarName:
                case PhpParser.Label:
                case PhpParser.Octal:
                case PhpParser.Decimal:
                case PhpParser.Real:
                case PhpParser.Hex:
                case PhpParser.Binary:
                case PhpParser.BackQuoteString:
                case PhpParser.SingleQuoteString:
                case PhpParser.DoubleQuote:
                case PhpParser.StartNowDoc:
                case PhpParser.StartHereDoc:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1536;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 187, this._ctx);
                    if (la_ === 1) {
                        this.state = 1535;
                        this.argumentName();
                    }
                    this.state = 1539;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (_la === PhpParser.Ellipsis) {
                        this.state = 1538;
                        this.match(PhpParser.Ellipsis);
                    }
                    this.state = 1541;
                    this.expression(0);
                    break;
                case PhpParser.Ampersand:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1542;
                    this.match(PhpParser.Ampersand);
                    this.state = 1543;
                    this.chain();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    argumentName() {
        let localctx = new ArgumentNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 202, PhpParser.RULE_argumentName);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1546;
            this.identifier();
            this.state = 1547;
            this.match(PhpParser.Colon);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constantInitializer() {
        let localctx = new ConstantInitializerContext(this, this._ctx, this.state);
        this.enterRule(localctx, 204, PhpParser.RULE_constantInitializer);
        var _la = 0;
        try {
            this.state = 1570;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 194, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1549;
                    this.constant();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1550;
                    this.string();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1551;
                    this.match(PhpParser.Array);
                    this.state = 1552;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1557;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                        this.state = 1553;
                        this.arrayItemList();
                        this.state = 1555;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === PhpParser.Comma) {
                            this.state = 1554;
                            this.match(PhpParser.Comma);
                        }
                    }
                    this.state = 1559;
                    this.match(PhpParser.CloseRoundBracket);
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1560;
                    this.match(PhpParser.OpenSquareBracket);
                    this.state = 1565;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                        this.state = 1561;
                        this.arrayItemList();
                        this.state = 1563;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if (_la === PhpParser.Comma) {
                            this.state = 1562;
                            this.match(PhpParser.Comma);
                        }
                    }
                    this.state = 1567;
                    this.match(PhpParser.CloseSquareBracket);
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1568;
                    _la = this._input.LA(1);
                    if (!(_la === PhpParser.Plus || _la === PhpParser.Minus)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1569;
                    this.constantInitializer();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    constant() {
        let localctx = new ConstantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 206, PhpParser.RULE_constant);
        try {
            this.state = 1577;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 195, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1572;
                    this.match(PhpParser.Null);
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1573;
                    this.literalConstant();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1574;
                    this.magicConstant();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1575;
                    this.classConstant();
                    break;
                case 5:
                    this.enterOuterAlt(localctx, 5);
                    this.state = 1576;
                    this.qualifiedNamespaceName();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    literalConstant() {
        let localctx = new LiteralConstantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 208, PhpParser.RULE_literalConstant);
        try {
            this.state = 1583;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Real:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1579;
                    this.match(PhpParser.Real);
                    break;
                case PhpParser.BooleanConstant:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1580;
                    this.match(PhpParser.BooleanConstant);
                    break;
                case PhpParser.Octal:
                case PhpParser.Decimal:
                case PhpParser.Hex:
                case PhpParser.Binary:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1581;
                    this.numericConstant();
                    break;
                case PhpParser.Label:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1582;
                    this.stringConstant();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    numericConstant() {
        let localctx = new NumericConstantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 210, PhpParser.RULE_numericConstant);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1585;
            _la = this._input.LA(1);
            if (!(((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    classConstant() {
        let localctx = new ClassConstantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 212, PhpParser.RULE_classConstant);
        var _la = 0;
        try {
            this.state = 1605;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 200, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1587;
                    _la = this._input.LA(1);
                    if (!(_la === PhpParser.Class || _la === PhpParser.Parent_)) {
                        this._errHandler.recoverInline(this);
                    }
                    else {
                        this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1588;
                    this.match(PhpParser.DoubleColon);
                    this.state = 1593;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 197, this._ctx);
                    switch (la_) {
                        case 1:
                            this.state = 1589;
                            this.identifier();
                            break;
                        case 2:
                            this.state = 1590;
                            this.match(PhpParser.Constructor);
                            break;
                        case 3:
                            this.state = 1591;
                            this.match(PhpParser.Get);
                            break;
                        case 4:
                            this.state = 1592;
                            this.match(PhpParser.Set);
                            break;
                    }
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1598;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case PhpParser.Abstract:
                        case PhpParser.Array:
                        case PhpParser.As:
                        case PhpParser.BinaryCast:
                        case PhpParser.BoolType:
                        case PhpParser.BooleanConstant:
                        case PhpParser.Break:
                        case PhpParser.Callable:
                        case PhpParser.Case:
                        case PhpParser.Catch:
                        case PhpParser.Class:
                        case PhpParser.Clone:
                        case PhpParser.Const:
                        case PhpParser.Continue:
                        case PhpParser.Declare:
                        case PhpParser.Default:
                        case PhpParser.Do:
                        case PhpParser.DoubleCast:
                        case PhpParser.DoubleType:
                        case PhpParser.Echo:
                        case PhpParser.Else:
                        case PhpParser.ElseIf:
                        case PhpParser.Empty:
                        case PhpParser.EndDeclare:
                        case PhpParser.EndFor:
                        case PhpParser.EndForeach:
                        case PhpParser.EndIf:
                        case PhpParser.EndSwitch:
                        case PhpParser.EndWhile:
                        case PhpParser.Eval:
                        case PhpParser.Exit:
                        case PhpParser.Extends:
                        case PhpParser.Final:
                        case PhpParser.Finally:
                        case PhpParser.FloatCast:
                        case PhpParser.For:
                        case PhpParser.Foreach:
                        case PhpParser.Function:
                        case PhpParser.Global:
                        case PhpParser.Goto:
                        case PhpParser.If:
                        case PhpParser.Implements:
                        case PhpParser.Import:
                        case PhpParser.Include:
                        case PhpParser.IncludeOnce:
                        case PhpParser.InstanceOf:
                        case PhpParser.InsteadOf:
                        case PhpParser.Int8Cast:
                        case PhpParser.Int16Cast:
                        case PhpParser.Int64Type:
                        case PhpParser.IntType:
                        case PhpParser.Interface:
                        case PhpParser.IsSet:
                        case PhpParser.List:
                        case PhpParser.LogicalAnd:
                        case PhpParser.LogicalOr:
                        case PhpParser.LogicalXor:
                        case PhpParser.Namespace:
                        case PhpParser.New:
                        case PhpParser.Null:
                        case PhpParser.ObjectType:
                        case PhpParser.Parent_:
                        case PhpParser.Partial:
                        case PhpParser.Print:
                        case PhpParser.Private:
                        case PhpParser.Protected:
                        case PhpParser.Public:
                        case PhpParser.Require:
                        case PhpParser.RequireOnce:
                        case PhpParser.Resource:
                        case PhpParser.Return:
                        case PhpParser.Static:
                        case PhpParser.StringType:
                        case PhpParser.Switch:
                        case PhpParser.Throw:
                        case PhpParser.Trait:
                        case PhpParser.Try:
                        case PhpParser.Typeof:
                        case PhpParser.UintCast:
                        case PhpParser.UnicodeCast:
                        case PhpParser.Unset:
                        case PhpParser.Use:
                        case PhpParser.Var:
                        case PhpParser.While:
                        case PhpParser.Yield:
                        case PhpParser.From:
                        case PhpParser.Get:
                        case PhpParser.Set:
                        case PhpParser.Call:
                        case PhpParser.CallStatic:
                        case PhpParser.Constructor:
                        case PhpParser.Destruct:
                        case PhpParser.Wakeup:
                        case PhpParser.Sleep:
                        case PhpParser.Autoload:
                        case PhpParser.IsSet__:
                        case PhpParser.Unset__:
                        case PhpParser.ToString__:
                        case PhpParser.Invoke:
                        case PhpParser.SetState:
                        case PhpParser.Clone__:
                        case PhpParser.DebugInfo:
                        case PhpParser.Namespace__:
                        case PhpParser.Class__:
                        case PhpParser.Traic__:
                        case PhpParser.Function__:
                        case PhpParser.Method__:
                        case PhpParser.Line__:
                        case PhpParser.File__:
                        case PhpParser.Dir__:
                        case PhpParser.NamespaceSeparator:
                        case PhpParser.Label:
                            this.state = 1595;
                            this.qualifiedStaticTypeRef();
                            break;
                        case PhpParser.Dollar:
                        case PhpParser.VarName:
                            this.state = 1596;
                            this.keyedVariable();
                            break;
                        case PhpParser.SingleQuoteString:
                        case PhpParser.DoubleQuote:
                        case PhpParser.StartNowDoc:
                        case PhpParser.StartHereDoc:
                            this.state = 1597;
                            this.string();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    this.state = 1600;
                    this.match(PhpParser.DoubleColon);
                    this.state = 1603;
                    this._errHandler.sync(this);
                    switch (this._input.LA(1)) {
                        case PhpParser.Abstract:
                        case PhpParser.Array:
                        case PhpParser.As:
                        case PhpParser.BinaryCast:
                        case PhpParser.BoolType:
                        case PhpParser.BooleanConstant:
                        case PhpParser.Break:
                        case PhpParser.Callable:
                        case PhpParser.Case:
                        case PhpParser.Catch:
                        case PhpParser.Class:
                        case PhpParser.Clone:
                        case PhpParser.Const:
                        case PhpParser.Continue:
                        case PhpParser.Declare:
                        case PhpParser.Default:
                        case PhpParser.Do:
                        case PhpParser.DoubleCast:
                        case PhpParser.DoubleType:
                        case PhpParser.Echo:
                        case PhpParser.Else:
                        case PhpParser.ElseIf:
                        case PhpParser.Empty:
                        case PhpParser.EndDeclare:
                        case PhpParser.EndFor:
                        case PhpParser.EndForeach:
                        case PhpParser.EndIf:
                        case PhpParser.EndSwitch:
                        case PhpParser.EndWhile:
                        case PhpParser.Eval:
                        case PhpParser.Exit:
                        case PhpParser.Extends:
                        case PhpParser.Final:
                        case PhpParser.Finally:
                        case PhpParser.FloatCast:
                        case PhpParser.For:
                        case PhpParser.Foreach:
                        case PhpParser.Function:
                        case PhpParser.Global:
                        case PhpParser.Goto:
                        case PhpParser.If:
                        case PhpParser.Implements:
                        case PhpParser.Import:
                        case PhpParser.Include:
                        case PhpParser.IncludeOnce:
                        case PhpParser.InstanceOf:
                        case PhpParser.InsteadOf:
                        case PhpParser.Int8Cast:
                        case PhpParser.Int16Cast:
                        case PhpParser.Int64Type:
                        case PhpParser.IntType:
                        case PhpParser.Interface:
                        case PhpParser.IsSet:
                        case PhpParser.List:
                        case PhpParser.LogicalAnd:
                        case PhpParser.LogicalOr:
                        case PhpParser.LogicalXor:
                        case PhpParser.Namespace:
                        case PhpParser.New:
                        case PhpParser.Null:
                        case PhpParser.ObjectType:
                        case PhpParser.Parent_:
                        case PhpParser.Partial:
                        case PhpParser.Print:
                        case PhpParser.Private:
                        case PhpParser.Protected:
                        case PhpParser.Public:
                        case PhpParser.Require:
                        case PhpParser.RequireOnce:
                        case PhpParser.Resource:
                        case PhpParser.Return:
                        case PhpParser.Static:
                        case PhpParser.StringType:
                        case PhpParser.Switch:
                        case PhpParser.Throw:
                        case PhpParser.Trait:
                        case PhpParser.Try:
                        case PhpParser.Typeof:
                        case PhpParser.UintCast:
                        case PhpParser.UnicodeCast:
                        case PhpParser.Unset:
                        case PhpParser.Use:
                        case PhpParser.Var:
                        case PhpParser.While:
                        case PhpParser.Yield:
                        case PhpParser.From:
                        case PhpParser.Get:
                        case PhpParser.Set:
                        case PhpParser.Call:
                        case PhpParser.CallStatic:
                        case PhpParser.Constructor:
                        case PhpParser.Destruct:
                        case PhpParser.Wakeup:
                        case PhpParser.Sleep:
                        case PhpParser.Autoload:
                        case PhpParser.IsSet__:
                        case PhpParser.Unset__:
                        case PhpParser.ToString__:
                        case PhpParser.Invoke:
                        case PhpParser.SetState:
                        case PhpParser.Clone__:
                        case PhpParser.DebugInfo:
                        case PhpParser.Namespace__:
                        case PhpParser.Class__:
                        case PhpParser.Traic__:
                        case PhpParser.Function__:
                        case PhpParser.Method__:
                        case PhpParser.Line__:
                        case PhpParser.File__:
                        case PhpParser.Dir__:
                        case PhpParser.Label:
                            this.state = 1601;
                            this.identifier();
                            break;
                        case PhpParser.Dollar:
                        case PhpParser.VarName:
                            this.state = 1602;
                            this.keyedVariable();
                            break;
                        default:
                            throw new antlr4_1.default.error.NoViableAltException(this);
                    }
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    stringConstant() {
        let localctx = new StringConstantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 214, PhpParser.RULE_stringConstant);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1607;
            this.match(PhpParser.Label);
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    string() {
        let localctx = new StringContext(this, this._ctx, this.state);
        this.enterRule(localctx, 216, PhpParser.RULE_string);
        try {
            this.state = 1630;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.StartHereDoc:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1609;
                    this.match(PhpParser.StartHereDoc);
                    this.state = 1611;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 1610;
                                this.match(PhpParser.HereDocText);
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 1613;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 201, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    break;
                case PhpParser.StartNowDoc:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1615;
                    this.match(PhpParser.StartNowDoc);
                    this.state = 1617;
                    this._errHandler.sync(this);
                    var _alt = 1;
                    do {
                        switch (_alt) {
                            case 1:
                                this.state = 1616;
                                this.match(PhpParser.HereDocText);
                                break;
                            default:
                                throw new antlr4_1.default.error.NoViableAltException(this);
                        }
                        this.state = 1619;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 202, this._ctx);
                    } while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER);
                    break;
                case PhpParser.SingleQuoteString:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1621;
                    this.match(PhpParser.SingleQuoteString);
                    break;
                case PhpParser.DoubleQuote:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1622;
                    this.match(PhpParser.DoubleQuote);
                    this.state = 1626;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input, 203, this._ctx);
                    while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt === 1) {
                            this.state = 1623;
                            this.interpolatedStringPart();
                        }
                        this.state = 1628;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input, 203, this._ctx);
                    }
                    this.state = 1629;
                    this.match(PhpParser.DoubleQuote);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    interpolatedStringPart() {
        let localctx = new InterpolatedStringPartContext(this, this._ctx, this.state);
        this.enterRule(localctx, 218, PhpParser.RULE_interpolatedStringPart);
        try {
            this.state = 1635;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.StringPart:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1632;
                    this.match(PhpParser.StringPart);
                    break;
                case PhpParser.UnicodeEscape:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1633;
                    this.match(PhpParser.UnicodeEscape);
                    break;
                case PhpParser.Abstract:
                case PhpParser.Array:
                case PhpParser.As:
                case PhpParser.BinaryCast:
                case PhpParser.BoolType:
                case PhpParser.BooleanConstant:
                case PhpParser.Break:
                case PhpParser.Callable:
                case PhpParser.Case:
                case PhpParser.Catch:
                case PhpParser.Class:
                case PhpParser.Clone:
                case PhpParser.Const:
                case PhpParser.Continue:
                case PhpParser.Declare:
                case PhpParser.Default:
                case PhpParser.Do:
                case PhpParser.DoubleCast:
                case PhpParser.DoubleType:
                case PhpParser.Echo:
                case PhpParser.Else:
                case PhpParser.ElseIf:
                case PhpParser.Empty:
                case PhpParser.EndDeclare:
                case PhpParser.EndFor:
                case PhpParser.EndForeach:
                case PhpParser.EndIf:
                case PhpParser.EndSwitch:
                case PhpParser.EndWhile:
                case PhpParser.Eval:
                case PhpParser.Exit:
                case PhpParser.Extends:
                case PhpParser.Final:
                case PhpParser.Finally:
                case PhpParser.FloatCast:
                case PhpParser.For:
                case PhpParser.Foreach:
                case PhpParser.Function:
                case PhpParser.Global:
                case PhpParser.Goto:
                case PhpParser.If:
                case PhpParser.Implements:
                case PhpParser.Import:
                case PhpParser.Include:
                case PhpParser.IncludeOnce:
                case PhpParser.InstanceOf:
                case PhpParser.InsteadOf:
                case PhpParser.Int8Cast:
                case PhpParser.Int16Cast:
                case PhpParser.Int64Type:
                case PhpParser.IntType:
                case PhpParser.Interface:
                case PhpParser.IsSet:
                case PhpParser.List:
                case PhpParser.LogicalAnd:
                case PhpParser.LogicalOr:
                case PhpParser.LogicalXor:
                case PhpParser.Namespace:
                case PhpParser.New:
                case PhpParser.Null:
                case PhpParser.ObjectType:
                case PhpParser.Parent_:
                case PhpParser.Partial:
                case PhpParser.Print:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Require:
                case PhpParser.RequireOnce:
                case PhpParser.Resource:
                case PhpParser.Return:
                case PhpParser.Static:
                case PhpParser.StringType:
                case PhpParser.Switch:
                case PhpParser.Throw:
                case PhpParser.Trait:
                case PhpParser.Try:
                case PhpParser.Typeof:
                case PhpParser.UintCast:
                case PhpParser.UnicodeCast:
                case PhpParser.Unset:
                case PhpParser.Use:
                case PhpParser.Var:
                case PhpParser.While:
                case PhpParser.Yield:
                case PhpParser.From:
                case PhpParser.Get:
                case PhpParser.Set:
                case PhpParser.Call:
                case PhpParser.CallStatic:
                case PhpParser.Constructor:
                case PhpParser.Destruct:
                case PhpParser.Wakeup:
                case PhpParser.Sleep:
                case PhpParser.Autoload:
                case PhpParser.IsSet__:
                case PhpParser.Unset__:
                case PhpParser.ToString__:
                case PhpParser.Invoke:
                case PhpParser.SetState:
                case PhpParser.Clone__:
                case PhpParser.DebugInfo:
                case PhpParser.Namespace__:
                case PhpParser.Class__:
                case PhpParser.Traic__:
                case PhpParser.Function__:
                case PhpParser.Method__:
                case PhpParser.Line__:
                case PhpParser.File__:
                case PhpParser.Dir__:
                case PhpParser.NamespaceSeparator:
                case PhpParser.Dollar:
                case PhpParser.OpenRoundBracket:
                case PhpParser.VarName:
                case PhpParser.Label:
                case PhpParser.SingleQuoteString:
                case PhpParser.DoubleQuote:
                case PhpParser.StartNowDoc:
                case PhpParser.StartHereDoc:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1634;
                    this.chain();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    chainList() {
        let localctx = new ChainListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 220, PhpParser.RULE_chainList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1637;
            this.chain();
            this.state = 1642;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 1638;
                this.match(PhpParser.Comma);
                this.state = 1639;
                this.chain();
                this.state = 1644;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    chain() {
        let localctx = new ChainContext(this, this._ctx, this.state);
        this.enterRule(localctx, 222, PhpParser.RULE_chain);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1645;
            this.chainOrigin();
            this.state = 1649;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 207, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1646;
                    this.memberAccess();
                }
                this.state = 1651;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 207, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    chainOrigin() {
        let localctx = new ChainOriginContext(this, this._ctx, this.state);
        this.enterRule(localctx, 224, PhpParser.RULE_chainOrigin);
        try {
            this.state = 1658;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 208, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1652;
                    this.chainBase();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1653;
                    this.functionCall();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1654;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1655;
                    this.newExpr();
                    this.state = 1656;
                    this.match(PhpParser.CloseRoundBracket);
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    memberAccess() {
        let localctx = new MemberAccessContext(this, this._ctx, this.state);
        this.enterRule(localctx, 226, PhpParser.RULE_memberAccess);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1660;
            this.match(PhpParser.ObjectOperator);
            this.state = 1661;
            this.keyedFieldName();
            this.state = 1663;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 209, this._ctx);
            if (la_ === 1) {
                this.state = 1662;
                this.actualArguments();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionCall() {
        let localctx = new FunctionCallContext(this, this._ctx, this.state);
        this.enterRule(localctx, 228, PhpParser.RULE_functionCall);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1665;
            this.functionCallName();
            this.state = 1666;
            this.actualArguments();
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    functionCallName() {
        let localctx = new FunctionCallNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 230, PhpParser.RULE_functionCallName);
        try {
            this.state = 1672;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 210, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1668;
                    this.qualifiedNamespaceName();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1669;
                    this.classConstant();
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1670;
                    this.chainBase();
                    break;
                case 4:
                    this.enterOuterAlt(localctx, 4);
                    this.state = 1671;
                    this.parentheses();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    actualArguments() {
        let localctx = new ActualArgumentsContext(this, this._ctx, this.state);
        this.enterRule(localctx, 232, PhpParser.RULE_actualArguments);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === PhpParser.Lgeneric) {
                this.state = 1674;
                this.genericDynamicArgs();
            }
            this.state = 1677;
            this.arguments();
            this.state = 1681;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 212, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1678;
                    this.squareCurlyExpression();
                }
                this.state = 1683;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 212, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    chainBase() {
        let localctx = new ChainBaseContext(this, this._ctx, this.state);
        this.enterRule(localctx, 234, PhpParser.RULE_chainBase);
        try {
            this.state = 1693;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Dollar:
                case PhpParser.VarName:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1684;
                    this.keyedVariable();
                    this.state = 1687;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input, 213, this._ctx);
                    if (la_ === 1) {
                        this.state = 1685;
                        this.match(PhpParser.DoubleColon);
                        this.state = 1686;
                        this.keyedVariable();
                    }
                    break;
                case PhpParser.Abstract:
                case PhpParser.Array:
                case PhpParser.As:
                case PhpParser.BinaryCast:
                case PhpParser.BoolType:
                case PhpParser.BooleanConstant:
                case PhpParser.Break:
                case PhpParser.Callable:
                case PhpParser.Case:
                case PhpParser.Catch:
                case PhpParser.Class:
                case PhpParser.Clone:
                case PhpParser.Const:
                case PhpParser.Continue:
                case PhpParser.Declare:
                case PhpParser.Default:
                case PhpParser.Do:
                case PhpParser.DoubleCast:
                case PhpParser.DoubleType:
                case PhpParser.Echo:
                case PhpParser.Else:
                case PhpParser.ElseIf:
                case PhpParser.Empty:
                case PhpParser.EndDeclare:
                case PhpParser.EndFor:
                case PhpParser.EndForeach:
                case PhpParser.EndIf:
                case PhpParser.EndSwitch:
                case PhpParser.EndWhile:
                case PhpParser.Eval:
                case PhpParser.Exit:
                case PhpParser.Extends:
                case PhpParser.Final:
                case PhpParser.Finally:
                case PhpParser.FloatCast:
                case PhpParser.For:
                case PhpParser.Foreach:
                case PhpParser.Function:
                case PhpParser.Global:
                case PhpParser.Goto:
                case PhpParser.If:
                case PhpParser.Implements:
                case PhpParser.Import:
                case PhpParser.Include:
                case PhpParser.IncludeOnce:
                case PhpParser.InstanceOf:
                case PhpParser.InsteadOf:
                case PhpParser.Int8Cast:
                case PhpParser.Int16Cast:
                case PhpParser.Int64Type:
                case PhpParser.IntType:
                case PhpParser.Interface:
                case PhpParser.IsSet:
                case PhpParser.List:
                case PhpParser.LogicalAnd:
                case PhpParser.LogicalOr:
                case PhpParser.LogicalXor:
                case PhpParser.Namespace:
                case PhpParser.New:
                case PhpParser.Null:
                case PhpParser.ObjectType:
                case PhpParser.Parent_:
                case PhpParser.Partial:
                case PhpParser.Print:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Require:
                case PhpParser.RequireOnce:
                case PhpParser.Resource:
                case PhpParser.Return:
                case PhpParser.Static:
                case PhpParser.StringType:
                case PhpParser.Switch:
                case PhpParser.Throw:
                case PhpParser.Trait:
                case PhpParser.Try:
                case PhpParser.Typeof:
                case PhpParser.UintCast:
                case PhpParser.UnicodeCast:
                case PhpParser.Unset:
                case PhpParser.Use:
                case PhpParser.Var:
                case PhpParser.While:
                case PhpParser.Yield:
                case PhpParser.From:
                case PhpParser.Get:
                case PhpParser.Set:
                case PhpParser.Call:
                case PhpParser.CallStatic:
                case PhpParser.Constructor:
                case PhpParser.Destruct:
                case PhpParser.Wakeup:
                case PhpParser.Sleep:
                case PhpParser.Autoload:
                case PhpParser.IsSet__:
                case PhpParser.Unset__:
                case PhpParser.ToString__:
                case PhpParser.Invoke:
                case PhpParser.SetState:
                case PhpParser.Clone__:
                case PhpParser.DebugInfo:
                case PhpParser.Namespace__:
                case PhpParser.Class__:
                case PhpParser.Traic__:
                case PhpParser.Function__:
                case PhpParser.Method__:
                case PhpParser.Line__:
                case PhpParser.File__:
                case PhpParser.Dir__:
                case PhpParser.NamespaceSeparator:
                case PhpParser.Label:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1689;
                    this.qualifiedStaticTypeRef();
                    this.state = 1690;
                    this.match(PhpParser.DoubleColon);
                    this.state = 1691;
                    this.keyedVariable();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    keyedFieldName() {
        let localctx = new KeyedFieldNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 236, PhpParser.RULE_keyedFieldName);
        try {
            this.state = 1697;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Abstract:
                case PhpParser.Array:
                case PhpParser.As:
                case PhpParser.BinaryCast:
                case PhpParser.BoolType:
                case PhpParser.BooleanConstant:
                case PhpParser.Break:
                case PhpParser.Callable:
                case PhpParser.Case:
                case PhpParser.Catch:
                case PhpParser.Class:
                case PhpParser.Clone:
                case PhpParser.Const:
                case PhpParser.Continue:
                case PhpParser.Declare:
                case PhpParser.Default:
                case PhpParser.Do:
                case PhpParser.DoubleCast:
                case PhpParser.DoubleType:
                case PhpParser.Echo:
                case PhpParser.Else:
                case PhpParser.ElseIf:
                case PhpParser.Empty:
                case PhpParser.EndDeclare:
                case PhpParser.EndFor:
                case PhpParser.EndForeach:
                case PhpParser.EndIf:
                case PhpParser.EndSwitch:
                case PhpParser.EndWhile:
                case PhpParser.Eval:
                case PhpParser.Exit:
                case PhpParser.Extends:
                case PhpParser.Final:
                case PhpParser.Finally:
                case PhpParser.FloatCast:
                case PhpParser.For:
                case PhpParser.Foreach:
                case PhpParser.Function:
                case PhpParser.Global:
                case PhpParser.Goto:
                case PhpParser.If:
                case PhpParser.Implements:
                case PhpParser.Import:
                case PhpParser.Include:
                case PhpParser.IncludeOnce:
                case PhpParser.InstanceOf:
                case PhpParser.InsteadOf:
                case PhpParser.Int8Cast:
                case PhpParser.Int16Cast:
                case PhpParser.Int64Type:
                case PhpParser.IntType:
                case PhpParser.Interface:
                case PhpParser.IsSet:
                case PhpParser.List:
                case PhpParser.LogicalAnd:
                case PhpParser.LogicalOr:
                case PhpParser.LogicalXor:
                case PhpParser.Namespace:
                case PhpParser.New:
                case PhpParser.Null:
                case PhpParser.ObjectType:
                case PhpParser.Parent_:
                case PhpParser.Partial:
                case PhpParser.Print:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Require:
                case PhpParser.RequireOnce:
                case PhpParser.Resource:
                case PhpParser.Return:
                case PhpParser.Static:
                case PhpParser.StringType:
                case PhpParser.Switch:
                case PhpParser.Throw:
                case PhpParser.Trait:
                case PhpParser.Try:
                case PhpParser.Typeof:
                case PhpParser.UintCast:
                case PhpParser.UnicodeCast:
                case PhpParser.Unset:
                case PhpParser.Use:
                case PhpParser.Var:
                case PhpParser.While:
                case PhpParser.Yield:
                case PhpParser.From:
                case PhpParser.Get:
                case PhpParser.Set:
                case PhpParser.Call:
                case PhpParser.CallStatic:
                case PhpParser.Constructor:
                case PhpParser.Destruct:
                case PhpParser.Wakeup:
                case PhpParser.Sleep:
                case PhpParser.Autoload:
                case PhpParser.IsSet__:
                case PhpParser.Unset__:
                case PhpParser.ToString__:
                case PhpParser.Invoke:
                case PhpParser.SetState:
                case PhpParser.Clone__:
                case PhpParser.DebugInfo:
                case PhpParser.Namespace__:
                case PhpParser.Class__:
                case PhpParser.Traic__:
                case PhpParser.Function__:
                case PhpParser.Method__:
                case PhpParser.Line__:
                case PhpParser.File__:
                case PhpParser.Dir__:
                case PhpParser.OpenCurlyBracket:
                case PhpParser.Label:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1695;
                    this.keyedSimpleFieldName();
                    break;
                case PhpParser.Dollar:
                case PhpParser.VarName:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1696;
                    this.keyedVariable();
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    keyedSimpleFieldName() {
        let localctx = new KeyedSimpleFieldNameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 238, PhpParser.RULE_keyedSimpleFieldName);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1704;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.Abstract:
                case PhpParser.Array:
                case PhpParser.As:
                case PhpParser.BinaryCast:
                case PhpParser.BoolType:
                case PhpParser.BooleanConstant:
                case PhpParser.Break:
                case PhpParser.Callable:
                case PhpParser.Case:
                case PhpParser.Catch:
                case PhpParser.Class:
                case PhpParser.Clone:
                case PhpParser.Const:
                case PhpParser.Continue:
                case PhpParser.Declare:
                case PhpParser.Default:
                case PhpParser.Do:
                case PhpParser.DoubleCast:
                case PhpParser.DoubleType:
                case PhpParser.Echo:
                case PhpParser.Else:
                case PhpParser.ElseIf:
                case PhpParser.Empty:
                case PhpParser.EndDeclare:
                case PhpParser.EndFor:
                case PhpParser.EndForeach:
                case PhpParser.EndIf:
                case PhpParser.EndSwitch:
                case PhpParser.EndWhile:
                case PhpParser.Eval:
                case PhpParser.Exit:
                case PhpParser.Extends:
                case PhpParser.Final:
                case PhpParser.Finally:
                case PhpParser.FloatCast:
                case PhpParser.For:
                case PhpParser.Foreach:
                case PhpParser.Function:
                case PhpParser.Global:
                case PhpParser.Goto:
                case PhpParser.If:
                case PhpParser.Implements:
                case PhpParser.Import:
                case PhpParser.Include:
                case PhpParser.IncludeOnce:
                case PhpParser.InstanceOf:
                case PhpParser.InsteadOf:
                case PhpParser.Int8Cast:
                case PhpParser.Int16Cast:
                case PhpParser.Int64Type:
                case PhpParser.IntType:
                case PhpParser.Interface:
                case PhpParser.IsSet:
                case PhpParser.List:
                case PhpParser.LogicalAnd:
                case PhpParser.LogicalOr:
                case PhpParser.LogicalXor:
                case PhpParser.Namespace:
                case PhpParser.New:
                case PhpParser.Null:
                case PhpParser.ObjectType:
                case PhpParser.Parent_:
                case PhpParser.Partial:
                case PhpParser.Print:
                case PhpParser.Private:
                case PhpParser.Protected:
                case PhpParser.Public:
                case PhpParser.Require:
                case PhpParser.RequireOnce:
                case PhpParser.Resource:
                case PhpParser.Return:
                case PhpParser.Static:
                case PhpParser.StringType:
                case PhpParser.Switch:
                case PhpParser.Throw:
                case PhpParser.Trait:
                case PhpParser.Try:
                case PhpParser.Typeof:
                case PhpParser.UintCast:
                case PhpParser.UnicodeCast:
                case PhpParser.Unset:
                case PhpParser.Use:
                case PhpParser.Var:
                case PhpParser.While:
                case PhpParser.Yield:
                case PhpParser.From:
                case PhpParser.Get:
                case PhpParser.Set:
                case PhpParser.Call:
                case PhpParser.CallStatic:
                case PhpParser.Constructor:
                case PhpParser.Destruct:
                case PhpParser.Wakeup:
                case PhpParser.Sleep:
                case PhpParser.Autoload:
                case PhpParser.IsSet__:
                case PhpParser.Unset__:
                case PhpParser.ToString__:
                case PhpParser.Invoke:
                case PhpParser.SetState:
                case PhpParser.Clone__:
                case PhpParser.DebugInfo:
                case PhpParser.Namespace__:
                case PhpParser.Class__:
                case PhpParser.Traic__:
                case PhpParser.Function__:
                case PhpParser.Method__:
                case PhpParser.Line__:
                case PhpParser.File__:
                case PhpParser.Dir__:
                case PhpParser.Label:
                    this.state = 1699;
                    this.identifier();
                    break;
                case PhpParser.OpenCurlyBracket:
                    this.state = 1700;
                    this.match(PhpParser.OpenCurlyBracket);
                    this.state = 1701;
                    this.expression(0);
                    this.state = 1702;
                    this.match(PhpParser.CloseCurlyBracket);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 1709;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 217, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1706;
                    this.squareCurlyExpression();
                }
                this.state = 1711;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 217, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    keyedVariable() {
        let localctx = new KeyedVariableContext(this, this._ctx, this.state);
        this.enterRule(localctx, 240, PhpParser.RULE_keyedVariable);
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1715;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 218, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1712;
                    this.match(PhpParser.Dollar);
                }
                this.state = 1717;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 218, this._ctx);
            }
            this.state = 1724;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.VarName:
                    this.state = 1718;
                    this.match(PhpParser.VarName);
                    break;
                case PhpParser.Dollar:
                    this.state = 1719;
                    this.match(PhpParser.Dollar);
                    this.state = 1720;
                    this.match(PhpParser.OpenCurlyBracket);
                    this.state = 1721;
                    this.expression(0);
                    this.state = 1722;
                    this.match(PhpParser.CloseCurlyBracket);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
            this.state = 1729;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 220, this._ctx);
            while (_alt != 2 && _alt != antlr4_1.default.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                    this.state = 1726;
                    this.squareCurlyExpression();
                }
                this.state = 1731;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 220, this._ctx);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    squareCurlyExpression() {
        let localctx = new SquareCurlyExpressionContext(this, this._ctx, this.state);
        this.enterRule(localctx, 242, PhpParser.RULE_squareCurlyExpression);
        var _la = 0;
        try {
            this.state = 1741;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case PhpParser.OpenSquareBracket:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1732;
                    this.match(PhpParser.OpenSquareBracket);
                    this.state = 1734;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                        this.state = 1733;
                        this.expression(0);
                    }
                    this.state = 1736;
                    this.match(PhpParser.CloseSquareBracket);
                    break;
                case PhpParser.OpenCurlyBracket:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1737;
                    this.match(PhpParser.OpenCurlyBracket);
                    this.state = 1738;
                    this.expression(0);
                    this.state = 1739;
                    this.match(PhpParser.CloseCurlyBracket);
                    break;
                default:
                    throw new antlr4_1.default.error.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignmentList() {
        let localctx = new AssignmentListContext(this, this._ctx, this.state);
        this.enterRule(localctx, 244, PhpParser.RULE_assignmentList);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1744;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                this.state = 1743;
                this.assignmentListElement();
            }
            this.state = 1752;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === PhpParser.Comma) {
                this.state = 1746;
                this.match(PhpParser.Comma);
                this.state = 1748;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if (((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Match - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)) | (1 << (PhpParser.Inc - 140)) | (1 << (PhpParser.Dec - 140)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (PhpParser.NamespaceSeparator - 189)) | (1 << (PhpParser.Ampersand - 189)) | (1 << (PhpParser.Bang - 189)) | (1 << (PhpParser.Plus - 189)) | (1 << (PhpParser.Minus - 189)) | (1 << (PhpParser.Tilde - 189)) | (1 << (PhpParser.SuppressWarnings - 189)) | (1 << (PhpParser.Dollar - 189)) | (1 << (PhpParser.OpenRoundBracket - 189)) | (1 << (PhpParser.OpenSquareBracket - 189)) | (1 << (PhpParser.VarName - 189)) | (1 << (PhpParser.Label - 189)))) !== 0) || ((((_la - 221)) & ~0x1f) == 0 && ((1 << (_la - 221)) & ((1 << (PhpParser.Octal - 221)) | (1 << (PhpParser.Decimal - 221)) | (1 << (PhpParser.Real - 221)) | (1 << (PhpParser.Hex - 221)) | (1 << (PhpParser.Binary - 221)) | (1 << (PhpParser.BackQuoteString - 221)) | (1 << (PhpParser.SingleQuoteString - 221)) | (1 << (PhpParser.DoubleQuote - 221)) | (1 << (PhpParser.StartNowDoc - 221)) | (1 << (PhpParser.StartHereDoc - 221)))) !== 0)) {
                    this.state = 1747;
                    this.assignmentListElement();
                }
                this.state = 1754;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    assignmentListElement() {
        let localctx = new AssignmentListElementContext(this, this._ctx, this.state);
        this.enterRule(localctx, 246, PhpParser.RULE_assignmentListElement);
        try {
            this.state = 1762;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input, 226, this._ctx);
            switch (la_) {
                case 1:
                    this.enterOuterAlt(localctx, 1);
                    this.state = 1755;
                    this.chain();
                    break;
                case 2:
                    this.enterOuterAlt(localctx, 2);
                    this.state = 1756;
                    this.match(PhpParser.List);
                    this.state = 1757;
                    this.match(PhpParser.OpenRoundBracket);
                    this.state = 1758;
                    this.assignmentList();
                    this.state = 1759;
                    this.match(PhpParser.CloseRoundBracket);
                    break;
                case 3:
                    this.enterOuterAlt(localctx, 3);
                    this.state = 1761;
                    this.arrayItem();
                    break;
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    modifier() {
        let localctx = new ModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 248, PhpParser.RULE_modifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1764;
            _la = this._input.LA(1);
            if (!(_la === PhpParser.Abstract || _la === PhpParser.Final)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    identifier() {
        let localctx = new IdentifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 250, PhpParser.RULE_identifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1766;
            _la = this._input.LA(1);
            if (!(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (PhpParser.Final - 76)) | (1 << (PhpParser.Finally - 76)) | (1 << (PhpParser.FloatCast - 76)) | (1 << (PhpParser.For - 76)) | (1 << (PhpParser.Foreach - 76)) | (1 << (PhpParser.Function - 76)) | (1 << (PhpParser.Global - 76)) | (1 << (PhpParser.Goto - 76)) | (1 << (PhpParser.If - 76)) | (1 << (PhpParser.Implements - 76)) | (1 << (PhpParser.Import - 76)) | (1 << (PhpParser.Include - 76)) | (1 << (PhpParser.IncludeOnce - 76)) | (1 << (PhpParser.InstanceOf - 76)) | (1 << (PhpParser.InsteadOf - 76)) | (1 << (PhpParser.Int8Cast - 76)) | (1 << (PhpParser.Int16Cast - 76)) | (1 << (PhpParser.Int64Type - 76)) | (1 << (PhpParser.IntType - 76)) | (1 << (PhpParser.Interface - 76)) | (1 << (PhpParser.IsSet - 76)) | (1 << (PhpParser.List - 76)) | (1 << (PhpParser.LogicalAnd - 76)) | (1 << (PhpParser.LogicalOr - 76)) | (1 << (PhpParser.LogicalXor - 76)) | (1 << (PhpParser.Namespace - 76)) | (1 << (PhpParser.New - 76)) | (1 << (PhpParser.Null - 76)) | (1 << (PhpParser.ObjectType - 76)) | (1 << (PhpParser.Parent_ - 76)) | (1 << (PhpParser.Partial - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (PhpParser.Autoload - 140)) | (1 << (PhpParser.IsSet__ - 140)) | (1 << (PhpParser.Unset__ - 140)) | (1 << (PhpParser.ToString__ - 140)) | (1 << (PhpParser.Invoke - 140)) | (1 << (PhpParser.SetState - 140)) | (1 << (PhpParser.Clone__ - 140)) | (1 << (PhpParser.DebugInfo - 140)) | (1 << (PhpParser.Namespace__ - 140)) | (1 << (PhpParser.Class__ - 140)) | (1 << (PhpParser.Traic__ - 140)) | (1 << (PhpParser.Function__ - 140)) | (1 << (PhpParser.Method__ - 140)) | (1 << (PhpParser.Line__ - 140)) | (1 << (PhpParser.File__ - 140)) | (1 << (PhpParser.Dir__ - 140)))) !== 0) || _la === PhpParser.Label)) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    memberModifier() {
        let localctx = new MemberModifierContext(this, this._ctx, this.state);
        this.enterRule(localctx, 252, PhpParser.RULE_memberModifier);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1768;
            _la = this._input.LA(1);
            if (!(_la === PhpParser.Abstract || _la === PhpParser.Final || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (PhpParser.Private - 109)) | (1 << (PhpParser.Protected - 109)) | (1 << (PhpParser.Public - 109)) | (1 << (PhpParser.Static - 109)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    magicConstant() {
        let localctx = new MagicConstantContext(this, this._ctx, this.state);
        this.enterRule(localctx, 254, PhpParser.RULE_magicConstant);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1770;
            _la = this._input.LA(1);
            if (!(((((_la - 148)) & ~0x1f) == 0 && ((1 << (_la - 148)) & ((1 << (PhpParser.Namespace__ - 148)) | (1 << (PhpParser.Class__ - 148)) | (1 << (PhpParser.Traic__ - 148)) | (1 << (PhpParser.Function__ - 148)) | (1 << (PhpParser.Method__ - 148)) | (1 << (PhpParser.Line__ - 148)) | (1 << (PhpParser.File__ - 148)) | (1 << (PhpParser.Dir__ - 148)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    magicMethod() {
        let localctx = new MagicMethodContext(this, this._ctx, this.state);
        this.enterRule(localctx, 256, PhpParser.RULE_magicMethod);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1772;
            _la = this._input.LA(1);
            if (!(((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (PhpParser.Get - 132)) | (1 << (PhpParser.Set - 132)) | (1 << (PhpParser.Call - 132)) | (1 << (PhpParser.CallStatic - 132)) | (1 << (PhpParser.Constructor - 132)) | (1 << (PhpParser.Destruct - 132)) | (1 << (PhpParser.Wakeup - 132)) | (1 << (PhpParser.Sleep - 132)) | (1 << (PhpParser.Autoload - 132)) | (1 << (PhpParser.IsSet__ - 132)) | (1 << (PhpParser.Unset__ - 132)) | (1 << (PhpParser.ToString__ - 132)) | (1 << (PhpParser.Invoke - 132)) | (1 << (PhpParser.SetState - 132)) | (1 << (PhpParser.Clone__ - 132)) | (1 << (PhpParser.DebugInfo - 132)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    primitiveType() {
        let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
        this.enterRule(localctx, 258, PhpParser.RULE_primitiveType);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1774;
            _la = this._input.LA(1);
            if (!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (PhpParser.Array - 45)) | (1 << (PhpParser.BoolType - 45)) | (1 << (PhpParser.DoubleType - 45)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (PhpParser.Int64Type - 93)) | (1 << (PhpParser.IntType - 93)) | (1 << (PhpParser.ObjectType - 93)) | (1 << (PhpParser.Resource - 93)) | (1 << (PhpParser.StringType - 93)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    castOperation() {
        let localctx = new CastOperationContext(this, this._ctx, this.state);
        this.enterRule(localctx, 260, PhpParser.RULE_castOperation);
        var _la = 0;
        try {
            this.enterOuterAlt(localctx, 1);
            this.state = 1776;
            _la = this._input.LA(1);
            if (!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (PhpParser.Array - 45)) | (1 << (PhpParser.BinaryCast - 45)) | (1 << (PhpParser.BoolType - 45)) | (1 << (PhpParser.DoubleCast - 45)) | (1 << (PhpParser.DoubleType - 45)))) !== 0) || ((((_la - 78)) & ~0x1f) == 0 && ((1 << (_la - 78)) & ((1 << (PhpParser.FloatCast - 78)) | (1 << (PhpParser.Int8Cast - 78)) | (1 << (PhpParser.Int16Cast - 78)) | (1 << (PhpParser.Int64Type - 78)) | (1 << (PhpParser.IntType - 78)) | (1 << (PhpParser.ObjectType - 78)))) !== 0) || ((((_la - 114)) & ~0x1f) == 0 && ((1 << (_la - 114)) & ((1 << (PhpParser.Resource - 114)) | (1 << (PhpParser.StringType - 114)) | (1 << (PhpParser.UintCast - 114)) | (1 << (PhpParser.UnicodeCast - 114)) | (1 << (PhpParser.Unset - 114)))) !== 0))) {
                this._errHandler.recoverInline(this);
            }
            else {
                this._errHandler.reportMatch(this);
                this.consume();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.default.error.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
}
exports.default = PhpParser;
PhpParser.grammarFileName = "PhpParser.g4";
PhpParser.literalNames = [null, null, null, "'<?xml'", null, null, null,
    null, null, null, null, null, null, "'?>'",
    null, null, "'/>'", null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, null, null,
    null, null, null, null, null, null, "'#['",
    "'abstract'", "'array'", "'as'", "'binary'",
    null, null, "'break'", "'callable'", "'case'",
    "'catch'", "'class'", "'clone'", "'const'",
    "'continue'", "'declare'", "'default'", "'do'",
    "'real'", "'double'", "'echo'", "'else'", "'elseif'",
    "'empty'", "'enddeclare'", "'endfor'", "'endforeach'",
    "'endif'", "'endswitch'", "'endwhile'", "'eval'",
    "'die'", "'extends'", "'final'", "'finally'",
    "'float'", "'for'", "'foreach'", "'function'",
    "'global'", "'goto'", "'if'", "'implements'",
    "'import'", "'include'", "'include_once'", "'instanceof'",
    "'insteadof'", "'int8'", "'int16'", "'int64'",
    null, "'interface'", "'isset'", "'list'", "'and'",
    "'or'", "'xor'", "'match'", "'namespace'", "'new'",
    "'null'", "'object'", "'parent'", "'partial'",
    "'print'", "'private'", "'protected'", "'public'",
    "'require'", "'require_once'", "'resource'",
    "'return'", "'static'", "'string'", "'switch'",
    "'throw'", "'trait'", "'try'", "'clrtypeof'",
    null, "'unicode'", "'unset'", "'use'", "'var'",
    "'while'", "'yield'", "'from'", "'fn'", "'__get'",
    "'__set'", "'__call'", "'__callstatic'", "'__construct'",
    "'__destruct'", "'__wakeup'", "'__sleep'", "'__autoload'",
    "'__isset'", "'__unset'", "'__tostring'", "'__invoke'",
    "'__set_state'", "'__clone'", "'__debuginfo'",
    "'__namespace__'", "'__class__'", "'__trait__'",
    "'__function__'", "'__method__'", "'__line__'",
    "'__file__'", "'__dir__'", "'<=>'", "'<:'",
    "':>'", "'=>'", "'++'", "'--'", "'==='", "'!=='",
    "'=='", null, "'<='", "'>='", "'+='", "'-='",
    "'*='", "'**'", "'**='", "'/='", "'.='", "'%='",
    "'<<='", "'>>='", "'&='", "'|='", "'^='", "'||'",
    "'&&'", "'??'", "'??='", "'<<'", "'>>'", "'::'",
    "'->'", "'\\'", "'...'", null, null, "'&'",
    "'|'", "'!'", "'^'", "'+'", "'-'", "'*'", "'%'",
    null, "'~'", "'@'", null, "'.'", null, "'('",
    "')'", "'['", "']'", null, "'}'", "','", "':'",
    "';'", null, "'''", "'`'"];
PhpParser.symbolicNames = [null, "SeaWhitespace", "HtmlText", "XmlStart",
    "PHPStart", "HtmlScriptOpen", "HtmlStyleOpen",
    "HtmlComment", "HtmlDtd", "HtmlOpen", "Shebang",
    "Error", "XmlText", "XmlClose", "PHPStartInside",
    "HtmlClose", "HtmlSlashClose", "HtmlSlash",
    "HtmlEquals", "HtmlStartQuoteString", "HtmlStartDoubleQuoteString",
    "HtmlHex", "HtmlDecimal", "HtmlSpace", "HtmlName",
    "ErrorInside", "PHPStartInsideQuoteString",
    "HtmlEndQuoteString", "HtmlQuoteString", "ErrorHtmlQuote",
    "PHPStartDoubleQuoteString", "HtmlEndDoubleQuoteString",
    "HtmlDoubleQuoteString", "ErrorHtmlDoubleQuote",
    "ScriptText", "HtmlScriptClose", "PHPStartInsideScript",
    "StyleBody", "PHPEnd", "Whitespace", "MultiLineComment",
    "SingleLineComment", "ShellStyleComment", "AttributeStart",
    "Abstract", "Array", "As", "BinaryCast", "BoolType",
    "BooleanConstant", "Break", "Callable", "Case",
    "Catch", "Class", "Clone", "Const", "Continue",
    "Declare", "Default", "Do", "DoubleCast", "DoubleType",
    "Echo", "Else", "ElseIf", "Empty", "EndDeclare",
    "EndFor", "EndForeach", "EndIf", "EndSwitch",
    "EndWhile", "Eval", "Exit", "Extends", "Final",
    "Finally", "FloatCast", "For", "Foreach", "Function",
    "Global", "Goto", "If", "Implements", "Import",
    "Include", "IncludeOnce", "InstanceOf", "InsteadOf",
    "Int8Cast", "Int16Cast", "Int64Type", "IntType",
    "Interface", "IsSet", "List", "LogicalAnd",
    "LogicalOr", "LogicalXor", "Match", "Namespace",
    "New", "Null", "ObjectType", "Parent_", "Partial",
    "Print", "Private", "Protected", "Public",
    "Require", "RequireOnce", "Resource", "Return",
    "Static", "StringType", "Switch", "Throw",
    "Trait", "Try", "Typeof", "UintCast", "UnicodeCast",
    "Unset", "Use", "Var", "While", "Yield", "From",
    "LambdaFn", "Get", "Set", "Call", "CallStatic",
    "Constructor", "Destruct", "Wakeup", "Sleep",
    "Autoload", "IsSet__", "Unset__", "ToString__",
    "Invoke", "SetState", "Clone__", "DebugInfo",
    "Namespace__", "Class__", "Traic__", "Function__",
    "Method__", "Line__", "File__", "Dir__", "Spaceship",
    "Lgeneric", "Rgeneric", "DoubleArrow", "Inc",
    "Dec", "IsIdentical", "IsNoidentical", "IsEqual",
    "IsNotEq", "IsSmallerOrEqual", "IsGreaterOrEqual",
    "PlusEqual", "MinusEqual", "MulEqual", "Pow",
    "PowEqual", "DivEqual", "Concaequal", "ModEqual",
    "ShiftLeftEqual", "ShiftRightEqual", "AndEqual",
    "OrEqual", "XorEqual", "BooleanOr", "BooleanAnd",
    "NullCoalescing", "NullCoalescingEqual", "ShiftLeft",
    "ShiftRight", "DoubleColon", "ObjectOperator",
    "NamespaceSeparator", "Ellipsis", "Less", "Greater",
    "Ampersand", "Pipe", "Bang", "Caret", "Plus",
    "Minus", "Asterisk", "Percent", "Divide", "Tilde",
    "SuppressWarnings", "Dollar", "Dot", "QuestionMark",
    "OpenRoundBracket", "CloseRoundBracket", "OpenSquareBracket",
    "CloseSquareBracket", "OpenCurlyBracket", "CloseCurlyBracket",
    "Comma", "Colon", "SemiColon", "Eq", "Quote",
    "BackQuote", "VarName", "Label", "Octal", "Decimal",
    "Real", "Hex", "Binary", "BackQuoteString",
    "SingleQuoteString", "DoubleQuote", "StartNowDoc",
    "StartHereDoc", "ErrorPhp", "CurlyDollar",
    "UnicodeEscape", "StringPart", "Comment", "PHPEndSingleLineComment",
    "CommentEnd", "HereDocText", "XmlText2"];
PhpParser.ruleNames = ["htmlDocument", "inlineHtml", "htmlElement", "scriptText",
    "phpBlock", "importStatement", "topStatement",
    "useDeclaration", "useDeclarationContentList",
    "useDeclarationContent", "namespaceDeclaration",
    "namespaceStatement", "functionDeclaration", "classDeclaration",
    "classEntryType", "interfaceList", "typeParameterListInBrackets",
    "typeParameterList", "typeParameterWithDefaultsList",
    "typeParameterDecl", "typeParameterWithDefaultDecl",
    "genericDynamicArgs", "attributes", "attributeGroup",
    "attribute", "innerStatementList", "innerStatement",
    "statement", "emptyStatement", "blockStatement",
    "ifStatement", "elseIfStatement", "elseIfColonStatement",
    "elseStatement", "elseColonStatement", "whileStatement",
    "doWhileStatement", "forStatement", "forInit",
    "forUpdate", "switchStatement", "switchBlock",
    "breakStatement", "continueStatement", "returnStatement",
    "expressionStatement", "unsetStatement", "foreachStatement",
    "tryCatchFinally", "catchClause", "finallyStatement",
    "throwStatement", "gotoStatement", "declareStatement",
    "inlineHtmlStatement", "declareList", "formalParameterList",
    "formalParameter", "typeHint", "globalStatement",
    "globalVar", "echoStatement", "staticVariableStatement",
    "classStatement", "traitAdaptations", "traitAdaptationStatement",
    "traitPrecedence", "traitAlias", "traitMethodReference",
    "baseCtorCall", "methodBody", "propertyModifiers",
    "memberModifiers", "variableInitializer", "identifierInitializer",
    "globalConstantDeclaration", "expressionList",
    "parentheses", "expression", "assignable", "arrayCreation",
    "lambdaFunctionExpr", "matchExpr", "matchItem",
    "newExpr", "assignmentOperator", "yieldExpression",
    "arrayItemList", "arrayItem", "lambdaFunctionUseVars",
    "lambdaFunctionUseVar", "qualifiedStaticTypeRef",
    "typeRef", "anonymousClass", "indirectTypeRef",
    "qualifiedNamespaceName", "namespaceNameList",
    "namespaceNameTail", "qualifiedNamespaceNameList",
    "arguments", "actualArgument", "argumentName",
    "constantInitializer", "constant", "literalConstant",
    "numericConstant", "classConstant", "stringConstant",
    "string", "interpolatedStringPart", "chainList",
    "chain", "chainOrigin", "memberAccess", "functionCall",
    "functionCallName", "actualArguments", "chainBase",
    "keyedFieldName", "keyedSimpleFieldName", "keyedVariable",
    "squareCurlyExpression", "assignmentList", "assignmentListElement",
    "modifier", "identifier", "memberModifier", "magicConstant",
    "magicMethod", "primitiveType", "castOperation"];
PhpParser.EOF = antlr4_1.default.Token.EOF;
PhpParser.SeaWhitespace = 1;
PhpParser.HtmlText = 2;
PhpParser.XmlStart = 3;
PhpParser.PHPStart = 4;
PhpParser.HtmlScriptOpen = 5;
PhpParser.HtmlStyleOpen = 6;
PhpParser.HtmlComment = 7;
PhpParser.HtmlDtd = 8;
PhpParser.HtmlOpen = 9;
PhpParser.Shebang = 10;
PhpParser.Error = 11;
PhpParser.XmlText = 12;
PhpParser.XmlClose = 13;
PhpParser.PHPStartInside = 14;
PhpParser.HtmlClose = 15;
PhpParser.HtmlSlashClose = 16;
PhpParser.HtmlSlash = 17;
PhpParser.HtmlEquals = 18;
PhpParser.HtmlStartQuoteString = 19;
PhpParser.HtmlStartDoubleQuoteString = 20;
PhpParser.HtmlHex = 21;
PhpParser.HtmlDecimal = 22;
PhpParser.HtmlSpace = 23;
PhpParser.HtmlName = 24;
PhpParser.ErrorInside = 25;
PhpParser.PHPStartInsideQuoteString = 26;
PhpParser.HtmlEndQuoteString = 27;
PhpParser.HtmlQuoteString = 28;
PhpParser.ErrorHtmlQuote = 29;
PhpParser.PHPStartDoubleQuoteString = 30;
PhpParser.HtmlEndDoubleQuoteString = 31;
PhpParser.HtmlDoubleQuoteString = 32;
PhpParser.ErrorHtmlDoubleQuote = 33;
PhpParser.ScriptText = 34;
PhpParser.HtmlScriptClose = 35;
PhpParser.PHPStartInsideScript = 36;
PhpParser.StyleBody = 37;
PhpParser.PHPEnd = 38;
PhpParser.Whitespace = 39;
PhpParser.MultiLineComment = 40;
PhpParser.SingleLineComment = 41;
PhpParser.ShellStyleComment = 42;
PhpParser.AttributeStart = 43;
PhpParser.Abstract = 44;
PhpParser.Array = 45;
PhpParser.As = 46;
PhpParser.BinaryCast = 47;
PhpParser.BoolType = 48;
PhpParser.BooleanConstant = 49;
PhpParser.Break = 50;
PhpParser.Callable = 51;
PhpParser.Case = 52;
PhpParser.Catch = 53;
PhpParser.Class = 54;
PhpParser.Clone = 55;
PhpParser.Const = 56;
PhpParser.Continue = 57;
PhpParser.Declare = 58;
PhpParser.Default = 59;
PhpParser.Do = 60;
PhpParser.DoubleCast = 61;
PhpParser.DoubleType = 62;
PhpParser.Echo = 63;
PhpParser.Else = 64;
PhpParser.ElseIf = 65;
PhpParser.Empty = 66;
PhpParser.EndDeclare = 67;
PhpParser.EndFor = 68;
PhpParser.EndForeach = 69;
PhpParser.EndIf = 70;
PhpParser.EndSwitch = 71;
PhpParser.EndWhile = 72;
PhpParser.Eval = 73;
PhpParser.Exit = 74;
PhpParser.Extends = 75;
PhpParser.Final = 76;
PhpParser.Finally = 77;
PhpParser.FloatCast = 78;
PhpParser.For = 79;
PhpParser.Foreach = 80;
PhpParser.Function = 81;
PhpParser.Global = 82;
PhpParser.Goto = 83;
PhpParser.If = 84;
PhpParser.Implements = 85;
PhpParser.Import = 86;
PhpParser.Include = 87;
PhpParser.IncludeOnce = 88;
PhpParser.InstanceOf = 89;
PhpParser.InsteadOf = 90;
PhpParser.Int8Cast = 91;
PhpParser.Int16Cast = 92;
PhpParser.Int64Type = 93;
PhpParser.IntType = 94;
PhpParser.Interface = 95;
PhpParser.IsSet = 96;
PhpParser.List = 97;
PhpParser.LogicalAnd = 98;
PhpParser.LogicalOr = 99;
PhpParser.LogicalXor = 100;
PhpParser.Match = 101;
PhpParser.Namespace = 102;
PhpParser.New = 103;
PhpParser.Null = 104;
PhpParser.ObjectType = 105;
PhpParser.Parent_ = 106;
PhpParser.Partial = 107;
PhpParser.Print = 108;
PhpParser.Private = 109;
PhpParser.Protected = 110;
PhpParser.Public = 111;
PhpParser.Require = 112;
PhpParser.RequireOnce = 113;
PhpParser.Resource = 114;
PhpParser.Return = 115;
PhpParser.Static = 116;
PhpParser.StringType = 117;
PhpParser.Switch = 118;
PhpParser.Throw = 119;
PhpParser.Trait = 120;
PhpParser.Try = 121;
PhpParser.Typeof = 122;
PhpParser.UintCast = 123;
PhpParser.UnicodeCast = 124;
PhpParser.Unset = 125;
PhpParser.Use = 126;
PhpParser.Var = 127;
PhpParser.While = 128;
PhpParser.Yield = 129;
PhpParser.From = 130;
PhpParser.LambdaFn = 131;
PhpParser.Get = 132;
PhpParser.Set = 133;
PhpParser.Call = 134;
PhpParser.CallStatic = 135;
PhpParser.Constructor = 136;
PhpParser.Destruct = 137;
PhpParser.Wakeup = 138;
PhpParser.Sleep = 139;
PhpParser.Autoload = 140;
PhpParser.IsSet__ = 141;
PhpParser.Unset__ = 142;
PhpParser.ToString__ = 143;
PhpParser.Invoke = 144;
PhpParser.SetState = 145;
PhpParser.Clone__ = 146;
PhpParser.DebugInfo = 147;
PhpParser.Namespace__ = 148;
PhpParser.Class__ = 149;
PhpParser.Traic__ = 150;
PhpParser.Function__ = 151;
PhpParser.Method__ = 152;
PhpParser.Line__ = 153;
PhpParser.File__ = 154;
PhpParser.Dir__ = 155;
PhpParser.Spaceship = 156;
PhpParser.Lgeneric = 157;
PhpParser.Rgeneric = 158;
PhpParser.DoubleArrow = 159;
PhpParser.Inc = 160;
PhpParser.Dec = 161;
PhpParser.IsIdentical = 162;
PhpParser.IsNoidentical = 163;
PhpParser.IsEqual = 164;
PhpParser.IsNotEq = 165;
PhpParser.IsSmallerOrEqual = 166;
PhpParser.IsGreaterOrEqual = 167;
PhpParser.PlusEqual = 168;
PhpParser.MinusEqual = 169;
PhpParser.MulEqual = 170;
PhpParser.Pow = 171;
PhpParser.PowEqual = 172;
PhpParser.DivEqual = 173;
PhpParser.Concaequal = 174;
PhpParser.ModEqual = 175;
PhpParser.ShiftLeftEqual = 176;
PhpParser.ShiftRightEqual = 177;
PhpParser.AndEqual = 178;
PhpParser.OrEqual = 179;
PhpParser.XorEqual = 180;
PhpParser.BooleanOr = 181;
PhpParser.BooleanAnd = 182;
PhpParser.NullCoalescing = 183;
PhpParser.NullCoalescingEqual = 184;
PhpParser.ShiftLeft = 185;
PhpParser.ShiftRight = 186;
PhpParser.DoubleColon = 187;
PhpParser.ObjectOperator = 188;
PhpParser.NamespaceSeparator = 189;
PhpParser.Ellipsis = 190;
PhpParser.Less = 191;
PhpParser.Greater = 192;
PhpParser.Ampersand = 193;
PhpParser.Pipe = 194;
PhpParser.Bang = 195;
PhpParser.Caret = 196;
PhpParser.Plus = 197;
PhpParser.Minus = 198;
PhpParser.Asterisk = 199;
PhpParser.Percent = 200;
PhpParser.Divide = 201;
PhpParser.Tilde = 202;
PhpParser.SuppressWarnings = 203;
PhpParser.Dollar = 204;
PhpParser.Dot = 205;
PhpParser.QuestionMark = 206;
PhpParser.OpenRoundBracket = 207;
PhpParser.CloseRoundBracket = 208;
PhpParser.OpenSquareBracket = 209;
PhpParser.CloseSquareBracket = 210;
PhpParser.OpenCurlyBracket = 211;
PhpParser.CloseCurlyBracket = 212;
PhpParser.Comma = 213;
PhpParser.Colon = 214;
PhpParser.SemiColon = 215;
PhpParser.Eq = 216;
PhpParser.Quote = 217;
PhpParser.BackQuote = 218;
PhpParser.VarName = 219;
PhpParser.Label = 220;
PhpParser.Octal = 221;
PhpParser.Decimal = 222;
PhpParser.Real = 223;
PhpParser.Hex = 224;
PhpParser.Binary = 225;
PhpParser.BackQuoteString = 226;
PhpParser.SingleQuoteString = 227;
PhpParser.DoubleQuote = 228;
PhpParser.StartNowDoc = 229;
PhpParser.StartHereDoc = 230;
PhpParser.ErrorPhp = 231;
PhpParser.CurlyDollar = 232;
PhpParser.UnicodeEscape = 233;
PhpParser.StringPart = 234;
PhpParser.Comment = 235;
PhpParser.PHPEndSingleLineComment = 236;
PhpParser.CommentEnd = 237;
PhpParser.HereDocText = 238;
PhpParser.XmlText2 = 239;
PhpParser.RULE_htmlDocument = 0;
PhpParser.RULE_inlineHtml = 1;
PhpParser.RULE_htmlElement = 2;
PhpParser.RULE_scriptText = 3;
PhpParser.RULE_phpBlock = 4;
PhpParser.RULE_importStatement = 5;
PhpParser.RULE_topStatement = 6;
PhpParser.RULE_useDeclaration = 7;
PhpParser.RULE_useDeclarationContentList = 8;
PhpParser.RULE_useDeclarationContent = 9;
PhpParser.RULE_namespaceDeclaration = 10;
PhpParser.RULE_namespaceStatement = 11;
PhpParser.RULE_functionDeclaration = 12;
PhpParser.RULE_classDeclaration = 13;
PhpParser.RULE_classEntryType = 14;
PhpParser.RULE_interfaceList = 15;
PhpParser.RULE_typeParameterListInBrackets = 16;
PhpParser.RULE_typeParameterList = 17;
PhpParser.RULE_typeParameterWithDefaultsList = 18;
PhpParser.RULE_typeParameterDecl = 19;
PhpParser.RULE_typeParameterWithDefaultDecl = 20;
PhpParser.RULE_genericDynamicArgs = 21;
PhpParser.RULE_attributes = 22;
PhpParser.RULE_attributeGroup = 23;
PhpParser.RULE_attribute = 24;
PhpParser.RULE_innerStatementList = 25;
PhpParser.RULE_innerStatement = 26;
PhpParser.RULE_statement = 27;
PhpParser.RULE_emptyStatement = 28;
PhpParser.RULE_blockStatement = 29;
PhpParser.RULE_ifStatement = 30;
PhpParser.RULE_elseIfStatement = 31;
PhpParser.RULE_elseIfColonStatement = 32;
PhpParser.RULE_elseStatement = 33;
PhpParser.RULE_elseColonStatement = 34;
PhpParser.RULE_whileStatement = 35;
PhpParser.RULE_doWhileStatement = 36;
PhpParser.RULE_forStatement = 37;
PhpParser.RULE_forInit = 38;
PhpParser.RULE_forUpdate = 39;
PhpParser.RULE_switchStatement = 40;
PhpParser.RULE_switchBlock = 41;
PhpParser.RULE_breakStatement = 42;
PhpParser.RULE_continueStatement = 43;
PhpParser.RULE_returnStatement = 44;
PhpParser.RULE_expressionStatement = 45;
PhpParser.RULE_unsetStatement = 46;
PhpParser.RULE_foreachStatement = 47;
PhpParser.RULE_tryCatchFinally = 48;
PhpParser.RULE_catchClause = 49;
PhpParser.RULE_finallyStatement = 50;
PhpParser.RULE_throwStatement = 51;
PhpParser.RULE_gotoStatement = 52;
PhpParser.RULE_declareStatement = 53;
PhpParser.RULE_inlineHtmlStatement = 54;
PhpParser.RULE_declareList = 55;
PhpParser.RULE_formalParameterList = 56;
PhpParser.RULE_formalParameter = 57;
PhpParser.RULE_typeHint = 58;
PhpParser.RULE_globalStatement = 59;
PhpParser.RULE_globalVar = 60;
PhpParser.RULE_echoStatement = 61;
PhpParser.RULE_staticVariableStatement = 62;
PhpParser.RULE_classStatement = 63;
PhpParser.RULE_traitAdaptations = 64;
PhpParser.RULE_traitAdaptationStatement = 65;
PhpParser.RULE_traitPrecedence = 66;
PhpParser.RULE_traitAlias = 67;
PhpParser.RULE_traitMethodReference = 68;
PhpParser.RULE_baseCtorCall = 69;
PhpParser.RULE_methodBody = 70;
PhpParser.RULE_propertyModifiers = 71;
PhpParser.RULE_memberModifiers = 72;
PhpParser.RULE_variableInitializer = 73;
PhpParser.RULE_identifierInitializer = 74;
PhpParser.RULE_globalConstantDeclaration = 75;
PhpParser.RULE_expressionList = 76;
PhpParser.RULE_parentheses = 77;
PhpParser.RULE_expression = 78;
PhpParser.RULE_assignable = 79;
PhpParser.RULE_arrayCreation = 80;
PhpParser.RULE_lambdaFunctionExpr = 81;
PhpParser.RULE_matchExpr = 82;
PhpParser.RULE_matchItem = 83;
PhpParser.RULE_newExpr = 84;
PhpParser.RULE_assignmentOperator = 85;
PhpParser.RULE_yieldExpression = 86;
PhpParser.RULE_arrayItemList = 87;
PhpParser.RULE_arrayItem = 88;
PhpParser.RULE_lambdaFunctionUseVars = 89;
PhpParser.RULE_lambdaFunctionUseVar = 90;
PhpParser.RULE_qualifiedStaticTypeRef = 91;
PhpParser.RULE_typeRef = 92;
PhpParser.RULE_anonymousClass = 93;
PhpParser.RULE_indirectTypeRef = 94;
PhpParser.RULE_qualifiedNamespaceName = 95;
PhpParser.RULE_namespaceNameList = 96;
PhpParser.RULE_namespaceNameTail = 97;
PhpParser.RULE_qualifiedNamespaceNameList = 98;
PhpParser.RULE_arguments = 99;
PhpParser.RULE_actualArgument = 100;
PhpParser.RULE_argumentName = 101;
PhpParser.RULE_constantInitializer = 102;
PhpParser.RULE_constant = 103;
PhpParser.RULE_literalConstant = 104;
PhpParser.RULE_numericConstant = 105;
PhpParser.RULE_classConstant = 106;
PhpParser.RULE_stringConstant = 107;
PhpParser.RULE_string = 108;
PhpParser.RULE_interpolatedStringPart = 109;
PhpParser.RULE_chainList = 110;
PhpParser.RULE_chain = 111;
PhpParser.RULE_chainOrigin = 112;
PhpParser.RULE_memberAccess = 113;
PhpParser.RULE_functionCall = 114;
PhpParser.RULE_functionCallName = 115;
PhpParser.RULE_actualArguments = 116;
PhpParser.RULE_chainBase = 117;
PhpParser.RULE_keyedFieldName = 118;
PhpParser.RULE_keyedSimpleFieldName = 119;
PhpParser.RULE_keyedVariable = 120;
PhpParser.RULE_squareCurlyExpression = 121;
PhpParser.RULE_assignmentList = 122;
PhpParser.RULE_assignmentListElement = 123;
PhpParser.RULE_modifier = 124;
PhpParser.RULE_identifier = 125;
PhpParser.RULE_memberModifier = 126;
PhpParser.RULE_magicConstant = 127;
PhpParser.RULE_magicMethod = 128;
PhpParser.RULE_primitiveType = 129;
PhpParser.RULE_castOperation = 130;
class HtmlDocumentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.inlineHtml = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InlineHtmlContext);
            }
            else {
                return this.getTypedRuleContext(InlineHtmlContext, i);
            }
        };
        this.phpBlock = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(PhpBlockContext);
            }
            else {
                return this.getTypedRuleContext(PhpBlockContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_htmlDocument;
    }
    EOF() {
        return this.getToken(PhpParser.EOF, 0);
    }
    ;
    Shebang() {
        return this.getToken(PhpParser.Shebang, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterHtmlDocument(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitHtmlDocument(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitHtmlDocument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InlineHtmlContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.htmlElement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(HtmlElementContext);
            }
            else {
                return this.getTypedRuleContext(HtmlElementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_inlineHtml;
    }
    scriptText() {
        return this.getTypedRuleContext(ScriptTextContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterInlineHtml(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitInlineHtml(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitInlineHtml(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class HtmlElementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.XmlText = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.XmlText);
            }
            else {
                return this.getToken(PhpParser.XmlText, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_htmlElement;
    }
    HtmlDtd() {
        return this.getToken(PhpParser.HtmlDtd, 0);
    }
    ;
    HtmlClose() {
        return this.getToken(PhpParser.HtmlClose, 0);
    }
    ;
    HtmlStyleOpen() {
        return this.getToken(PhpParser.HtmlStyleOpen, 0);
    }
    ;
    HtmlOpen() {
        return this.getToken(PhpParser.HtmlOpen, 0);
    }
    ;
    HtmlName() {
        return this.getToken(PhpParser.HtmlName, 0);
    }
    ;
    HtmlSlashClose() {
        return this.getToken(PhpParser.HtmlSlashClose, 0);
    }
    ;
    HtmlSlash() {
        return this.getToken(PhpParser.HtmlSlash, 0);
    }
    ;
    HtmlText() {
        return this.getToken(PhpParser.HtmlText, 0);
    }
    ;
    HtmlEquals() {
        return this.getToken(PhpParser.HtmlEquals, 0);
    }
    ;
    HtmlStartQuoteString() {
        return this.getToken(PhpParser.HtmlStartQuoteString, 0);
    }
    ;
    HtmlEndQuoteString() {
        return this.getToken(PhpParser.HtmlEndQuoteString, 0);
    }
    ;
    HtmlStartDoubleQuoteString() {
        return this.getToken(PhpParser.HtmlStartDoubleQuoteString, 0);
    }
    ;
    HtmlEndDoubleQuoteString() {
        return this.getToken(PhpParser.HtmlEndDoubleQuoteString, 0);
    }
    ;
    HtmlHex() {
        return this.getToken(PhpParser.HtmlHex, 0);
    }
    ;
    HtmlDecimal() {
        return this.getToken(PhpParser.HtmlDecimal, 0);
    }
    ;
    HtmlQuoteString() {
        return this.getToken(PhpParser.HtmlQuoteString, 0);
    }
    ;
    HtmlDoubleQuoteString() {
        return this.getToken(PhpParser.HtmlDoubleQuoteString, 0);
    }
    ;
    StyleBody() {
        return this.getToken(PhpParser.StyleBody, 0);
    }
    ;
    HtmlScriptOpen() {
        return this.getToken(PhpParser.HtmlScriptOpen, 0);
    }
    ;
    HtmlScriptClose() {
        return this.getToken(PhpParser.HtmlScriptClose, 0);
    }
    ;
    XmlStart() {
        return this.getToken(PhpParser.XmlStart, 0);
    }
    ;
    XmlClose() {
        return this.getToken(PhpParser.XmlClose, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterHtmlElement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitHtmlElement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitHtmlElement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ScriptTextContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ScriptText = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.ScriptText);
            }
            else {
                return this.getToken(PhpParser.ScriptText, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_scriptText;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterScriptText(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitScriptText(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitScriptText(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PhpBlockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.importStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ImportStatementContext);
            }
            else {
                return this.getTypedRuleContext(ImportStatementContext, i);
            }
        };
        this.topStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TopStatementContext);
            }
            else {
                return this.getTypedRuleContext(TopStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_phpBlock;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterPhpBlock(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitPhpBlock(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitPhpBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ImportStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_importStatement;
    }
    Import() {
        return this.getToken(PhpParser.Import, 0);
    }
    ;
    Namespace() {
        return this.getToken(PhpParser.Namespace, 0);
    }
    ;
    namespaceNameList() {
        return this.getTypedRuleContext(NamespaceNameListContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterImportStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitImportStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitImportStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TopStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_topStatement;
    }
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    useDeclaration() {
        return this.getTypedRuleContext(UseDeclarationContext, 0);
    }
    ;
    namespaceDeclaration() {
        return this.getTypedRuleContext(NamespaceDeclarationContext, 0);
    }
    ;
    functionDeclaration() {
        return this.getTypedRuleContext(FunctionDeclarationContext, 0);
    }
    ;
    classDeclaration() {
        return this.getTypedRuleContext(ClassDeclarationContext, 0);
    }
    ;
    globalConstantDeclaration() {
        return this.getTypedRuleContext(GlobalConstantDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTopStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTopStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTopStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UseDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_useDeclaration;
    }
    Use() {
        return this.getToken(PhpParser.Use, 0);
    }
    ;
    useDeclarationContentList() {
        return this.getTypedRuleContext(UseDeclarationContentListContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    Function() {
        return this.getToken(PhpParser.Function, 0);
    }
    ;
    Const() {
        return this.getToken(PhpParser.Const, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterUseDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitUseDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitUseDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UseDeclarationContentListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.useDeclarationContent = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(UseDeclarationContentContext);
            }
            else {
                return this.getTypedRuleContext(UseDeclarationContentContext, i);
            }
        };
        this.NamespaceSeparator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.NamespaceSeparator);
            }
            else {
                return this.getToken(PhpParser.NamespaceSeparator, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_useDeclarationContentList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterUseDeclarationContentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitUseDeclarationContentList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitUseDeclarationContentList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UseDeclarationContentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_useDeclarationContent;
    }
    namespaceNameList() {
        return this.getTypedRuleContext(NamespaceNameListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterUseDeclarationContent(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitUseDeclarationContent(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitUseDeclarationContent(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NamespaceDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.namespaceStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamespaceStatementContext);
            }
            else {
                return this.getTypedRuleContext(NamespaceStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_namespaceDeclaration;
    }
    Namespace() {
        return this.getToken(PhpParser.Namespace, 0);
    }
    ;
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    namespaceNameList() {
        return this.getTypedRuleContext(NamespaceNameListContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterNamespaceDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitNamespaceDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitNamespaceDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NamespaceStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_namespaceStatement;
    }
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    useDeclaration() {
        return this.getTypedRuleContext(UseDeclarationContext, 0);
    }
    ;
    functionDeclaration() {
        return this.getTypedRuleContext(FunctionDeclarationContext, 0);
    }
    ;
    classDeclaration() {
        return this.getTypedRuleContext(ClassDeclarationContext, 0);
    }
    ;
    globalConstantDeclaration() {
        return this.getTypedRuleContext(GlobalConstantDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterNamespaceStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitNamespaceStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitNamespaceStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_functionDeclaration;
    }
    Function() {
        return this.getToken(PhpParser.Function, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    formalParameterList() {
        return this.getTypedRuleContext(FormalParameterListContext, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    blockStatement() {
        return this.getTypedRuleContext(BlockStatementContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    Ampersand() {
        return this.getToken(PhpParser.Ampersand, 0);
    }
    ;
    typeParameterListInBrackets() {
        return this.getTypedRuleContext(TypeParameterListInBracketsContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    typeHint() {
        return this.getTypedRuleContext(TypeHintContext, 0);
    }
    ;
    QuestionMark() {
        return this.getToken(PhpParser.QuestionMark, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterFunctionDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitFunctionDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitFunctionDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.classStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ClassStatementContext);
            }
            else {
                return this.getTypedRuleContext(ClassStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_classDeclaration;
    }
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    classEntryType() {
        return this.getTypedRuleContext(ClassEntryTypeContext, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    Interface() {
        return this.getToken(PhpParser.Interface, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    Private() {
        return this.getToken(PhpParser.Private, 0);
    }
    ;
    modifier() {
        return this.getTypedRuleContext(ModifierContext, 0);
    }
    ;
    Partial() {
        return this.getToken(PhpParser.Partial, 0);
    }
    ;
    typeParameterListInBrackets() {
        return this.getTypedRuleContext(TypeParameterListInBracketsContext, 0);
    }
    ;
    Extends() {
        return this.getToken(PhpParser.Extends, 0);
    }
    ;
    qualifiedStaticTypeRef() {
        return this.getTypedRuleContext(QualifiedStaticTypeRefContext, 0);
    }
    ;
    Implements() {
        return this.getToken(PhpParser.Implements, 0);
    }
    ;
    interfaceList() {
        return this.getTypedRuleContext(InterfaceListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterClassDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitClassDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitClassDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassEntryTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_classEntryType;
    }
    Class() {
        return this.getToken(PhpParser.Class, 0);
    }
    ;
    Trait() {
        return this.getToken(PhpParser.Trait, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterClassEntryType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitClassEntryType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitClassEntryType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterfaceListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.qualifiedStaticTypeRef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(QualifiedStaticTypeRefContext);
            }
            else {
                return this.getTypedRuleContext(QualifiedStaticTypeRefContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_interfaceList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterInterfaceList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitInterfaceList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitInterfaceList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterListInBracketsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeParameterListInBrackets;
    }
    Lgeneric() {
        return this.getToken(PhpParser.Lgeneric, 0);
    }
    ;
    typeParameterList() {
        return this.getTypedRuleContext(TypeParameterListContext, 0);
    }
    ;
    Rgeneric() {
        return this.getToken(PhpParser.Rgeneric, 0);
    }
    ;
    typeParameterWithDefaultsList() {
        return this.getTypedRuleContext(TypeParameterWithDefaultsListContext, 0);
    }
    ;
    Comma() {
        return this.getToken(PhpParser.Comma, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTypeParameterListInBrackets(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTypeParameterListInBrackets(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTypeParameterListInBrackets(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeParameterDecl = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeParameterDeclContext);
            }
            else {
                return this.getTypedRuleContext(TypeParameterDeclContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeParameterList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTypeParameterList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTypeParameterList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTypeParameterList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterWithDefaultsListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeParameterWithDefaultDecl = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeParameterWithDefaultDeclContext);
            }
            else {
                return this.getTypedRuleContext(TypeParameterWithDefaultDeclContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeParameterWithDefaultsList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTypeParameterWithDefaultsList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTypeParameterWithDefaultsList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTypeParameterWithDefaultsList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterDeclContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeParameterDecl;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTypeParameterDecl(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTypeParameterDecl(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTypeParameterDecl(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeParameterWithDefaultDeclContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeParameterWithDefaultDecl;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    Eq() {
        return this.getToken(PhpParser.Eq, 0);
    }
    ;
    qualifiedStaticTypeRef() {
        return this.getTypedRuleContext(QualifiedStaticTypeRefContext, 0);
    }
    ;
    primitiveType() {
        return this.getTypedRuleContext(PrimitiveTypeContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTypeParameterWithDefaultDecl(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTypeParameterWithDefaultDecl(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTypeParameterWithDefaultDecl(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GenericDynamicArgsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeRef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeRefContext);
            }
            else {
                return this.getTypedRuleContext(TypeRefContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_genericDynamicArgs;
    }
    Lgeneric() {
        return this.getToken(PhpParser.Lgeneric, 0);
    }
    ;
    Rgeneric() {
        return this.getToken(PhpParser.Rgeneric, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterGenericDynamicArgs(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitGenericDynamicArgs(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitGenericDynamicArgs(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.attributeGroup = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AttributeGroupContext);
            }
            else {
                return this.getTypedRuleContext(AttributeGroupContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_attributes;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterAttributes(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitAttributes(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitAttributes(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributeGroupContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.attribute = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AttributeContext);
            }
            else {
                return this.getTypedRuleContext(AttributeContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_attributeGroup;
    }
    AttributeStart() {
        return this.getToken(PhpParser.AttributeStart, 0);
    }
    ;
    CloseSquareBracket() {
        return this.getToken(PhpParser.CloseSquareBracket, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterAttributeGroup(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitAttributeGroup(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitAttributeGroup(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AttributeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_attribute;
    }
    qualifiedNamespaceName() {
        return this.getTypedRuleContext(QualifiedNamespaceNameContext, 0);
    }
    ;
    arguments() {
        return this.getTypedRuleContext(ArgumentsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterAttribute(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitAttribute(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitAttribute(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InnerStatementListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.innerStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InnerStatementContext);
            }
            else {
                return this.getTypedRuleContext(InnerStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_innerStatementList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterInnerStatementList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitInnerStatementList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitInnerStatementList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InnerStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_innerStatement;
    }
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    functionDeclaration() {
        return this.getTypedRuleContext(FunctionDeclarationContext, 0);
    }
    ;
    classDeclaration() {
        return this.getTypedRuleContext(ClassDeclarationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterInnerStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitInnerStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitInnerStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_statement;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    blockStatement() {
        return this.getTypedRuleContext(BlockStatementContext, 0);
    }
    ;
    ifStatement() {
        return this.getTypedRuleContext(IfStatementContext, 0);
    }
    ;
    whileStatement() {
        return this.getTypedRuleContext(WhileStatementContext, 0);
    }
    ;
    doWhileStatement() {
        return this.getTypedRuleContext(DoWhileStatementContext, 0);
    }
    ;
    forStatement() {
        return this.getTypedRuleContext(ForStatementContext, 0);
    }
    ;
    switchStatement() {
        return this.getTypedRuleContext(SwitchStatementContext, 0);
    }
    ;
    breakStatement() {
        return this.getTypedRuleContext(BreakStatementContext, 0);
    }
    ;
    continueStatement() {
        return this.getTypedRuleContext(ContinueStatementContext, 0);
    }
    ;
    returnStatement() {
        return this.getTypedRuleContext(ReturnStatementContext, 0);
    }
    ;
    yieldExpression() {
        return this.getTypedRuleContext(YieldExpressionContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    globalStatement() {
        return this.getTypedRuleContext(GlobalStatementContext, 0);
    }
    ;
    staticVariableStatement() {
        return this.getTypedRuleContext(StaticVariableStatementContext, 0);
    }
    ;
    echoStatement() {
        return this.getTypedRuleContext(EchoStatementContext, 0);
    }
    ;
    expressionStatement() {
        return this.getTypedRuleContext(ExpressionStatementContext, 0);
    }
    ;
    unsetStatement() {
        return this.getTypedRuleContext(UnsetStatementContext, 0);
    }
    ;
    foreachStatement() {
        return this.getTypedRuleContext(ForeachStatementContext, 0);
    }
    ;
    tryCatchFinally() {
        return this.getTypedRuleContext(TryCatchFinallyContext, 0);
    }
    ;
    throwStatement() {
        return this.getTypedRuleContext(ThrowStatementContext, 0);
    }
    ;
    gotoStatement() {
        return this.getTypedRuleContext(GotoStatementContext, 0);
    }
    ;
    declareStatement() {
        return this.getTypedRuleContext(DeclareStatementContext, 0);
    }
    ;
    emptyStatement() {
        return this.getTypedRuleContext(EmptyStatementContext, 0);
    }
    ;
    inlineHtmlStatement() {
        return this.getTypedRuleContext(InlineHtmlStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EmptyStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_emptyStatement;
    }
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterEmptyStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitEmptyStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitEmptyStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BlockStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_blockStatement;
    }
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    innerStatementList() {
        return this.getTypedRuleContext(InnerStatementListContext, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterBlockStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitBlockStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitBlockStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IfStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.elseIfStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElseIfStatementContext);
            }
            else {
                return this.getTypedRuleContext(ElseIfStatementContext, i);
            }
        };
        this.elseIfColonStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ElseIfColonStatementContext);
            }
            else {
                return this.getTypedRuleContext(ElseIfColonStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_ifStatement;
    }
    If() {
        return this.getToken(PhpParser.If, 0);
    }
    ;
    parentheses() {
        return this.getTypedRuleContext(ParenthesesContext, 0);
    }
    ;
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    elseStatement() {
        return this.getTypedRuleContext(ElseStatementContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    innerStatementList() {
        return this.getTypedRuleContext(InnerStatementListContext, 0);
    }
    ;
    EndIf() {
        return this.getToken(PhpParser.EndIf, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    elseColonStatement() {
        return this.getTypedRuleContext(ElseColonStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterIfStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitIfStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitIfStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ElseIfStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_elseIfStatement;
    }
    ElseIf() {
        return this.getToken(PhpParser.ElseIf, 0);
    }
    ;
    parentheses() {
        return this.getTypedRuleContext(ParenthesesContext, 0);
    }
    ;
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterElseIfStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitElseIfStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitElseIfStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ElseIfColonStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_elseIfColonStatement;
    }
    ElseIf() {
        return this.getToken(PhpParser.ElseIf, 0);
    }
    ;
    parentheses() {
        return this.getTypedRuleContext(ParenthesesContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    innerStatementList() {
        return this.getTypedRuleContext(InnerStatementListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterElseIfColonStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitElseIfColonStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitElseIfColonStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ElseStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_elseStatement;
    }
    Else() {
        return this.getToken(PhpParser.Else, 0);
    }
    ;
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterElseStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitElseStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitElseStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ElseColonStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_elseColonStatement;
    }
    Else() {
        return this.getToken(PhpParser.Else, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    innerStatementList() {
        return this.getTypedRuleContext(InnerStatementListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterElseColonStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitElseColonStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitElseColonStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class WhileStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_whileStatement;
    }
    While() {
        return this.getToken(PhpParser.While, 0);
    }
    ;
    parentheses() {
        return this.getTypedRuleContext(ParenthesesContext, 0);
    }
    ;
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    innerStatementList() {
        return this.getTypedRuleContext(InnerStatementListContext, 0);
    }
    ;
    EndWhile() {
        return this.getToken(PhpParser.EndWhile, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterWhileStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitWhileStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitWhileStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DoWhileStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_doWhileStatement;
    }
    Do() {
        return this.getToken(PhpParser.Do, 0);
    }
    ;
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    While() {
        return this.getToken(PhpParser.While, 0);
    }
    ;
    parentheses() {
        return this.getTypedRuleContext(ParenthesesContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterDoWhileStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitDoWhileStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitDoWhileStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ForStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SemiColon = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.SemiColon);
            }
            else {
                return this.getToken(PhpParser.SemiColon, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_forStatement;
    }
    For() {
        return this.getToken(PhpParser.For, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    innerStatementList() {
        return this.getTypedRuleContext(InnerStatementListContext, 0);
    }
    ;
    EndFor() {
        return this.getToken(PhpParser.EndFor, 0);
    }
    ;
    forInit() {
        return this.getTypedRuleContext(ForInitContext, 0);
    }
    ;
    expressionList() {
        return this.getTypedRuleContext(ExpressionListContext, 0);
    }
    ;
    forUpdate() {
        return this.getTypedRuleContext(ForUpdateContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterForStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitForStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitForStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ForInitContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_forInit;
    }
    expressionList() {
        return this.getTypedRuleContext(ExpressionListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterForInit(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitForInit(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitForInit(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ForUpdateContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_forUpdate;
    }
    expressionList() {
        return this.getTypedRuleContext(ExpressionListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterForUpdate(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitForUpdate(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitForUpdate(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SwitchStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.SemiColon = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.SemiColon);
            }
            else {
                return this.getToken(PhpParser.SemiColon, i);
            }
        };
        this.switchBlock = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SwitchBlockContext);
            }
            else {
                return this.getTypedRuleContext(SwitchBlockContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_switchStatement;
    }
    Switch() {
        return this.getToken(PhpParser.Switch, 0);
    }
    ;
    parentheses() {
        return this.getTypedRuleContext(ParenthesesContext, 0);
    }
    ;
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    EndSwitch() {
        return this.getToken(PhpParser.EndSwitch, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterSwitchStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitSwitchStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitSwitchStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SwitchBlockContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.Colon = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Colon);
            }
            else {
                return this.getToken(PhpParser.Colon, i);
            }
        };
        this.SemiColon = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.SemiColon);
            }
            else {
                return this.getToken(PhpParser.SemiColon, i);
            }
        };
        this.Case = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Case);
            }
            else {
                return this.getToken(PhpParser.Case, i);
            }
        };
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.Default = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Default);
            }
            else {
                return this.getToken(PhpParser.Default, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_switchBlock;
    }
    innerStatementList() {
        return this.getTypedRuleContext(InnerStatementListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterSwitchBlock(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitSwitchBlock(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitSwitchBlock(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BreakStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_breakStatement;
    }
    Break() {
        return this.getToken(PhpParser.Break, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterBreakStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitBreakStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitBreakStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ContinueStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_continueStatement;
    }
    Continue() {
        return this.getToken(PhpParser.Continue, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterContinueStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitContinueStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitContinueStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ReturnStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_returnStatement;
    }
    Return() {
        return this.getToken(PhpParser.Return, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterReturnStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitReturnStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitReturnStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExpressionStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_expressionStatement;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterExpressionStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitExpressionStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitExpressionStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class UnsetStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_unsetStatement;
    }
    Unset() {
        return this.getToken(PhpParser.Unset, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    chainList() {
        return this.getTypedRuleContext(ChainListContext, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterUnsetStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitUnsetStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitUnsetStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ForeachStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.OpenRoundBracket = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.OpenRoundBracket);
            }
            else {
                return this.getToken(PhpParser.OpenRoundBracket, i);
            }
        };
        this.chain = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ChainContext);
            }
            else {
                return this.getTypedRuleContext(ChainContext, i);
            }
        };
        this.CloseRoundBracket = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.CloseRoundBracket);
            }
            else {
                return this.getToken(PhpParser.CloseRoundBracket, i);
            }
        };
        this.Ampersand = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Ampersand);
            }
            else {
                return this.getToken(PhpParser.Ampersand, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_foreachStatement;
    }
    Foreach() {
        return this.getToken(PhpParser.Foreach, 0);
    }
    ;
    As() {
        return this.getToken(PhpParser.As, 0);
    }
    ;
    assignable() {
        return this.getTypedRuleContext(AssignableContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    List() {
        return this.getToken(PhpParser.List, 0);
    }
    ;
    assignmentList() {
        return this.getTypedRuleContext(AssignmentListContext, 0);
    }
    ;
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    innerStatementList() {
        return this.getTypedRuleContext(InnerStatementListContext, 0);
    }
    ;
    EndForeach() {
        return this.getToken(PhpParser.EndForeach, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    DoubleArrow() {
        return this.getToken(PhpParser.DoubleArrow, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterForeachStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitForeachStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitForeachStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TryCatchFinallyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.catchClause = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(CatchClauseContext);
            }
            else {
                return this.getTypedRuleContext(CatchClauseContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_tryCatchFinally;
    }
    Try() {
        return this.getToken(PhpParser.Try, 0);
    }
    ;
    blockStatement() {
        return this.getTypedRuleContext(BlockStatementContext, 0);
    }
    ;
    finallyStatement() {
        return this.getTypedRuleContext(FinallyStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTryCatchFinally(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTryCatchFinally(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTryCatchFinally(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CatchClauseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.qualifiedStaticTypeRef = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(QualifiedStaticTypeRefContext);
            }
            else {
                return this.getTypedRuleContext(QualifiedStaticTypeRefContext, i);
            }
        };
        this.Pipe = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Pipe);
            }
            else {
                return this.getToken(PhpParser.Pipe, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_catchClause;
    }
    Catch() {
        return this.getToken(PhpParser.Catch, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    VarName() {
        return this.getToken(PhpParser.VarName, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    blockStatement() {
        return this.getTypedRuleContext(BlockStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterCatchClause(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitCatchClause(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitCatchClause(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FinallyStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_finallyStatement;
    }
    Finally() {
        return this.getToken(PhpParser.Finally, 0);
    }
    ;
    blockStatement() {
        return this.getTypedRuleContext(BlockStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterFinallyStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitFinallyStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitFinallyStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ThrowStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_throwStatement;
    }
    Throw() {
        return this.getToken(PhpParser.Throw, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterThrowStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitThrowStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitThrowStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GotoStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_gotoStatement;
    }
    Goto() {
        return this.getToken(PhpParser.Goto, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterGotoStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitGotoStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitGotoStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DeclareStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_declareStatement;
    }
    Declare() {
        return this.getToken(PhpParser.Declare, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    declareList() {
        return this.getTypedRuleContext(DeclareListContext, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    statement() {
        return this.getTypedRuleContext(StatementContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    innerStatementList() {
        return this.getTypedRuleContext(InnerStatementListContext, 0);
    }
    ;
    EndDeclare() {
        return this.getToken(PhpParser.EndDeclare, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterDeclareStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitDeclareStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitDeclareStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InlineHtmlStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.inlineHtml = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InlineHtmlContext);
            }
            else {
                return this.getTypedRuleContext(InlineHtmlContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_inlineHtmlStatement;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterInlineHtmlStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitInlineHtmlStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitInlineHtmlStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class DeclareListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.identifierInitializer = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierInitializerContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierInitializerContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_declareList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterDeclareList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitDeclareList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitDeclareList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FormalParameterListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.formalParameter = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(FormalParameterContext);
            }
            else {
                return this.getTypedRuleContext(FormalParameterContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_formalParameterList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterFormalParameterList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitFormalParameterList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitFormalParameterList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FormalParameterContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_formalParameter;
    }
    variableInitializer() {
        return this.getTypedRuleContext(VariableInitializerContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    memberModifier() {
        return this.getTypedRuleContext(MemberModifierContext, 0);
    }
    ;
    QuestionMark() {
        return this.getToken(PhpParser.QuestionMark, 0);
    }
    ;
    typeHint() {
        return this.getTypedRuleContext(TypeHintContext, 0);
    }
    ;
    Ampersand() {
        return this.getToken(PhpParser.Ampersand, 0);
    }
    ;
    Ellipsis() {
        return this.getToken(PhpParser.Ellipsis, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterFormalParameter(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitFormalParameter(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitFormalParameter(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeHintContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.typeHint = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TypeHintContext);
            }
            else {
                return this.getTypedRuleContext(TypeHintContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeHint;
    }
    qualifiedStaticTypeRef() {
        return this.getTypedRuleContext(QualifiedStaticTypeRefContext, 0);
    }
    ;
    Callable() {
        return this.getToken(PhpParser.Callable, 0);
    }
    ;
    primitiveType() {
        return this.getTypedRuleContext(PrimitiveTypeContext, 0);
    }
    ;
    Pipe() {
        return this.getToken(PhpParser.Pipe, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTypeHint(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTypeHint(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTypeHint(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GlobalStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.globalVar = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(GlobalVarContext);
            }
            else {
                return this.getTypedRuleContext(GlobalVarContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_globalStatement;
    }
    Global() {
        return this.getToken(PhpParser.Global, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterGlobalStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitGlobalStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitGlobalStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GlobalVarContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_globalVar;
    }
    VarName() {
        return this.getToken(PhpParser.VarName, 0);
    }
    ;
    Dollar() {
        return this.getToken(PhpParser.Dollar, 0);
    }
    ;
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterGlobalVar(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitGlobalVar(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitGlobalVar(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class EchoStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_echoStatement;
    }
    Echo() {
        return this.getToken(PhpParser.Echo, 0);
    }
    ;
    expressionList() {
        return this.getTypedRuleContext(ExpressionListContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterEchoStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitEchoStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitEchoStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StaticVariableStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.variableInitializer = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariableInitializerContext);
            }
            else {
                return this.getTypedRuleContext(VariableInitializerContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_staticVariableStatement;
    }
    Static() {
        return this.getToken(PhpParser.Static, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterStaticVariableStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitStaticVariableStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitStaticVariableStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.variableInitializer = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(VariableInitializerContext);
            }
            else {
                return this.getTypedRuleContext(VariableInitializerContext, i);
            }
        };
        this.identifierInitializer = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierInitializerContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierInitializerContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_classStatement;
    }
    propertyModifiers() {
        return this.getTypedRuleContext(PropertyModifiersContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    Const() {
        return this.getToken(PhpParser.Const, 0);
    }
    ;
    Function() {
        return this.getToken(PhpParser.Function, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    formalParameterList() {
        return this.getTypedRuleContext(FormalParameterListContext, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    methodBody() {
        return this.getTypedRuleContext(MethodBodyContext, 0);
    }
    ;
    typeHint() {
        return this.getTypedRuleContext(TypeHintContext, 0);
    }
    ;
    memberModifiers() {
        return this.getTypedRuleContext(MemberModifiersContext, 0);
    }
    ;
    Ampersand() {
        return this.getToken(PhpParser.Ampersand, 0);
    }
    ;
    typeParameterListInBrackets() {
        return this.getTypedRuleContext(TypeParameterListInBracketsContext, 0);
    }
    ;
    baseCtorCall() {
        return this.getTypedRuleContext(BaseCtorCallContext, 0);
    }
    ;
    Use() {
        return this.getToken(PhpParser.Use, 0);
    }
    ;
    qualifiedNamespaceNameList() {
        return this.getTypedRuleContext(QualifiedNamespaceNameListContext, 0);
    }
    ;
    traitAdaptations() {
        return this.getTypedRuleContext(TraitAdaptationsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterClassStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitClassStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitClassStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TraitAdaptationsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.traitAdaptationStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(TraitAdaptationStatementContext);
            }
            else {
                return this.getTypedRuleContext(TraitAdaptationStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_traitAdaptations;
    }
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTraitAdaptations(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTraitAdaptations(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTraitAdaptations(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TraitAdaptationStatementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_traitAdaptationStatement;
    }
    traitPrecedence() {
        return this.getTypedRuleContext(TraitPrecedenceContext, 0);
    }
    ;
    traitAlias() {
        return this.getTypedRuleContext(TraitAliasContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTraitAdaptationStatement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTraitAdaptationStatement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTraitAdaptationStatement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TraitPrecedenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_traitPrecedence;
    }
    qualifiedNamespaceName() {
        return this.getTypedRuleContext(QualifiedNamespaceNameContext, 0);
    }
    ;
    DoubleColon() {
        return this.getToken(PhpParser.DoubleColon, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    InsteadOf() {
        return this.getToken(PhpParser.InsteadOf, 0);
    }
    ;
    qualifiedNamespaceNameList() {
        return this.getTypedRuleContext(QualifiedNamespaceNameListContext, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTraitPrecedence(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTraitPrecedence(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTraitPrecedence(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TraitAliasContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_traitAlias;
    }
    traitMethodReference() {
        return this.getTypedRuleContext(TraitMethodReferenceContext, 0);
    }
    ;
    As() {
        return this.getToken(PhpParser.As, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    memberModifier() {
        return this.getTypedRuleContext(MemberModifierContext, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTraitAlias(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTraitAlias(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTraitAlias(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TraitMethodReferenceContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_traitMethodReference;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    qualifiedNamespaceName() {
        return this.getTypedRuleContext(QualifiedNamespaceNameContext, 0);
    }
    ;
    DoubleColon() {
        return this.getToken(PhpParser.DoubleColon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTraitMethodReference(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTraitMethodReference(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTraitMethodReference(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class BaseCtorCallContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_baseCtorCall;
    }
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    arguments() {
        return this.getTypedRuleContext(ArgumentsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterBaseCtorCall(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitBaseCtorCall(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitBaseCtorCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MethodBodyContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_methodBody;
    }
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    blockStatement() {
        return this.getTypedRuleContext(BlockStatementContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterMethodBody(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitMethodBody(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitMethodBody(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PropertyModifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_propertyModifiers;
    }
    memberModifiers() {
        return this.getTypedRuleContext(MemberModifiersContext, 0);
    }
    ;
    Var() {
        return this.getToken(PhpParser.Var, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterPropertyModifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitPropertyModifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitPropertyModifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MemberModifiersContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.memberModifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(MemberModifierContext);
            }
            else {
                return this.getTypedRuleContext(MemberModifierContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_memberModifiers;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterMemberModifiers(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitMemberModifiers(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitMemberModifiers(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class VariableInitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_variableInitializer;
    }
    VarName() {
        return this.getToken(PhpParser.VarName, 0);
    }
    ;
    Eq() {
        return this.getToken(PhpParser.Eq, 0);
    }
    ;
    constantInitializer() {
        return this.getTypedRuleContext(ConstantInitializerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterVariableInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitVariableInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitVariableInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierInitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_identifierInitializer;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    Eq() {
        return this.getToken(PhpParser.Eq, 0);
    }
    ;
    constantInitializer() {
        return this.getTypedRuleContext(ConstantInitializerContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterIdentifierInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitIdentifierInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitIdentifierInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class GlobalConstantDeclarationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.identifierInitializer = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierInitializerContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierInitializerContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_globalConstantDeclaration;
    }
    Const() {
        return this.getToken(PhpParser.Const, 0);
    }
    ;
    SemiColon() {
        return this.getToken(PhpParser.SemiColon, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterGlobalConstantDeclaration(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitGlobalConstantDeclaration(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitGlobalConstantDeclaration(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExpressionListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_expressionList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterExpressionList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitExpressionList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitExpressionList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ParenthesesContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_parentheses;
    }
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    yieldExpression() {
        return this.getTypedRuleContext(YieldExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterParentheses(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitParentheses(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitParentheses(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_expression;
    }
    copyFrom(ctx) {
        super.copyFrom(ctx);
    }
}
class ChainExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterChainExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitChainExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitChainExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.ChainExpressionContext = ChainExpressionContext;
class SpecialWordExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    Yield() {
        return this.getToken(PhpParser.Yield, 0);
    }
    ;
    List() {
        return this.getToken(PhpParser.List, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    assignmentList() {
        return this.getTypedRuleContext(AssignmentListContext, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    Eq() {
        return this.getToken(PhpParser.Eq, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    IsSet() {
        return this.getToken(PhpParser.IsSet, 0);
    }
    ;
    chainList() {
        return this.getTypedRuleContext(ChainListContext, 0);
    }
    ;
    Empty() {
        return this.getToken(PhpParser.Empty, 0);
    }
    ;
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    Eval() {
        return this.getToken(PhpParser.Eval, 0);
    }
    ;
    Exit() {
        return this.getToken(PhpParser.Exit, 0);
    }
    ;
    parentheses() {
        return this.getTypedRuleContext(ParenthesesContext, 0);
    }
    ;
    Include() {
        return this.getToken(PhpParser.Include, 0);
    }
    ;
    IncludeOnce() {
        return this.getToken(PhpParser.IncludeOnce, 0);
    }
    ;
    Require() {
        return this.getToken(PhpParser.Require, 0);
    }
    ;
    RequireOnce() {
        return this.getToken(PhpParser.RequireOnce, 0);
    }
    ;
    Throw() {
        return this.getToken(PhpParser.Throw, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterSpecialWordExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitSpecialWordExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitSpecialWordExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.SpecialWordExpressionContext = SpecialWordExpressionContext;
class ArrayCreationExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    arrayCreation() {
        return this.getTypedRuleContext(ArrayCreationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterArrayCreationExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitArrayCreationExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitArrayCreationExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.ArrayCreationExpressionContext = ArrayCreationExpressionContext;
class BackQuoteStringExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    BackQuoteString() {
        return this.getToken(PhpParser.BackQuoteString, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterBackQuoteStringExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitBackQuoteStringExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitBackQuoteStringExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.BackQuoteStringExpressionContext = BackQuoteStringExpressionContext;
class MatchExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    matchExpr() {
        return this.getTypedRuleContext(MatchExprContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterMatchExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitMatchExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitMatchExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.MatchExpressionContext = MatchExpressionContext;
class LogicalExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.op = null;
        super.copyFrom(ctx);
    }
    LogicalAnd() {
        return this.getToken(PhpParser.LogicalAnd, 0);
    }
    ;
    LogicalXor() {
        return this.getToken(PhpParser.LogicalXor, 0);
    }
    ;
    LogicalOr() {
        return this.getToken(PhpParser.LogicalOr, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterLogicalExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitLogicalExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitLogicalExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.LogicalExpressionContext = LogicalExpressionContext;
class PrintExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    Print() {
        return this.getToken(PhpParser.Print, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterPrintExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitPrintExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitPrintExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.PrintExpressionContext = PrintExpressionContext;
class AssignmentExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    assignable() {
        return this.getTypedRuleContext(AssignableContext, 0);
    }
    ;
    assignmentOperator() {
        return this.getTypedRuleContext(AssignmentOperatorContext, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    Eq() {
        return this.getToken(PhpParser.Eq, 0);
    }
    ;
    Ampersand() {
        return this.getToken(PhpParser.Ampersand, 0);
    }
    ;
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    newExpr() {
        return this.getTypedRuleContext(NewExprContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterAssignmentExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitAssignmentExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitAssignmentExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.AssignmentExpressionContext = AssignmentExpressionContext;
class PostfixIncDecExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    Inc() {
        return this.getToken(PhpParser.Inc, 0);
    }
    ;
    Dec() {
        return this.getToken(PhpParser.Dec, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterPostfixIncDecExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitPostfixIncDecExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitPostfixIncDecExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.PostfixIncDecExpressionContext = PostfixIncDecExpressionContext;
class CloneExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    Clone() {
        return this.getToken(PhpParser.Clone, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterCloneExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitCloneExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitCloneExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.CloneExpressionContext = CloneExpressionContext;
class UnaryOperatorExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    Tilde() {
        return this.getToken(PhpParser.Tilde, 0);
    }
    ;
    SuppressWarnings() {
        return this.getToken(PhpParser.SuppressWarnings, 0);
    }
    ;
    Bang() {
        return this.getToken(PhpParser.Bang, 0);
    }
    ;
    Plus() {
        return this.getToken(PhpParser.Plus, 0);
    }
    ;
    Minus() {
        return this.getToken(PhpParser.Minus, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterUnaryOperatorExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitUnaryOperatorExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitUnaryOperatorExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.UnaryOperatorExpressionContext = UnaryOperatorExpressionContext;
class NewExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    newExpr() {
        return this.getTypedRuleContext(NewExprContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterNewExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitNewExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitNewExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.NewExpressionContext = NewExpressionContext;
class ParenthesisExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    parentheses() {
        return this.getTypedRuleContext(ParenthesesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterParenthesisExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitParenthesisExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitParenthesisExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.ParenthesisExpressionContext = ParenthesisExpressionContext;
class SpaceshipExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.op = null;
        super.copyFrom(ctx);
    }
    Spaceship() {
        return this.getToken(PhpParser.Spaceship, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterSpaceshipExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitSpaceshipExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitSpaceshipExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.SpaceshipExpressionContext = SpaceshipExpressionContext;
class ConditionalExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.op = null;
        super.copyFrom(ctx);
    }
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    QuestionMark() {
        return this.getToken(PhpParser.QuestionMark, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterConditionalExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitConditionalExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitConditionalExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.ConditionalExpressionContext = ConditionalExpressionContext;
class NullCoalescingExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.op = null;
        super.copyFrom(ctx);
    }
    NullCoalescing() {
        return this.getToken(PhpParser.NullCoalescing, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterNullCoalescingExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitNullCoalescingExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitNullCoalescingExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.NullCoalescingExpressionContext = NullCoalescingExpressionContext;
class ArithmeticExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.op = null;
        super.copyFrom(ctx);
    }
    Pow() {
        return this.getToken(PhpParser.Pow, 0);
    }
    ;
    Asterisk() {
        return this.getToken(PhpParser.Asterisk, 0);
    }
    ;
    Divide() {
        return this.getToken(PhpParser.Divide, 0);
    }
    ;
    Percent() {
        return this.getToken(PhpParser.Percent, 0);
    }
    ;
    Plus() {
        return this.getToken(PhpParser.Plus, 0);
    }
    ;
    Minus() {
        return this.getToken(PhpParser.Minus, 0);
    }
    ;
    Dot() {
        return this.getToken(PhpParser.Dot, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterArithmeticExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitArithmeticExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitArithmeticExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.ArithmeticExpressionContext = ArithmeticExpressionContext;
class IndexerExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    stringConstant() {
        return this.getTypedRuleContext(StringConstantContext, 0);
    }
    ;
    OpenSquareBracket() {
        return this.getToken(PhpParser.OpenSquareBracket, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    CloseSquareBracket() {
        return this.getToken(PhpParser.CloseSquareBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterIndexerExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitIndexerExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitIndexerExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.IndexerExpressionContext = IndexerExpressionContext;
class ScalarExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    constant() {
        return this.getTypedRuleContext(ConstantContext, 0);
    }
    ;
    string() {
        return this.getTypedRuleContext(StringContext, 0);
    }
    ;
    Label() {
        return this.getToken(PhpParser.Label, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterScalarExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitScalarExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitScalarExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.ScalarExpressionContext = ScalarExpressionContext;
class PrefixIncDecExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    Inc() {
        return this.getToken(PhpParser.Inc, 0);
    }
    ;
    Dec() {
        return this.getToken(PhpParser.Dec, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterPrefixIncDecExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitPrefixIncDecExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitPrefixIncDecExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.PrefixIncDecExpressionContext = PrefixIncDecExpressionContext;
class ComparisonExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.op = null;
        super.copyFrom(ctx);
    }
    ShiftLeft() {
        return this.getToken(PhpParser.ShiftLeft, 0);
    }
    ;
    ShiftRight() {
        return this.getToken(PhpParser.ShiftRight, 0);
    }
    ;
    Less() {
        return this.getToken(PhpParser.Less, 0);
    }
    ;
    IsSmallerOrEqual() {
        return this.getToken(PhpParser.IsSmallerOrEqual, 0);
    }
    ;
    Greater() {
        return this.getToken(PhpParser.Greater, 0);
    }
    ;
    IsGreaterOrEqual() {
        return this.getToken(PhpParser.IsGreaterOrEqual, 0);
    }
    ;
    IsIdentical() {
        return this.getToken(PhpParser.IsIdentical, 0);
    }
    ;
    IsNoidentical() {
        return this.getToken(PhpParser.IsNoidentical, 0);
    }
    ;
    IsEqual() {
        return this.getToken(PhpParser.IsEqual, 0);
    }
    ;
    IsNotEq() {
        return this.getToken(PhpParser.IsNotEq, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterComparisonExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitComparisonExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitComparisonExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.ComparisonExpressionContext = ComparisonExpressionContext;
class CastExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    castOperation() {
        return this.getTypedRuleContext(CastOperationContext, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterCastExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitCastExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitCastExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.CastExpressionContext = CastExpressionContext;
class InstanceOfExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    InstanceOf() {
        return this.getToken(PhpParser.InstanceOf, 0);
    }
    ;
    typeRef() {
        return this.getTypedRuleContext(TypeRefContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterInstanceOfExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitInstanceOfExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitInstanceOfExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.InstanceOfExpressionContext = InstanceOfExpressionContext;
class LambdaFunctionExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }
    lambdaFunctionExpr() {
        return this.getTypedRuleContext(LambdaFunctionExprContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterLambdaFunctionExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitLambdaFunctionExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitLambdaFunctionExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.LambdaFunctionExpressionContext = LambdaFunctionExpressionContext;
class BitwiseExpressionContext extends ExpressionContext {
    constructor(parser, ctx) {
        super(parser);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.op = null;
        super.copyFrom(ctx);
    }
    Ampersand() {
        return this.getToken(PhpParser.Ampersand, 0);
    }
    ;
    Caret() {
        return this.getToken(PhpParser.Caret, 0);
    }
    ;
    Pipe() {
        return this.getToken(PhpParser.Pipe, 0);
    }
    ;
    BooleanAnd() {
        return this.getToken(PhpParser.BooleanAnd, 0);
    }
    ;
    BooleanOr() {
        return this.getToken(PhpParser.BooleanOr, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterBitwiseExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitBitwiseExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitBitwiseExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.BitwiseExpressionContext = BitwiseExpressionContext;
class AssignableContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_assignable;
    }
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    arrayCreation() {
        return this.getTypedRuleContext(ArrayCreationContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterAssignable(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitAssignable(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitAssignable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayCreationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.OpenSquareBracket = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.OpenSquareBracket);
            }
            else {
                return this.getToken(PhpParser.OpenSquareBracket, i);
            }
        };
        this.CloseSquareBracket = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.CloseSquareBracket);
            }
            else {
                return this.getToken(PhpParser.CloseSquareBracket, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_arrayCreation;
    }
    Array() {
        return this.getToken(PhpParser.Array, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    arrayItemList() {
        return this.getTypedRuleContext(ArrayItemListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterArrayCreation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitArrayCreation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitArrayCreation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LambdaFunctionExprContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_lambdaFunctionExpr;
    }
    Function() {
        return this.getToken(PhpParser.Function, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    formalParameterList() {
        return this.getTypedRuleContext(FormalParameterListContext, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    blockStatement() {
        return this.getTypedRuleContext(BlockStatementContext, 0);
    }
    ;
    Static() {
        return this.getToken(PhpParser.Static, 0);
    }
    ;
    Ampersand() {
        return this.getToken(PhpParser.Ampersand, 0);
    }
    ;
    lambdaFunctionUseVars() {
        return this.getTypedRuleContext(LambdaFunctionUseVarsContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    typeHint() {
        return this.getTypedRuleContext(TypeHintContext, 0);
    }
    ;
    LambdaFn() {
        return this.getToken(PhpParser.LambdaFn, 0);
    }
    ;
    DoubleArrow() {
        return this.getToken(PhpParser.DoubleArrow, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterLambdaFunctionExpr(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitLambdaFunctionExpr(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitLambdaFunctionExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MatchExprContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.matchItem = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(MatchItemContext);
            }
            else {
                return this.getTypedRuleContext(MatchItemContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_matchExpr;
    }
    Match() {
        return this.getToken(PhpParser.Match, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterMatchExpr(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitMatchExpr(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitMatchExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MatchItemContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_matchItem;
    }
    DoubleArrow() {
        return this.getToken(PhpParser.DoubleArrow, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterMatchItem(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitMatchItem(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitMatchItem(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NewExprContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_newExpr;
    }
    New() {
        return this.getToken(PhpParser.New, 0);
    }
    ;
    typeRef() {
        return this.getTypedRuleContext(TypeRefContext, 0);
    }
    ;
    arguments() {
        return this.getTypedRuleContext(ArgumentsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterNewExpr(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitNewExpr(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitNewExpr(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AssignmentOperatorContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_assignmentOperator;
    }
    Eq() {
        return this.getToken(PhpParser.Eq, 0);
    }
    ;
    PlusEqual() {
        return this.getToken(PhpParser.PlusEqual, 0);
    }
    ;
    MinusEqual() {
        return this.getToken(PhpParser.MinusEqual, 0);
    }
    ;
    MulEqual() {
        return this.getToken(PhpParser.MulEqual, 0);
    }
    ;
    PowEqual() {
        return this.getToken(PhpParser.PowEqual, 0);
    }
    ;
    DivEqual() {
        return this.getToken(PhpParser.DivEqual, 0);
    }
    ;
    Concaequal() {
        return this.getToken(PhpParser.Concaequal, 0);
    }
    ;
    ModEqual() {
        return this.getToken(PhpParser.ModEqual, 0);
    }
    ;
    AndEqual() {
        return this.getToken(PhpParser.AndEqual, 0);
    }
    ;
    OrEqual() {
        return this.getToken(PhpParser.OrEqual, 0);
    }
    ;
    XorEqual() {
        return this.getToken(PhpParser.XorEqual, 0);
    }
    ;
    ShiftLeftEqual() {
        return this.getToken(PhpParser.ShiftLeftEqual, 0);
    }
    ;
    ShiftRightEqual() {
        return this.getToken(PhpParser.ShiftRightEqual, 0);
    }
    ;
    NullCoalescingEqual() {
        return this.getToken(PhpParser.NullCoalescingEqual, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterAssignmentOperator(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitAssignmentOperator(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitAssignmentOperator(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class YieldExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_yieldExpression;
    }
    Yield() {
        return this.getToken(PhpParser.Yield, 0);
    }
    ;
    From() {
        return this.getToken(PhpParser.From, 0);
    }
    ;
    DoubleArrow() {
        return this.getToken(PhpParser.DoubleArrow, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterYieldExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitYieldExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitYieldExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayItemListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.arrayItem = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ArrayItemContext);
            }
            else {
                return this.getTypedRuleContext(ArrayItemContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_arrayItemList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterArrayItemList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitArrayItemList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitArrayItemList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArrayItemContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.expression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ExpressionContext);
            }
            else {
                return this.getTypedRuleContext(ExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_arrayItem;
    }
    DoubleArrow() {
        return this.getToken(PhpParser.DoubleArrow, 0);
    }
    ;
    Ampersand() {
        return this.getToken(PhpParser.Ampersand, 0);
    }
    ;
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterArrayItem(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitArrayItem(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitArrayItem(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LambdaFunctionUseVarsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.lambdaFunctionUseVar = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(LambdaFunctionUseVarContext);
            }
            else {
                return this.getTypedRuleContext(LambdaFunctionUseVarContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_lambdaFunctionUseVars;
    }
    Use() {
        return this.getToken(PhpParser.Use, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterLambdaFunctionUseVars(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitLambdaFunctionUseVars(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitLambdaFunctionUseVars(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LambdaFunctionUseVarContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_lambdaFunctionUseVar;
    }
    VarName() {
        return this.getToken(PhpParser.VarName, 0);
    }
    ;
    Ampersand() {
        return this.getToken(PhpParser.Ampersand, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterLambdaFunctionUseVar(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitLambdaFunctionUseVar(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitLambdaFunctionUseVar(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QualifiedStaticTypeRefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_qualifiedStaticTypeRef;
    }
    qualifiedNamespaceName() {
        return this.getTypedRuleContext(QualifiedNamespaceNameContext, 0);
    }
    ;
    genericDynamicArgs() {
        return this.getTypedRuleContext(GenericDynamicArgsContext, 0);
    }
    ;
    Static() {
        return this.getToken(PhpParser.Static, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterQualifiedStaticTypeRef(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitQualifiedStaticTypeRef(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitQualifiedStaticTypeRef(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class TypeRefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_typeRef;
    }
    qualifiedNamespaceName() {
        return this.getTypedRuleContext(QualifiedNamespaceNameContext, 0);
    }
    ;
    indirectTypeRef() {
        return this.getTypedRuleContext(IndirectTypeRefContext, 0);
    }
    ;
    genericDynamicArgs() {
        return this.getTypedRuleContext(GenericDynamicArgsContext, 0);
    }
    ;
    primitiveType() {
        return this.getTypedRuleContext(PrimitiveTypeContext, 0);
    }
    ;
    Static() {
        return this.getToken(PhpParser.Static, 0);
    }
    ;
    anonymousClass() {
        return this.getTypedRuleContext(AnonymousClassContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterTypeRef(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitTypeRef(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitTypeRef(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AnonymousClassContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.classStatement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ClassStatementContext);
            }
            else {
                return this.getTypedRuleContext(ClassStatementContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_anonymousClass;
    }
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    classEntryType() {
        return this.getTypedRuleContext(ClassEntryTypeContext, 0);
    }
    ;
    Interface() {
        return this.getToken(PhpParser.Interface, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    attributes() {
        return this.getTypedRuleContext(AttributesContext, 0);
    }
    ;
    Private() {
        return this.getToken(PhpParser.Private, 0);
    }
    ;
    modifier() {
        return this.getTypedRuleContext(ModifierContext, 0);
    }
    ;
    Partial() {
        return this.getToken(PhpParser.Partial, 0);
    }
    ;
    typeParameterListInBrackets() {
        return this.getTypedRuleContext(TypeParameterListInBracketsContext, 0);
    }
    ;
    Extends() {
        return this.getToken(PhpParser.Extends, 0);
    }
    ;
    qualifiedStaticTypeRef() {
        return this.getTypedRuleContext(QualifiedStaticTypeRefContext, 0);
    }
    ;
    Implements() {
        return this.getToken(PhpParser.Implements, 0);
    }
    ;
    interfaceList() {
        return this.getTypedRuleContext(InterfaceListContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterAnonymousClass(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitAnonymousClass(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitAnonymousClass(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IndirectTypeRefContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.ObjectOperator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.ObjectOperator);
            }
            else {
                return this.getToken(PhpParser.ObjectOperator, i);
            }
        };
        this.keyedFieldName = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(KeyedFieldNameContext);
            }
            else {
                return this.getTypedRuleContext(KeyedFieldNameContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_indirectTypeRef;
    }
    chainBase() {
        return this.getTypedRuleContext(ChainBaseContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterIndirectTypeRef(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitIndirectTypeRef(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitIndirectTypeRef(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QualifiedNamespaceNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_qualifiedNamespaceName;
    }
    namespaceNameList() {
        return this.getTypedRuleContext(NamespaceNameListContext, 0);
    }
    ;
    Namespace() {
        return this.getToken(PhpParser.Namespace, 0);
    }
    ;
    NamespaceSeparator() {
        return this.getToken(PhpParser.NamespaceSeparator, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterQualifiedNamespaceName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitQualifiedNamespaceName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitQualifiedNamespaceName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NamespaceNameListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.identifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierContext, i);
            }
        };
        this.NamespaceSeparator = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.NamespaceSeparator);
            }
            else {
                return this.getToken(PhpParser.NamespaceSeparator, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_namespaceNameList;
    }
    namespaceNameTail() {
        return this.getTypedRuleContext(NamespaceNameTailContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterNamespaceNameList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitNamespaceNameList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitNamespaceNameList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NamespaceNameTailContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.identifier = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(IdentifierContext);
            }
            else {
                return this.getTypedRuleContext(IdentifierContext, i);
            }
        };
        this.namespaceNameTail = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(NamespaceNameTailContext);
            }
            else {
                return this.getTypedRuleContext(NamespaceNameTailContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_namespaceNameTail;
    }
    As() {
        return this.getToken(PhpParser.As, 0);
    }
    ;
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterNamespaceNameTail(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitNamespaceNameTail(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitNamespaceNameTail(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class QualifiedNamespaceNameListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.qualifiedNamespaceName = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(QualifiedNamespaceNameContext);
            }
            else {
                return this.getTypedRuleContext(QualifiedNamespaceNameContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_qualifiedNamespaceNameList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterQualifiedNamespaceNameList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitQualifiedNamespaceNameList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitQualifiedNamespaceNameList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArgumentsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.actualArgument = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ActualArgumentContext);
            }
            else {
                return this.getTypedRuleContext(ActualArgumentContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_arguments;
    }
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    yieldExpression() {
        return this.getTypedRuleContext(YieldExpressionContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterArguments(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitArguments(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ActualArgumentContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_actualArgument;
    }
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    argumentName() {
        return this.getTypedRuleContext(ArgumentNameContext, 0);
    }
    ;
    Ellipsis() {
        return this.getToken(PhpParser.Ellipsis, 0);
    }
    ;
    Ampersand() {
        return this.getToken(PhpParser.Ampersand, 0);
    }
    ;
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterActualArgument(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitActualArgument(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitActualArgument(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ArgumentNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_argumentName;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    Colon() {
        return this.getToken(PhpParser.Colon, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterArgumentName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitArgumentName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitArgumentName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstantInitializerContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_constantInitializer;
    }
    constant() {
        return this.getTypedRuleContext(ConstantContext, 0);
    }
    ;
    string() {
        return this.getTypedRuleContext(StringContext, 0);
    }
    ;
    Array() {
        return this.getToken(PhpParser.Array, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    arrayItemList() {
        return this.getTypedRuleContext(ArrayItemListContext, 0);
    }
    ;
    Comma() {
        return this.getToken(PhpParser.Comma, 0);
    }
    ;
    OpenSquareBracket() {
        return this.getToken(PhpParser.OpenSquareBracket, 0);
    }
    ;
    CloseSquareBracket() {
        return this.getToken(PhpParser.CloseSquareBracket, 0);
    }
    ;
    constantInitializer() {
        return this.getTypedRuleContext(ConstantInitializerContext, 0);
    }
    ;
    Plus() {
        return this.getToken(PhpParser.Plus, 0);
    }
    ;
    Minus() {
        return this.getToken(PhpParser.Minus, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterConstantInitializer(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitConstantInitializer(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitConstantInitializer(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ConstantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_constant;
    }
    Null() {
        return this.getToken(PhpParser.Null, 0);
    }
    ;
    literalConstant() {
        return this.getTypedRuleContext(LiteralConstantContext, 0);
    }
    ;
    magicConstant() {
        return this.getTypedRuleContext(MagicConstantContext, 0);
    }
    ;
    classConstant() {
        return this.getTypedRuleContext(ClassConstantContext, 0);
    }
    ;
    qualifiedNamespaceName() {
        return this.getTypedRuleContext(QualifiedNamespaceNameContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterConstant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitConstant(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitConstant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class LiteralConstantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_literalConstant;
    }
    Real() {
        return this.getToken(PhpParser.Real, 0);
    }
    ;
    BooleanConstant() {
        return this.getToken(PhpParser.BooleanConstant, 0);
    }
    ;
    numericConstant() {
        return this.getTypedRuleContext(NumericConstantContext, 0);
    }
    ;
    stringConstant() {
        return this.getTypedRuleContext(StringConstantContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterLiteralConstant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitLiteralConstant(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitLiteralConstant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class NumericConstantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_numericConstant;
    }
    Octal() {
        return this.getToken(PhpParser.Octal, 0);
    }
    ;
    Decimal() {
        return this.getToken(PhpParser.Decimal, 0);
    }
    ;
    Hex() {
        return this.getToken(PhpParser.Hex, 0);
    }
    ;
    Binary() {
        return this.getToken(PhpParser.Binary, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterNumericConstant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitNumericConstant(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitNumericConstant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ClassConstantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.keyedVariable = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(KeyedVariableContext);
            }
            else {
                return this.getTypedRuleContext(KeyedVariableContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_classConstant;
    }
    DoubleColon() {
        return this.getToken(PhpParser.DoubleColon, 0);
    }
    ;
    Class() {
        return this.getToken(PhpParser.Class, 0);
    }
    ;
    Parent_() {
        return this.getToken(PhpParser.Parent_, 0);
    }
    ;
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    Constructor() {
        return this.getToken(PhpParser.Constructor, 0);
    }
    ;
    Get() {
        return this.getToken(PhpParser.Get, 0);
    }
    ;
    Set() {
        return this.getToken(PhpParser.Set, 0);
    }
    ;
    qualifiedStaticTypeRef() {
        return this.getTypedRuleContext(QualifiedStaticTypeRefContext, 0);
    }
    ;
    string() {
        return this.getTypedRuleContext(StringContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterClassConstant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitClassConstant(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitClassConstant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StringConstantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_stringConstant;
    }
    Label() {
        return this.getToken(PhpParser.Label, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterStringConstant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitStringConstant(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitStringConstant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class StringContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.HereDocText = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.HereDocText);
            }
            else {
                return this.getToken(PhpParser.HereDocText, i);
            }
        };
        this.DoubleQuote = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.DoubleQuote);
            }
            else {
                return this.getToken(PhpParser.DoubleQuote, i);
            }
        };
        this.interpolatedStringPart = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(InterpolatedStringPartContext);
            }
            else {
                return this.getTypedRuleContext(InterpolatedStringPartContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_string;
    }
    StartHereDoc() {
        return this.getToken(PhpParser.StartHereDoc, 0);
    }
    ;
    StartNowDoc() {
        return this.getToken(PhpParser.StartNowDoc, 0);
    }
    ;
    SingleQuoteString() {
        return this.getToken(PhpParser.SingleQuoteString, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterString(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitString(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitString(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class InterpolatedStringPartContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_interpolatedStringPart;
    }
    StringPart() {
        return this.getToken(PhpParser.StringPart, 0);
    }
    ;
    UnicodeEscape() {
        return this.getToken(PhpParser.UnicodeEscape, 0);
    }
    ;
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterInterpolatedStringPart(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitInterpolatedStringPart(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitInterpolatedStringPart(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ChainListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.chain = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(ChainContext);
            }
            else {
                return this.getTypedRuleContext(ChainContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_chainList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterChainList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitChainList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitChainList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ChainContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.memberAccess = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(MemberAccessContext);
            }
            else {
                return this.getTypedRuleContext(MemberAccessContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_chain;
    }
    chainOrigin() {
        return this.getTypedRuleContext(ChainOriginContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterChain(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitChain(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitChain(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ChainOriginContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_chainOrigin;
    }
    chainBase() {
        return this.getTypedRuleContext(ChainBaseContext, 0);
    }
    ;
    functionCall() {
        return this.getTypedRuleContext(FunctionCallContext, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    newExpr() {
        return this.getTypedRuleContext(NewExprContext, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterChainOrigin(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitChainOrigin(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitChainOrigin(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MemberAccessContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_memberAccess;
    }
    ObjectOperator() {
        return this.getToken(PhpParser.ObjectOperator, 0);
    }
    ;
    keyedFieldName() {
        return this.getTypedRuleContext(KeyedFieldNameContext, 0);
    }
    ;
    actualArguments() {
        return this.getTypedRuleContext(ActualArgumentsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterMemberAccess(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitMemberAccess(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitMemberAccess(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionCallContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_functionCall;
    }
    functionCallName() {
        return this.getTypedRuleContext(FunctionCallNameContext, 0);
    }
    ;
    actualArguments() {
        return this.getTypedRuleContext(ActualArgumentsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterFunctionCall(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitFunctionCall(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitFunctionCall(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class FunctionCallNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_functionCallName;
    }
    qualifiedNamespaceName() {
        return this.getTypedRuleContext(QualifiedNamespaceNameContext, 0);
    }
    ;
    classConstant() {
        return this.getTypedRuleContext(ClassConstantContext, 0);
    }
    ;
    chainBase() {
        return this.getTypedRuleContext(ChainBaseContext, 0);
    }
    ;
    parentheses() {
        return this.getTypedRuleContext(ParenthesesContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterFunctionCallName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitFunctionCallName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitFunctionCallName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ActualArgumentsContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.squareCurlyExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SquareCurlyExpressionContext);
            }
            else {
                return this.getTypedRuleContext(SquareCurlyExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_actualArguments;
    }
    arguments() {
        return this.getTypedRuleContext(ArgumentsContext, 0);
    }
    ;
    genericDynamicArgs() {
        return this.getTypedRuleContext(GenericDynamicArgsContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterActualArguments(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitActualArguments(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitActualArguments(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ChainBaseContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.keyedVariable = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(KeyedVariableContext);
            }
            else {
                return this.getTypedRuleContext(KeyedVariableContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_chainBase;
    }
    DoubleColon() {
        return this.getToken(PhpParser.DoubleColon, 0);
    }
    ;
    qualifiedStaticTypeRef() {
        return this.getTypedRuleContext(QualifiedStaticTypeRefContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterChainBase(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitChainBase(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitChainBase(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class KeyedFieldNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_keyedFieldName;
    }
    keyedSimpleFieldName() {
        return this.getTypedRuleContext(KeyedSimpleFieldNameContext, 0);
    }
    ;
    keyedVariable() {
        return this.getTypedRuleContext(KeyedVariableContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterKeyedFieldName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitKeyedFieldName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitKeyedFieldName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class KeyedSimpleFieldNameContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.squareCurlyExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SquareCurlyExpressionContext);
            }
            else {
                return this.getTypedRuleContext(SquareCurlyExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_keyedSimpleFieldName;
    }
    identifier() {
        return this.getTypedRuleContext(IdentifierContext, 0);
    }
    ;
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterKeyedSimpleFieldName(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitKeyedSimpleFieldName(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitKeyedSimpleFieldName(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class KeyedVariableContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.Dollar = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Dollar);
            }
            else {
                return this.getToken(PhpParser.Dollar, i);
            }
        };
        this.squareCurlyExpression = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(SquareCurlyExpressionContext);
            }
            else {
                return this.getTypedRuleContext(SquareCurlyExpressionContext, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_keyedVariable;
    }
    VarName() {
        return this.getToken(PhpParser.VarName, 0);
    }
    ;
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterKeyedVariable(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitKeyedVariable(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitKeyedVariable(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class SquareCurlyExpressionContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_squareCurlyExpression;
    }
    OpenSquareBracket() {
        return this.getToken(PhpParser.OpenSquareBracket, 0);
    }
    ;
    CloseSquareBracket() {
        return this.getToken(PhpParser.CloseSquareBracket, 0);
    }
    ;
    expression() {
        return this.getTypedRuleContext(ExpressionContext, 0);
    }
    ;
    OpenCurlyBracket() {
        return this.getToken(PhpParser.OpenCurlyBracket, 0);
    }
    ;
    CloseCurlyBracket() {
        return this.getToken(PhpParser.CloseCurlyBracket, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterSquareCurlyExpression(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitSquareCurlyExpression(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitSquareCurlyExpression(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AssignmentListContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.assignmentListElement = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTypedRuleContexts(AssignmentListElementContext);
            }
            else {
                return this.getTypedRuleContext(AssignmentListElementContext, i);
            }
        };
        this.Comma = function (i) {
            if (i === undefined) {
                i = null;
            }
            if (i === null) {
                return this.getTokens(PhpParser.Comma);
            }
            else {
                return this.getToken(PhpParser.Comma, i);
            }
        };
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_assignmentList;
    }
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterAssignmentList(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitAssignmentList(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitAssignmentList(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class AssignmentListElementContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_assignmentListElement;
    }
    chain() {
        return this.getTypedRuleContext(ChainContext, 0);
    }
    ;
    List() {
        return this.getToken(PhpParser.List, 0);
    }
    ;
    OpenRoundBracket() {
        return this.getToken(PhpParser.OpenRoundBracket, 0);
    }
    ;
    assignmentList() {
        return this.getTypedRuleContext(AssignmentListContext, 0);
    }
    ;
    CloseRoundBracket() {
        return this.getToken(PhpParser.CloseRoundBracket, 0);
    }
    ;
    arrayItem() {
        return this.getTypedRuleContext(ArrayItemContext, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterAssignmentListElement(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitAssignmentListElement(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitAssignmentListElement(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class ModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_modifier;
    }
    Abstract() {
        return this.getToken(PhpParser.Abstract, 0);
    }
    ;
    Final() {
        return this.getToken(PhpParser.Final, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class IdentifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_identifier;
    }
    Label() {
        return this.getToken(PhpParser.Label, 0);
    }
    ;
    Abstract() {
        return this.getToken(PhpParser.Abstract, 0);
    }
    ;
    Array() {
        return this.getToken(PhpParser.Array, 0);
    }
    ;
    As() {
        return this.getToken(PhpParser.As, 0);
    }
    ;
    BinaryCast() {
        return this.getToken(PhpParser.BinaryCast, 0);
    }
    ;
    BoolType() {
        return this.getToken(PhpParser.BoolType, 0);
    }
    ;
    BooleanConstant() {
        return this.getToken(PhpParser.BooleanConstant, 0);
    }
    ;
    Break() {
        return this.getToken(PhpParser.Break, 0);
    }
    ;
    Callable() {
        return this.getToken(PhpParser.Callable, 0);
    }
    ;
    Case() {
        return this.getToken(PhpParser.Case, 0);
    }
    ;
    Catch() {
        return this.getToken(PhpParser.Catch, 0);
    }
    ;
    Class() {
        return this.getToken(PhpParser.Class, 0);
    }
    ;
    Clone() {
        return this.getToken(PhpParser.Clone, 0);
    }
    ;
    Const() {
        return this.getToken(PhpParser.Const, 0);
    }
    ;
    Continue() {
        return this.getToken(PhpParser.Continue, 0);
    }
    ;
    Declare() {
        return this.getToken(PhpParser.Declare, 0);
    }
    ;
    Default() {
        return this.getToken(PhpParser.Default, 0);
    }
    ;
    Do() {
        return this.getToken(PhpParser.Do, 0);
    }
    ;
    DoubleCast() {
        return this.getToken(PhpParser.DoubleCast, 0);
    }
    ;
    DoubleType() {
        return this.getToken(PhpParser.DoubleType, 0);
    }
    ;
    Echo() {
        return this.getToken(PhpParser.Echo, 0);
    }
    ;
    Else() {
        return this.getToken(PhpParser.Else, 0);
    }
    ;
    ElseIf() {
        return this.getToken(PhpParser.ElseIf, 0);
    }
    ;
    Empty() {
        return this.getToken(PhpParser.Empty, 0);
    }
    ;
    EndDeclare() {
        return this.getToken(PhpParser.EndDeclare, 0);
    }
    ;
    EndFor() {
        return this.getToken(PhpParser.EndFor, 0);
    }
    ;
    EndForeach() {
        return this.getToken(PhpParser.EndForeach, 0);
    }
    ;
    EndIf() {
        return this.getToken(PhpParser.EndIf, 0);
    }
    ;
    EndSwitch() {
        return this.getToken(PhpParser.EndSwitch, 0);
    }
    ;
    EndWhile() {
        return this.getToken(PhpParser.EndWhile, 0);
    }
    ;
    Eval() {
        return this.getToken(PhpParser.Eval, 0);
    }
    ;
    Exit() {
        return this.getToken(PhpParser.Exit, 0);
    }
    ;
    Extends() {
        return this.getToken(PhpParser.Extends, 0);
    }
    ;
    Final() {
        return this.getToken(PhpParser.Final, 0);
    }
    ;
    Finally() {
        return this.getToken(PhpParser.Finally, 0);
    }
    ;
    FloatCast() {
        return this.getToken(PhpParser.FloatCast, 0);
    }
    ;
    For() {
        return this.getToken(PhpParser.For, 0);
    }
    ;
    Foreach() {
        return this.getToken(PhpParser.Foreach, 0);
    }
    ;
    Function() {
        return this.getToken(PhpParser.Function, 0);
    }
    ;
    Global() {
        return this.getToken(PhpParser.Global, 0);
    }
    ;
    Goto() {
        return this.getToken(PhpParser.Goto, 0);
    }
    ;
    If() {
        return this.getToken(PhpParser.If, 0);
    }
    ;
    Implements() {
        return this.getToken(PhpParser.Implements, 0);
    }
    ;
    Import() {
        return this.getToken(PhpParser.Import, 0);
    }
    ;
    Include() {
        return this.getToken(PhpParser.Include, 0);
    }
    ;
    IncludeOnce() {
        return this.getToken(PhpParser.IncludeOnce, 0);
    }
    ;
    InstanceOf() {
        return this.getToken(PhpParser.InstanceOf, 0);
    }
    ;
    InsteadOf() {
        return this.getToken(PhpParser.InsteadOf, 0);
    }
    ;
    Int16Cast() {
        return this.getToken(PhpParser.Int16Cast, 0);
    }
    ;
    Int64Type() {
        return this.getToken(PhpParser.Int64Type, 0);
    }
    ;
    Int8Cast() {
        return this.getToken(PhpParser.Int8Cast, 0);
    }
    ;
    Interface() {
        return this.getToken(PhpParser.Interface, 0);
    }
    ;
    IntType() {
        return this.getToken(PhpParser.IntType, 0);
    }
    ;
    IsSet() {
        return this.getToken(PhpParser.IsSet, 0);
    }
    ;
    List() {
        return this.getToken(PhpParser.List, 0);
    }
    ;
    LogicalAnd() {
        return this.getToken(PhpParser.LogicalAnd, 0);
    }
    ;
    LogicalOr() {
        return this.getToken(PhpParser.LogicalOr, 0);
    }
    ;
    LogicalXor() {
        return this.getToken(PhpParser.LogicalXor, 0);
    }
    ;
    Namespace() {
        return this.getToken(PhpParser.Namespace, 0);
    }
    ;
    New() {
        return this.getToken(PhpParser.New, 0);
    }
    ;
    Null() {
        return this.getToken(PhpParser.Null, 0);
    }
    ;
    ObjectType() {
        return this.getToken(PhpParser.ObjectType, 0);
    }
    ;
    Parent_() {
        return this.getToken(PhpParser.Parent_, 0);
    }
    ;
    Partial() {
        return this.getToken(PhpParser.Partial, 0);
    }
    ;
    Print() {
        return this.getToken(PhpParser.Print, 0);
    }
    ;
    Private() {
        return this.getToken(PhpParser.Private, 0);
    }
    ;
    Protected() {
        return this.getToken(PhpParser.Protected, 0);
    }
    ;
    Public() {
        return this.getToken(PhpParser.Public, 0);
    }
    ;
    Require() {
        return this.getToken(PhpParser.Require, 0);
    }
    ;
    RequireOnce() {
        return this.getToken(PhpParser.RequireOnce, 0);
    }
    ;
    Resource() {
        return this.getToken(PhpParser.Resource, 0);
    }
    ;
    Return() {
        return this.getToken(PhpParser.Return, 0);
    }
    ;
    Static() {
        return this.getToken(PhpParser.Static, 0);
    }
    ;
    StringType() {
        return this.getToken(PhpParser.StringType, 0);
    }
    ;
    Switch() {
        return this.getToken(PhpParser.Switch, 0);
    }
    ;
    Throw() {
        return this.getToken(PhpParser.Throw, 0);
    }
    ;
    Trait() {
        return this.getToken(PhpParser.Trait, 0);
    }
    ;
    Try() {
        return this.getToken(PhpParser.Try, 0);
    }
    ;
    Typeof() {
        return this.getToken(PhpParser.Typeof, 0);
    }
    ;
    UintCast() {
        return this.getToken(PhpParser.UintCast, 0);
    }
    ;
    UnicodeCast() {
        return this.getToken(PhpParser.UnicodeCast, 0);
    }
    ;
    Unset() {
        return this.getToken(PhpParser.Unset, 0);
    }
    ;
    Use() {
        return this.getToken(PhpParser.Use, 0);
    }
    ;
    Var() {
        return this.getToken(PhpParser.Var, 0);
    }
    ;
    While() {
        return this.getToken(PhpParser.While, 0);
    }
    ;
    Yield() {
        return this.getToken(PhpParser.Yield, 0);
    }
    ;
    From() {
        return this.getToken(PhpParser.From, 0);
    }
    ;
    Get() {
        return this.getToken(PhpParser.Get, 0);
    }
    ;
    Set() {
        return this.getToken(PhpParser.Set, 0);
    }
    ;
    Call() {
        return this.getToken(PhpParser.Call, 0);
    }
    ;
    CallStatic() {
        return this.getToken(PhpParser.CallStatic, 0);
    }
    ;
    Constructor() {
        return this.getToken(PhpParser.Constructor, 0);
    }
    ;
    Destruct() {
        return this.getToken(PhpParser.Destruct, 0);
    }
    ;
    Wakeup() {
        return this.getToken(PhpParser.Wakeup, 0);
    }
    ;
    Sleep() {
        return this.getToken(PhpParser.Sleep, 0);
    }
    ;
    Autoload() {
        return this.getToken(PhpParser.Autoload, 0);
    }
    ;
    IsSet__() {
        return this.getToken(PhpParser.IsSet__, 0);
    }
    ;
    Unset__() {
        return this.getToken(PhpParser.Unset__, 0);
    }
    ;
    ToString__() {
        return this.getToken(PhpParser.ToString__, 0);
    }
    ;
    Invoke() {
        return this.getToken(PhpParser.Invoke, 0);
    }
    ;
    SetState() {
        return this.getToken(PhpParser.SetState, 0);
    }
    ;
    Clone__() {
        return this.getToken(PhpParser.Clone__, 0);
    }
    ;
    DebugInfo() {
        return this.getToken(PhpParser.DebugInfo, 0);
    }
    ;
    Namespace__() {
        return this.getToken(PhpParser.Namespace__, 0);
    }
    ;
    Class__() {
        return this.getToken(PhpParser.Class__, 0);
    }
    ;
    Traic__() {
        return this.getToken(PhpParser.Traic__, 0);
    }
    ;
    Function__() {
        return this.getToken(PhpParser.Function__, 0);
    }
    ;
    Method__() {
        return this.getToken(PhpParser.Method__, 0);
    }
    ;
    Line__() {
        return this.getToken(PhpParser.Line__, 0);
    }
    ;
    File__() {
        return this.getToken(PhpParser.File__, 0);
    }
    ;
    Dir__() {
        return this.getToken(PhpParser.Dir__, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterIdentifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitIdentifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitIdentifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MemberModifierContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_memberModifier;
    }
    Public() {
        return this.getToken(PhpParser.Public, 0);
    }
    ;
    Protected() {
        return this.getToken(PhpParser.Protected, 0);
    }
    ;
    Private() {
        return this.getToken(PhpParser.Private, 0);
    }
    ;
    Static() {
        return this.getToken(PhpParser.Static, 0);
    }
    ;
    Abstract() {
        return this.getToken(PhpParser.Abstract, 0);
    }
    ;
    Final() {
        return this.getToken(PhpParser.Final, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterMemberModifier(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitMemberModifier(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitMemberModifier(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MagicConstantContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_magicConstant;
    }
    Namespace__() {
        return this.getToken(PhpParser.Namespace__, 0);
    }
    ;
    Class__() {
        return this.getToken(PhpParser.Class__, 0);
    }
    ;
    Traic__() {
        return this.getToken(PhpParser.Traic__, 0);
    }
    ;
    Function__() {
        return this.getToken(PhpParser.Function__, 0);
    }
    ;
    Method__() {
        return this.getToken(PhpParser.Method__, 0);
    }
    ;
    Line__() {
        return this.getToken(PhpParser.Line__, 0);
    }
    ;
    File__() {
        return this.getToken(PhpParser.File__, 0);
    }
    ;
    Dir__() {
        return this.getToken(PhpParser.Dir__, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterMagicConstant(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitMagicConstant(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitMagicConstant(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class MagicMethodContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_magicMethod;
    }
    Get() {
        return this.getToken(PhpParser.Get, 0);
    }
    ;
    Set() {
        return this.getToken(PhpParser.Set, 0);
    }
    ;
    Call() {
        return this.getToken(PhpParser.Call, 0);
    }
    ;
    CallStatic() {
        return this.getToken(PhpParser.CallStatic, 0);
    }
    ;
    Constructor() {
        return this.getToken(PhpParser.Constructor, 0);
    }
    ;
    Destruct() {
        return this.getToken(PhpParser.Destruct, 0);
    }
    ;
    Wakeup() {
        return this.getToken(PhpParser.Wakeup, 0);
    }
    ;
    Sleep() {
        return this.getToken(PhpParser.Sleep, 0);
    }
    ;
    Autoload() {
        return this.getToken(PhpParser.Autoload, 0);
    }
    ;
    IsSet__() {
        return this.getToken(PhpParser.IsSet__, 0);
    }
    ;
    Unset__() {
        return this.getToken(PhpParser.Unset__, 0);
    }
    ;
    ToString__() {
        return this.getToken(PhpParser.ToString__, 0);
    }
    ;
    Invoke() {
        return this.getToken(PhpParser.Invoke, 0);
    }
    ;
    SetState() {
        return this.getToken(PhpParser.SetState, 0);
    }
    ;
    Clone__() {
        return this.getToken(PhpParser.Clone__, 0);
    }
    ;
    DebugInfo() {
        return this.getToken(PhpParser.DebugInfo, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterMagicMethod(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitMagicMethod(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitMagicMethod(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class PrimitiveTypeContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_primitiveType;
    }
    BoolType() {
        return this.getToken(PhpParser.BoolType, 0);
    }
    ;
    IntType() {
        return this.getToken(PhpParser.IntType, 0);
    }
    ;
    Int64Type() {
        return this.getToken(PhpParser.Int64Type, 0);
    }
    ;
    DoubleType() {
        return this.getToken(PhpParser.DoubleType, 0);
    }
    ;
    StringType() {
        return this.getToken(PhpParser.StringType, 0);
    }
    ;
    Resource() {
        return this.getToken(PhpParser.Resource, 0);
    }
    ;
    ObjectType() {
        return this.getToken(PhpParser.ObjectType, 0);
    }
    ;
    Array() {
        return this.getToken(PhpParser.Array, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterPrimitiveType(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitPrimitiveType(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitPrimitiveType(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
class CastOperationContext extends antlr4_1.default.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        if (parent === undefined) {
            parent = null;
        }
        if (invokingState === undefined || invokingState === null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PhpParser.RULE_castOperation;
    }
    BoolType() {
        return this.getToken(PhpParser.BoolType, 0);
    }
    ;
    Int8Cast() {
        return this.getToken(PhpParser.Int8Cast, 0);
    }
    ;
    Int16Cast() {
        return this.getToken(PhpParser.Int16Cast, 0);
    }
    ;
    IntType() {
        return this.getToken(PhpParser.IntType, 0);
    }
    ;
    Int64Type() {
        return this.getToken(PhpParser.Int64Type, 0);
    }
    ;
    UintCast() {
        return this.getToken(PhpParser.UintCast, 0);
    }
    ;
    DoubleCast() {
        return this.getToken(PhpParser.DoubleCast, 0);
    }
    ;
    DoubleType() {
        return this.getToken(PhpParser.DoubleType, 0);
    }
    ;
    FloatCast() {
        return this.getToken(PhpParser.FloatCast, 0);
    }
    ;
    StringType() {
        return this.getToken(PhpParser.StringType, 0);
    }
    ;
    BinaryCast() {
        return this.getToken(PhpParser.BinaryCast, 0);
    }
    ;
    UnicodeCast() {
        return this.getToken(PhpParser.UnicodeCast, 0);
    }
    ;
    Array() {
        return this.getToken(PhpParser.Array, 0);
    }
    ;
    ObjectType() {
        return this.getToken(PhpParser.ObjectType, 0);
    }
    ;
    Resource() {
        return this.getToken(PhpParser.Resource, 0);
    }
    ;
    Unset() {
        return this.getToken(PhpParser.Unset, 0);
    }
    ;
    enterRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.enterCastOperation(this);
        }
    }
    exitRule(listener) {
        if (listener instanceof PhpParserListener_js_1.default) {
            listener.exitCastOperation(this);
        }
    }
    accept(visitor) {
        if (visitor instanceof PhpParserVisitor_js_1.default) {
            return visitor.visitCastOperation(this);
        }
        else {
            return visitor.visitChildren(this);
        }
    }
}
PhpParser.HtmlDocumentContext = HtmlDocumentContext;
PhpParser.InlineHtmlContext = InlineHtmlContext;
PhpParser.HtmlElementContext = HtmlElementContext;
PhpParser.ScriptTextContext = ScriptTextContext;
PhpParser.PhpBlockContext = PhpBlockContext;
PhpParser.ImportStatementContext = ImportStatementContext;
PhpParser.TopStatementContext = TopStatementContext;
PhpParser.UseDeclarationContext = UseDeclarationContext;
PhpParser.UseDeclarationContentListContext = UseDeclarationContentListContext;
PhpParser.UseDeclarationContentContext = UseDeclarationContentContext;
PhpParser.NamespaceDeclarationContext = NamespaceDeclarationContext;
PhpParser.NamespaceStatementContext = NamespaceStatementContext;
PhpParser.FunctionDeclarationContext = FunctionDeclarationContext;
PhpParser.ClassDeclarationContext = ClassDeclarationContext;
PhpParser.ClassEntryTypeContext = ClassEntryTypeContext;
PhpParser.InterfaceListContext = InterfaceListContext;
PhpParser.TypeParameterListInBracketsContext = TypeParameterListInBracketsContext;
PhpParser.TypeParameterListContext = TypeParameterListContext;
PhpParser.TypeParameterWithDefaultsListContext = TypeParameterWithDefaultsListContext;
PhpParser.TypeParameterDeclContext = TypeParameterDeclContext;
PhpParser.TypeParameterWithDefaultDeclContext = TypeParameterWithDefaultDeclContext;
PhpParser.GenericDynamicArgsContext = GenericDynamicArgsContext;
PhpParser.AttributesContext = AttributesContext;
PhpParser.AttributeGroupContext = AttributeGroupContext;
PhpParser.AttributeContext = AttributeContext;
PhpParser.InnerStatementListContext = InnerStatementListContext;
PhpParser.InnerStatementContext = InnerStatementContext;
PhpParser.StatementContext = StatementContext;
PhpParser.EmptyStatementContext = EmptyStatementContext;
PhpParser.BlockStatementContext = BlockStatementContext;
PhpParser.IfStatementContext = IfStatementContext;
PhpParser.ElseIfStatementContext = ElseIfStatementContext;
PhpParser.ElseIfColonStatementContext = ElseIfColonStatementContext;
PhpParser.ElseStatementContext = ElseStatementContext;
PhpParser.ElseColonStatementContext = ElseColonStatementContext;
PhpParser.WhileStatementContext = WhileStatementContext;
PhpParser.DoWhileStatementContext = DoWhileStatementContext;
PhpParser.ForStatementContext = ForStatementContext;
PhpParser.ForInitContext = ForInitContext;
PhpParser.ForUpdateContext = ForUpdateContext;
PhpParser.SwitchStatementContext = SwitchStatementContext;
PhpParser.SwitchBlockContext = SwitchBlockContext;
PhpParser.BreakStatementContext = BreakStatementContext;
PhpParser.ContinueStatementContext = ContinueStatementContext;
PhpParser.ReturnStatementContext = ReturnStatementContext;
PhpParser.ExpressionStatementContext = ExpressionStatementContext;
PhpParser.UnsetStatementContext = UnsetStatementContext;
PhpParser.ForeachStatementContext = ForeachStatementContext;
PhpParser.TryCatchFinallyContext = TryCatchFinallyContext;
PhpParser.CatchClauseContext = CatchClauseContext;
PhpParser.FinallyStatementContext = FinallyStatementContext;
PhpParser.ThrowStatementContext = ThrowStatementContext;
PhpParser.GotoStatementContext = GotoStatementContext;
PhpParser.DeclareStatementContext = DeclareStatementContext;
PhpParser.InlineHtmlStatementContext = InlineHtmlStatementContext;
PhpParser.DeclareListContext = DeclareListContext;
PhpParser.FormalParameterListContext = FormalParameterListContext;
PhpParser.FormalParameterContext = FormalParameterContext;
PhpParser.TypeHintContext = TypeHintContext;
PhpParser.GlobalStatementContext = GlobalStatementContext;
PhpParser.GlobalVarContext = GlobalVarContext;
PhpParser.EchoStatementContext = EchoStatementContext;
PhpParser.StaticVariableStatementContext = StaticVariableStatementContext;
PhpParser.ClassStatementContext = ClassStatementContext;
PhpParser.TraitAdaptationsContext = TraitAdaptationsContext;
PhpParser.TraitAdaptationStatementContext = TraitAdaptationStatementContext;
PhpParser.TraitPrecedenceContext = TraitPrecedenceContext;
PhpParser.TraitAliasContext = TraitAliasContext;
PhpParser.TraitMethodReferenceContext = TraitMethodReferenceContext;
PhpParser.BaseCtorCallContext = BaseCtorCallContext;
PhpParser.MethodBodyContext = MethodBodyContext;
PhpParser.PropertyModifiersContext = PropertyModifiersContext;
PhpParser.MemberModifiersContext = MemberModifiersContext;
PhpParser.VariableInitializerContext = VariableInitializerContext;
PhpParser.IdentifierInitializerContext = IdentifierInitializerContext;
PhpParser.GlobalConstantDeclarationContext = GlobalConstantDeclarationContext;
PhpParser.ExpressionListContext = ExpressionListContext;
PhpParser.ParenthesesContext = ParenthesesContext;
PhpParser.ExpressionContext = ExpressionContext;
PhpParser.AssignableContext = AssignableContext;
PhpParser.ArrayCreationContext = ArrayCreationContext;
PhpParser.LambdaFunctionExprContext = LambdaFunctionExprContext;
PhpParser.MatchExprContext = MatchExprContext;
PhpParser.MatchItemContext = MatchItemContext;
PhpParser.NewExprContext = NewExprContext;
PhpParser.AssignmentOperatorContext = AssignmentOperatorContext;
PhpParser.YieldExpressionContext = YieldExpressionContext;
PhpParser.ArrayItemListContext = ArrayItemListContext;
PhpParser.ArrayItemContext = ArrayItemContext;
PhpParser.LambdaFunctionUseVarsContext = LambdaFunctionUseVarsContext;
PhpParser.LambdaFunctionUseVarContext = LambdaFunctionUseVarContext;
PhpParser.QualifiedStaticTypeRefContext = QualifiedStaticTypeRefContext;
PhpParser.TypeRefContext = TypeRefContext;
PhpParser.AnonymousClassContext = AnonymousClassContext;
PhpParser.IndirectTypeRefContext = IndirectTypeRefContext;
PhpParser.QualifiedNamespaceNameContext = QualifiedNamespaceNameContext;
PhpParser.NamespaceNameListContext = NamespaceNameListContext;
PhpParser.NamespaceNameTailContext = NamespaceNameTailContext;
PhpParser.QualifiedNamespaceNameListContext = QualifiedNamespaceNameListContext;
PhpParser.ArgumentsContext = ArgumentsContext;
PhpParser.ActualArgumentContext = ActualArgumentContext;
PhpParser.ArgumentNameContext = ArgumentNameContext;
PhpParser.ConstantInitializerContext = ConstantInitializerContext;
PhpParser.ConstantContext = ConstantContext;
PhpParser.LiteralConstantContext = LiteralConstantContext;
PhpParser.NumericConstantContext = NumericConstantContext;
PhpParser.ClassConstantContext = ClassConstantContext;
PhpParser.StringConstantContext = StringConstantContext;
PhpParser.StringContext = StringContext;
PhpParser.InterpolatedStringPartContext = InterpolatedStringPartContext;
PhpParser.ChainListContext = ChainListContext;
PhpParser.ChainContext = ChainContext;
PhpParser.ChainOriginContext = ChainOriginContext;
PhpParser.MemberAccessContext = MemberAccessContext;
PhpParser.FunctionCallContext = FunctionCallContext;
PhpParser.FunctionCallNameContext = FunctionCallNameContext;
PhpParser.ActualArgumentsContext = ActualArgumentsContext;
PhpParser.ChainBaseContext = ChainBaseContext;
PhpParser.KeyedFieldNameContext = KeyedFieldNameContext;
PhpParser.KeyedSimpleFieldNameContext = KeyedSimpleFieldNameContext;
PhpParser.KeyedVariableContext = KeyedVariableContext;
PhpParser.SquareCurlyExpressionContext = SquareCurlyExpressionContext;
PhpParser.AssignmentListContext = AssignmentListContext;
PhpParser.AssignmentListElementContext = AssignmentListElementContext;
PhpParser.ModifierContext = ModifierContext;
PhpParser.IdentifierContext = IdentifierContext;
PhpParser.MemberModifierContext = MemberModifierContext;
PhpParser.MagicConstantContext = MagicConstantContext;
PhpParser.MagicMethodContext = MagicMethodContext;
PhpParser.PrimitiveTypeContext = PrimitiveTypeContext;
PhpParser.CastOperationContext = CastOperationContext;
