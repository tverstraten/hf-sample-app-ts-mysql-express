/**
 * NOTE: this is a generated file, do not edit it will be overwritten 
 */
import { {{this.operatesOnBehalfOf.name}} } from "@harvest-forward/hf-model"
import { EntitySchema } from "typeorm"

export const {{this.operatesOnBehalfOf.name}}Entity = new EntitySchema<{{this.operatesOnBehalfOf.name}}>({
    name: 'build'
    , columns: {
        // primary, generated, createdate, updatedate
{{#each this.operatesOnBehalfOf.properties}}{{#ifvalue this.type.name equals="string"}}        {{this.name}}: { type: String }{{#unless @last}},{{/unless}}
{{else}}{{#ifvalue this.type.name equals="int"}}        {{this.name}}: { type: Number }{{#unless @last}},{{/unless}}
{{else}}{{#ifvalue this.type.name equals="long"}}        {{this.name}}: { type: Number }{{#unless @last}},{{/unless}}
{{else}}{{#ifvalue this.type.name equals="boolean"}}        {{this.name}}: { type: {{this.type.name}} }{{#unless @last}},{{/unless}}
{{else}}{{#ifvalue this.type.name equals="dateTime"}}        {{this.name}}: { type: Date }{{#unless @last}},{{/unless}}
{{else}}        //{{this.name}}: { type: {{this.type.name}} }{{#unless @last}},{{/unless}}
{{/ifvalue}}{{/ifvalue}}{{/ifvalue}}{{/ifvalue}}{{/ifvalue}}{{/each}}    },
    relations: {
        // inverseSide: 'representedUsers'
{{#each this.operatesOnBehalfOf.properties}}{{#ifvalue this.type.name equals="string"}}{{else}}{{#ifvalue this.type.name equals="int"}}{{else}}{{#ifvalue this.type.name equals="long"}}{{else}}{{#ifvalue this.type.name equals="boolean"}}{{else}}{{#ifvalue this.type.name equals="dateTime"}}{{else}}        {{this.name}}: { type: "many-to-one", target:"{{this.type.name}}", lazy: true }{{#unless @last}},{{/unless}}
{{/ifvalue}}{{/ifvalue}}{{/ifvalue}}{{/ifvalue}}{{/ifvalue}}{{/each}}    }
})
