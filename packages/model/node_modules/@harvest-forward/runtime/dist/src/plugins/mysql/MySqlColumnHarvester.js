"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MySqlColumnHarvester = void 0;
const ProgrammingLanguage_1 = require("../../system/ProgrammingLanguage");
const SystemComponentArtifact_1 = require("../../system/SystemComponentArtifact");
const information_architecture_1 = require("../information-architecture");
const rdbms_basic_1 = require("../rdbms-basic");
const AbstractMySqlSchemaHarvester_1 = require("./AbstractMySqlSchemaHarvester");
class MySqlColumnHarvester extends AbstractMySqlSchemaHarvester_1.AbstractMySqlSchemaHarvester {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['queryText'] = `SELECT * FROM information_schema.columns`;
        super('MySqlColumnHarvester', 'A harvester of basic rdbms columns from a specified database', nonNullConfigurationValues);
    }
    harvestRow(system, __db, row) {
        const results = [];
        const dataType = row['DATA_TYPE'].toUpperCase();
        const valueType = this.columnTypeToValueTypeMap[dataType];
        let domain;
        if (dataType.includes('ENUM')) {
            const rawColumnType = row['COLUMN_TYPE'];
            const valuesAsString = rawColumnType.replace(/^enum\(/, '').replace(/\)$/, '');
            const matches = valuesAsString.split(',');
            const values = [];
            matches.forEach((value) => {
                const enumValue = new information_architecture_1.EnumeratedValue(`e_${value}`, 'InformationModel', '', value);
                values.push(enumValue);
            });
            domain = new rdbms_basic_1.Domain(row['TABLE_SCHEMA'], `${row['TABLE_NAME']}.${row['COLUMN_NAME']}`, 'The set of values for the column', rawColumnType, values);
            results.push(new SystemComponentArtifact_1.SystemComponentArtifact(domain));
        }
        const nullable = row['IS_NULLABLE'] == 'YES';
        const newRow = {
            schemaName: row['TABLE_SCHEMA'],
            tableName: row['TABLE_NAME'],
            name: row['COLUMN_NAME'],
            description: row['COLUMN_COMMENT'],
            ordinalPosition: row['ORDINAL_POSITION'],
            columnDefault: row['COLUMN_DEFAULT'],
            isNullable: nullable,
            isIdentity: row['EXTRA'] == 'auto_increment',
            dataType: dataType,
            valueType: valueType,
            inDomain: domain,
            characterMaximumLength: row['CHARACTER_MAXIMUM_LENGTH'],
            ansiTypeDeclaration: valueType.inLanguage(ProgrammingLanguage_1.ProgrammingLanguage.sql, nullable, row['CHARACTER_MAXIMUM_LENGTH']),
        };
        if (this.validColumn(newRow)) {
            system.addChild(newRow);
            results.push(new SystemComponentArtifact_1.SystemComponentArtifact(newRow));
        }
        return results;
    }
}
exports.MySqlColumnHarvester = MySqlColumnHarvester;
