"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrmOutgoingForeignKeyToPropertyHarvester = void 0;
const changeCase = __importStar(require("change-case"));
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const ComponentOrigin_1 = require("../../../system/ComponentOrigin");
const Permanence_1 = require("../../../system/Permanence");
const System_1 = require("../../../system/System");
const SystemComponent_1 = require("../../../system/SystemComponent");
const SystemComponentArtifact_1 = require("../../../system/SystemComponentArtifact");
const ValueType_1 = require("../../../system/ValueType");
const information_architecture_1 = require("../../information-architecture");
const DataMemberColumnMapping_1 = require("../DataMemberColumnMapping");
class OrmOutgoingForeignKeyToPropertyHarvester extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'ForeignKey',
        });
        super('OrmOutgoingForeignKeyToPropertyHarvester', 'A harvester that takes an outgoing foreign key in a sql schema and creates properties in an information model', {
            fkRegex: {
                name: 'Foreign Key Regex',
                required: true,
                description: 'The text to use for altering name of foreign key columns into their respective properties. It is a pipe (|) separated value with the first portion being a string or a regex to match and the second portion the text to use to replace matches with',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: '_[iI][dD]$|',
            },
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(system, component) {
        const results = [];
        const fk = component;
        const sourceType = fk.sourceTable;
        const sourceClass = sourceType?.orMapping?.type;
        if (sourceClass != null) {
            let propertyName = fk.sourceColumnName;
            const sourceTable = fk.sourceTable;
            let sourceColumn = sourceTable.columns[System_1.System.constantCase(fk.sourceColumnName)];
            let sourceProperty;
            const mappable = sourceColumn;
            if (mappable.orMapping != null) {
                propertyName = mappable.orMapping.propertyName;
                sourceProperty = sourceClass.dataMembersMap[mappable.orMapping.propertyName];
            }
            const fkRegex = this.getConfiguredValue('fkRegex');
            if (fkRegex != null) {
                const lastPipe = fkRegex.lastIndexOf('|');
                if (lastPipe != -1) {
                    const regexPattern = fkRegex.substr(0, lastPipe);
                    const replacement = fkRegex.substr(lastPipe + 1);
                    const regex = new RegExp(regexPattern);
                    propertyName = propertyName.replace(regex, replacement);
                }
                else
                    this.logger.warn(`translateOutgoingForeignKeyToProperty(${fk.name}) invalid regex provided, no pipe separator found in pattern`);
            }
            propertyName = changeCase.snakeCase(propertyName);
            const targetTable = fk.targetTable;
            const propertyTypeName = targetTable.orMapping?.typeName;
            const model = information_architecture_1.InformationModel.fromSystem(system);
            let propertyType;
            if (propertyTypeName == null)
                propertyType = ValueType_1.ValueType.INT;
            else {
                const fullName = SystemComponent_1.SystemComponent.fullConstantCase(model.fullConstantCaseName, propertyTypeName);
                propertyType = system.descendants[fullName];
            }
            let property;
            if (sourceClass.dataMembersMap[propertyName] == null) {
                property = new information_architecture_1.Property(sourceClass.constantCaseFullName, propertyName, `This was created from the details of the foreign key ${fk.name} and described as: ${fk.description}`.trim(), propertyType, 0);
                sourceColumn = sourceTable.columns[System_1.System.constantCase(fk.sourceColumnName)];
                const dataMember = property;
                dataMember.orMapping = new DataMemberColumnMapping_1.DataMemberColumnMapping(propertyName, sourceColumn.name, ValueType_1.ValueType.INT.name, ValueType_1.ValueType.INT);
                dataMember.orMapping.column = sourceColumn;
                dataMember.orMapping.property = property;
                property.permanence = Permanence_1.Permanence.constant;
                property.informational = true;
                property.functional = false;
                property.origin = ComponentOrigin_1.ComponentOrigin.harvested;
                sourceClass.addChild(property);
                sourceTable.orMapping?.addChild(dataMember.orMapping);
                results.push(new SystemComponentArtifact_1.SystemComponentArtifact(property));
                results.push(new SystemComponentArtifact_1.SystemComponentArtifact(dataMember.orMapping));
            }
            else {
                property = sourceClass.dataMembersMap[propertyName];
                property.description = `This was created from the details of the foreign key ${fk.name} and described as: ${fk.description}`.trim();
                property.type = propertyType;
                property.length = 0;
                const dataMember = property;
                if (dataMember.orMapping != null) {
                    dataMember.orMapping.dataType = propertyType;
                    sourceTable.orMapping?.addChild(dataMember.orMapping);
                }
            }
            if (sourceProperty != null) {
                sourceProperty.foreignIdentityFor = property;
                property.foreignIdentifiedBy = sourceProperty;
            }
            this.logger.isLevelEnabled('debug') ? this.logger.debug(`translateOutgoingForeignKeyToProperty(${fk.name}) exit`) : '';
        }
        return results;
    }
}
exports.OrmOutgoingForeignKeyToPropertyHarvester = OrmOutgoingForeignKeyToPropertyHarvester;
