export default class vbParserListener {
    enterStart(ctx: any): void;
    exitStart(ctx: any): void;
    enterHexDigit(ctx: any): void;
    exitHexDigit(ctx: any): void;
    enterDecimalDigit(ctx: any): void;
    exitDecimalDigit(ctx: any): void;
    enterOctalDigit(ctx: any): void;
    exitOctalDigit(ctx: any): void;
    enterAlphaCharacter(ctx: any): void;
    exitAlphaCharacter(ctx: any): void;
    enterBooleanLiteral(ctx: any): void;
    exitBooleanLiteral(ctx: any): void;
    enterIntLiteral(ctx: any): void;
    exitIntLiteral(ctx: any): void;
    enterHexLiteral(ctx: any): void;
    exitHexLiteral(ctx: any): void;
    enterOctalLiteral(ctx: any): void;
    exitOctalLiteral(ctx: any): void;
    enterIntegerLiteral(ctx: any): void;
    exitIntegerLiteral(ctx: any): void;
    enterIntegerLiteralValue(ctx: any): void;
    exitIntegerLiteralValue(ctx: any): void;
    enterFloatingPointLiteral(ctx: any): void;
    exitFloatingPointLiteral(ctx: any): void;
    enterFloatingPointLiteralValue(ctx: any): void;
    exitFloatingPointLiteralValue(ctx: any): void;
    enterExponent(ctx: any): void;
    exitExponent(ctx: any): void;
    enterSign(ctx: any): void;
    exitSign(ctx: any): void;
    enterSingleTypeCharacter(ctx: any): void;
    exitSingleTypeCharacter(ctx: any): void;
    enterDoubleTypeCharacter(ctx: any): void;
    exitDoubleTypeCharacter(ctx: any): void;
    enterLongTypeCharacter(ctx: any): void;
    exitLongTypeCharacter(ctx: any): void;
    enterStringTypeCharacter(ctx: any): void;
    exitStringTypeCharacter(ctx: any): void;
    enterIntegerTypeCharacter(ctx: any): void;
    exitIntegerTypeCharacter(ctx: any): void;
    enterDecimalTypeCharacter(ctx: any): void;
    exitDecimalTypeCharacter(ctx: any): void;
    enterIntegralTypeCharacter(ctx: any): void;
    exitIntegralTypeCharacter(ctx: any): void;
    enterFloatingPointTypeCharacter(ctx: any): void;
    exitFloatingPointTypeCharacter(ctx: any): void;
    enterMonthValue(ctx: any): void;
    exitMonthValue(ctx: any): void;
    enterDayValue(ctx: any): void;
    exitDayValue(ctx: any): void;
    enterYearValue(ctx: any): void;
    exitYearValue(ctx: any): void;
    enterHourValue(ctx: any): void;
    exitHourValue(ctx: any): void;
    enterMinuteValue(ctx: any): void;
    exitMinuteValue(ctx: any): void;
    enterSecondValue(ctx: any): void;
    exitSecondValue(ctx: any): void;
    enterAmpm(ctx: any): void;
    exitAmpm(ctx: any): void;
    enterDateValue(ctx: any): void;
    exitDateValue(ctx: any): void;
    enterTimeValue(ctx: any): void;
    exitTimeValue(ctx: any): void;
    enterDateOrTime(ctx: any): void;
    exitDateOrTime(ctx: any): void;
    enterDateLiteral(ctx: any): void;
    exitDateLiteral(ctx: any): void;
    enterStringCharacter(ctx: any): void;
    exitStringCharacter(ctx: any): void;
    enterStringLiteral(ctx: any): void;
    exitStringLiteral(ctx: any): void;
    enterCharacterLiteral(ctx: any): void;
    exitCharacterLiteral(ctx: any): void;
    enterIdentifierStart(ctx: any): void;
    exitIdentifierStart(ctx: any): void;
    enterIdentifierName(ctx: any): void;
    exitIdentifierName(ctx: any): void;
    enterIdentifierCharacter(ctx: any): void;
    exitIdentifierCharacter(ctx: any): void;
    enterIdentifier(ctx: any): void;
    exitIdentifier(ctx: any): void;
    enterIdentifierOrKeyword(ctx: any): void;
    exitIdentifierOrKeyword(ctx: any): void;
    enterTypeCharacter(ctx: any): void;
    exitTypeCharacter(ctx: any): void;
    enterLiteral(ctx: any): void;
    exitLiteral(ctx: any): void;
    enterElseIf(ctx: any): void;
    exitElseIf(ctx: any): void;
    enterCCStart(ctx: any): void;
    exitCCStart(ctx: any): void;
    enterCCStatement(ctx: any): void;
    exitCCStatement(ctx: any): void;
    enterCCExpression(ctx: any): void;
    exitCCExpression(ctx: any): void;
    enterCCParenthesizedExpression(ctx: any): void;
    exitCCParenthesizedExpression(ctx: any): void;
    enterCCSimpleNameExpression(ctx: any): void;
    exitCCSimpleNameExpression(ctx: any): void;
    enterCCCastExpression(ctx: any): void;
    exitCCCastExpression(ctx: any): void;
    enterCCPlusMinus(ctx: any): void;
    exitCCPlusMinus(ctx: any): void;
    enterCCUnaryOperator(ctx: any): void;
    exitCCUnaryOperator(ctx: any): void;
    enterCCBinaryOperator(ctx: any): void;
    exitCCBinaryOperator(ctx: any): void;
    enterCCConditionalExpression(ctx: any): void;
    exitCCConditionalExpression(ctx: any): void;
    enterCCConstantDeclaration(ctx: any): void;
    exitCCConstantDeclaration(ctx: any): void;
    enterCCIfGroup(ctx: any): void;
    exitCCIfGroup(ctx: any): void;
    enterCCElseIfGroup(ctx: any): void;
    exitCCElseIfGroup(ctx: any): void;
    enterCCElseGroup(ctx: any): void;
    exitCCElseGroup(ctx: any): void;
    enterRegionStart(ctx: any): void;
    exitRegionStart(ctx: any): void;
    enterRegionStatement(ctx: any): void;
    exitRegionStatement(ctx: any): void;
    enterRegionGroup(ctx: any): void;
    exitRegionGroup(ctx: any): void;
    enterAccessModifier(ctx: any): void;
    exitAccessModifier(ctx: any): void;
    enterTypeParameterList(ctx: any): void;
    exitTypeParameterList(ctx: any): void;
    enterTypeParameter(ctx: any): void;
    exitTypeParameter(ctx: any): void;
    enterVarianceModifier(ctx: any): void;
    exitVarianceModifier(ctx: any): void;
    enterTypeParameterConstraints(ctx: any): void;
    exitTypeParameterConstraints(ctx: any): void;
    enterConstraintList(ctx: any): void;
    exitConstraintList(ctx: any): void;
    enterConstraint(ctx: any): void;
    exitConstraint(ctx: any): void;
    enterAttributes(ctx: any): void;
    exitAttributes(ctx: any): void;
    enterAttributeBlock(ctx: any): void;
    exitAttributeBlock(ctx: any): void;
    enterAttributeList(ctx: any): void;
    exitAttributeList(ctx: any): void;
    enterAttribute(ctx: any): void;
    exitAttribute(ctx: any): void;
    enterAttributeModifier(ctx: any): void;
    exitAttributeModifier(ctx: any): void;
    enterAttributeArguments(ctx: any): void;
    exitAttributeArguments(ctx: any): void;
    enterAttributePositionalArgumentList(ctx: any): void;
    exitAttributePositionalArgumentList(ctx: any): void;
    enterVariablePropertyInitializerList(ctx: any): void;
    exitVariablePropertyInitializerList(ctx: any): void;
    enterVariablePropertyInitializer(ctx: any): void;
    exitVariablePropertyInitializer(ctx: any): void;
    enterAttributeArgumentExpression(ctx: any): void;
    exitAttributeArgumentExpression(ctx: any): void;
    enterStatementTerminator(ctx: any): void;
    exitStatementTerminator(ctx: any): void;
    enterAttributesStatement(ctx: any): void;
    exitAttributesStatement(ctx: any): void;
    enterOptionStatement(ctx: any): void;
    exitOptionStatement(ctx: any): void;
    enterOptionExplicitStatement(ctx: any): void;
    exitOptionExplicitStatement(ctx: any): void;
    enterOnOff(ctx: any): void;
    exitOnOff(ctx: any): void;
    enterOptionStrictStatement(ctx: any): void;
    exitOptionStrictStatement(ctx: any): void;
    enterOptionCompareStatement(ctx: any): void;
    exitOptionCompareStatement(ctx: any): void;
    enterCompareOption(ctx: any): void;
    exitCompareOption(ctx: any): void;
    enterOptionInferStatement(ctx: any): void;
    exitOptionInferStatement(ctx: any): void;
    enterImportsStatement(ctx: any): void;
    exitImportsStatement(ctx: any): void;
    enterImportsClauses(ctx: any): void;
    exitImportsClauses(ctx: any): void;
    enterImportsClause(ctx: any): void;
    exitImportsClause(ctx: any): void;
    enterAliasImportsClause(ctx: any): void;
    exitAliasImportsClause(ctx: any): void;
    enterMembersImportsClause(ctx: any): void;
    exitMembersImportsClause(ctx: any): void;
    enterXMLNamespaceImportsClause(ctx: any): void;
    exitXMLNamespaceImportsClause(ctx: any): void;
    enterXMLNamespaceValue(ctx: any): void;
    exitXMLNamespaceValue(ctx: any): void;
    enterNamespaceDeclaration(ctx: any): void;
    exitNamespaceDeclaration(ctx: any): void;
    enterNamespaceName(ctx: any): void;
    exitNamespaceName(ctx: any): void;
    enterRelativeNamespaceName(ctx: any): void;
    exitRelativeNamespaceName(ctx: any): void;
    enterNamespaceMemberDeclaration(ctx: any): void;
    exitNamespaceMemberDeclaration(ctx: any): void;
    enterTypeDeclaration(ctx: any): void;
    exitTypeDeclaration(ctx: any): void;
    enterNonModuleDeclaration(ctx: any): void;
    exitNonModuleDeclaration(ctx: any): void;
    enterTypeName(ctx: any): void;
    exitTypeName(ctx: any): void;
    enterNonArrayTypeName(ctx: any): void;
    exitNonArrayTypeName(ctx: any): void;
    enterSimpleTypeName(ctx: any): void;
    exitSimpleTypeName(ctx: any): void;
    enterQualifiedTypeName(ctx: any): void;
    exitQualifiedTypeName(ctx: any): void;
    enterTypeArguments(ctx: any): void;
    exitTypeArguments(ctx: any): void;
    enterTypeArgumentList(ctx: any): void;
    exitTypeArgumentList(ctx: any): void;
    enterBuiltInTypeName(ctx: any): void;
    exitBuiltInTypeName(ctx: any): void;
    enterTypeModifier(ctx: any): void;
    exitTypeModifier(ctx: any): void;
    enterIdentifierModifiers(ctx: any): void;
    exitIdentifierModifiers(ctx: any): void;
    enterNullableNameModifier(ctx: any): void;
    exitNullableNameModifier(ctx: any): void;
    enterTypeImplementsClause(ctx: any): void;
    exitTypeImplementsClause(ctx: any): void;
    enterTypeImplements(ctx: any): void;
    exitTypeImplements(ctx: any): void;
    enterPrimitiveTypeName(ctx: any): void;
    exitPrimitiveTypeName(ctx: any): void;
    enterNumericTypeName(ctx: any): void;
    exitNumericTypeName(ctx: any): void;
    enterIntegralTypeName(ctx: any): void;
    exitIntegralTypeName(ctx: any): void;
    enterFloatingPointTypeName(ctx: any): void;
    exitFloatingPointTypeName(ctx: any): void;
    enterEnumDeclaration(ctx: any): void;
    exitEnumDeclaration(ctx: any): void;
    enterEnumMemberDeclaration(ctx: any): void;
    exitEnumMemberDeclaration(ctx: any): void;
    enterClassDeclaration(ctx: any): void;
    exitClassDeclaration(ctx: any): void;
    enterClassModifier(ctx: any): void;
    exitClassModifier(ctx: any): void;
    enterClassBase(ctx: any): void;
    exitClassBase(ctx: any): void;
    enterClassMemberDeclaration(ctx: any): void;
    exitClassMemberDeclaration(ctx: any): void;
    enterStructureDeclaration(ctx: any): void;
    exitStructureDeclaration(ctx: any): void;
    enterStructureModifier(ctx: any): void;
    exitStructureModifier(ctx: any): void;
    enterStructMemberDeclaration(ctx: any): void;
    exitStructMemberDeclaration(ctx: any): void;
    enterModuleDeclaration(ctx: any): void;
    exitModuleDeclaration(ctx: any): void;
    enterModuleMemberDeclaration(ctx: any): void;
    exitModuleMemberDeclaration(ctx: any): void;
    enterInterfaceDeclaration(ctx: any): void;
    exitInterfaceDeclaration(ctx: any): void;
    enterInterfaceBase(ctx: any): void;
    exitInterfaceBase(ctx: any): void;
    enterInterfaceBases(ctx: any): void;
    exitInterfaceBases(ctx: any): void;
    enterInterfaceMemberDeclaration(ctx: any): void;
    exitInterfaceMemberDeclaration(ctx: any): void;
    enterArrayTypeName(ctx: any): void;
    exitArrayTypeName(ctx: any): void;
    enterArrayTypeModifiers(ctx: any): void;
    exitArrayTypeModifiers(ctx: any): void;
    enterArrayTypeModifier(ctx: any): void;
    exitArrayTypeModifier(ctx: any): void;
    enterRankList(ctx: any): void;
    exitRankList(ctx: any): void;
    enterArrayNameModifier(ctx: any): void;
    exitArrayNameModifier(ctx: any): void;
    enterDelegateDeclaration(ctx: any): void;
    exitDelegateDeclaration(ctx: any): void;
    enterMethodSignature(ctx: any): void;
    exitMethodSignature(ctx: any): void;
    enterImplementsClause(ctx: any): void;
    exitImplementsClause(ctx: any): void;
    enterImplementsList(ctx: any): void;
    exitImplementsList(ctx: any): void;
    enterInterfaceMemberSpecifier(ctx: any): void;
    exitInterfaceMemberSpecifier(ctx: any): void;
    enterMethodMemberDeclaration(ctx: any): void;
    exitMethodMemberDeclaration(ctx: any): void;
    enterInterfaceMethodMemberDeclaration(ctx: any): void;
    exitInterfaceMethodMemberDeclaration(ctx: any): void;
    enterMethodDeclaration(ctx: any): void;
    exitMethodDeclaration(ctx: any): void;
    enterInterfaceMethodDeclaration(ctx: any): void;
    exitInterfaceMethodDeclaration(ctx: any): void;
    enterSubSignature(ctx: any): void;
    exitSubSignature(ctx: any): void;
    enterFunctionSignature(ctx: any): void;
    exitFunctionSignature(ctx: any): void;
    enterSubDeclaration(ctx: any): void;
    exitSubDeclaration(ctx: any): void;
    enterMustOverrideSubDeclaration(ctx: any): void;
    exitMustOverrideSubDeclaration(ctx: any): void;
    enterInterfaceSubDeclaration(ctx: any): void;
    exitInterfaceSubDeclaration(ctx: any): void;
    enterFunctionDeclaration(ctx: any): void;
    exitFunctionDeclaration(ctx: any): void;
    enterMustOverrideFunctionDeclaration(ctx: any): void;
    exitMustOverrideFunctionDeclaration(ctx: any): void;
    enterInterfaceFunctionDeclaration(ctx: any): void;
    exitInterfaceFunctionDeclaration(ctx: any): void;
    enterProcedureModifier(ctx: any): void;
    exitProcedureModifier(ctx: any): void;
    enterMustOverrideProcedureModifier(ctx: any): void;
    exitMustOverrideProcedureModifier(ctx: any): void;
    enterInterfaceProcedureModifier(ctx: any): void;
    exitInterfaceProcedureModifier(ctx: any): void;
    enterHandlesOrImplements(ctx: any): void;
    exitHandlesOrImplements(ctx: any): void;
    enterExternalMethodDeclaration(ctx: any): void;
    exitExternalMethodDeclaration(ctx: any): void;
    enterExternalSubDeclaration(ctx: any): void;
    exitExternalSubDeclaration(ctx: any): void;
    enterExternalFunctionDeclaration(ctx: any): void;
    exitExternalFunctionDeclaration(ctx: any): void;
    enterExternalMethodModifier(ctx: any): void;
    exitExternalMethodModifier(ctx: any): void;
    enterCharsetModifier(ctx: any): void;
    exitCharsetModifier(ctx: any): void;
    enterLibraryClause(ctx: any): void;
    exitLibraryClause(ctx: any): void;
    enterAliasClause(ctx: any): void;
    exitAliasClause(ctx: any): void;
    enterParameterList(ctx: any): void;
    exitParameterList(ctx: any): void;
    enterParameter(ctx: any): void;
    exitParameter(ctx: any): void;
    enterParameterModifier(ctx: any): void;
    exitParameterModifier(ctx: any): void;
    enterParameterIdentifier(ctx: any): void;
    exitParameterIdentifier(ctx: any): void;
    enterHandlesClause(ctx: any): void;
    exitHandlesClause(ctx: any): void;
    enterEventHandlesList(ctx: any): void;
    exitEventHandlesList(ctx: any): void;
    enterEventMemberSpecifier(ctx: any): void;
    exitEventMemberSpecifier(ctx: any): void;
    enterConstructorMemberDeclaration(ctx: any): void;
    exitConstructorMemberDeclaration(ctx: any): void;
    enterConstructorModifier(ctx: any): void;
    exitConstructorModifier(ctx: any): void;
    enterEventMemberDeclaration(ctx: any): void;
    exitEventMemberDeclaration(ctx: any): void;
    enterRegularEventMemberDeclaration(ctx: any): void;
    exitRegularEventMemberDeclaration(ctx: any): void;
    enterInterfaceEventMemberDeclaration(ctx: any): void;
    exitInterfaceEventMemberDeclaration(ctx: any): void;
    enterParametersOrType(ctx: any): void;
    exitParametersOrType(ctx: any): void;
    enterEventModifiers(ctx: any): void;
    exitEventModifiers(ctx: any): void;
    enterInterfaceEventModifiers(ctx: any): void;
    exitInterfaceEventModifiers(ctx: any): void;
    enterCustomEventMemberDeclaration(ctx: any): void;
    exitCustomEventMemberDeclaration(ctx: any): void;
    enterEventAccessorDeclaration(ctx: any): void;
    exitEventAccessorDeclaration(ctx: any): void;
    enterAddHandlerDeclaration(ctx: any): void;
    exitAddHandlerDeclaration(ctx: any): void;
    enterRemoveHandlerDeclaration(ctx: any): void;
    exitRemoveHandlerDeclaration(ctx: any): void;
    enterRaiseEventDeclaration(ctx: any): void;
    exitRaiseEventDeclaration(ctx: any): void;
    enterConstantMemberDeclaration(ctx: any): void;
    exitConstantMemberDeclaration(ctx: any): void;
    enterConstantModifier(ctx: any): void;
    exitConstantModifier(ctx: any): void;
    enterConstantDeclarators(ctx: any): void;
    exitConstantDeclarators(ctx: any): void;
    enterConstantDeclarator(ctx: any): void;
    exitConstantDeclarator(ctx: any): void;
    enterVariableMemberDeclaration(ctx: any): void;
    exitVariableMemberDeclaration(ctx: any): void;
    enterVariableModifier(ctx: any): void;
    exitVariableModifier(ctx: any): void;
    enterVariableDeclarators(ctx: any): void;
    exitVariableDeclarators(ctx: any): void;
    enterVariableDeclarator(ctx: any): void;
    exitVariableDeclarator(ctx: any): void;
    enterVariableIdentifiers(ctx: any): void;
    exitVariableIdentifiers(ctx: any): void;
    enterVariableIdentifier(ctx: any): void;
    exitVariableIdentifier(ctx: any): void;
    enterArraySizeInitializationModifier(ctx: any): void;
    exitArraySizeInitializationModifier(ctx: any): void;
    enterBoundList(ctx: any): void;
    exitBoundList(ctx: any): void;
    enterBound(ctx: any): void;
    exitBound(ctx: any): void;
    enterPropertyMemberDeclaration(ctx: any): void;
    exitPropertyMemberDeclaration(ctx: any): void;
    enterPropertySignature(ctx: any): void;
    exitPropertySignature(ctx: any): void;
    enterRegularPropertyMemberDeclaration(ctx: any): void;
    exitRegularPropertyMemberDeclaration(ctx: any): void;
    enterMustOverridePropertyMemberDeclaration(ctx: any): void;
    exitMustOverridePropertyMemberDeclaration(ctx: any): void;
    enterAutoPropertyMemberDeclaration(ctx: any): void;
    exitAutoPropertyMemberDeclaration(ctx: any): void;
    enterInterfacePropertyMemberDeclaration(ctx: any): void;
    exitInterfacePropertyMemberDeclaration(ctx: any): void;
    enterAutoPropertyModifier(ctx: any): void;
    exitAutoPropertyModifier(ctx: any): void;
    enterPropertyModifier(ctx: any): void;
    exitPropertyModifier(ctx: any): void;
    enterMustOverridePropertyModifier(ctx: any): void;
    exitMustOverridePropertyModifier(ctx: any): void;
    enterInterfacePropertyModifier(ctx: any): void;
    exitInterfacePropertyModifier(ctx: any): void;
    enterPropertyAccessorDeclaration(ctx: any): void;
    exitPropertyAccessorDeclaration(ctx: any): void;
    enterPropertyGetDeclaration(ctx: any): void;
    exitPropertyGetDeclaration(ctx: any): void;
    enterPropertySetDeclaration(ctx: any): void;
    exitPropertySetDeclaration(ctx: any): void;
    enterOperatorDeclaration(ctx: any): void;
    exitOperatorDeclaration(ctx: any): void;
    enterOperatorModifier(ctx: any): void;
    exitOperatorModifier(ctx: any): void;
    enterOverloadableOperator(ctx: any): void;
    exitOverloadableOperator(ctx: any): void;
    enterStatement(ctx: any): void;
    exitStatement(ctx: any): void;
    enterBlock(ctx: any): void;
    exitBlock(ctx: any): void;
    enterLabelDeclarationStatement(ctx: any): void;
    exitLabelDeclarationStatement(ctx: any): void;
    enterLabelName(ctx: any): void;
    exitLabelName(ctx: any): void;
    enterStatements(ctx: any): void;
    exitStatements(ctx: any): void;
    enterLocalDeclarationStatement(ctx: any): void;
    exitLocalDeclarationStatement(ctx: any): void;
    enterLocalModifier(ctx: any): void;
    exitLocalModifier(ctx: any): void;
    enterWithStatement(ctx: any): void;
    exitWithStatement(ctx: any): void;
    enterSyncLockStatement(ctx: any): void;
    exitSyncLockStatement(ctx: any): void;
    enterEventStatement(ctx: any): void;
    exitEventStatement(ctx: any): void;
    enterRaiseEventStatement(ctx: any): void;
    exitRaiseEventStatement(ctx: any): void;
    enterAddHandlerStatement(ctx: any): void;
    exitAddHandlerStatement(ctx: any): void;
    enterRemoveHandlerStatement(ctx: any): void;
    exitRemoveHandlerStatement(ctx: any): void;
    enterAssignmentStatement(ctx: any): void;
    exitAssignmentStatement(ctx: any): void;
    enterRegularAssignmentStatement(ctx: any): void;
    exitRegularAssignmentStatement(ctx: any): void;
    enterCompoundAssignmentStatement(ctx: any): void;
    exitCompoundAssignmentStatement(ctx: any): void;
    enterCompoundBinaryOperator(ctx: any): void;
    exitCompoundBinaryOperator(ctx: any): void;
    enterMidAssignmentStatement(ctx: any): void;
    exitMidAssignmentStatement(ctx: any): void;
    enterInvocationStatement(ctx: any): void;
    exitInvocationStatement(ctx: any): void;
    enterConditionalStatement(ctx: any): void;
    exitConditionalStatement(ctx: any): void;
    enterIfStatement(ctx: any): void;
    exitIfStatement(ctx: any): void;
    enterBlockIfStatement(ctx: any): void;
    exitBlockIfStatement(ctx: any): void;
    enterElseIfStatement(ctx: any): void;
    exitElseIfStatement(ctx: any): void;
    enterElseStatement(ctx: any): void;
    exitElseStatement(ctx: any): void;
    enterLineIfThenStatement(ctx: any): void;
    exitLineIfThenStatement(ctx: any): void;
    enterSelectStatement(ctx: any): void;
    exitSelectStatement(ctx: any): void;
    enterCaseStatement(ctx: any): void;
    exitCaseStatement(ctx: any): void;
    enterCaseClauses(ctx: any): void;
    exitCaseClauses(ctx: any): void;
    enterCaseClause(ctx: any): void;
    exitCaseClause(ctx: any): void;
    enterComparisonOperator(ctx: any): void;
    exitComparisonOperator(ctx: any): void;
    enterCaseElseStatement(ctx: any): void;
    exitCaseElseStatement(ctx: any): void;
    enterLoopStatement(ctx: any): void;
    exitLoopStatement(ctx: any): void;
    enterWhileStatement(ctx: any): void;
    exitWhileStatement(ctx: any): void;
    enterDoLoopStatement(ctx: any): void;
    exitDoLoopStatement(ctx: any): void;
    enterDoTopLoopStatement(ctx: any): void;
    exitDoTopLoopStatement(ctx: any): void;
    enterDoBottomLoopStatement(ctx: any): void;
    exitDoBottomLoopStatement(ctx: any): void;
    enterWhileOrUntil(ctx: any): void;
    exitWhileOrUntil(ctx: any): void;
    enterForStatement(ctx: any): void;
    exitForStatement(ctx: any): void;
    enterLoopControlVariable(ctx: any): void;
    exitLoopControlVariable(ctx: any): void;
    enterNextExpressionList(ctx: any): void;
    exitNextExpressionList(ctx: any): void;
    enterForEachStatement(ctx: any): void;
    exitForEachStatement(ctx: any): void;
    enterErrorHandlingStatement(ctx: any): void;
    exitErrorHandlingStatement(ctx: any): void;
    enterStructuredErrorStatement(ctx: any): void;
    exitStructuredErrorStatement(ctx: any): void;
    enterTryStatement(ctx: any): void;
    exitTryStatement(ctx: any): void;
    enterFinallyStatement(ctx: any): void;
    exitFinallyStatement(ctx: any): void;
    enterCatchStatement(ctx: any): void;
    exitCatchStatement(ctx: any): void;
    enterThrowStatement(ctx: any): void;
    exitThrowStatement(ctx: any): void;
    enterUnstructuredErrorStatement(ctx: any): void;
    exitUnstructuredErrorStatement(ctx: any): void;
    enterErrorStatement(ctx: any): void;
    exitErrorStatement(ctx: any): void;
    enterOnErrorStatement(ctx: any): void;
    exitOnErrorStatement(ctx: any): void;
    enterErrorClause(ctx: any): void;
    exitErrorClause(ctx: any): void;
    enterResumeStatement(ctx: any): void;
    exitResumeStatement(ctx: any): void;
    enterResumeClause(ctx: any): void;
    exitResumeClause(ctx: any): void;
    enterBranchStatement(ctx: any): void;
    exitBranchStatement(ctx: any): void;
    enterGoToStatement(ctx: any): void;
    exitGoToStatement(ctx: any): void;
    enterExitStatement(ctx: any): void;
    exitExitStatement(ctx: any): void;
    enterExitKind(ctx: any): void;
    exitExitKind(ctx: any): void;
    enterContinueStatement(ctx: any): void;
    exitContinueStatement(ctx: any): void;
    enterContinueKind(ctx: any): void;
    exitContinueKind(ctx: any): void;
    enterStopStatement(ctx: any): void;
    exitStopStatement(ctx: any): void;
    enterEndStatement(ctx: any): void;
    exitEndStatement(ctx: any): void;
    enterReturnStatement(ctx: any): void;
    exitReturnStatement(ctx: any): void;
    enterArrayHandlingStatement(ctx: any): void;
    exitArrayHandlingStatement(ctx: any): void;
    enterRedimStatement(ctx: any): void;
    exitRedimStatement(ctx: any): void;
    enterRedimClauses(ctx: any): void;
    exitRedimClauses(ctx: any): void;
    enterRedimClause(ctx: any): void;
    exitRedimClause(ctx: any): void;
    enterEraseStatement(ctx: any): void;
    exitEraseStatement(ctx: any): void;
    enterEraseExpressions(ctx: any): void;
    exitEraseExpressions(ctx: any): void;
    enterUsingStatement(ctx: any): void;
    exitUsingStatement(ctx: any): void;
    enterUsingResources(ctx: any): void;
    exitUsingResources(ctx: any): void;
    enterAwaitStatement(ctx: any): void;
    exitAwaitStatement(ctx: any): void;
    enterYieldStatement(ctx: any): void;
    exitYieldStatement(ctx: any): void;
    enterExpression(ctx: any): void;
    exitExpression(ctx: any): void;
    enterMemberAccessBase(ctx: any): void;
    exitMemberAccessBase(ctx: any): void;
    enterConstantExpression(ctx: any): void;
    exitConstantExpression(ctx: any): void;
    enterSimpleExpression(ctx: any): void;
    exitSimpleExpression(ctx: any): void;
    enterLiteralExpression(ctx: any): void;
    exitLiteralExpression(ctx: any): void;
    enterParenthesizedExpression(ctx: any): void;
    exitParenthesizedExpression(ctx: any): void;
    enterInstanceExpression(ctx: any): void;
    exitInstanceExpression(ctx: any): void;
    enterSimpleNameExpression(ctx: any): void;
    exitSimpleNameExpression(ctx: any): void;
    enterAddressOfExpression(ctx: any): void;
    exitAddressOfExpression(ctx: any): void;
    enterGetTypeExpression(ctx: any): void;
    exitGetTypeExpression(ctx: any): void;
    enterGetTypeTypeName(ctx: any): void;
    exitGetTypeTypeName(ctx: any): void;
    enterQualifiedOpenTypeName(ctx: any): void;
    exitQualifiedOpenTypeName(ctx: any): void;
    enterTypeArityList(ctx: any): void;
    exitTypeArityList(ctx: any): void;
    enterCommaList(ctx: any): void;
    exitCommaList(ctx: any): void;
    enterTypeOfIsExpression(ctx: any): void;
    exitTypeOfIsExpression(ctx: any): void;
    enterGetXmlNamespaceExpression(ctx: any): void;
    exitGetXmlNamespaceExpression(ctx: any): void;
    enterArgumentList(ctx: any): void;
    exitArgumentList(ctx: any): void;
    enterPositionalArgumentList(ctx: any): void;
    exitPositionalArgumentList(ctx: any): void;
    enterNamedArgumentList(ctx: any): void;
    exitNamedArgumentList(ctx: any): void;
    enterNewExpression(ctx: any): void;
    exitNewExpression(ctx: any): void;
    enterObjectCreationExpression(ctx: any): void;
    exitObjectCreationExpression(ctx: any): void;
    enterObjectCreationExpressionInitializer(ctx: any): void;
    exitObjectCreationExpressionInitializer(ctx: any): void;
    enterObjectMemberInitializer(ctx: any): void;
    exitObjectMemberInitializer(ctx: any): void;
    enterFieldInitializerList(ctx: any): void;
    exitFieldInitializerList(ctx: any): void;
    enterFieldInitializer(ctx: any): void;
    exitFieldInitializer(ctx: any): void;
    enterObjectCollectionInitializer(ctx: any): void;
    exitObjectCollectionInitializer(ctx: any): void;
    enterCollectionInitializer(ctx: any): void;
    exitCollectionInitializer(ctx: any): void;
    enterCollectionElementList(ctx: any): void;
    exitCollectionElementList(ctx: any): void;
    enterCollectionElement(ctx: any): void;
    exitCollectionElement(ctx: any): void;
    enterArrayExpression(ctx: any): void;
    exitArrayExpression(ctx: any): void;
    enterArrayCreationExpression(ctx: any): void;
    exitArrayCreationExpression(ctx: any): void;
    enterArrayLiteralExpression(ctx: any): void;
    exitArrayLiteralExpression(ctx: any): void;
    enterAnonymousObjectCreationExpression(ctx: any): void;
    exitAnonymousObjectCreationExpression(ctx: any): void;
    enterCastExpression(ctx: any): void;
    exitCastExpression(ctx: any): void;
    enterCastTarget(ctx: any): void;
    exitCastTarget(ctx: any): void;
    enterUnaryPlusExpression(ctx: any): void;
    exitUnaryPlusExpression(ctx: any): void;
    enterUnaryMinusExpression(ctx: any): void;
    exitUnaryMinusExpression(ctx: any): void;
    enterBooleanExpression(ctx: any): void;
    exitBooleanExpression(ctx: any): void;
    enterLambdaExpression(ctx: any): void;
    exitLambdaExpression(ctx: any): void;
    enterSingleLineLambda(ctx: any): void;
    exitSingleLineLambda(ctx: any): void;
    enterMultiLineLambda(ctx: any): void;
    exitMultiLineLambda(ctx: any): void;
    enterMultiLineFunctionLambda(ctx: any): void;
    exitMultiLineFunctionLambda(ctx: any): void;
    enterMultiLineSubLambda(ctx: any): void;
    exitMultiLineSubLambda(ctx: any): void;
    enterLambdaModifier(ctx: any): void;
    exitLambdaModifier(ctx: any): void;
    enterQueryExpression(ctx: any): void;
    exitQueryExpression(ctx: any): void;
    enterFromOrAggregateQueryOperator(ctx: any): void;
    exitFromOrAggregateQueryOperator(ctx: any): void;
    enterQueryOperator(ctx: any): void;
    exitQueryOperator(ctx: any): void;
    enterJoinOrGroupJoinQueryOperator(ctx: any): void;
    exitJoinOrGroupJoinQueryOperator(ctx: any): void;
    enterCollectionRangeVariableDeclarationList(ctx: any): void;
    exitCollectionRangeVariableDeclarationList(ctx: any): void;
    enterCollectionRangeVariableDeclaration(ctx: any): void;
    exitCollectionRangeVariableDeclaration(ctx: any): void;
    enterExpressionRangeVariableDeclarationList(ctx: any): void;
    exitExpressionRangeVariableDeclarationList(ctx: any): void;
    enterExpressionRangeVariableDeclaration(ctx: any): void;
    exitExpressionRangeVariableDeclaration(ctx: any): void;
    enterFromQueryOperator(ctx: any): void;
    exitFromQueryOperator(ctx: any): void;
    enterJoinQueryOperator(ctx: any): void;
    exitJoinQueryOperator(ctx: any): void;
    enterJoinConditionList(ctx: any): void;
    exitJoinConditionList(ctx: any): void;
    enterJoinCondition(ctx: any): void;
    exitJoinCondition(ctx: any): void;
    enterLetQueryOperator(ctx: any): void;
    exitLetQueryOperator(ctx: any): void;
    enterSelectQueryOperator(ctx: any): void;
    exitSelectQueryOperator(ctx: any): void;
    enterDistinctQueryOperator(ctx: any): void;
    exitDistinctQueryOperator(ctx: any): void;
    enterWhereQueryOperator(ctx: any): void;
    exitWhereQueryOperator(ctx: any): void;
    enterPartitionQueryOperator(ctx: any): void;
    exitPartitionQueryOperator(ctx: any): void;
    enterOrderByQueryOperator(ctx: any): void;
    exitOrderByQueryOperator(ctx: any): void;
    enterOrderExpressionList(ctx: any): void;
    exitOrderExpressionList(ctx: any): void;
    enterOrderExpression(ctx: any): void;
    exitOrderExpression(ctx: any): void;
    enterOrdering(ctx: any): void;
    exitOrdering(ctx: any): void;
    enterGroupByQueryOperator(ctx: any): void;
    exitGroupByQueryOperator(ctx: any): void;
    enterAggregateQueryOperator(ctx: any): void;
    exitAggregateQueryOperator(ctx: any): void;
    enterGroupJoinQueryOperator(ctx: any): void;
    exitGroupJoinQueryOperator(ctx: any): void;
    enterConditionalExpression(ctx: any): void;
    exitConditionalExpression(ctx: any): void;
    enterXMLLiteralExpression(ctx: any): void;
    exitXMLLiteralExpression(ctx: any): void;
    enterXMLEmbeddedExpression(ctx: any): void;
    exitXMLEmbeddedExpression(ctx: any): void;
    enterXMLDocument(ctx: any): void;
    exitXMLDocument(ctx: any): void;
    enterXMLDocumentPrologue(ctx: any): void;
    exitXMLDocumentPrologue(ctx: any): void;
    enterXMLVersion(ctx: any): void;
    exitXMLVersion(ctx: any): void;
    enterXMLVersionNumberValue(ctx: any): void;
    exitXMLVersionNumberValue(ctx: any): void;
    enterXMLEncoding(ctx: any): void;
    exitXMLEncoding(ctx: any): void;
    enterXMLEncodingNameValue(ctx: any): void;
    exitXMLEncodingNameValue(ctx: any): void;
    enterXMLEncodingName(ctx: any): void;
    exitXMLEncodingName(ctx: any): void;
    enterXMLEncodingNameCharacter(ctx: any): void;
    exitXMLEncodingNameCharacter(ctx: any): void;
    enterXMLStandalone(ctx: any): void;
    exitXMLStandalone(ctx: any): void;
    enterXMLYesNoValue(ctx: any): void;
    exitXMLYesNoValue(ctx: any): void;
    enterXMLYesNo(ctx: any): void;
    exitXMLYesNo(ctx: any): void;
    enterXMLMisc(ctx: any): void;
    exitXMLMisc(ctx: any): void;
    enterXMLDocumentBody(ctx: any): void;
    exitXMLDocumentBody(ctx: any): void;
    enterXMLElement(ctx: any): void;
    exitXMLElement(ctx: any): void;
    enterXMLEmptyElement(ctx: any): void;
    exitXMLEmptyElement(ctx: any): void;
    enterXMLElementStart(ctx: any): void;
    exitXMLElementStart(ctx: any): void;
    enterXMLElementEnd(ctx: any): void;
    exitXMLElementEnd(ctx: any): void;
    enterXMLContent(ctx: any): void;
    exitXMLContent(ctx: any): void;
    enterXMLNestedContent(ctx: any): void;
    exitXMLNestedContent(ctx: any): void;
    enterXMLAttribute(ctx: any): void;
    exitXMLAttribute(ctx: any): void;
    enterXMLAttributeName(ctx: any): void;
    exitXMLAttributeName(ctx: any): void;
    enterXMLAttributeValue(ctx: any): void;
    exitXMLAttributeValue(ctx: any): void;
    enterXMLAttributeDoubleQuoteValueCharacter(ctx: any): void;
    exitXMLAttributeDoubleQuoteValueCharacter(ctx: any): void;
    enterXMLAttributeSingleQuoteValueCharacter(ctx: any): void;
    exitXMLAttributeSingleQuoteValueCharacter(ctx: any): void;
    enterXMLReference(ctx: any): void;
    exitXMLReference(ctx: any): void;
    enterXMLEntityReference(ctx: any): void;
    exitXMLEntityReference(ctx: any): void;
    enterXMLCharacterReference(ctx: any): void;
    exitXMLCharacterReference(ctx: any): void;
    enterXMLNamespaceAttributeName(ctx: any): void;
    exitXMLNamespaceAttributeName(ctx: any): void;
    enterXMLPrefixedNamespaceAttributeName(ctx: any): void;
    exitXMLPrefixedNamespaceAttributeName(ctx: any): void;
    enterXMLDefaultNamespaceAttributeName(ctx: any): void;
    exitXMLDefaultNamespaceAttributeName(ctx: any): void;
    enterXMLNamespaceName(ctx: any): void;
    exitXMLNamespaceName(ctx: any): void;
    enterXMLNamespaceNameCharacter(ctx: any): void;
    exitXMLNamespaceNameCharacter(ctx: any): void;
    enterXMLQualifiedNameOrExpression(ctx: any): void;
    exitXMLQualifiedNameOrExpression(ctx: any): void;
    enterXMLQualifiedName(ctx: any): void;
    exitXMLQualifiedName(ctx: any): void;
    enterXMLPrefixedName(ctx: any): void;
    exitXMLPrefixedName(ctx: any): void;
    enterXMLUnprefixedName(ctx: any): void;
    exitXMLUnprefixedName(ctx: any): void;
    enterXMLProcessingInstruction(ctx: any): void;
    exitXMLProcessingInstruction(ctx: any): void;
    enterXMLComment(ctx: any): void;
    exitXMLComment(ctx: any): void;
    enterXMLCDATASection(ctx: any): void;
    exitXMLCDATASection(ctx: any): void;
    enterAwaitOperatorExpression(ctx: any): void;
    exitAwaitOperatorExpression(ctx: any): void;
}
//# sourceMappingURL=vbParserListener.d.ts.map