"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageHelpers = void 0;
const handlebars_1 = __importDefault(require("handlebars"));
const Logging_1 = require("../../runtime/Logging");
const ProgrammingLanguage_1 = require("../../system/ProgrammingLanguage");
class LanguageHelpers {
    constructor() {
        this.logger = Logging_1.Logging.newLogger(this.constructor.name);
    }
    static registerAll() {
        if (this.helpersRegistered)
            return;
        this.helpersRegistered = true;
        handlebars_1.default.registerHelper('CSharp', LanguageHelpers.prototype.cSharp);
        handlebars_1.default.registerHelper('Go', LanguageHelpers.prototype.go);
        handlebars_1.default.registerHelper('JavaScript', LanguageHelpers.prototype.javaScript);
        handlebars_1.default.registerHelper('Java', LanguageHelpers.prototype.java);
        handlebars_1.default.registerHelper('PHP', LanguageHelpers.prototype.php);
        handlebars_1.default.registerHelper('Python', LanguageHelpers.prototype.python);
        handlebars_1.default.registerHelper('Sql', LanguageHelpers.prototype.sql);
        handlebars_1.default.registerHelper('TSql', LanguageHelpers.prototype.tSql);
        handlebars_1.default.registerHelper('TypeScript', LanguageHelpers.prototype.typeScript);
    }
    toTypeInLanguage(language, type) {
        return type ? (typeof type == 'string' ? type : type.inLanguage(language)) : 'undefined';
    }
    cSharp(type) {
        return this.toTypeInLanguage(ProgrammingLanguage_1.ProgrammingLanguage.cSharp, type);
    }
    go(type) {
        return this.toTypeInLanguage(ProgrammingLanguage_1.ProgrammingLanguage.go, type);
    }
    javaScript(type) {
        return this.toTypeInLanguage(ProgrammingLanguage_1.ProgrammingLanguage.javaScript, type);
    }
    java(type) {
        return this.toTypeInLanguage(ProgrammingLanguage_1.ProgrammingLanguage.java, type);
    }
    php(type) {
        return this.toTypeInLanguage(ProgrammingLanguage_1.ProgrammingLanguage.php, type);
    }
    python(type) {
        return this.toTypeInLanguage(ProgrammingLanguage_1.ProgrammingLanguage.python, type);
    }
    sql(type) {
        return this.toTypeInLanguage(ProgrammingLanguage_1.ProgrammingLanguage.sql, type);
    }
    tSql(type) {
        return this.toTypeInLanguage(ProgrammingLanguage_1.ProgrammingLanguage.tSql, type);
    }
    typeScript(type) {
        return this.toTypeInLanguage(ProgrammingLanguage_1.ProgrammingLanguage.typeScript, type);
    }
}
exports.LanguageHelpers = LanguageHelpers;
LanguageHelpers.helpersRegistered = false;
