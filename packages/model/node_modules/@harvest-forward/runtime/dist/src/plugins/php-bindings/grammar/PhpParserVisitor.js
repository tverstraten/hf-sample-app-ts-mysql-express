"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const antlr4_1 = __importDefault(require("antlr4"));
class PhpParserVisitor extends antlr4_1.default.tree.ParseTreeVisitor {
    visitHtmlDocument(ctx) {
        return this.visitChildren(ctx);
    }
    visitInlineHtml(ctx) {
        return this.visitChildren(ctx);
    }
    visitHtmlElement(ctx) {
        return this.visitChildren(ctx);
    }
    visitScriptText(ctx) {
        return this.visitChildren(ctx);
    }
    visitPhpBlock(ctx) {
        return this.visitChildren(ctx);
    }
    visitImportStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitTopStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitUseDeclaration(ctx) {
        return this.visitChildren(ctx);
    }
    visitUseDeclarationContentList(ctx) {
        return this.visitChildren(ctx);
    }
    visitUseDeclarationContent(ctx) {
        return this.visitChildren(ctx);
    }
    visitNamespaceDeclaration(ctx) {
        return this.visitChildren(ctx);
    }
    visitNamespaceStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitFunctionDeclaration(ctx) {
        return this.visitChildren(ctx);
    }
    visitClassDeclaration(ctx) {
        return this.visitChildren(ctx);
    }
    visitClassEntryType(ctx) {
        return this.visitChildren(ctx);
    }
    visitInterfaceList(ctx) {
        return this.visitChildren(ctx);
    }
    visitTypeParameterListInBrackets(ctx) {
        return this.visitChildren(ctx);
    }
    visitTypeParameterList(ctx) {
        return this.visitChildren(ctx);
    }
    visitTypeParameterWithDefaultsList(ctx) {
        return this.visitChildren(ctx);
    }
    visitTypeParameterDecl(ctx) {
        return this.visitChildren(ctx);
    }
    visitTypeParameterWithDefaultDecl(ctx) {
        return this.visitChildren(ctx);
    }
    visitGenericDynamicArgs(ctx) {
        return this.visitChildren(ctx);
    }
    visitAttributes(ctx) {
        return this.visitChildren(ctx);
    }
    visitAttributeGroup(ctx) {
        return this.visitChildren(ctx);
    }
    visitAttribute(ctx) {
        return this.visitChildren(ctx);
    }
    visitInnerStatementList(ctx) {
        return this.visitChildren(ctx);
    }
    visitInnerStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitEmptyStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitBlockStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitIfStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitElseIfStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitElseIfColonStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitElseStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitElseColonStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitWhileStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitDoWhileStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitForStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitForInit(ctx) {
        return this.visitChildren(ctx);
    }
    visitForUpdate(ctx) {
        return this.visitChildren(ctx);
    }
    visitSwitchStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitSwitchBlock(ctx) {
        return this.visitChildren(ctx);
    }
    visitBreakStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitContinueStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitReturnStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitExpressionStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitUnsetStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitForeachStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitTryCatchFinally(ctx) {
        return this.visitChildren(ctx);
    }
    visitCatchClause(ctx) {
        return this.visitChildren(ctx);
    }
    visitFinallyStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitThrowStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitGotoStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitDeclareStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitInlineHtmlStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitDeclareList(ctx) {
        return this.visitChildren(ctx);
    }
    visitFormalParameterList(ctx) {
        return this.visitChildren(ctx);
    }
    visitFormalParameter(ctx) {
        return this.visitChildren(ctx);
    }
    visitTypeHint(ctx) {
        return this.visitChildren(ctx);
    }
    visitGlobalStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitGlobalVar(ctx) {
        return this.visitChildren(ctx);
    }
    visitEchoStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitStaticVariableStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitClassStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitTraitAdaptations(ctx) {
        return this.visitChildren(ctx);
    }
    visitTraitAdaptationStatement(ctx) {
        return this.visitChildren(ctx);
    }
    visitTraitPrecedence(ctx) {
        return this.visitChildren(ctx);
    }
    visitTraitAlias(ctx) {
        return this.visitChildren(ctx);
    }
    visitTraitMethodReference(ctx) {
        return this.visitChildren(ctx);
    }
    visitBaseCtorCall(ctx) {
        return this.visitChildren(ctx);
    }
    visitMethodBody(ctx) {
        return this.visitChildren(ctx);
    }
    visitPropertyModifiers(ctx) {
        return this.visitChildren(ctx);
    }
    visitMemberModifiers(ctx) {
        return this.visitChildren(ctx);
    }
    visitVariableInitializer(ctx) {
        return this.visitChildren(ctx);
    }
    visitIdentifierInitializer(ctx) {
        return this.visitChildren(ctx);
    }
    visitGlobalConstantDeclaration(ctx) {
        return this.visitChildren(ctx);
    }
    visitExpressionList(ctx) {
        return this.visitChildren(ctx);
    }
    visitParentheses(ctx) {
        return this.visitChildren(ctx);
    }
    visitChainExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitSpecialWordExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitArrayCreationExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitBackQuoteStringExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitMatchExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitLogicalExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitPrintExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitAssignmentExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitPostfixIncDecExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitCloneExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitUnaryOperatorExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitNewExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitParenthesisExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitSpaceshipExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitConditionalExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitNullCoalescingExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitArithmeticExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitIndexerExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitScalarExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitPrefixIncDecExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitComparisonExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitCastExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitInstanceOfExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitLambdaFunctionExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitBitwiseExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitAssignable(ctx) {
        return this.visitChildren(ctx);
    }
    visitArrayCreation(ctx) {
        return this.visitChildren(ctx);
    }
    visitLambdaFunctionExpr(ctx) {
        return this.visitChildren(ctx);
    }
    visitMatchExpr(ctx) {
        return this.visitChildren(ctx);
    }
    visitMatchItem(ctx) {
        return this.visitChildren(ctx);
    }
    visitNewExpr(ctx) {
        return this.visitChildren(ctx);
    }
    visitAssignmentOperator(ctx) {
        return this.visitChildren(ctx);
    }
    visitYieldExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitArrayItemList(ctx) {
        return this.visitChildren(ctx);
    }
    visitArrayItem(ctx) {
        return this.visitChildren(ctx);
    }
    visitLambdaFunctionUseVars(ctx) {
        return this.visitChildren(ctx);
    }
    visitLambdaFunctionUseVar(ctx) {
        return this.visitChildren(ctx);
    }
    visitQualifiedStaticTypeRef(ctx) {
        return this.visitChildren(ctx);
    }
    visitTypeRef(ctx) {
        return this.visitChildren(ctx);
    }
    visitAnonymousClass(ctx) {
        return this.visitChildren(ctx);
    }
    visitIndirectTypeRef(ctx) {
        return this.visitChildren(ctx);
    }
    visitQualifiedNamespaceName(ctx) {
        return this.visitChildren(ctx);
    }
    visitNamespaceNameList(ctx) {
        return this.visitChildren(ctx);
    }
    visitNamespaceNameTail(ctx) {
        return this.visitChildren(ctx);
    }
    visitQualifiedNamespaceNameList(ctx) {
        return this.visitChildren(ctx);
    }
    visitArguments(ctx) {
        return this.visitChildren(ctx);
    }
    visitActualArgument(ctx) {
        return this.visitChildren(ctx);
    }
    visitArgumentName(ctx) {
        return this.visitChildren(ctx);
    }
    visitConstantInitializer(ctx) {
        return this.visitChildren(ctx);
    }
    visitConstant(ctx) {
        return this.visitChildren(ctx);
    }
    visitLiteralConstant(ctx) {
        return this.visitChildren(ctx);
    }
    visitNumericConstant(ctx) {
        return this.visitChildren(ctx);
    }
    visitClassConstant(ctx) {
        return this.visitChildren(ctx);
    }
    visitStringConstant(ctx) {
        return this.visitChildren(ctx);
    }
    visitString(ctx) {
        return this.visitChildren(ctx);
    }
    visitInterpolatedStringPart(ctx) {
        return this.visitChildren(ctx);
    }
    visitChainList(ctx) {
        return this.visitChildren(ctx);
    }
    visitChain(ctx) {
        return this.visitChildren(ctx);
    }
    visitChainOrigin(ctx) {
        return this.visitChildren(ctx);
    }
    visitMemberAccess(ctx) {
        return this.visitChildren(ctx);
    }
    visitFunctionCall(ctx) {
        return this.visitChildren(ctx);
    }
    visitFunctionCallName(ctx) {
        return this.visitChildren(ctx);
    }
    visitActualArguments(ctx) {
        return this.visitChildren(ctx);
    }
    visitChainBase(ctx) {
        return this.visitChildren(ctx);
    }
    visitKeyedFieldName(ctx) {
        return this.visitChildren(ctx);
    }
    visitKeyedSimpleFieldName(ctx) {
        return this.visitChildren(ctx);
    }
    visitKeyedVariable(ctx) {
        return this.visitChildren(ctx);
    }
    visitSquareCurlyExpression(ctx) {
        return this.visitChildren(ctx);
    }
    visitAssignmentList(ctx) {
        return this.visitChildren(ctx);
    }
    visitAssignmentListElement(ctx) {
        return this.visitChildren(ctx);
    }
    visitModifier(ctx) {
        return this.visitChildren(ctx);
    }
    visitIdentifier(ctx) {
        return this.visitChildren(ctx);
    }
    visitMemberModifier(ctx) {
        return this.visitChildren(ctx);
    }
    visitMagicConstant(ctx) {
        return this.visitChildren(ctx);
    }
    visitMagicMethod(ctx) {
        return this.visitChildren(ctx);
    }
    visitPrimitiveType(ctx) {
        return this.visitChildren(ctx);
    }
    visitCastOperation(ctx) {
        return this.visitChildren(ctx);
    }
}
exports.default = PhpParserVisitor;
