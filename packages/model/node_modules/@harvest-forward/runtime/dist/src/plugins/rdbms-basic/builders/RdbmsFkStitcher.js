"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdbmsFkStitcher = void 0;
const AbstractSingularBuilder_1 = require("../../../runtime/AbstractSingularBuilder");
const System_1 = require("../../../system/System");
const SystemComponent_1 = require("../../../system/SystemComponent");
const ValueType_1 = require("../../../system/ValueType");
class RdbmsFkStitcher extends AbstractSingularBuilder_1.AbstractSingularBuilder {
    constructor(configurationValues) {
        const nonNullConfigurationValues = configurationValues ? configurationValues : [];
        nonNullConfigurationValues['repeatFor'] = JSON.stringify({
            objectTypeName: 'ForeignKey',
        });
        super('RdbmsFkStitcher', 'A transformer that collects foreign keys and ensures their relationships and names are rationalized with their related tables', {
            repeatFor: {
                name: 'Repeat for',
                required: true,
                description: 'A parsable string of JSON that represents the properties values of the component that should be iterated on, review the documentation for SystemDescendantComponent and derivations for most available for use',
                valueType: ValueType_1.ValueType.STRING,
                defaultValue: ``,
            },
        }, nonNullConfigurationValues);
    }
    async buildInternal(system, component) {
        const fk = component;
        const schema = fk.parent;
        const sourceTableName = SystemComponent_1.SystemComponent.fullConstantCase(schema.fullConstantCaseName, fk.sourceTableName);
        const sourceTable = system.descendants[sourceTableName];
        if (sourceTable != null) {
            const fkColumn = sourceTable.columns[System_1.System.constantCase(fk.sourceColumnName)];
            sourceTable.addChild(fk);
            if (fkColumn != null) {
                fkColumn.foreignKey = fk;
                fk.sourceColumn = fkColumn;
                fk.sourceTable = sourceTable;
            }
            else
                this.logger.warn(`FK ${fk.constantCaseFullName} has no matching column ${fk.sourceColumnName}`);
        }
        else
            this.logger.warn(`FK ${fk.constantCaseFullName} has no matching table ${sourceTableName}`);
        const db = schema.parent;
        const fullTargetSchemaName = SystemComponent_1.SystemComponent.fullConstantCase(db.fullConstantCaseName, fk.targetSchemaName);
        const targetSchema = system.descendants[fullTargetSchemaName];
        const fullTargetTableName = SystemComponent_1.SystemComponent.fullConstantCase(targetSchema.fullConstantCaseName, fk.targetTableName);
        const targetTable = system.descendants[fullTargetTableName];
        if (targetTable != null) {
            fk.targetTable = targetTable;
        }
        return [];
    }
}
exports.RdbmsFkStitcher = RdbmsFkStitcher;
